var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var dist = {};
var constants$1 = {};
var common = {};
Object.defineProperty(common, "__esModule", { value: true });
common.COMMUNITY_SITE_URL = common.IS_DEBUG_MODE = common.getProtocol = common.setProtocol = common.getSdkName = common.setSdkName = void 0;
var sdk_name$1 = "@cloudbase/js-sdk";
function setSdkName$1(name2) {
  sdk_name$1 = name2;
}
common.setSdkName = setSdkName$1;
function getSdkName$4() {
  return sdk_name$1;
}
common.getSdkName = getSdkName$4;
var PROTOCOL$1 = typeof location !== "undefined" && location.protocol === "http:" ? "http:" : "https:";
function setProtocol(protocol) {
  PROTOCOL$1 = protocol;
}
common.setProtocol = setProtocol;
function getProtocol() {
  return PROTOCOL$1;
}
common.getProtocol = getProtocol;
common.IS_DEBUG_MODE = false;
common.COMMUNITY_SITE_URL = "https://support.qq.com/products/148793";
var errors = {};
Object.defineProperty(errors, "__esModule", { value: true });
errors.ERRORS = void 0;
errors.ERRORS = {
  INVALID_PARAMS: "INVALID_PARAMS",
  INVALID_SYNTAX: "INVALID_SYNTAX",
  INVALID_OPERATION: "INVALID_OPERATION",
  OPERATION_FAIL: "OPERATION_FAIL",
  NETWORK_ERROR: "NETWORK_ERROR",
  UNKOWN_ERROR: "UNKOWN_ERROR"
};
(function(exports) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports2) {
    for (var p2 in m)
      if (p2 !== "default" && !exports2.hasOwnProperty(p2))
        __createBinding2(exports2, m, p2);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(common, exports);
  __exportStar(errors, exports);
})(constants$1);
var adapters$1 = {};
var web = {};
var StorageType;
(function(StorageType2) {
  StorageType2["local"] = "local";
  StorageType2["none"] = "none";
  StorageType2["session"] = "session";
})(StorageType || (StorageType = {}));
var AbstractSDKRequest = function() {
  function AbstractSDKRequest2() {
  }
  return AbstractSDKRequest2;
}();
var AbstractStorage = function() {
  function AbstractStorage2() {
  }
  return AbstractStorage2;
}();
function formatUrl$2(protocol, url, query) {
  if (query === void 0) {
    query = {};
  }
  var urlHasQuery = /\?/.test(url);
  var queryString = "";
  for (var key in query) {
    if (queryString === "") {
      !urlHasQuery && (url += "?");
    } else {
      queryString += "&";
    }
    queryString += key + "=" + encodeURIComponent(query[key]);
  }
  url += queryString;
  if (/^http(s)?\:\/\//.test(url)) {
    return url;
  }
  return "" + protocol + url;
}
var esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  get StorageType() {
    return StorageType;
  },
  AbstractSDKRequest,
  AbstractStorage,
  formatUrl: formatUrl$2
}, Symbol.toStringTag, { value: "Module" }));
var require$$0 = /* @__PURE__ */ getAugmentedNamespace(esm);
var util = {};
var hmacSha256 = { exports: {} };
var core = { exports: {} };
(function(module2, exports) {
  (function(root2, factory) {
    {
      module2.exports = factory();
    }
  })(commonjsGlobal, function() {
    var CryptoJS = CryptoJS || function(Math2, undefined$1) {
      var create = Object.create || function() {
        function F() {
        }
        return function(obj) {
          var subtype;
          F.prototype = obj;
          subtype = new F();
          F.prototype = null;
          return subtype;
        };
      }();
      var C = {};
      var C_lib = C.lib = {};
      var Base = C_lib.Base = function() {
        return {
          extend: function(overrides) {
            var subtype = create(this);
            if (overrides) {
              subtype.mixIn(overrides);
            }
            if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
              subtype.init = function() {
                subtype.$super.init.apply(this, arguments);
              };
            }
            subtype.init.prototype = subtype;
            subtype.$super = this;
            return subtype;
          },
          create: function() {
            var instance = this.extend();
            instance.init.apply(instance, arguments);
            return instance;
          },
          init: function() {
          },
          mixIn: function(properties) {
            for (var propertyName in properties) {
              if (properties.hasOwnProperty(propertyName)) {
                this[propertyName] = properties[propertyName];
              }
            }
            if (properties.hasOwnProperty("toString")) {
              this.toString = properties.toString;
            }
          },
          clone: function() {
            return this.init.prototype.extend(this);
          }
        };
      }();
      var WordArray = C_lib.WordArray = Base.extend({
        init: function(words, sigBytes) {
          words = this.words = words || [];
          if (sigBytes != undefined$1) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 4;
          }
        },
        toString: function(encoder) {
          return (encoder || Hex).stringify(this);
        },
        concat: function(wordArray) {
          var thisWords = this.words;
          var thatWords = wordArray.words;
          var thisSigBytes = this.sigBytes;
          var thatSigBytes = wordArray.sigBytes;
          this.clamp();
          if (thisSigBytes % 4) {
            for (var i = 0; i < thatSigBytes; i++) {
              var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
            }
          } else {
            for (var i = 0; i < thatSigBytes; i += 4) {
              thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
            }
          }
          this.sigBytes += thatSigBytes;
          return this;
        },
        clamp: function() {
          var words = this.words;
          var sigBytes = this.sigBytes;
          words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
          words.length = Math2.ceil(sigBytes / 4);
        },
        clone: function() {
          var clone2 = Base.clone.call(this);
          clone2.words = this.words.slice(0);
          return clone2;
        },
        random: function(nBytes) {
          var words = [];
          var r = function(m_w) {
            var m_w = m_w;
            var m_z = 987654321;
            var mask = 4294967295;
            return function() {
              m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
              m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
              var result = (m_z << 16) + m_w & mask;
              result /= 4294967296;
              result += 0.5;
              return result * (Math2.random() > 0.5 ? 1 : -1);
            };
          };
          for (var i = 0, rcache; i < nBytes; i += 4) {
            var _r = r((rcache || Math2.random()) * 4294967296);
            rcache = _r() * 987654071;
            words.push(_r() * 4294967296 | 0);
          }
          return new WordArray.init(words, nBytes);
        }
      });
      var C_enc = C.enc = {};
      var Hex = C_enc.Hex = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var hexChars = [];
          for (var i = 0; i < sigBytes; i++) {
            var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            hexChars.push((bite >>> 4).toString(16));
            hexChars.push((bite & 15).toString(16));
          }
          return hexChars.join("");
        },
        parse: function(hexStr) {
          var hexStrLength = hexStr.length;
          var words = [];
          for (var i = 0; i < hexStrLength; i += 2) {
            words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
          }
          return new WordArray.init(words, hexStrLength / 2);
        }
      };
      var Latin1 = C_enc.Latin1 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var latin1Chars = [];
          for (var i = 0; i < sigBytes; i++) {
            var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            latin1Chars.push(String.fromCharCode(bite));
          }
          return latin1Chars.join("");
        },
        parse: function(latin1Str) {
          var latin1StrLength = latin1Str.length;
          var words = [];
          for (var i = 0; i < latin1StrLength; i++) {
            words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
          }
          return new WordArray.init(words, latin1StrLength);
        }
      };
      var Utf8 = C_enc.Utf8 = {
        stringify: function(wordArray) {
          try {
            return decodeURIComponent(escape(Latin1.stringify(wordArray)));
          } catch (e) {
            throw new Error("Malformed UTF-8 data");
          }
        },
        parse: function(utf8Str) {
          return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
        }
      };
      var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
        reset: function() {
          this._data = new WordArray.init();
          this._nDataBytes = 0;
        },
        _append: function(data) {
          if (typeof data == "string") {
            data = Utf8.parse(data);
          }
          this._data.concat(data);
          this._nDataBytes += data.sigBytes;
        },
        _process: function(doFlush) {
          var data = this._data;
          var dataWords = data.words;
          var dataSigBytes = data.sigBytes;
          var blockSize = this.blockSize;
          var blockSizeBytes = blockSize * 4;
          var nBlocksReady = dataSigBytes / blockSizeBytes;
          if (doFlush) {
            nBlocksReady = Math2.ceil(nBlocksReady);
          } else {
            nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
          }
          var nWordsReady = nBlocksReady * blockSize;
          var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
          if (nWordsReady) {
            for (var offset2 = 0; offset2 < nWordsReady; offset2 += blockSize) {
              this._doProcessBlock(dataWords, offset2);
            }
            var processedWords = dataWords.splice(0, nWordsReady);
            data.sigBytes -= nBytesReady;
          }
          return new WordArray.init(processedWords, nBytesReady);
        },
        clone: function() {
          var clone2 = Base.clone.call(this);
          clone2._data = this._data.clone();
          return clone2;
        },
        _minBufferSize: 0
      });
      C_lib.Hasher = BufferedBlockAlgorithm.extend({
        cfg: Base.extend(),
        init: function(cfg) {
          this.cfg = this.cfg.extend(cfg);
          this.reset();
        },
        reset: function() {
          BufferedBlockAlgorithm.reset.call(this);
          this._doReset();
        },
        update: function(messageUpdate) {
          this._append(messageUpdate);
          this._process();
          return this;
        },
        finalize: function(messageUpdate) {
          if (messageUpdate) {
            this._append(messageUpdate);
          }
          var hash = this._doFinalize();
          return hash;
        },
        blockSize: 512 / 32,
        _createHelper: function(hasher) {
          return function(message, cfg) {
            return new hasher.init(cfg).finalize(message);
          };
        },
        _createHmacHelper: function(hasher) {
          return function(message, key) {
            return new C_algo.HMAC.init(hasher, key).finalize(message);
          };
        }
      });
      var C_algo = C.algo = {};
      return C;
    }(Math);
    return CryptoJS;
  });
})(core);
var sha256 = { exports: {} };
(function(module2, exports) {
  (function(root2, factory) {
    {
      module2.exports = factory(core.exports);
    }
  })(commonjsGlobal, function(CryptoJS) {
    (function(Math2) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo;
      var H = [];
      var K = [];
      (function() {
        function isPrime(n2) {
          var sqrtN = Math2.sqrt(n2);
          for (var factor = 2; factor <= sqrtN; factor++) {
            if (!(n2 % factor)) {
              return false;
            }
          }
          return true;
        }
        function getFractionalBits(n2) {
          return (n2 - (n2 | 0)) * 4294967296 | 0;
        }
        var n = 2;
        var nPrime = 0;
        while (nPrime < 64) {
          if (isPrime(n)) {
            if (nPrime < 8) {
              H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
            }
            K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
            nPrime++;
          }
          n++;
        }
      })();
      var W = [];
      var SHA256 = C_algo.SHA256 = Hasher.extend({
        _doReset: function() {
          this._hash = new WordArray.init(H.slice(0));
        },
        _doProcessBlock: function(M, offset2) {
          var H2 = this._hash.words;
          var a = H2[0];
          var b = H2[1];
          var c = H2[2];
          var d = H2[3];
          var e = H2[4];
          var f = H2[5];
          var g = H2[6];
          var h2 = H2[7];
          for (var i = 0; i < 64; i++) {
            if (i < 16) {
              W[i] = M[offset2 + i] | 0;
            } else {
              var gamma0x = W[i - 15];
              var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
              var gamma1x = W[i - 2];
              var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
              W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
            }
            var ch = e & f ^ ~e & g;
            var maj = a & b ^ a & c ^ b & c;
            var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
            var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
            var t1 = h2 + sigma1 + ch + K[i] + W[i];
            var t2 = sigma0 + maj;
            h2 = g;
            g = f;
            f = e;
            e = d + t1 | 0;
            d = c;
            c = b;
            b = a;
            a = t1 + t2 | 0;
          }
          H2[0] = H2[0] + a | 0;
          H2[1] = H2[1] + b | 0;
          H2[2] = H2[2] + c | 0;
          H2[3] = H2[3] + d | 0;
          H2[4] = H2[4] + e | 0;
          H2[5] = H2[5] + f | 0;
          H2[6] = H2[6] + g | 0;
          H2[7] = H2[7] + h2 | 0;
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4;
          this._process();
          return this._hash;
        },
        clone: function() {
          var clone2 = Hasher.clone.call(this);
          clone2._hash = this._hash.clone();
          return clone2;
        }
      });
      C.SHA256 = Hasher._createHelper(SHA256);
      C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    })(Math);
    return CryptoJS.SHA256;
  });
})(sha256);
var hmac = { exports: {} };
(function(module2, exports) {
  (function(root2, factory) {
    {
      module2.exports = factory(core.exports);
    }
  })(commonjsGlobal, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var C_enc = C.enc;
      var Utf8 = C_enc.Utf8;
      var C_algo = C.algo;
      C_algo.HMAC = Base.extend({
        init: function(hasher, key) {
          hasher = this._hasher = new hasher.init();
          if (typeof key == "string") {
            key = Utf8.parse(key);
          }
          var hasherBlockSize = hasher.blockSize;
          var hasherBlockSizeBytes = hasherBlockSize * 4;
          if (key.sigBytes > hasherBlockSizeBytes) {
            key = hasher.finalize(key);
          }
          key.clamp();
          var oKey = this._oKey = key.clone();
          var iKey = this._iKey = key.clone();
          var oKeyWords = oKey.words;
          var iKeyWords = iKey.words;
          for (var i = 0; i < hasherBlockSize; i++) {
            oKeyWords[i] ^= 1549556828;
            iKeyWords[i] ^= 909522486;
          }
          oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
          this.reset();
        },
        reset: function() {
          var hasher = this._hasher;
          hasher.reset();
          hasher.update(this._iKey);
        },
        update: function(messageUpdate) {
          this._hasher.update(messageUpdate);
          return this;
        },
        finalize: function(messageUpdate) {
          var hasher = this._hasher;
          var innerHash = hasher.finalize(messageUpdate);
          hasher.reset();
          var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
          return hmac2;
        }
      });
    })();
  });
})(hmac);
(function(module2, exports) {
  (function(root2, factory, undef) {
    {
      module2.exports = factory(core.exports, sha256.exports, hmac.exports);
    }
  })(commonjsGlobal, function(CryptoJS) {
    return CryptoJS.HmacSHA256;
  });
})(hmacSha256);
var encBase64 = { exports: {} };
(function(module2, exports) {
  (function(root2, factory) {
    {
      module2.exports = factory(core.exports);
    }
  })(commonjsGlobal, function(CryptoJS) {
    (function() {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_enc = C.enc;
      C_enc.Base64 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var map2 = this._map;
          wordArray.clamp();
          var base64Chars = [];
          for (var i = 0; i < sigBytes; i += 3) {
            var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
            var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
            var triplet = byte1 << 16 | byte2 << 8 | byte3;
            for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
              base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
            }
          }
          var paddingChar = map2.charAt(64);
          if (paddingChar) {
            while (base64Chars.length % 4) {
              base64Chars.push(paddingChar);
            }
          }
          return base64Chars.join("");
        },
        parse: function(base64Str) {
          var base64StrLength = base64Str.length;
          var map2 = this._map;
          var reverseMap = this._reverseMap;
          if (!reverseMap) {
            reverseMap = this._reverseMap = [];
            for (var j = 0; j < map2.length; j++) {
              reverseMap[map2.charCodeAt(j)] = j;
            }
          }
          var paddingChar = map2.charAt(64);
          if (paddingChar) {
            var paddingIndex = base64Str.indexOf(paddingChar);
            if (paddingIndex !== -1) {
              base64StrLength = paddingIndex;
            }
          }
          return parseLoop(base64Str, base64StrLength, reverseMap);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      };
      function parseLoop(base64Str, base64StrLength, reverseMap) {
        var words = [];
        var nBytes = 0;
        for (var i = 0; i < base64StrLength; i++) {
          if (i % 4) {
            var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
            var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
            words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
            nBytes++;
          }
        }
        return WordArray.create(words, nBytes);
      }
    })();
    return CryptoJS.enc.Base64;
  });
})(encBase64);
var encUtf8 = { exports: {} };
(function(module2, exports) {
  (function(root2, factory) {
    {
      module2.exports = factory(core.exports);
    }
  })(commonjsGlobal, function(CryptoJS) {
    return CryptoJS.enc.Utf8;
  });
})(encUtf8);
var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
};
Object.defineProperty(util, "__esModule", { value: true });
util.transformPhone = util.sleep = util.printGroupLog = util.throwError = util.printInfo = util.printError = util.printWarn = util.execCallback = util.createPromiseCallback = util.removeParam = util.getHash = util.getQuery = util.toQueryString = util.createSign = util.formatUrl = util.genSeqId = util.isFormData = util.isInstanceOf = util.isNull = util.isPalinObject = util.isUndefined = util.isString = util.isArray = void 0;
var hmac_sha256_1 = __importDefault(hmacSha256.exports);
var enc_base64_1 = __importDefault(encBase64.exports);
var enc_utf8_1 = __importDefault(encUtf8.exports);
var constants_1$3 = constants$1;
function isArray$6(val) {
  return Object.prototype.toString.call(val) === "[object Array]";
}
util.isArray = isArray$6;
function isString$8(val) {
  return typeof val === "string";
}
util.isString = isString$8;
function isUndefined$1(val) {
  return typeof val === "undefined";
}
util.isUndefined = isUndefined$1;
function isPalinObject$1(val) {
  return Object.prototype.toString.call(val) === "[object Object]";
}
util.isPalinObject = isPalinObject$1;
function isNull(val) {
  return Object.prototype.toString.call(val) === "[object Null]";
}
util.isNull = isNull;
function isInstanceOf(instance, construct) {
  return instance instanceof construct;
}
util.isInstanceOf = isInstanceOf;
function isFormData$1(val) {
  return Object.prototype.toString.call(val) === "[object FormData]";
}
util.isFormData = isFormData$1;
function genSeqId$1() {
  return Math.random().toString(16).slice(2);
}
util.genSeqId = genSeqId$1;
function formatUrl$1(PROTOCOL2, url, query) {
  if (query === void 0) {
    query = {};
  }
  var urlHasQuery = /\?/.test(url);
  var queryString = "";
  for (var key in query) {
    if (queryString === "") {
      !urlHasQuery && (url += "?");
    } else {
      queryString += "&";
    }
    queryString += key + "=" + encodeURIComponent(query[key]);
  }
  url += queryString;
  if (/^http(s)?\:\/\//.test(url)) {
    return url;
  }
  return "" + PROTOCOL2 + url;
}
util.formatUrl = formatUrl$1;
function base64url(source) {
  var encodedSource = enc_base64_1.default.stringify(source);
  encodedSource = encodedSource.replace(/=+$/, "");
  encodedSource = encodedSource.replace(/\+/g, "-");
  encodedSource = encodedSource.replace(/\//g, "_");
  return encodedSource;
}
function createSign$1(payload, secret) {
  var header = {
    alg: "HS256",
    typ: "JWT"
  };
  var headerStr = base64url(enc_utf8_1.default.parse(JSON.stringify(header)));
  var payloadStr = base64url(enc_utf8_1.default.parse(JSON.stringify(payload)));
  var token2 = headerStr + "." + payloadStr;
  var sign2 = base64url(hmac_sha256_1.default(token2, secret));
  return token2 + "." + sign2;
}
util.createSign = createSign$1;
function toQueryString(query) {
  if (query === void 0) {
    query = {};
  }
  var queryString = [];
  for (var key in query) {
    queryString.push(key + "=" + encodeURIComponent(query[key]));
  }
  return queryString.join("&");
}
util.toQueryString = toQueryString;
function getQuery$1(name2, url) {
  if (typeof window === "undefined") {
    return false;
  }
  var u = url || window.location.search;
  var reg = new RegExp("(^|&)" + name2 + "=([^&]*)(&|$)");
  var r = u.substr(u.indexOf("?") + 1).match(reg);
  return r != null ? r[2] : "";
}
util.getQuery = getQuery$1;
util.getHash = function(name2) {
  if (typeof window === "undefined") {
    return "";
  }
  var matches = window.location.hash.match(new RegExp("[#?&/]" + name2 + "=([^&#]*)"));
  return matches ? matches[1] : "";
};
function removeParam$1(key, sourceURL) {
  var rtn = sourceURL.split("?")[0];
  var param;
  var params_arr = [];
  var queryString = sourceURL.indexOf("?") !== -1 ? sourceURL.split("?")[1] : "";
  if (queryString !== "") {
    params_arr = queryString.split("&");
    for (var i = params_arr.length - 1; i >= 0; i -= 1) {
      param = params_arr[i].split("=")[0];
      if (param === key) {
        params_arr.splice(i, 1);
      }
    }
    rtn = rtn + "?" + params_arr.join("&");
  }
  return rtn;
}
util.removeParam = removeParam$1;
function createPromiseCallback$1() {
  var cb;
  if (!Promise) {
    cb = function() {
    };
    cb.promise = {};
    var throwPromiseNotDefined = function() {
      throw new Error('Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.');
    };
    Object.defineProperty(cb.promise, "then", { get: throwPromiseNotDefined });
    Object.defineProperty(cb.promise, "catch", { get: throwPromiseNotDefined });
    return cb;
  }
  var promise = new Promise(function(resolve, reject) {
    cb = function(err, data) {
      if (err)
        return reject(err);
      return resolve(data);
    };
  });
  cb.promise = promise;
  return cb;
}
util.createPromiseCallback = createPromiseCallback$1;
function execCallback$2(fn, err, data) {
  if (data === void 0) {
    data = null;
  }
  if (fn && typeof fn === "function") {
    return fn(err, data);
  }
  if (err) {
    throw err;
  }
  return data;
}
util.execCallback = execCallback$2;
function printWarn$4(error, msg) {
  console.warn("[" + constants_1$3.getSdkName() + "][" + error + "]:" + msg);
}
util.printWarn = printWarn$4;
function printError(error, msg) {
  console.error({
    code: error,
    msg: "[" + constants_1$3.getSdkName() + "][" + error + "]:" + msg
  });
}
util.printError = printError;
function printInfo(error, msg) {
  console.log("[" + constants_1$3.getSdkName() + "][" + error + "]:" + msg);
}
util.printInfo = printInfo;
function throwError$4(error, msg) {
  throw new Error(JSON.stringify({
    code: error,
    msg: "[" + constants_1$3.getSdkName() + "][" + error + "]:" + msg
  }));
}
util.throwError = throwError$4;
function printGroupLog(options) {
  var title = options.title, _a2 = options.subtitle, subtitle = _a2 === void 0 ? "" : _a2, _b = options.content, content = _b === void 0 ? [] : _b, _c = options.printTrace, printTrace = _c === void 0 ? false : _c, _d = options.collapsed, collapsed = _d === void 0 ? false : _d;
  if (collapsed) {
    console.groupCollapsed(title, subtitle);
  } else {
    console.group(title, subtitle);
  }
  for (var _i = 0, content_1 = content; _i < content_1.length; _i++) {
    var tip = content_1[_i];
    var type = tip.type, body = tip.body;
    switch (type) {
      case "info":
        console.log(body);
        break;
      case "warn":
        console.warn(body);
        break;
      case "error":
        console.error(body);
        break;
    }
  }
  if (printTrace) {
    console.trace("stack trace:");
  }
  console.groupEnd();
}
util.printGroupLog = printGroupLog;
util.sleep = function(ms) {
  if (ms === void 0) {
    ms = 0;
  }
  return new Promise(function(r) {
    return setTimeout(r, ms);
  });
};
function transformPhone$2(phoneNumber) {
  return "+86" + phoneNumber;
}
util.transformPhone = transformPhone$2;
var __extends$f = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$c = commonjsGlobal && commonjsGlobal.__assign || function() {
  __assign$c = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$c.apply(this, arguments);
};
var __awaiter$l = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$l = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
Object.defineProperty(web, "__esModule", { value: true });
web.WebRequest = web.genAdapter = void 0;
var adapter_interface_1$1 = require$$0;
var util_1$3 = util;
var common_1 = common;
var WebRequest = function(_super) {
  __extends$f(WebRequest2, _super);
  function WebRequest2(config) {
    var _this = _super.call(this) || this;
    var timeout = config.timeout, timeoutMsg = config.timeoutMsg, restrictedMethods = config.restrictedMethods;
    _this._timeout = timeout || 0;
    _this._timeoutMsg = timeoutMsg || "\u8BF7\u6C42\u8D85\u65F6";
    _this._restrictedMethods = restrictedMethods || ["get", "post", "upload", "download"];
    return _this;
  }
  WebRequest2.prototype.get = function(options) {
    return this._request(__assign$c(__assign$c({}, options), { method: "get" }), this._restrictedMethods.includes("get"));
  };
  WebRequest2.prototype.post = function(options) {
    return this._request(__assign$c(__assign$c({}, options), { method: "post" }), this._restrictedMethods.includes("post"));
  };
  WebRequest2.prototype.put = function(options) {
    return this._request(__assign$c(__assign$c({}, options), { method: "put" }));
  };
  WebRequest2.prototype.upload = function(options) {
    var data = options.data, file = options.file, name2 = options.name;
    var formData = new FormData();
    for (var key in data) {
      formData.append(key, data[key]);
    }
    formData.append("key", name2);
    formData.append("file", file);
    return this._request(__assign$c(__assign$c({}, options), { data: formData, method: "post" }), this._restrictedMethods.includes("upload"));
  };
  WebRequest2.prototype.download = function(options) {
    return __awaiter$l(this, void 0, void 0, function() {
      var data, url, fileName, link;
      return __generator$l(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            _a2.trys.push([0, 2, , 3]);
            return [4, this.get(__assign$c(__assign$c({}, options), { headers: {}, responseType: "blob" }))];
          case 1:
            data = _a2.sent().data;
            url = window.URL.createObjectURL(new Blob([data]));
            fileName = decodeURIComponent(new URL(options.url).pathname.split("/").pop() || "");
            link = document.createElement("a");
            link.href = url;
            link.setAttribute("download", fileName);
            link.style.display = "none";
            document.body.appendChild(link);
            link.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(link);
            return [3, 3];
          case 2:
            _a2.sent();
            return [3, 3];
          case 3:
            return [2, new Promise(function(resolve) {
              resolve({
                statusCode: 200,
                tempFilePath: options.url
              });
            })];
        }
      });
    });
  };
  WebRequest2.prototype._request = function(options, enableAbort) {
    var _this = this;
    if (enableAbort === void 0) {
      enableAbort = false;
    }
    var method = String(options.method).toLowerCase() || "get";
    return new Promise(function(resolve) {
      var url = options.url, _a2 = options.headers, headers = _a2 === void 0 ? {} : _a2, data = options.data, responseType = options.responseType, withCredentials = options.withCredentials, body = options.body, onUploadProgress = options.onUploadProgress;
      var realUrl = util_1$3.formatUrl(common_1.getProtocol(), url, method === "get" ? data : {});
      var ajax = new XMLHttpRequest();
      ajax.open(method, realUrl);
      responseType && (ajax.responseType = responseType);
      for (var key in headers) {
        ajax.setRequestHeader(key, headers[key]);
      }
      var timer;
      if (onUploadProgress) {
        ajax.upload.addEventListener("progress", onUploadProgress);
      }
      ajax.onreadystatechange = function() {
        var result = {};
        if (ajax.readyState === 4) {
          var headers_1 = ajax.getAllResponseHeaders();
          var arr = headers_1.trim().split(/[\r\n]+/);
          var headerMap_1 = {};
          arr.forEach(function(line) {
            var parts = line.split(": ");
            var header = parts.shift().toLowerCase();
            var value = parts.join(": ");
            headerMap_1[header] = value;
          });
          result.header = headerMap_1;
          result.statusCode = ajax.status;
          try {
            result.data = responseType === "blob" ? ajax.response : JSON.parse(ajax.responseText);
          } catch (e) {
            result.data = responseType === "blob" ? ajax.response : ajax.responseText;
          }
          clearTimeout(timer);
          resolve(result);
        }
      };
      if (enableAbort && _this._timeout) {
        timer = setTimeout(function() {
          console.warn(_this._timeoutMsg);
          ajax.abort();
        }, _this._timeout);
      }
      var payload;
      if (util_1$3.isFormData(data)) {
        payload = data;
      } else if (headers["content-type"] === "application/x-www-form-urlencoded") {
        payload = util_1$3.toQueryString(data);
      } else if (body) {
        payload = body;
      } else {
        payload = data ? JSON.stringify(data) : void 0;
      }
      if (withCredentials) {
        ajax.withCredentials = true;
      }
      ajax.send(payload);
    });
  };
  return WebRequest2;
}(adapter_interface_1$1.AbstractSDKRequest);
web.WebRequest = WebRequest;
function genAdapter$1() {
  var adapter2 = {
    root: window,
    reqClass: WebRequest,
    wsClass: WebSocket,
    localStorage,
    sessionStorage
  };
  return adapter2;
}
web.genAdapter = genAdapter$1;
(function(exports) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault2 = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar2 = commonjsGlobal && commonjsGlobal.__importStar || function(mod2) {
    if (mod2 && mod2.__esModule)
      return mod2;
    var result = {};
    if (mod2 != null) {
      for (var k in mod2)
        if (k !== "default" && Object.hasOwnProperty.call(mod2, k))
          __createBinding2(result, mod2, k);
    }
    __setModuleDefault2(result, mod2);
    return result;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.useDefaultAdapter = exports.useAdapters = exports.RUNTIME = void 0;
  var Web = __importStar2(web);
  var util_12 = util;
  var RUNTIME2;
  (function(RUNTIME3) {
    RUNTIME3["WEB"] = "web";
    RUNTIME3["WX_MP"] = "wx_mp";
  })(RUNTIME2 = exports.RUNTIME || (exports.RUNTIME = {}));
  function useAdapters2(adapters2) {
    var adapterList = util_12.isArray(adapters2) ? adapters2 : [adapters2];
    for (var _i = 0, adapterList_1 = adapterList; _i < adapterList_1.length; _i++) {
      var adapter2 = adapterList_1[_i];
      var isMatch2 = adapter2.isMatch, genAdapter2 = adapter2.genAdapter, runtime2 = adapter2.runtime;
      if (isMatch2()) {
        return {
          adapter: genAdapter2(),
          runtime: runtime2
        };
      }
    }
  }
  exports.useAdapters = useAdapters2;
  function useDefaultAdapter2() {
    return {
      adapter: Web.genAdapter(),
      runtime: RUNTIME2.WEB
    };
  }
  exports.useDefaultAdapter = useDefaultAdapter2;
})(adapters$1);
var cache$1 = {};
var __extends$e = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter$k = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$k = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
Object.defineProperty(cache$1, "__esModule", { value: true });
cache$1.CloudbaseCache = void 0;
var adapter_interface_1 = require$$0;
var util_1$2 = util;
var constants_1$2 = constants$1;
var TcbCacheObject = function(_super) {
  __extends$e(TcbCacheObject2, _super);
  function TcbCacheObject2(root2) {
    var _this = _super.call(this) || this;
    _this._root = root2;
    if (!root2["tcbCacheObject"]) {
      root2["tcbCacheObject"] = {};
    }
    return _this;
  }
  TcbCacheObject2.prototype.setItem = function(key, value) {
    this._root["tcbCacheObject"][key] = value;
  };
  TcbCacheObject2.prototype.getItem = function(key) {
    return this._root["tcbCacheObject"][key];
  };
  TcbCacheObject2.prototype.removeItem = function(key) {
    delete this._root["tcbCacheObject"][key];
  };
  TcbCacheObject2.prototype.clear = function() {
    delete this._root["tcbCacheObject"];
  };
  return TcbCacheObject2;
}(adapter_interface_1.AbstractStorage);
function createStorage(persistence, adapter2) {
  switch (persistence) {
    case "local":
      if (!adapter2.localStorage) {
        util_1$2.printWarn(constants_1$2.ERRORS.INVALID_PARAMS, "localStorage is not supported on current platform");
        return new TcbCacheObject(adapter2.root);
      }
      return adapter2.localStorage;
    case "none":
      return new TcbCacheObject(adapter2.root);
    case "session":
      if (!adapter2.sessionStorage) {
        util_1$2.printWarn(constants_1$2.ERRORS.INVALID_PARAMS, "sessionStorage is not supported on current platform");
        return new TcbCacheObject(adapter2.root);
      }
      return adapter2.sessionStorage;
    default:
      if (!adapter2.localStorage) {
        util_1$2.printWarn(constants_1$2.ERRORS.INVALID_PARAMS, "localStorage is not supported on current platform");
        return new TcbCacheObject(adapter2.root);
      }
      return adapter2.localStorage;
  }
}
var CloudbaseCache$1 = function() {
  function CloudbaseCache2(config) {
    this.keys = {};
    var persistence = config.persistence, _a2 = config.platformInfo, platformInfo = _a2 === void 0 ? {} : _a2, _b = config.keys, keys2 = _b === void 0 ? {} : _b, _c = config.alwaysLocalKeys, alwaysLocalKeys = _c === void 0 ? [] : _c;
    this._platformInfo = platformInfo;
    this._alwaysLocalKeys = alwaysLocalKeys;
    if (!this._storage) {
      this._persistence = platformInfo.adapter.primaryStorage || persistence;
      this._storage = createStorage(this._persistence, platformInfo.adapter);
      this.keys = keys2;
    }
  }
  Object.defineProperty(CloudbaseCache2.prototype, "mode", {
    get: function() {
      return this._storage.mode || "sync";
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CloudbaseCache2.prototype, "persistence", {
    get: function() {
      return this._persistence;
    },
    enumerable: false,
    configurable: true
  });
  CloudbaseCache2.prototype.updatePersistence = function(persistence) {
    if (this.mode === "async") {
      util_1$2.printWarn(constants_1$2.ERRORS.INVALID_OPERATION, "current platform's storage is asynchronous, please use updatePersistenceAsync insteed");
      return;
    }
    if (persistence === this._persistence) {
      return;
    }
    var isCurrentLocal = this._persistence === "local";
    this._persistence = persistence;
    var storage = createStorage(persistence, this._platformInfo.adapter);
    for (var key in this.keys) {
      var name_1 = this.keys[key];
      if (isCurrentLocal && this._alwaysLocalKeys.includes(key)) {
        continue;
      }
      var val = this._storage.getItem(name_1);
      if (!util_1$2.isUndefined(val) && !util_1$2.isNull(val)) {
        storage.setItem(name_1, val);
        this._storage.removeItem(name_1);
      }
    }
    this._storage = storage;
  };
  CloudbaseCache2.prototype.updatePersistenceAsync = function(persistence) {
    return __awaiter$k(this, void 0, void 0, function() {
      var isCurrentLocal, storage, _a2, _b, _i, key, name_2, val;
      return __generator$k(this, function(_c) {
        switch (_c.label) {
          case 0:
            if (persistence === this._persistence) {
              return [2];
            }
            isCurrentLocal = this._persistence === "local";
            this._persistence = persistence;
            storage = createStorage(persistence, this._platformInfo.adapter);
            _a2 = [];
            for (_b in this.keys)
              _a2.push(_b);
            _i = 0;
            _c.label = 1;
          case 1:
            if (!(_i < _a2.length))
              return [3, 5];
            key = _a2[_i];
            name_2 = this.keys[key];
            if (isCurrentLocal && this._alwaysLocalKeys.includes(key)) {
              return [3, 4];
            }
            return [4, this._storage.getItem(name_2)];
          case 2:
            val = _c.sent();
            if (!(!util_1$2.isUndefined(val) && !util_1$2.isNull(val)))
              return [3, 4];
            storage.setItem(name_2, val);
            return [4, this._storage.removeItem(name_2)];
          case 3:
            _c.sent();
            _c.label = 4;
          case 4:
            _i++;
            return [3, 1];
          case 5:
            this._storage = storage;
            return [2];
        }
      });
    });
  };
  CloudbaseCache2.prototype.setStore = function(key, value, version2) {
    if (this.mode === "async") {
      util_1$2.printWarn(constants_1$2.ERRORS.INVALID_OPERATION, "current platform's storage is asynchronous, please use setStoreAsync insteed");
      return;
    }
    if (!this._storage) {
      return;
    }
    try {
      var val = {
        version: version2 || "localCachev1",
        content: value
      };
      this._storage.setItem(key, JSON.stringify(val));
    } catch (e) {
      throw new Error(JSON.stringify({
        code: constants_1$2.ERRORS.OPERATION_FAIL,
        msg: "[" + constants_1$2.getSdkName() + "][" + constants_1$2.ERRORS.OPERATION_FAIL + "]setStore failed",
        info: e
      }));
    }
    return;
  };
  CloudbaseCache2.prototype.setStoreAsync = function(key, value, version2) {
    return __awaiter$k(this, void 0, void 0, function() {
      var val;
      return __generator$k(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!this._storage) {
              return [2];
            }
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            val = {
              version: version2 || "localCachev1",
              content: value
            };
            return [4, this._storage.setItem(key, JSON.stringify(val))];
          case 2:
            _a2.sent();
            return [3, 4];
          case 3:
            _a2.sent();
            return [2];
          case 4:
            return [2];
        }
      });
    });
  };
  CloudbaseCache2.prototype.getStore = function(key, version2) {
    var _a2;
    if (this.mode === "async") {
      util_1$2.printWarn(constants_1$2.ERRORS.INVALID_OPERATION, "current platform's storage is asynchronous, please use getStoreAsync insteed");
      return;
    }
    try {
      if (typeof process !== "undefined" && ((_a2 = process.env) === null || _a2 === void 0 ? void 0 : _a2.tcb_token)) {
        return {}.tcb_token;
      }
      if (!this._storage) {
        return "";
      }
    } catch (e) {
      return "";
    }
    version2 = version2 || "localCachev1";
    var content = this._storage.getItem(key);
    if (!content) {
      return "";
    }
    if (content.indexOf(version2) >= 0) {
      var d = JSON.parse(content);
      return d.content;
    } else {
      return "";
    }
  };
  CloudbaseCache2.prototype.getStoreAsync = function(key, version2) {
    var _a2;
    return __awaiter$k(this, void 0, void 0, function() {
      var content, d;
      return __generator$k(this, function(_b) {
        switch (_b.label) {
          case 0:
            try {
              if (typeof process !== "undefined" && ((_a2 = process.env) === null || _a2 === void 0 ? void 0 : _a2.tcb_token)) {
                return [2, {}.tcb_token];
              }
              if (!this._storage) {
                return [2, ""];
              }
            } catch (e) {
              return [2, ""];
            }
            version2 = version2 || "localCachev1";
            return [4, this._storage.getItem(key)];
          case 1:
            content = _b.sent();
            if (!content) {
              return [2, ""];
            }
            if (content.indexOf(version2) >= 0) {
              d = JSON.parse(content);
              return [2, d.content];
            } else {
              return [2, ""];
            }
        }
      });
    });
  };
  CloudbaseCache2.prototype.removeStore = function(key) {
    if (this.mode === "async") {
      util_1$2.printWarn(constants_1$2.ERRORS.INVALID_OPERATION, "current platform's storage is asynchronous, please use removeStoreAsync insteed");
      return;
    }
    this._storage.removeItem(key);
  };
  CloudbaseCache2.prototype.removeStoreAsync = function(key) {
    return __awaiter$k(this, void 0, void 0, function() {
      return __generator$k(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._storage.removeItem(key)];
          case 1:
            _a2.sent();
            return [2];
        }
      });
    });
  };
  return CloudbaseCache2;
}();
cache$1.CloudbaseCache = CloudbaseCache$1;
var events$1 = {};
var __extends$d = commonjsGlobal && commonjsGlobal.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __spreadArrays$2 = commonjsGlobal && commonjsGlobal.__spreadArrays || function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
Object.defineProperty(events$1, "__esModule", { value: true });
events$1.removeEventListener = events$1.activateEvent = events$1.addEventListener = events$1.CloudbaseEventEmitter = events$1.IErrorEvent = events$1.CloudbaseEvent = void 0;
var util_1$1 = util;
function _addEventListener(name2, listener, listeners) {
  listeners[name2] = listeners[name2] || [];
  listeners[name2].push(listener);
}
function _removeEventListener(name2, listener, listeners) {
  if (listeners === null || listeners === void 0 ? void 0 : listeners[name2]) {
    var index2 = listeners[name2].indexOf(listener);
    if (index2 !== -1) {
      listeners[name2].splice(index2, 1);
    }
  }
}
var CloudbaseEvent = function() {
  function CloudbaseEvent2(name2, data) {
    this.data = data || null;
    this.name = name2;
  }
  return CloudbaseEvent2;
}();
events$1.CloudbaseEvent = CloudbaseEvent;
var IErrorEvent = function(_super) {
  __extends$d(IErrorEvent2, _super);
  function IErrorEvent2(error, data) {
    var _this = _super.call(this, "error", { error, data }) || this;
    _this.error = error;
    return _this;
  }
  return IErrorEvent2;
}(CloudbaseEvent);
events$1.IErrorEvent = IErrorEvent;
var CloudbaseEventEmitter$1 = function() {
  function CloudbaseEventEmitter2() {
    this._listeners = {};
  }
  CloudbaseEventEmitter2.prototype.on = function(name2, listener) {
    _addEventListener(name2, listener, this._listeners);
    return this;
  };
  CloudbaseEventEmitter2.prototype.off = function(name2, listener) {
    _removeEventListener(name2, listener, this._listeners);
    return this;
  };
  CloudbaseEventEmitter2.prototype.fire = function(event, data) {
    if (util_1$1.isInstanceOf(event, IErrorEvent)) {
      console.error(event.error);
      return this;
    }
    var ev = util_1$1.isString(event) ? new CloudbaseEvent(event, data || {}) : event;
    var name2 = ev.name;
    if (this._listens(name2)) {
      ev.target = this;
      var handlers = this._listeners[name2] ? __spreadArrays$2(this._listeners[name2]) : [];
      for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
        var fn = handlers_1[_i];
        fn.call(this, ev);
      }
    }
    return this;
  };
  CloudbaseEventEmitter2.prototype._listens = function(name2) {
    return this._listeners[name2] && this._listeners[name2].length > 0;
  };
  return CloudbaseEventEmitter2;
}();
events$1.CloudbaseEventEmitter = CloudbaseEventEmitter$1;
var eventEmitter = new CloudbaseEventEmitter$1();
function addEventListener$2(event, callback) {
  eventEmitter.on(event, callback);
}
events$1.addEventListener = addEventListener$2;
function activateEvent(event, data) {
  if (data === void 0) {
    data = {};
  }
  eventEmitter.fire(event, data);
}
events$1.activateEvent = activateEvent;
function removeEventListener$1(event, callback) {
  eventEmitter.off(event, callback);
}
events$1.removeEventListener = removeEventListener$1;
var helpers$1 = {};
var decorators = {};
var __awaiter$j = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$j = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
Object.defineProperty(decorators, "__esModule", { value: true });
decorators.catchErrorsDecorator = void 0;
var util_1 = util;
var constants_1$1 = constants$1;
var isFirefox = false;
if (typeof navigator !== "undefined" && navigator.userAgent) {
  isFirefox = navigator.userAgent.indexOf("Firefox") !== -1;
}
var REG_STACK_DECORATE = isFirefox ? /(\.js\/)?__decorate(\$\d+)?<@.*\d$/ : /(\/\w+\.js\.)?__decorate(\$\d+)?\s*\(.*\)$/;
var REG_STACK_LINK = /https?\:\/\/.+\:\d*\/.*\.js\:\d+\:\d+/;
function catchErrorsDecorator$b(options) {
  var _a2 = options.mode, mode = _a2 === void 0 ? "async" : _a2, _b = options.customInfo, customInfo = _b === void 0 ? {} : _b, title = options.title, _c = options.messages, messages2 = _c === void 0 ? [] : _c;
  return function(target, methodName, descriptor) {
    if (!constants_1$1.IS_DEBUG_MODE) {
      return;
    }
    var className = customInfo.className || target.constructor.name;
    var fnName = customInfo.methodName || methodName;
    var fn = descriptor.value;
    var sourceLink = getSourceLink(new Error());
    if (mode === "sync") {
      descriptor.value = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var innerErr = getRewritedError({
          err: new Error(),
          className,
          methodName: fnName,
          sourceLink
        });
        try {
          return fn.apply(this, args);
        } catch (err) {
          var failErr = err;
          var errMsg = err.message;
          var logs = {
            title: title || className + "." + fnName + " failed",
            content: [{
              type: "error",
              body: err
            }]
          };
          if (errMsg && /^\{.*\}$/.test(errMsg)) {
            var msg = JSON.parse(errMsg);
            logs.subtitle = errMsg;
            if (msg.code) {
              if (innerErr) {
                innerErr.code = msg.code;
                innerErr.msg = msg.msg;
              } else {
                err.code = msg.code;
                err.message = msg.msg;
              }
              failErr = innerErr || err;
              logs.content = messages2.map(function(msg2) {
                return {
                  type: "info",
                  body: msg2
                };
              });
            }
          }
          util_1.printGroupLog(logs);
          throw failErr;
        }
      };
    } else {
      descriptor.value = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter$j(this, void 0, void 0, function() {
          var innerErr, err_1, failErr, errMsg, logs, msg;
          return __generator$j(this, function(_a3) {
            switch (_a3.label) {
              case 0:
                innerErr = getRewritedError({
                  err: new Error(),
                  className,
                  methodName: fnName,
                  sourceLink
                });
                _a3.label = 1;
              case 1:
                _a3.trys.push([1, 3, , 4]);
                return [4, fn.apply(this, args)];
              case 2:
                return [2, _a3.sent()];
              case 3:
                err_1 = _a3.sent();
                failErr = err_1;
                errMsg = err_1.message;
                logs = {
                  title: title || className + "." + fnName + " failed",
                  content: [{
                    type: "error",
                    body: err_1
                  }]
                };
                if (errMsg && /^\{.*\}$/.test(errMsg)) {
                  msg = JSON.parse(errMsg);
                  logs.subtitle = msg;
                  if (msg.code) {
                    if (innerErr) {
                      innerErr.code = msg.code;
                      innerErr.message = msg.msg;
                    } else {
                      err_1.code = msg.code;
                      err_1.message = msg.msg;
                    }
                    failErr = innerErr || err_1;
                    logs.content = messages2.map(function(msg2) {
                      return {
                        type: "info",
                        body: msg2
                      };
                    });
                  }
                }
                util_1.printGroupLog(logs);
                throw failErr;
              case 4:
                return [2];
            }
          });
        });
      };
    }
  };
}
decorators.catchErrorsDecorator = catchErrorsDecorator$b;
function getSourceLink(err) {
  var sourceLink = "";
  var outterErrStacks = err.stack.split("\n");
  var indexOfDecorator = outterErrStacks.findIndex(function(str) {
    return REG_STACK_DECORATE.test(str);
  });
  if (indexOfDecorator !== -1) {
    var match = REG_STACK_LINK.exec(outterErrStacks[indexOfDecorator + 1] || "");
    sourceLink = match ? match[0] : "";
  }
  return sourceLink;
}
function getRewritedError(options) {
  var err = options.err, className = options.className, methodName = options.methodName, sourceLink = options.sourceLink;
  if (!sourceLink) {
    return null;
  }
  var innerErrStack = err.stack.split("\n");
  var REG_STACK_INNER_METHOD = isFirefox ? /^catchErrorsDecorator\/<\/descriptor.value@.*\d$/ : new RegExp(className + "\\.descriptor.value\\s*\\[as\\s" + methodName + "\\]\\s*\\(.*\\)$");
  var REG_STACK_INNER_METHOD_WITHOUT_LINK = isFirefox ? /^catchErrorsDecorator\/<\/descriptor.value/ : new RegExp(className + "\\.descriptor.value\\s*\\[as\\s" + methodName + "\\]");
  var indexOfSource = innerErrStack.findIndex(function(str) {
    return REG_STACK_INNER_METHOD.test(str);
  });
  var innerErr;
  if (indexOfSource !== -1) {
    var realErrStack = innerErrStack.filter(function(v, i) {
      return i > indexOfSource;
    });
    realErrStack.unshift(innerErrStack[indexOfSource].replace(REG_STACK_INNER_METHOD_WITHOUT_LINK, className + "." + methodName).replace(REG_STACK_LINK, sourceLink));
    innerErr = new Error();
    innerErr.stack = (isFirefox ? "@debugger" : "Error") + "\n" + realErrStack.join("\n");
  }
  return innerErr;
}
(function(exports) {
  var __createBinding2 = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() {
      return m[k];
    } });
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m, exports2) {
    for (var p2 in m)
      if (p2 !== "default" && !exports2.hasOwnProperty(p2))
        __createBinding2(exports2, m, p2);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  __exportStar(decorators, exports);
})(helpers$1);
var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o, k2, { enumerable: true, get: function() {
    return m[k];
  } });
} : function(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
});
var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod2) {
  if (mod2 && mod2.__esModule)
    return mod2;
  var result = {};
  if (mod2 != null) {
    for (var k in mod2)
      if (k !== "default" && Object.hasOwnProperty.call(mod2, k))
        __createBinding(result, mod2, k);
  }
  __setModuleDefault(result, mod2);
  return result;
};
Object.defineProperty(dist, "__esModule", { value: true });
var helpers_1 = dist.helpers = utils_1 = dist.utils = events_1 = dist.events = cache_1 = dist.cache = adapters_1 = dist.adapters = constants_1 = dist.constants = void 0;
var constants = __importStar(constants$1);
var constants_1 = dist.constants = constants;
var adapters = __importStar(adapters$1);
var adapters_1 = dist.adapters = adapters;
var cache = __importStar(cache$1);
var cache_1 = dist.cache = cache;
var events = __importStar(events$1);
var events_1 = dist.events = events;
var utils = __importStar(util);
var utils_1 = dist.utils = utils;
var helpers = __importStar(helpers$1);
helpers_1 = dist.helpers = helpers;
var __extends$c = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$b = globalThis && globalThis.__assign || function() {
  __assign$b = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$b.apply(this, arguments);
};
var __awaiter$i = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$i = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
function isMatch() {
  if (typeof wx === "undefined") {
    return false;
  }
  if (typeof Page === "undefined") {
    return false;
  }
  if (!wx.getSystemInfoSync) {
    return false;
  }
  if (!wx.getStorageSync) {
    return false;
  }
  if (!wx.setStorageSync) {
    return false;
  }
  if (!wx.connectSocket) {
    return false;
  }
  if (!wx.request) {
    return false;
  }
  try {
    if (!wx.getSystemInfoSync()) {
      return false;
    }
    if (wx.getSystemInfoSync().AppPlatform === "qq") {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
}
function isPlugin() {
  return typeof App === "undefined" && typeof getApp === "undefined" && !wx.onAppHide && !wx.offAppHide && !wx.onAppShow && !wx.offAppShow;
}
var WxRequest = function(_super) {
  __extends$c(WxRequest2, _super);
  function WxRequest2(config) {
    if (config === void 0) {
      config = {};
    }
    var _this = _super.call(this) || this;
    var timeout = config.timeout, timeoutMsg = config.timeoutMsg, restrictedMethods = config.restrictedMethods;
    _this._timeout = timeout || 0;
    _this._timeoutMsg = timeoutMsg || "\u8BF7\u6C42\u8D85\u65F6";
    _this._restrictedMethods = restrictedMethods || ["get", "post", "upload", "download"];
    return _this;
  }
  WxRequest2.prototype.post = function(options) {
    var self2 = this;
    return new Promise(function(resolve, reject) {
      var url = options.url, data = options.data, headers = options.headers;
      var task = wx.request({
        url: formatUrl$2("https:", url),
        data,
        timeout: self2._timeout,
        method: "POST",
        header: headers,
        success: function(res) {
          resolve(res);
        },
        fail: function(err) {
          reject(err);
        },
        complete: function(err) {
          if (!err || !err.errMsg) {
            return;
          }
          if (!self2._timeout || self2._restrictedMethods.indexOf("post") === -1) {
            return;
          }
          var errMsg = err.errMsg;
          if (errMsg === "request:fail timeout") {
            console.warn(self2._timeoutMsg);
            try {
              task.abort();
            } catch (e) {
            }
          }
        }
      });
    });
  };
  WxRequest2.prototype.upload = function(options) {
    var _this = this;
    var self2 = this;
    return new Promise(function(resolve) {
      return __awaiter$i(_this, void 0, void 0, function() {
        var url, file, data, headers, onUploadProgress, task;
        return __generator$i(this, function(_a2) {
          url = options.url, file = options.file, data = options.data, headers = options.headers, onUploadProgress = options.onUploadProgress;
          task = wx.uploadFile({
            url,
            filePath: file,
            name: "file",
            formData: __assign$b({}, data),
            header: headers,
            timeout: this._timeout,
            success: function(res) {
              var result = {
                statusCode: res.statusCode,
                data: res.data || {}
              };
              if (res.statusCode === 200 && data.success_action_status) {
                result.statusCode = parseInt(data.success_action_status, 10);
              }
              resolve(result);
            },
            fail: function(err) {
              resolve(err);
            },
            complete: function(err) {
              if (!err || !err.errMsg) {
                return;
              }
              if (!self2._timeout || self2._restrictedMethods.indexOf("upload") === -1) {
                return;
              }
              var errMsg = err.errMsg;
              if (errMsg === "request:fail timeout") {
                console.warn(self2._timeoutMsg);
                try {
                  task.abort();
                } catch (e) {
                }
              }
            }
          });
          if (onUploadProgress) {
            task.onProgressUpdate(function(res) {
              onUploadProgress(res);
            });
          }
          return [2];
        });
      });
    });
  };
  WxRequest2.prototype.download = function(options) {
    var _this = this;
    var self2 = this;
    return new Promise(function(resolve, reject) {
      var url = options.url, headers = options.headers;
      var task = wx.downloadFile({
        url: formatUrl$2("https:", url),
        header: headers,
        timeout: _this._timeout,
        success: function(res) {
          if (res.statusCode === 200 && res.tempFilePath) {
            resolve({
              statusCode: 200,
              tempFilePath: res.tempFilePath
            });
          } else {
            resolve(res);
          }
        },
        fail: function(err) {
          reject(err);
        },
        complete: function(err) {
          if (!err || !err.errMsg) {
            return;
          }
          if (!self2._timeout || self2._restrictedMethods.indexOf("download") === -1) {
            return;
          }
          var errMsg = err.errMsg;
          if (errMsg === "request:fail timeout") {
            console.warn(self2._timeoutMsg);
            try {
              task.abort();
            } catch (e) {
            }
          }
        }
      });
    });
  };
  return WxRequest2;
}(AbstractSDKRequest);
var wxMpStorage = {
  setItem: function(key, value) {
    wx.setStorageSync(key, value);
  },
  getItem: function(key) {
    return wx.getStorageSync(key);
  },
  removeItem: function(key) {
    wx.removeStorageSync(key);
  },
  clear: function() {
    wx.clearStorageSync();
  }
};
var WxMpWebSocket = function() {
  function WxMpWebSocket2(url, options) {
    if (options === void 0) {
      options = {};
    }
    var ws = wx.connectSocket(__assign$b({ url }, options));
    var socketTask = {
      set onopen(cb) {
        ws.onOpen(cb);
      },
      set onmessage(cb) {
        ws.onMessage(cb);
      },
      set onclose(cb) {
        ws.onClose(cb);
      },
      set onerror(cb) {
        ws.onError(cb);
      },
      send: function(data) {
        return ws.send({ data });
      },
      close: function(code2, reason) {
        return ws.close({
          code: code2,
          reason
        });
      },
      get readyState() {
        return ws.readyState;
      },
      CONNECTING: 0,
      OPEN: 1,
      CLOSING: 2,
      CLOSED: 3
    };
    return socketTask;
  }
  return WxMpWebSocket2;
}();
function genAdapter() {
  var adapter2 = {
    root: {},
    reqClass: WxRequest,
    wsClass: WxMpWebSocket,
    localStorage: wxMpStorage,
    primaryStorage: StorageType.local,
    getAppSign: function() {
      var info = wx.getAccountInfoSync();
      if (isPlugin()) {
        return info && info.plugin ? info.plugin.appId : "";
      } else {
        return info && info.miniProgram ? info.miniProgram.appId : "";
      }
    }
  };
  return adapter2;
}
var adapter = {
  genAdapter,
  isMatch,
  runtime: "wx_mp"
};
var __spreadArrays$1 = globalThis && globalThis.__spreadArrays || function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var ERRORS$d = constants_1.ERRORS;
var components$1 = {};
function registerComponent(app, component2) {
  var name2 = component2.name, namespace = component2.namespace, entity = component2.entity, injectEvents = component2.injectEvents, _a2 = component2.IIFE, IIFE = _a2 === void 0 ? false : _a2;
  if (components$1[name2] || namespace && app[namespace]) {
    throw new Error(JSON.stringify({
      code: ERRORS$d.INVALID_OPERATION,
      msg: "Duplicate component " + name2
    }));
  }
  if (IIFE) {
    if (!entity || typeof entity !== "function") {
      throw new Error(JSON.stringify({
        code: ERRORS$d.INVALID_PARAMS,
        msg: "IIFE component's entity must be a function"
      }));
    }
    entity.call(app);
  }
  components$1[name2] = component2;
  if (namespace) {
    app.prototype[namespace] = entity;
  } else {
    deepExtend(app.prototype, entity);
  }
  if (injectEvents) {
    var bus = injectEvents.bus, events2 = injectEvents.events;
    if (!bus || !events2 || events2.length === 0) {
      return;
    }
    var originCallback_1 = app.prototype.fire || function() {
    };
    if (!app.prototype.events) {
      app.prototype.events = {};
    }
    var originEvents = app.prototype.events || {};
    if (originEvents[name2]) {
      app.prototype.events[name2].events = __spreadArrays$1(app.prototype.events[name2].events, events2);
    } else {
      app.prototype.events[name2] = { bus, events: events2 };
    }
    app.prototype.fire = function(eventName, data) {
      originCallback_1(eventName, data);
      for (var name_1 in this.events) {
        var _a3 = this.events[name_1], bus_1 = _a3.bus, eventList = _a3.events;
        if (eventList.includes(eventName)) {
          bus_1.fire(eventName, data);
          break;
        }
      }
    };
  }
}
function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }
  switch (source.constructor) {
    case Date:
      var dateValue = source;
      return new Date(dateValue.getTime());
    case Object:
      if (target === void 0) {
        target = {};
      }
      break;
    case Array:
      target = [];
      break;
    default:
      return source;
  }
  for (var key in source) {
    if (!source.hasOwnProperty(key)) {
      continue;
    }
    target[key] = deepExtend(target[key], source[key]);
  }
  return target;
}
function registerHook(app, hook2) {
  var entity = hook2.entity, target = hook2.target;
  if (!app.prototype.hasOwnProperty(target)) {
    throw new Error(JSON.stringify({
      code: ERRORS$d.INVALID_OPERATION,
      msg: "target:" + target + " is not exist"
    }));
  }
  var originMethod = app.prototype[target];
  if (typeof originMethod !== "function") {
    throw new Error(JSON.stringify({
      code: ERRORS$d.INVALID_OPERATION,
      msg: "target:" + target + " is not a function which is the only type supports hook"
    }));
  }
  app.prototype[target] = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    entity.call.apply(entity, __spreadArrays$1([this], args));
    return originMethod.call.apply(originMethod, __spreadArrays$1([this], args));
  };
}
var Platform = {};
var __assign$a = globalThis && globalThis.__assign || function() {
  __assign$a = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$a.apply(this, arguments);
};
var KEY_ACCESS_TOKEN = "access_token";
var KEY_ACCESS_TOKEN_EXPIRE = "access_token_expire";
var KEY_REFRESH_TOKEN = "refresh_token";
var KEY_ANONYMOUS_UUID = "anonymous_uuid";
var KEY_LOGIN_TYPE = "login_type";
var USER_INFO_KEY = "user_info";
var CloudbaseCache = cache_1.CloudbaseCache;
var cacheMap = {};
var localCacheMap = {};
function initCache(config) {
  var env = config.env, persistence = config.persistence, platformInfo = config.platformInfo;
  var accessTokenKey = KEY_ACCESS_TOKEN + "_" + env;
  var accessTokenExpireKey = KEY_ACCESS_TOKEN_EXPIRE + "_" + env;
  var refreshTokenKey = KEY_REFRESH_TOKEN + "_" + env;
  var anonymousUuidKey = KEY_ANONYMOUS_UUID + "_" + env;
  var loginTypeKey = KEY_LOGIN_TYPE + "_" + env;
  var userInfoKey = USER_INFO_KEY + "_" + env;
  var keys2 = {
    accessTokenKey,
    accessTokenExpireKey,
    refreshTokenKey,
    anonymousUuidKey,
    loginTypeKey,
    userInfoKey
  };
  cacheMap[env] ? cacheMap[env].updatePersistence(persistence) : cacheMap[env] = new CloudbaseCache(__assign$a(__assign$a({}, config), {
    keys: keys2,
    platformInfo,
    alwaysLocalKeys: ["anonymousUuidKey"]
  }));
  localCacheMap[env] = localCacheMap[env] || new CloudbaseCache(__assign$a(__assign$a({}, config), {
    keys: keys2,
    platformInfo,
    persistence: "local"
  }));
}
function getCacheByEnvId(env) {
  return cacheMap[env];
}
function getLocalCache(env) {
  return localCacheMap[env];
}
var setUtilitiesSdkName = constants_1.setSdkName, setUtilitiesProtocol = constants_1.setProtocol;
var sdk_version = "";
var sdk_name = "@cloudbase/js-sdk";
function setSdkVersion(version2) {
  sdk_version = version2;
}
function getSdkVersion() {
  return sdk_version;
}
function setSdkName(name2) {
  sdk_name = name2;
  setUtilitiesSdkName(name2);
}
function getSdkName$3() {
  return sdk_name;
}
var DATA_VERSION = "2020-01-10";
var PROTOCOL = typeof location !== "undefined" && location.protocol === "http:" ? "http:" : "https:";
var BASE_URL = typeof process !== "undefined" && false ? "//tcb-pre.tencentcloudapi.com/web" : "//tcb-api.tencentcloudapi.com/web";
function setEndPoint(url, protocol) {
  BASE_URL = url;
  if (protocol) {
    PROTOCOL = protocol;
    setUtilitiesProtocol(protocol);
  }
}
function setRegionLevelEndpoint(env, region, protocol) {
  var endpoiont = region ? "//" + env + "." + region + ".tcb-api.tencentcloudapi.com/web" : "//" + env + ".ap-shanghai.tcb-api.tencentcloudapi.com/web";
  setEndPoint(endpoiont, protocol);
}
function getEndPoint() {
  return { BASE_URL, PROTOCOL };
}
var LOGINTYPE$1;
(function(LOGINTYPE2) {
  LOGINTYPE2["ANONYMOUS"] = "ANONYMOUS";
  LOGINTYPE2["WECHAT"] = "WECHAT";
  LOGINTYPE2["CUSTOM"] = "CUSTOM";
  LOGINTYPE2["NULL"] = "NULL";
})(LOGINTYPE$1 || (LOGINTYPE$1 = {}));
var EVENTS$1 = {
  LOGIN_STATE_CHANGED: "loginStateChanged",
  LOGIN_STATE_EXPIRED: "loginStateExpire",
  LOGIN_TYPE_CHANGED: "loginTypeChanged",
  ANONYMOUS_CONVERTED: "anonymousConverted",
  ACCESS_TOKEN_REFRESHD: "refreshAccessToken"
};
var __assign$9 = globalThis && globalThis.__assign || function() {
  __assign$9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$9.apply(this, arguments);
};
var __awaiter$h = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$h = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var ERRORS$c = constants_1.ERRORS;
var genSeqId = utils_1.genSeqId, isFormData = utils_1.isFormData, formatUrl = utils_1.formatUrl, createSign = utils_1.createSign;
var RUNTIME$3 = adapters_1.RUNTIME;
var ACTIONS_WITHOUT_ACCESSTOKEN = [
  "auth.getJwt",
  "auth.logout",
  "auth.signInWithTicket",
  "auth.signInAnonymously",
  "auth.signIn",
  "auth.fetchAccessTokenWithRefreshToken",
  "auth.signUpWithEmailAndPassword",
  "auth.activateEndUserMail",
  "auth.sendPasswordResetEmail",
  "auth.resetPasswordWithToken",
  "auth.isUsernameRegistered"
];
function bindHooks(instance, name2, hooks2) {
  var originMethod = instance[name2];
  instance[name2] = function(options) {
    var data = {};
    var headers = {};
    hooks2.forEach(function(hook2) {
      var _a2 = hook2.call(instance, options), appendedData = _a2.data, appendedHeaders = _a2.headers;
      Object.assign(data, appendedData);
      Object.assign(headers, appendedHeaders);
    });
    var originData = options.data;
    originData && function() {
      if (isFormData(originData)) {
        for (var key in data) {
          originData.append(key, data[key]);
        }
        return;
      }
      options.data = __assign$9(__assign$9({}, originData), data);
    }();
    options.headers = __assign$9(__assign$9({}, options.headers || {}), headers);
    return originMethod.call(instance, options);
  };
}
function beforeEach() {
  var seqId = genSeqId();
  return {
    data: {
      seqId
    },
    headers: {
      "X-SDK-Version": "@cloudbase/js-sdk/" + getSdkVersion(),
      "x-seqid": seqId
    }
  };
}
var CloudbaseRequest = function() {
  function CloudbaseRequest2(config) {
    this._throwWhenRequestFail = false;
    this.config = config;
    this._reqClass = new Platform.adapter.reqClass({
      timeout: this.config.timeout,
      timeoutMsg: "[@cloudbase/js-sdk] \u8BF7\u6C42\u5728" + this.config.timeout / 1e3 + "s\u5185\u672A\u5B8C\u6210\uFF0C\u5DF2\u4E2D\u65AD",
      restrictedMethods: ["post"]
    });
    this._throwWhenRequestFail = config.throw || false;
    this._cache = getCacheByEnvId(this.config.env);
    this._localCache = getLocalCache(this.config.env);
    bindHooks(this._reqClass, "post", [beforeEach]);
    bindHooks(this._reqClass, "upload", [beforeEach]);
    bindHooks(this._reqClass, "download", [beforeEach]);
  }
  CloudbaseRequest2.prototype.post = function(options) {
    return __awaiter$h(this, void 0, void 0, function() {
      var res;
      return __generator$h(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._reqClass.post(options)];
          case 1:
            res = _a2.sent();
            return [2, res];
        }
      });
    });
  };
  CloudbaseRequest2.prototype.upload = function(options) {
    return __awaiter$h(this, void 0, void 0, function() {
      var res;
      return __generator$h(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._reqClass.upload(options)];
          case 1:
            res = _a2.sent();
            return [2, res];
        }
      });
    });
  };
  CloudbaseRequest2.prototype.download = function(options) {
    return __awaiter$h(this, void 0, void 0, function() {
      var res;
      return __generator$h(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._reqClass.download(options)];
          case 1:
            res = _a2.sent();
            return [2, res];
        }
      });
    });
  };
  CloudbaseRequest2.prototype.refreshAccessToken = function() {
    return __awaiter$h(this, void 0, void 0, function() {
      var result, err, e_1;
      return __generator$h(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!this._refreshAccessTokenPromise) {
              this._refreshAccessTokenPromise = this._refreshAccessToken();
            }
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, this._refreshAccessTokenPromise];
          case 2:
            result = _a2.sent();
            return [3, 4];
          case 3:
            e_1 = _a2.sent();
            err = e_1;
            return [3, 4];
          case 4:
            this._refreshAccessTokenPromise = null;
            this._shouldRefreshAccessTokenHook = null;
            if (err) {
              throw err;
            }
            return [2, result];
        }
      });
    });
  };
  CloudbaseRequest2.prototype.getAccessToken = function() {
    return __awaiter$h(this, void 0, void 0, function() {
      var _a2, accessTokenKey, accessTokenExpireKey, refreshTokenKey, refreshToken, accessToken, accessTokenExpire, _b, shouldRefreshAccessToken, _c;
      return __generator$h(this, function(_d) {
        switch (_d.label) {
          case 0:
            _a2 = this._cache.keys, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey, refreshTokenKey = _a2.refreshTokenKey;
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 1:
            refreshToken = _d.sent();
            if (!refreshToken) {
              throw new Error(JSON.stringify({
                code: ERRORS$c.OPERATION_FAIL,
                msg: "refresh token is not exist, your local data might be messed up, please retry after clear localStorage or sessionStorage"
              }));
            }
            return [4, this._cache.getStoreAsync(accessTokenKey)];
          case 2:
            accessToken = _d.sent();
            _b = Number;
            return [4, this._cache.getStoreAsync(accessTokenExpireKey)];
          case 3:
            accessTokenExpire = _b.apply(void 0, [_d.sent()]);
            shouldRefreshAccessToken = true;
            _c = this._shouldRefreshAccessTokenHook;
            if (!_c)
              return [3, 5];
            return [4, this._shouldRefreshAccessTokenHook(accessToken, accessTokenExpire)];
          case 4:
            _c = !_d.sent();
            _d.label = 5;
          case 5:
            if (_c) {
              shouldRefreshAccessToken = false;
            }
            if (!((!accessToken || !accessTokenExpire || accessTokenExpire < Date.now()) && shouldRefreshAccessToken))
              return [3, 7];
            return [4, this.refreshAccessToken()];
          case 6:
            return [2, _d.sent()];
          case 7:
            return [2, {
              accessToken,
              accessTokenExpire
            }];
        }
      });
    });
  };
  CloudbaseRequest2.prototype.request = function(action, params, options) {
    return __awaiter$h(this, void 0, void 0, function() {
      var tcbTraceKey, contentType, tmpObj, refreshTokenKey, refreshToken, _a2, payload, key, key, opts, traceHeader, _b, appSign, appSecret, timestamp, appAccessKey, appAccessKeyId, sign2, parse, inQuery, search, formatQuery, _c, BASE_URL2, PROTOCOL2, newUrl, res, resTraceHeader;
      return __generator$h(this, function(_d) {
        switch (_d.label) {
          case 0:
            tcbTraceKey = "x-tcb-trace_" + this.config.env;
            contentType = "application/x-www-form-urlencoded";
            tmpObj = __assign$9({ action, dataVersion: DATA_VERSION, env: this.config.env }, params);
            if (!(ACTIONS_WITHOUT_ACCESSTOKEN.indexOf(action) === -1))
              return [3, 3];
            refreshTokenKey = this._cache.keys.refreshTokenKey;
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 1:
            refreshToken = _d.sent();
            if (!refreshToken)
              return [3, 3];
            _a2 = tmpObj;
            return [4, this.getAccessToken()];
          case 2:
            _a2.access_token = _d.sent().accessToken;
            _d.label = 3;
          case 3:
            if (action === "storage.uploadFile") {
              payload = new FormData();
              for (key in payload) {
                if (payload.hasOwnProperty(key) && payload[key] !== void 0) {
                  payload.append(key, tmpObj[key]);
                }
              }
              contentType = "multipart/form-data";
            } else {
              contentType = "application/json;charset=UTF-8";
              payload = {};
              for (key in tmpObj) {
                if (tmpObj[key] !== void 0) {
                  payload[key] = tmpObj[key];
                }
              }
            }
            opts = {
              headers: {
                "content-type": contentType
              }
            };
            if (options === null || options === void 0 ? void 0 : options["onUploadProgress"]) {
              opts.onUploadProgress = options["onUploadProgress"];
            }
            if (this.config.region) {
              opts.headers["X-TCB-Region"] = this.config.region;
            }
            traceHeader = this._localCache.getStore(tcbTraceKey);
            if (traceHeader) {
              opts.headers["X-TCB-Trace"] = traceHeader;
            }
            if (Platform.runtime !== RUNTIME$3.WEB) {
              _b = this.config, appSign = _b.appSign, appSecret = _b.appSecret;
              timestamp = Date.now();
              appAccessKey = appSecret.appAccessKey, appAccessKeyId = appSecret.appAccessKeyId;
              sign2 = createSign({
                data: {},
                timestamp,
                appAccessKeyId,
                appSign
              }, appAccessKey);
              opts.headers["X-TCB-App-Source"] = "timestamp=" + timestamp + ";appAccessKeyId=" + appAccessKeyId + ";appSign=" + appSign + ";sign=" + sign2;
            }
            parse = params.parse, inQuery = params.inQuery, search = params.search;
            formatQuery = {
              env: this.config.env
            };
            parse && (formatQuery.parse = true);
            inQuery && (formatQuery = __assign$9(__assign$9({}, inQuery), formatQuery));
            _c = getEndPoint(), BASE_URL2 = _c.BASE_URL, PROTOCOL2 = _c.PROTOCOL;
            newUrl = formatUrl(PROTOCOL2, BASE_URL2, formatQuery);
            if (search) {
              newUrl += search;
            }
            return [4, this.post(__assign$9({ url: newUrl, data: payload }, opts))];
          case 4:
            res = _d.sent();
            resTraceHeader = res.header && res.header["x-tcb-trace"];
            if (resTraceHeader) {
              this._localCache.setStore(tcbTraceKey, resTraceHeader);
            }
            if (Number(res.status) !== 200 && Number(res.statusCode) !== 200 || !res.data) {
              throw new Error("network request error");
            }
            return [2, res];
        }
      });
    });
  };
  CloudbaseRequest2.prototype.send = function(action, data) {
    if (data === void 0) {
      data = {};
    }
    return __awaiter$h(this, void 0, void 0, function() {
      var response;
      return __generator$h(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this.request(action, data, { onUploadProgress: data.onUploadProgress })];
          case 1:
            response = _a2.sent();
            if (!(response.data.code === "ACCESS_TOKEN_EXPIRED" && ACTIONS_WITHOUT_ACCESSTOKEN.indexOf(action) === -1))
              return [3, 4];
            return [4, this.refreshAccessToken()];
          case 2:
            _a2.sent();
            return [4, this.request(action, data, { onUploadProgress: data.onUploadProgress })];
          case 3:
            response = _a2.sent();
            _a2.label = 4;
          case 4:
            if (response.data.code && this._throwWhenRequestFail) {
              throw new Error(JSON.stringify({
                code: ERRORS$c.OPERATION_FAIL,
                msg: "[" + response.data.code + "] " + response.data.message
              }));
            }
            return [2, response.data];
        }
      });
    });
  };
  CloudbaseRequest2.prototype._refreshAccessToken = function(retryNum) {
    if (retryNum === void 0) {
      retryNum = 1;
    }
    return __awaiter$h(this, void 0, void 0, function() {
      var _a2, accessTokenKey, accessTokenExpireKey, refreshTokenKey, loginTypeKey, anonymousUuidKey, refreshToken, params, response, code2, isAnonymous, anonymous_uuid, refresh_token, res;
      return __generator$h(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey, refreshTokenKey = _a2.refreshTokenKey, loginTypeKey = _a2.loginTypeKey, anonymousUuidKey = _a2.anonymousUuidKey;
            return [4, this._cache.removeStoreAsync(accessTokenKey)];
          case 1:
            _b.sent();
            return [4, this._cache.removeStoreAsync(accessTokenExpireKey)];
          case 2:
            _b.sent();
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 3:
            refreshToken = _b.sent();
            if (!refreshToken) {
              throw new Error(JSON.stringify({
                code: ERRORS$c.INVALID_OPERATION,
                msg: "not login"
              }));
            }
            params = {
              refresh_token: refreshToken
            };
            return [4, this.request("auth.fetchAccessTokenWithRefreshToken", params)];
          case 4:
            response = _b.sent();
            if (!response.data.code)
              return [3, 12];
            code2 = response.data.code;
            if (!(code2 === "SIGN_PARAM_INVALID" || code2 === "REFRESH_TOKEN_EXPIRED" || code2 === "INVALID_REFRESH_TOKEN"))
              return [3, 11];
            return [4, this._cache.getStoreAsync(loginTypeKey)];
          case 5:
            isAnonymous = _b.sent() === LOGINTYPE$1.ANONYMOUS;
            if (!(isAnonymous && code2 === "INVALID_REFRESH_TOKEN"))
              return [3, 9];
            return [4, this._cache.getStoreAsync(anonymousUuidKey)];
          case 6:
            anonymous_uuid = _b.sent();
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 7:
            refresh_token = _b.sent();
            return [4, this.send("auth.signInAnonymously", {
              anonymous_uuid,
              refresh_token
            })];
          case 8:
            res = _b.sent();
            this._setRefreshToken(res.refresh_token);
            if (retryNum >= 1) {
              return [2, this._refreshAccessToken(--retryNum)];
            } else {
              throw new Error(JSON.stringify({
                code: ERRORS$c.OPERATION_FAIL,
                message: "\u91CD\u8BD5\u83B7\u53D6 refresh token \u5931\u8D25"
              }));
            }
          case 9:
            cloudbase$1.fire(EVENTS$1.LOGIN_STATE_EXPIRED);
            return [4, this._cache.removeStoreAsync(refreshTokenKey)];
          case 10:
            _b.sent();
            _b.label = 11;
          case 11:
            throw new Error(JSON.stringify({
              code: ERRORS$c.NETWORK_ERROR,
              msg: "refresh access_token failed\uFF1A" + response.data.code
            }));
          case 12:
            if (!response.data.access_token)
              return [3, 15];
            cloudbase$1.fire(EVENTS$1.ACCESS_TOKEN_REFRESHD);
            return [4, this._cache.setStoreAsync(accessTokenKey, response.data.access_token)];
          case 13:
            _b.sent();
            return [4, this._cache.setStoreAsync(accessTokenExpireKey, response.data.access_token_expire + Date.now())];
          case 14:
            _b.sent();
            return [2, {
              accessToken: response.data.access_token,
              accessTokenExpire: response.data.access_token_expire
            }];
          case 15:
            if (!response.data.refresh_token)
              return [3, 19];
            return [4, this._cache.removeStoreAsync(refreshTokenKey)];
          case 16:
            _b.sent();
            return [4, this._cache.setStoreAsync(refreshTokenKey, response.data.refresh_token)];
          case 17:
            _b.sent();
            return [4, this._refreshAccessToken()];
          case 18:
            _b.sent();
            _b.label = 19;
          case 19:
            return [2];
        }
      });
    });
  };
  CloudbaseRequest2.prototype._setRefreshToken = function(refreshToken) {
    return __awaiter$h(this, void 0, void 0, function() {
      var _a2, accessTokenKey, accessTokenExpireKey, refreshTokenKey;
      return __generator$h(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey, refreshTokenKey = _a2.refreshTokenKey;
            return [4, this._cache.removeStoreAsync(accessTokenKey)];
          case 1:
            _b.sent();
            return [4, this._cache.removeStoreAsync(accessTokenExpireKey)];
          case 2:
            _b.sent();
            return [4, this._cache.setStoreAsync(refreshTokenKey, refreshToken)];
          case 3:
            _b.sent();
            return [2];
        }
      });
    });
  };
  return CloudbaseRequest2;
}();
var requestMap = {};
function initRequest(config) {
  requestMap[config.env] = new CloudbaseRequest(__assign$9(__assign$9({}, config), { throw: true }));
}
function getRequestByEnvId(env) {
  return requestMap[env];
}
var __assign$8 = globalThis && globalThis.__assign || function() {
  __assign$8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$8.apply(this, arguments);
};
var __decorate$a = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$a = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$g = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$g = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var useAdapters = adapters_1.useAdapters, useDefaultAdapter = adapters_1.useDefaultAdapter, RUNTIME$2 = adapters_1.RUNTIME;
var ERRORS$b = constants_1.ERRORS, COMMUNITY_SITE_URL$a = constants_1.COMMUNITY_SITE_URL;
var printWarn$3 = utils_1.printWarn;
var catchErrorsDecorator$a = helpers_1.catchErrorsDecorator;
var DEFAULT_INIT_CONFIG = {
  timeout: 15e3,
  persistence: "local"
};
var MAX_TIMEOUT = 1e3 * 60 * 10;
var MIN_TIMEOUT = 100;
var extensionMap = {};
var Cloudbase = function() {
  function Cloudbase2(config) {
    this._config = config ? config : this._config;
    this.authInstance = null;
  }
  Object.defineProperty(Cloudbase2.prototype, "config", {
    get: function() {
      return this._config;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Cloudbase2.prototype, "platform", {
    get: function() {
      return Platform;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Cloudbase2.prototype, "cache", {
    get: function() {
      return getCacheByEnvId(this._config.env);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Cloudbase2.prototype, "localCache", {
    get: function() {
      return getLocalCache(this._config.env);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Cloudbase2.prototype, "request", {
    get: function() {
      return getRequestByEnvId(this._config.env);
    },
    enumerable: false,
    configurable: true
  });
  Cloudbase2.prototype.init = function(config) {
    if (!config.env) {
      throw new Error(JSON.stringify({
        code: ERRORS$b.INVALID_PARAMS,
        msg: "env must not be specified"
      }));
    }
    if (!Platform.adapter) {
      this._useDefaultAdapter();
    }
    this.requestClient = new Platform.adapter.reqClass({
      timeout: config.timeout || 5e3,
      timeoutMsg: "[" + getSdkName$3() + "][REQUEST TIMEOUT] request had been abort since didn't finished within" + config.timeout / 1e3 + "s"
    });
    if (Platform.runtime !== RUNTIME$2.WEB) {
      if (!config.appSecret) {
        throw new Error(JSON.stringify({
          code: ERRORS$b.INVALID_PARAMS,
          msg: "invalid appSecret"
        }));
      }
      var appSign_1 = Platform.adapter.getAppSign ? Platform.adapter.getAppSign() : "";
      if (config.appSign && appSign_1 && config.appSign !== appSign_1) {
        throw new Error(JSON.stringify({
          code: ERRORS$b.INVALID_PARAMS,
          msg: "invalid appSign"
        }));
      }
      appSign_1 && (config.appSign = appSign_1);
      if (!config.appSign) {
        throw new Error(JSON.stringify({
          code: ERRORS$b.INVALID_PARAMS,
          msg: "invalid appSign"
        }));
      }
    }
    this._config = __assign$8(__assign$8({}, DEFAULT_INIT_CONFIG), config);
    this._config.timeout = this._formatTimeout(this._config.timeout);
    var _a2 = this._config, env = _a2.env, persistence = _a2.persistence, debug = _a2.debug, timeout = _a2.timeout, appSecret = _a2.appSecret, appSign = _a2.appSign;
    initCache({ env, persistence, debug, platformInfo: this.platform });
    initRequest({ env, region: config.region || "", timeout, appSecret, appSign });
    if (config.region) {
      setRegionLevelEndpoint(env, config.region || "");
    }
    var app = new Cloudbase2(this._config);
    app.requestClient = this.requestClient;
    return app;
  };
  Cloudbase2.prototype.updateConfig = function(config) {
    var persistence = config.persistence, debug = config.debug;
    this._config.persistence = persistence;
    this._config.debug = debug;
    initCache({ env: this._config.env, persistence, debug, platformInfo: this.platform });
  };
  Cloudbase2.prototype.registerExtension = function(ext) {
    extensionMap[ext.name] = ext;
  };
  Cloudbase2.prototype.invokeExtension = function(name2, opts) {
    return __awaiter$g(this, void 0, void 0, function() {
      var ext;
      return __generator$g(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            ext = extensionMap[name2];
            if (!ext) {
              throw new Error(JSON.stringify({
                code: ERRORS$b.INVALID_PARAMS,
                msg: "extension:" + name2 + " must be registered before invoke"
              }));
            }
            return [4, ext.invoke(opts, this)];
          case 1:
            return [2, _a2.sent()];
        }
      });
    });
  };
  Cloudbase2.prototype.useAdapters = function(adapters2) {
    var _a2 = useAdapters(adapters2) || {}, adapter2 = _a2.adapter, runtime2 = _a2.runtime;
    adapter2 && (Platform.adapter = adapter2);
    runtime2 && (Platform.runtime = runtime2);
  };
  Cloudbase2.prototype.registerHook = function(hook2) {
    registerHook(Cloudbase2, hook2);
  };
  Cloudbase2.prototype.registerComponent = function(component2) {
    registerComponent(Cloudbase2, component2);
  };
  Cloudbase2.prototype.registerVersion = function(version2) {
    setSdkVersion(version2);
  };
  Cloudbase2.prototype.registerSdkName = function(name2) {
    setSdkName(name2);
  };
  Cloudbase2.prototype.registerEndPoint = function(url, protocol) {
    setEndPoint(url, protocol);
  };
  Cloudbase2.prototype._useDefaultAdapter = function() {
    var _a2 = useDefaultAdapter(), adapter2 = _a2.adapter, runtime2 = _a2.runtime;
    Platform.adapter = adapter2;
    Platform.runtime = runtime2;
  };
  Cloudbase2.prototype._formatTimeout = function(timeout) {
    switch (true) {
      case timeout > MAX_TIMEOUT:
        printWarn$3(ERRORS$b.INVALID_PARAMS, "timeout is greater than maximum value[10min]");
        return MAX_TIMEOUT;
      case timeout < MIN_TIMEOUT:
        printWarn$3(ERRORS$b.INVALID_PARAMS, "timeout is less than maximum value[100ms]");
        return MIN_TIMEOUT;
      default:
        return timeout;
    }
  };
  __decorate$a([
    catchErrorsDecorator$a({
      mode: "sync",
      title: "Cloudbase \u521D\u59CB\u5316\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 cloudbase.init() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5982\u679C\u662F\u975E\u6D4F\u89C8\u5668\u73AF\u5883\uFF0C\u662F\u5426\u914D\u7F6E\u4E86\u5B89\u5168\u5E94\u7528\u6765\u6E90\uFF08https://docs.cloudbase.net/api-reference/webv2/adapter.html#jie-ru-liu-cheng\uFF09",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$a
      ]
    }),
    __metadata$a("design:type", Function),
    __metadata$a("design:paramtypes", [Object]),
    __metadata$a("design:returntype", Cloudbase2)
  ], Cloudbase2.prototype, "init", null);
  __decorate$a([
    catchErrorsDecorator$a({
      title: "\u8C03\u7528\u6269\u5C55\u80FD\u529B\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 invokeExtension() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u88AB\u8C03\u7528\u7684\u6269\u5C55\u80FD\u529B\u662F\u5426\u5DF2\u7ECF\u5B89\u88C5\u5E76\u901A\u8FC7 registerExtension() \u6CE8\u518C",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$a
      ]
    }),
    __metadata$a("design:type", Function),
    __metadata$a("design:paramtypes", [String, Object]),
    __metadata$a("design:returntype", Promise)
  ], Cloudbase2.prototype, "invokeExtension", null);
  return Cloudbase2;
}();
var cloudbase$1 = new Cloudbase();
cloudbase$1.useAdapters(adapter);
var __awaiter$f = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$f = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var AuthProvider = function() {
  function AuthProvider2(config) {
    this._config = config;
    this._cache = config.cache;
    this._request = config.request;
  }
  AuthProvider2.prototype.checkLocalLoginState = function() {
    return __awaiter$f(this, void 0, void 0, function() {
      var _a2, accessTokenKey, accessTokenExpireKey, accessToken, accessTokenExpire, loginState;
      return __generator$f(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey;
            return [4, this._cache.getStoreAsync(accessTokenKey)];
          case 1:
            accessToken = _b.sent();
            return [4, this._cache.getStoreAsync(accessTokenExpireKey)];
          case 2:
            accessTokenExpire = _b.sent();
            if (!accessToken)
              return [3, 7];
            if (!(accessTokenExpire && accessTokenExpire > Date.now()))
              return [3, 4];
            loginState = new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            });
            return [4, loginState.checkLocalStateAsync()];
          case 3:
            _b.sent();
            return [2, loginState];
          case 4:
            return [4, this._cache.removeStoreAsync(accessTokenKey)];
          case 5:
            _b.sent();
            return [4, this._cache.removeStoreAsync(accessTokenExpireKey)];
          case 6:
            _b.sent();
            _b.label = 7;
          case 7:
            return [2];
        }
      });
    });
  };
  AuthProvider2.prototype.setRefreshToken = function(refreshToken) {
    return __awaiter$f(this, void 0, void 0, function() {
      var _a2, accessTokenKey, accessTokenExpireKey, refreshTokenKey;
      return __generator$f(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey, refreshTokenKey = _a2.refreshTokenKey;
            return [4, this._cache.removeStoreAsync(accessTokenKey)];
          case 1:
            _b.sent();
            return [4, this._cache.removeStoreAsync(accessTokenExpireKey)];
          case 2:
            _b.sent();
            return [4, this._cache.setStoreAsync(refreshTokenKey, refreshToken)];
          case 3:
            _b.sent();
            return [2];
        }
      });
    });
  };
  AuthProvider2.prototype.setAccessToken = function(accessToken, accessTokenExpire) {
    return __awaiter$f(this, void 0, void 0, function() {
      var _a2, accessTokenKey, accessTokenExpireKey;
      return __generator$f(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey;
            return [4, this._cache.setStoreAsync(accessTokenKey, accessToken)];
          case 1:
            _b.sent();
            return [4, this._cache.setStoreAsync(accessTokenExpireKey, accessTokenExpire)];
          case 2:
            _b.sent();
            return [2];
        }
      });
    });
  };
  AuthProvider2.prototype.refreshUserInfo = function() {
    return __awaiter$f(this, void 0, void 0, function() {
      var action, userInfo;
      return __generator$f(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            action = "auth.getUserInfo";
            return [4, this._request.send(action, {})];
          case 1:
            userInfo = _a2.sent().data;
            return [4, this.setLocalUserInfo(userInfo)];
          case 2:
            _a2.sent();
            return [2, userInfo];
        }
      });
    });
  };
  AuthProvider2.prototype.setLocalUserInfo = function(userInfo) {
    return __awaiter$f(this, void 0, void 0, function() {
      var userInfoKey;
      return __generator$f(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            userInfoKey = this._cache.keys.userInfoKey;
            return [4, this._cache.setStoreAsync(userInfoKey, userInfo)];
          case 1:
            _a2.sent();
            return [2];
        }
      });
    });
  };
  return AuthProvider2;
}();
var LOGINTYPE;
(function(LOGINTYPE2) {
  LOGINTYPE2["ANONYMOUS"] = "ANONYMOUS";
  LOGINTYPE2["WECHAT"] = "WECHAT";
  LOGINTYPE2["WECHAT_PUBLIC"] = "WECHAT-PUBLIC";
  LOGINTYPE2["WECHAT_OPEN"] = "WECHAT-OPEN";
  LOGINTYPE2["CUSTOM"] = "CUSTOM";
  LOGINTYPE2["EMAIL"] = "EMAIL";
  LOGINTYPE2["USERNAME"] = "USERNAME";
  LOGINTYPE2["NULL"] = "NULL";
  LOGINTYPE2["PHONE"] = "PHONE";
})(LOGINTYPE || (LOGINTYPE = {}));
var __extends$b = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$9 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$9 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$e = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$e = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getSdkName$2 = constants_1.getSdkName, ERRORS$a = constants_1.ERRORS, COMMUNITY_SITE_URL$9 = constants_1.COMMUNITY_SITE_URL;
var RUNTIME$1 = adapters_1.RUNTIME;
var getQuery = utils_1.getQuery, getHash = utils_1.getHash, removeParam = utils_1.removeParam, printWarn$2 = utils_1.printWarn;
var catchErrorsDecorator$9 = helpers_1.catchErrorsDecorator;
var WeixinAuthProvider = function(_super) {
  __extends$b(WeixinAuthProvider2, _super);
  function WeixinAuthProvider2(config, appid, scope, state) {
    var _this = _super.call(this, config) || this;
    _this._runtime = config.runtime;
    _this._appid = appid;
    _this._scope = scope;
    _this._state = state || "weixin";
    return _this;
  }
  WeixinAuthProvider2.prototype.signIn = function() {
    return __awaiter$e(this, void 0, void 0, function() {
      return __generator$e(this, function(_a2) {
        return [2, printWarn$2(ERRORS$a.OPERATION_FAIL, "API signIn has been deprecated, please use signInWithRedirect insteed")];
      });
    });
  };
  WeixinAuthProvider2.prototype.signInWithRedirect = function() {
    return __awaiter$e(this, void 0, void 0, function() {
      return __generator$e(this, function(_a2) {
        return [2, this._redirect()];
      });
    });
  };
  WeixinAuthProvider2.prototype.getRedirectResult = function(options) {
    return __awaiter$e(this, void 0, void 0, function() {
      var code2;
      return __generator$e(this, function(_a2) {
        code2 = getWeixinCode();
        if (!code2) {
          return [2, null];
        }
        return [2, this._signInWithCode(code2, options)];
      });
    });
  };
  WeixinAuthProvider2.prototype.getLinkRedirectResult = function(options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter$e(this, void 0, void 0, function() {
      var _a2, withUnionId, code2, appid, loginType, hybridMiniapp;
      return __generator$e(this, function(_b) {
        _a2 = options.withUnionId, withUnionId = _a2 === void 0 ? false : _a2;
        code2 = getWeixinCode();
        if (!code2) {
          return [2, null];
        }
        appid = this._appid;
        loginType = function(scope) {
          switch (scope) {
            case "snsapi_login":
              return "WECHAT-OPEN";
            default:
              return "WECHAT-PUBLIC";
          }
        }(this._scope);
        hybridMiniapp = this._runtime === RUNTIME$1.WX_MP ? "1" : "0";
        return [2, this._request.send("auth.linkWithWeixinCode", {
          payload: {
            appid,
            loginType,
            code: code2,
            hybridMiniapp,
            withUnionId
          }
        })];
      });
    });
  };
  WeixinAuthProvider2.prototype._redirect = function() {
    var currUrl = removeParam("code", location.href);
    currUrl = removeParam("state", currUrl);
    currUrl = encodeURIComponent(currUrl);
    var host = "//open.weixin.qq.com/connect/oauth2/authorize";
    if (this._scope === "snsapi_login") {
      host = "//open.weixin.qq.com/connect/qrconnect";
    }
    try {
      location.href = host + "?appid=" + this._appid + "&redirect_uri=" + currUrl + "&response_type=code&scope=" + this._scope + "&state=" + this._state + "#wechat_redirect";
    } catch (e) {
      throw new Error("[" + getSdkName$2() + "][" + ERRORS$a.UNKOWN_ERROR + "]" + e);
    }
  };
  WeixinAuthProvider2.prototype._signInWithCode = function(code2, options) {
    return __awaiter$e(this, void 0, void 0, function() {
      var _a2, accessTokenKey, accessTokenExpireKey, refreshTokenKey, loginType, refreshTokenRes, refreshToken, loginState;
      return __generator$e(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey, refreshTokenKey = _a2.refreshTokenKey;
            loginType = function(scope) {
              switch (scope) {
                case "snsapi_login":
                  return "WECHAT-OPEN";
                default:
                  return "WECHAT-PUBLIC";
              }
            }(this._scope);
            return [4, this._getRefreshTokenByWXCode(this._appid, loginType, code2, options)];
          case 1:
            refreshTokenRes = _b.sent();
            refreshToken = refreshTokenRes.refreshToken;
            return [4, this._cache.setStoreAsync(refreshTokenKey, refreshToken)];
          case 2:
            _b.sent();
            if (!refreshTokenRes.accessToken)
              return [3, 4];
            return [4, this._cache.setStoreAsync(accessTokenKey, refreshTokenRes.accessToken)];
          case 3:
            _b.sent();
            _b.label = 4;
          case 4:
            if (!refreshTokenRes.accessTokenExpire)
              return [3, 6];
            return [4, this._cache.setStoreAsync(accessTokenExpireKey, String(refreshTokenRes.accessTokenExpire + Date.now()))];
          case 5:
            _b.sent();
            _b.label = 6;
          case 6:
            eventBus.fire(EVENTS.LOGIN_STATE_CHANGED);
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, {
              env: this._config.env,
              loginType: LOGINTYPE.WECHAT,
              persistence: this._config.persistence
            });
            return [4, this.refreshUserInfo()];
          case 7:
            _b.sent();
            loginState = new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            });
            return [4, loginState.checkLocalStateAsync()];
          case 8:
            _b.sent();
            return [2, loginState];
        }
      });
    });
  };
  WeixinAuthProvider2.prototype._getRefreshTokenByWXCode = function(appid, loginType, code2, options) {
    if (options === void 0) {
      options = {};
    }
    return __awaiter$e(this, void 0, void 0, function() {
      var _a2, withUnionId, _b, createUser, syncUserInfo, action, hybridMiniapp;
      return __generator$e(this, function(_c) {
        _a2 = options.withUnionId, withUnionId = _a2 === void 0 ? false : _a2, _b = options.createUser, createUser = _b === void 0 ? true : _b;
        syncUserInfo = this._scope === "snsapi_base" ? false : options.syncUserInfo || false;
        action = "auth.signIn";
        hybridMiniapp = this._runtime === RUNTIME$1.WX_MP ? "1" : "0";
        return [2, this._request.send(action, {
          appid,
          loginType,
          hybridMiniapp,
          syncUserInfo,
          loginCredential: code2,
          withUnionId,
          createUser
        }).then(function(res) {
          if (res.code) {
            throw new Error("[" + getSdkName$2() + "][" + ERRORS$a.OPERATION_FAIL + "] failed login via wechat: " + res.code);
          }
          if (res.refresh_token) {
            return {
              refreshToken: res.refresh_token,
              accessToken: res.access_token,
              accessTokenExpire: res.access_token_expire
            };
          } else {
            throw new Error("[" + getSdkName$2() + "][" + ERRORS$a.OPERATION_FAIL + "] action:getJwt not return refreshToken");
          }
        })];
      });
    });
  };
  __decorate$9([
    catchErrorsDecorator$9({
      title: "\u8DF3\u8F6C\u5FAE\u4FE1\u516C\u4F17\u53F7\u6388\u6743\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().weixinAuthProvider().signInWithRedirect() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$9
      ]
    }),
    __metadata$9("design:type", Function),
    __metadata$9("design:paramtypes", []),
    __metadata$9("design:returntype", Promise)
  ], WeixinAuthProvider2.prototype, "signInWithRedirect", null);
  __decorate$9([
    catchErrorsDecorator$9({
      title: "\u5FAE\u4FE1\u516C\u4F17\u53F7\u767B\u5F55\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().weixinAuthProvider().getRedirectResult() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u5FAE\u4FE1\u516C\u4F17\u53F7\u767B\u5F55\u6388\u6743",
        "  3 - \u5FAE\u4FE1\u516C\u4F17\u53F7\u7684 AppId \u4E0E AppSecret \u914D\u7F6E\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$9
      ]
    }),
    __metadata$9("design:type", Function),
    __metadata$9("design:paramtypes", [Object]),
    __metadata$9("design:returntype", Promise)
  ], WeixinAuthProvider2.prototype, "getRedirectResult", null);
  __decorate$9([
    catchErrorsDecorator$9({
      title: "\u83B7\u53D6\u5FAE\u4FE1\u91CD\u5B9A\u5411\u7ED1\u5B9A\u7ED3\u679C",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().weixinAuthProvider().getLinkRedirectResult() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u5FAE\u4FE1\u516C\u4F17\u53F7\u767B\u5F55\u6388\u6743",
        "  3 - \u5FAE\u4FE1\u516C\u4F17\u53F7\u7684 AppId \u4E0E AppSecret \u914D\u7F6E\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$9
      ]
    }),
    __metadata$9("design:type", Function),
    __metadata$9("design:paramtypes", [Object]),
    __metadata$9("design:returntype", Promise)
  ], WeixinAuthProvider2.prototype, "getLinkRedirectResult", null);
  return WeixinAuthProvider2;
}(AuthProvider);
function getWeixinCode() {
  return getQuery("code") || getHash("code");
}
var __extends$a = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$8 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$d = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$d = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var ERRORS$9 = constants_1.ERRORS, COMMUNITY_SITE_URL$8 = constants_1.COMMUNITY_SITE_URL;
var throwError$3 = utils_1.throwError, isString$7 = utils_1.isString;
var addEventListener$1 = events_1.addEventListener;
var catchErrorsDecorator$8 = helpers_1.catchErrorsDecorator;
var AnonymousAuthProvider = function(_super) {
  __extends$a(AnonymousAuthProvider2, _super);
  function AnonymousAuthProvider2(config) {
    var _this = _super.call(this, config) || this;
    _this._onConverted = _this._onConverted.bind(_this);
    addEventListener$1(EVENTS.ANONYMOUS_CONVERTED, _this._onConverted);
    return _this;
  }
  AnonymousAuthProvider2.prototype.signIn = function() {
    return __awaiter$d(this, void 0, void 0, function() {
      var _a2, anonymousUuidKey, refreshTokenKey, anonymous_uuid, refresh_token, res, loginState;
      return __generator$d(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, this._cache.updatePersistenceAsync("local")];
          case 1:
            _b.sent();
            _a2 = this._cache.keys, anonymousUuidKey = _a2.anonymousUuidKey, refreshTokenKey = _a2.refreshTokenKey;
            return [4, this._cache.getStoreAsync(anonymousUuidKey)];
          case 2:
            anonymous_uuid = _b.sent();
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 3:
            refresh_token = _b.sent();
            return [4, this._request.send("auth.signInAnonymously", {
              anonymous_uuid,
              refresh_token
            })];
          case 4:
            res = _b.sent();
            if (!(res.uuid && res.refresh_token))
              return [3, 10];
            return [4, this._setAnonymousUUID(res.uuid)];
          case 5:
            _b.sent();
            return [4, this.setRefreshToken(res.refresh_token)];
          case 6:
            _b.sent();
            return [4, this._request.refreshAccessToken()];
          case 7:
            _b.sent();
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, {
              env: this._config.env,
              loginType: LOGINTYPE.ANONYMOUS,
              persistence: "local"
            });
            eventBus.fire(EVENTS.LOGIN_STATE_CHANGED);
            loginState = new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            });
            return [4, loginState.checkLocalStateAsync()];
          case 8:
            _b.sent();
            return [4, loginState.user.refresh()];
          case 9:
            _b.sent();
            return [2, loginState];
          case 10:
            throw new Error(JSON.stringify({
              code: ERRORS$9.OPERATION_FAIL,
              msg: JSON.stringify(res) || "anonymous signIn failed"
            }));
        }
      });
    });
  };
  AnonymousAuthProvider2.prototype.linkAndRetrieveDataWithTicket = function(ticket) {
    return __awaiter$d(this, void 0, void 0, function() {
      var _a2, anonymousUuidKey, refreshTokenKey, anonymous_uuid, refresh_token, res, loginState;
      return __generator$d(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!isString$7(ticket)) {
              throwError$3(ERRORS$9.INVALID_PARAMS, "ticket must be a string");
            }
            _a2 = this._cache.keys, anonymousUuidKey = _a2.anonymousUuidKey, refreshTokenKey = _a2.refreshTokenKey;
            return [4, this._cache.getStoreAsync(anonymousUuidKey)];
          case 1:
            anonymous_uuid = _b.sent();
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 2:
            refresh_token = _b.sent();
            return [4, this._request.send("auth.linkAndRetrieveDataWithTicket", {
              anonymous_uuid,
              refresh_token,
              ticket
            })];
          case 3:
            res = _b.sent();
            if (!res.refresh_token)
              return [3, 8];
            return [4, this._clearAnonymousUUID()];
          case 4:
            _b.sent();
            return [4, this.setRefreshToken(res.refresh_token)];
          case 5:
            _b.sent();
            return [4, this._request.refreshAccessToken()];
          case 6:
            _b.sent();
            eventBus.fire(EVENTS.ANONYMOUS_CONVERTED, { env: this._config.env });
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, { loginType: LOGINTYPE.CUSTOM, persistence: "local" });
            loginState = new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            });
            return [4, loginState.checkLocalStateAsync()];
          case 7:
            _b.sent();
            return [2, loginState];
          case 8:
            throwError$3(ERRORS$9.OPERATION_FAIL, JSON.stringify(res) || "linkAndRetrieveDataWithTicket failed");
            _b.label = 9;
          case 9:
            return [2];
        }
      });
    });
  };
  AnonymousAuthProvider2.prototype._setAnonymousUUID = function(id) {
    return __awaiter$d(this, void 0, void 0, function() {
      var _a2, anonymousUuidKey, loginTypeKey;
      return __generator$d(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, anonymousUuidKey = _a2.anonymousUuidKey, loginTypeKey = _a2.loginTypeKey;
            return [4, this._cache.removeStoreAsync(anonymousUuidKey)];
          case 1:
            _b.sent();
            return [4, this._cache.setStoreAsync(anonymousUuidKey, id)];
          case 2:
            _b.sent();
            return [4, this._cache.setStoreAsync(loginTypeKey, LOGINTYPE.ANONYMOUS)];
          case 3:
            _b.sent();
            return [2];
        }
      });
    });
  };
  AnonymousAuthProvider2.prototype._clearAnonymousUUID = function() {
    return __awaiter$d(this, void 0, void 0, function() {
      return __generator$d(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._cache.removeStoreAsync(this._cache.keys.anonymousUuidKey)];
          case 1:
            _a2.sent();
            return [2];
        }
      });
    });
  };
  AnonymousAuthProvider2.prototype._onConverted = function(ev) {
    return __awaiter$d(this, void 0, void 0, function() {
      var env;
      return __generator$d(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            env = ev.data.env;
            if (env !== this._config.env) {
              return [2];
            }
            return [4, this._cache.updatePersistenceAsync(this._config.persistence)];
          case 1:
            _a2.sent();
            return [2];
        }
      });
    });
  };
  __decorate$8([
    catchErrorsDecorator$8({
      title: "\u533F\u540D\u767B\u5F55\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u542F\u4E86\u533F\u540D\u767B\u5F55",
        "  2 - \u8C03\u7528 auth().anonymouseProvider().signIn() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$8
      ]
    }),
    __metadata$8("design:type", Function),
    __metadata$8("design:paramtypes", []),
    __metadata$8("design:returntype", Promise)
  ], AnonymousAuthProvider2.prototype, "signIn", null);
  return AnonymousAuthProvider2;
}(AuthProvider);
var __extends$9 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$7 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$c = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$c = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var ERRORS$8 = constants_1.ERRORS, COMMUNITY_SITE_URL$7 = constants_1.COMMUNITY_SITE_URL;
var isString$6 = utils_1.isString;
var catchErrorsDecorator$7 = helpers_1.catchErrorsDecorator;
var CustomAuthProvider = function(_super) {
  __extends$9(CustomAuthProvider2, _super);
  function CustomAuthProvider2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CustomAuthProvider2.prototype.signIn = function(ticket) {
    return __awaiter$c(this, void 0, void 0, function() {
      var refreshTokenKey, res, _a2, _b, _c, _d, loginState;
      return __generator$c(this, function(_e) {
        switch (_e.label) {
          case 0:
            if (!isString$6(ticket)) {
              throw new Error(JSON.stringify({
                code: ERRORS$8.INVALID_PARAMS,
                msg: "ticket must be a string"
              }));
            }
            refreshTokenKey = this._cache.keys.refreshTokenKey;
            _b = (_a2 = this._request).send;
            _c = ["auth.signInWithTicket"];
            _d = {
              ticket
            };
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 1:
            return [4, _b.apply(_a2, _c.concat([(_d.refresh_token = _e.sent() || "", _d)]))];
          case 2:
            res = _e.sent();
            if (!res.refresh_token)
              return [3, 7];
            return [4, this.setRefreshToken(res.refresh_token)];
          case 3:
            _e.sent();
            return [4, this._request.refreshAccessToken()];
          case 4:
            _e.sent();
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, {
              env: this._config.env,
              loginType: LOGINTYPE.CUSTOM,
              persistence: this._config.persistence
            });
            eventBus.fire(EVENTS.LOGIN_STATE_CHANGED);
            return [4, this.refreshUserInfo()];
          case 5:
            _e.sent();
            loginState = new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            });
            return [4, loginState.checkLocalStateAsync()];
          case 6:
            _e.sent();
            return [2, loginState];
          case 7:
            throw new Error(JSON.stringify({
              code: ERRORS$8.OPERATION_FAIL,
              msg: "custom signIn failed"
            }));
        }
      });
    });
  };
  __decorate$7([
    catchErrorsDecorator$7({
      title: "\u81EA\u5B9A\u4E49\u767B\u5F55\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u542F\u4E86\u81EA\u5B9A\u4E49\u767B\u5F55",
        "  2 - \u8C03\u7528 auth().customAuthProvider().signIn() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  3 - ticket \u662F\u5426\u5F52\u5C5E\u4E8E\u5F53\u524D\u73AF\u5883",
        "  4 - \u521B\u5EFA ticket \u7684\u81EA\u5B9A\u4E49\u767B\u5F55\u79C1\u94A5\u662F\u5426\u8FC7\u671F",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$7
      ]
    }),
    __metadata$7("design:type", Function),
    __metadata$7("design:paramtypes", [String]),
    __metadata$7("design:returntype", Promise)
  ], CustomAuthProvider2.prototype, "signIn", null);
  return CustomAuthProvider2;
}(AuthProvider);
var __extends$8 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$6 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$b = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$b = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var throwError$2 = utils_1.throwError, isString$5 = utils_1.isString;
var ERRORS$7 = constants_1.ERRORS, COMMUNITY_SITE_URL$6 = constants_1.COMMUNITY_SITE_URL;
var catchErrorsDecorator$6 = helpers_1.catchErrorsDecorator;
var EmailAuthProvider = function(_super) {
  __extends$8(EmailAuthProvider2, _super);
  function EmailAuthProvider2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  EmailAuthProvider2.prototype.signIn = function(email, password) {
    return __awaiter$b(this, void 0, void 0, function() {
      var refreshTokenKey, res, refresh_token, access_token, access_token_expire;
      return __generator$b(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!isString$5(email)) {
              throwError$2(ERRORS$7.INVALID_PARAMS, "email must be a string");
            }
            refreshTokenKey = this._cache.keys.refreshTokenKey;
            return [4, this._request.send("auth.signIn", {
              loginType: "EMAIL",
              email,
              password,
              refresh_token: this._cache.getStore(refreshTokenKey) || ""
            })];
          case 1:
            res = _a2.sent();
            refresh_token = res.refresh_token, access_token = res.access_token, access_token_expire = res.access_token_expire;
            if (!refresh_token)
              return [3, 8];
            return [4, this.setRefreshToken(refresh_token)];
          case 2:
            _a2.sent();
            if (!(access_token && access_token_expire))
              return [3, 4];
            return [4, this.setAccessToken(access_token, access_token_expire)];
          case 3:
            _a2.sent();
            return [3, 6];
          case 4:
            return [4, this._request.refreshAccessToken()];
          case 5:
            _a2.sent();
            _a2.label = 6;
          case 6:
            return [4, this.refreshUserInfo()];
          case 7:
            _a2.sent();
            eventBus.fire(EVENTS.LOGIN_STATE_CHANGED);
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, {
              env: this._config.env,
              loginType: LOGINTYPE.EMAIL,
              persistence: this._config.persistence
            });
            return [2, new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            })];
          case 8:
            if (res.code) {
              throwError$2(ERRORS$7.OPERATION_FAIL, "Email login fail[" + res.code + "] " + res.message);
            } else {
              throwError$2(ERRORS$7.OPERATION_FAIL, "Email login fail");
            }
            _a2.label = 9;
          case 9:
            return [2];
        }
      });
    });
  };
  EmailAuthProvider2.prototype.signUp = function(email, password) {
    return __awaiter$b(this, void 0, void 0, function() {
      return __generator$b(this, function(_a2) {
        return [2, this._request.send("auth.signUpWithEmailAndPassword", {
          email,
          password
        })];
      });
    });
  };
  EmailAuthProvider2.prototype.resetPassword = function(email) {
    return __awaiter$b(this, void 0, void 0, function() {
      return __generator$b(this, function(_a2) {
        return [2, this._request.send("auth.sendPasswordResetEmail", {
          email
        })];
      });
    });
  };
  EmailAuthProvider2.prototype.resetPasswordWithToken = function(token2, newPassword) {
    return __awaiter$b(this, void 0, void 0, function() {
      return __generator$b(this, function(_a2) {
        return [2, this._request.send("auth.resetPasswordWithToken", {
          token: token2,
          newPassword
        })];
      });
    });
  };
  EmailAuthProvider2.prototype.activate = function(token2) {
    return __awaiter$b(this, void 0, void 0, function() {
      return __generator$b(this, function(_a2) {
        return [2, this._request.send("auth.activateEndUserMail", {
          token: token2
        })];
      });
    });
  };
  __decorate$6([
    catchErrorsDecorator$6({
      title: "\u90AE\u7BB1\u5BC6\u7801\u767B\u5F55\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().emailAuthProvider() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u90AE\u7BB1\u767B\u5F55",
        "  3 - \u90AE\u7BB1\u5730\u5740\u4E0E\u5BC6\u7801\u662F\u5426\u5339\u914D",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$6
      ]
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", [String, String]),
    __metadata$6("design:returntype", Promise)
  ], EmailAuthProvider2.prototype, "signIn", null);
  __decorate$6([
    catchErrorsDecorator$6({
      title: "\u90AE\u7BB1\u6CE8\u518C\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().signUpWithEmailAndPassword() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u90AE\u7BB1\u767B\u5F55",
        "  3 - \u6B64\u90AE\u7BB1\u5730\u5740\u662F\u5426\u5DF2\u7ECF\u88AB\u5176\u4ED6\u7528\u6237\u5360\u7528",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$6
      ]
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", [String, String]),
    __metadata$6("design:returntype", Promise)
  ], EmailAuthProvider2.prototype, "signUp", null);
  __decorate$6([
    catchErrorsDecorator$6({
      title: "\u91CD\u7F6E\u5BC6\u7801\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().sendPasswordResetEmail() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u90AE\u7BB1\u767B\u5F55",
        "  3 - \u6B64\u90AE\u7BB1\u5730\u5740\u662F\u5426\u5DF2\u7ECF\u4E0E\u5F53\u524D\u7528\u6237\u7ED1\u5B9A",
        "  4 - \u6B64\u90AE\u7BB1\u5730\u5740\u662F\u5426\u5DF2\u7ECF\u88AB\u5176\u4ED6\u7528\u6237\u5360\u7528",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$6
      ]
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", [String]),
    __metadata$6("design:returntype", Promise)
  ], EmailAuthProvider2.prototype, "resetPassword", null);
  __decorate$6([
    catchErrorsDecorator$6({
      title: "\u91CD\u7F6E\u5BC6\u7801\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u90AE\u7BB1\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$6
      ]
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", [String, String]),
    __metadata$6("design:returntype", Promise)
  ], EmailAuthProvider2.prototype, "resetPasswordWithToken", null);
  __decorate$6([
    catchErrorsDecorator$6({
      title: "\u90AE\u7BB1\u6FC0\u6D3B\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u90AE\u7BB1\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$6
      ]
    }),
    __metadata$6("design:type", Function),
    __metadata$6("design:paramtypes", [String]),
    __metadata$6("design:returntype", Promise)
  ], EmailAuthProvider2.prototype, "activate", null);
  return EmailAuthProvider2;
}(AuthProvider);
var __extends$7 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$5 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$a = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$a = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var printWarn$1 = utils_1.printWarn;
var ERRORS$6 = constants_1.ERRORS, COMMUNITY_SITE_URL$5 = constants_1.COMMUNITY_SITE_URL;
var catchErrorsDecorator$5 = helpers_1.catchErrorsDecorator;
var UsernameAuthProvider = function(_super) {
  __extends$7(UsernameAuthProvider2, _super);
  function UsernameAuthProvider2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  UsernameAuthProvider2.prototype.signIn = function(username, password) {
    return __awaiter$a(this, void 0, void 0, function() {
      var refreshTokenKey, res, _a2, _b, _c, _d, refresh_token, access_token_expire, access_token;
      return __generator$a(this, function(_e) {
        switch (_e.label) {
          case 0:
            if (typeof username !== "string") {
              throw new Error(JSON.stringify({
                code: ERRORS$6.INVALID_PARAMS,
                msg: "username must be a string"
              }));
            }
            if (typeof password !== "string") {
              password = "";
              printWarn$1(ERRORS$6.INVALID_PARAMS, "password is empty");
            }
            refreshTokenKey = this._cache.keys.refreshTokenKey;
            _b = (_a2 = this._request).send;
            _c = ["auth.signIn"];
            _d = {
              loginType: LOGINTYPE.USERNAME,
              username,
              password
            };
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 1:
            return [4, _b.apply(_a2, _c.concat([(_d.refresh_token = _e.sent() || "", _d)]))];
          case 2:
            res = _e.sent();
            refresh_token = res.refresh_token, access_token_expire = res.access_token_expire, access_token = res.access_token;
            if (!refresh_token)
              return [3, 9];
            return [4, this.setRefreshToken(refresh_token)];
          case 3:
            _e.sent();
            if (!(access_token && access_token_expire))
              return [3, 5];
            return [4, this.setAccessToken(access_token, access_token_expire)];
          case 4:
            _e.sent();
            return [3, 7];
          case 5:
            return [4, this._request.refreshAccessToken()];
          case 6:
            _e.sent();
            _e.label = 7;
          case 7:
            return [4, this.refreshUserInfo()];
          case 8:
            _e.sent();
            eventBus.fire(EVENTS.LOGIN_STATE_CHANGED);
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, {
              env: this._config.env,
              loginType: LOGINTYPE.USERNAME,
              persistence: this._config.persistence
            });
            return [2, new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            })];
          case 9:
            if (res.code) {
              throw new Error(JSON.stringify({
                code: ERRORS$6.OPERATION_FAIL,
                msg: "login by username failed:[" + res.code + "] " + res.message
              }));
            } else {
              throw new Error(JSON.stringify({
                code: ERRORS$6.OPERATION_FAIL,
                msg: "login by username failed"
              }));
            }
          case 10:
            return [2];
        }
      });
    });
  };
  __decorate$5([
    catchErrorsDecorator$5({
      title: "\u7528\u6237\u540D\u5BC6\u7801\u767B\u5F55\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().signInWithUsernameAndPassword() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u7528\u6237\u540D\u5BC6\u7801\u767B\u5F55",
        "  3 - \u7528\u6237\u540D\u5BC6\u7801\u662F\u5426\u5339\u914D",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$5
      ]
    }),
    __metadata$5("design:type", Function),
    __metadata$5("design:paramtypes", [String, String]),
    __metadata$5("design:returntype", Promise)
  ], UsernameAuthProvider2.prototype, "signIn", null);
  return UsernameAuthProvider2;
}(AuthProvider);
var __extends$6 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate$4 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$9 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$9 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var throwError$1 = utils_1.throwError, isString$4 = utils_1.isString, transformPhone$1 = utils_1.transformPhone;
var ERRORS$5 = constants_1.ERRORS, COMMUNITY_SITE_URL$4 = constants_1.COMMUNITY_SITE_URL;
var catchErrorsDecorator$4 = helpers_1.catchErrorsDecorator;
var SIGN_METHOD = {
  SIGNIN: "SIGNIN",
  SIGNUP: "SIGNUP",
  FORCERESETPWD: "FORCERESETPWD"
};
var PhoneAuthProvider = function(_super) {
  __extends$6(PhoneAuthProvider2, _super);
  function PhoneAuthProvider2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PhoneAuthProvider2.prototype.signIn = function(param) {
    return __awaiter$9(this, void 0, void 0, function() {
      var phoneNumber, phoneCode, password, signMethod, refreshTokenKey, res, refresh_token, access_token, access_token_expire;
      return __generator$9(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            phoneNumber = param.phoneNumber, phoneCode = param.phoneCode, password = param.password, signMethod = param.signMethod;
            if (!isString$4(phoneNumber)) {
              throwError$1(ERRORS$5.INVALID_PARAMS, "phoneNumber must be a string");
            }
            if (!isString$4(phoneCode) && !isString$4(password)) {
              throwError$1(ERRORS$5.INVALID_PARAMS, "phoneCode or password must be a string");
            }
            if (!signMethod) {
              signMethod = SIGN_METHOD.SIGNIN;
            }
            refreshTokenKey = this._cache.keys.refreshTokenKey;
            return [4, this._request.send("auth.signIn", {
              loginType: LOGINTYPE.PHONE,
              phoneNumber: transformPhone$1(phoneNumber),
              phoneCode,
              password,
              refresh_token: this._cache.getStore(refreshTokenKey) || "",
              signMethod
            })];
          case 1:
            res = _a2.sent();
            refresh_token = res.refresh_token, access_token = res.access_token, access_token_expire = res.access_token_expire;
            if (!refresh_token)
              return [3, 8];
            return [4, this.setRefreshToken(refresh_token)];
          case 2:
            _a2.sent();
            if (!(access_token && access_token_expire))
              return [3, 4];
            return [4, this.setAccessToken(access_token, access_token_expire)];
          case 3:
            _a2.sent();
            return [3, 6];
          case 4:
            return [4, this._request.refreshAccessToken()];
          case 5:
            _a2.sent();
            _a2.label = 6;
          case 6:
            return [4, this.refreshUserInfo()];
          case 7:
            _a2.sent();
            eventBus.fire(EVENTS.LOGIN_STATE_CHANGED);
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, {
              env: this._config.env,
              loginType: LOGINTYPE.PHONE,
              persistence: this._config.persistence
            });
            return [2, new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            })];
          case 8:
            if (res.code) {
              throwError$1(ERRORS$5.OPERATION_FAIL, "Phone login fail[" + res.code + "] " + res.message);
            } else {
              throwError$1(ERRORS$5.OPERATION_FAIL, "Phone login fail");
            }
            _a2.label = 9;
          case 9:
            return [2];
        }
      });
    });
  };
  PhoneAuthProvider2.prototype.signUp = function(phoneNumber, phoneCode, password) {
    return __awaiter$9(this, void 0, void 0, function() {
      return __generator$9(this, function(_a2) {
        return [2, this.signIn({
          phoneNumber,
          phoneCode,
          password,
          signMethod: SIGN_METHOD.SIGNUP
        })];
      });
    });
  };
  PhoneAuthProvider2.prototype.forceResetPwd = function(phoneNumber, phoneCode, password) {
    return __awaiter$9(this, void 0, void 0, function() {
      return __generator$9(this, function(_a2) {
        return [2, this.signIn({
          phoneNumber,
          phoneCode,
          password,
          signMethod: SIGN_METHOD.FORCERESETPWD
        })];
      });
    });
  };
  __decorate$4([
    catchErrorsDecorator$4({
      title: "\u624B\u673A\u53F7\u767B\u5F55\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().SmsAuthProvider() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u77ED\u4FE1\u9A8C\u8BC1\u7801\u767B\u5F55",
        "  3 - \u77ED\u4FE1\u9A8C\u8BC1\u7801/\u5BC6\u7801\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$4
      ]
    }),
    __metadata$4("design:type", Function),
    __metadata$4("design:paramtypes", [Object]),
    __metadata$4("design:returntype", Promise)
  ], PhoneAuthProvider2.prototype, "signIn", null);
  __decorate$4([
    catchErrorsDecorator$4({
      title: "\u624B\u673A\u77ED\u4FE1\u6CE8\u518C\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().signUpWithPhoneCode() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u77ED\u4FE1\u9A8C\u8BC1\u7801\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$4
      ]
    }),
    __metadata$4("design:type", Function),
    __metadata$4("design:paramtypes", [String, String, String]),
    __metadata$4("design:returntype", Promise)
  ], PhoneAuthProvider2.prototype, "signUp", null);
  __decorate$4([
    catchErrorsDecorator$4({
      title: "\u624B\u673A\u5BC6\u7801\u91CD\u7F6E\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().forceResetPwd() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u77ED\u4FE1\u9A8C\u8BC1\u7801\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$4
      ]
    }),
    __metadata$4("design:type", Function),
    __metadata$4("design:paramtypes", [String, String, String]),
    __metadata$4("design:returntype", Promise)
  ], PhoneAuthProvider2.prototype, "forceResetPwd", null);
  return PhoneAuthProvider2;
}(AuthProvider);
var __assign$7 = globalThis && globalThis.__assign || function() {
  __assign$7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$7.apply(this, arguments);
};
var __decorate$3 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$8 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$8 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var CloudbaseEventEmitter = events_1.CloudbaseEventEmitter;
var RUNTIME = adapters_1.RUNTIME;
var printWarn = utils_1.printWarn, throwError = utils_1.throwError, transformPhone = utils_1.transformPhone;
var ERRORS$4 = constants_1.ERRORS, COMMUNITY_SITE_URL$3 = constants_1.COMMUNITY_SITE_URL;
var catchErrorsDecorator$3 = helpers_1.catchErrorsDecorator;
var COMPONENT_NAME$4 = "auth";
var eventBus = new CloudbaseEventEmitter();
var User = function() {
  function User2(options) {
    var cache2 = options.cache, request = options.request;
    this._cache = cache2;
    this._request = request;
    this._setUserInfo();
  }
  User2.prototype.checkLocalInfo = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        this.uid = this._getLocalUserInfo("uid");
        this.loginType = this._getLocalUserInfo("loginType");
        this.openid = this._getLocalUserInfo("wxOpenId");
        this.wxOpenId = this._getLocalUserInfo("wxOpenId");
        this.wxPublicId = this._getLocalUserInfo("wxPublicId");
        this.unionId = this._getLocalUserInfo("wxUnionId");
        this.qqMiniOpenId = this._getLocalUserInfo("qqMiniOpenId");
        this.customUserId = this._getLocalUserInfo("customUserId");
        this.nickName = this._getLocalUserInfo("nickName");
        this.gender = this._getLocalUserInfo("gender");
        this.avatarUrl = this._getLocalUserInfo("avatarUrl");
        this.email = this._getLocalUserInfo("email");
        this.hasPassword = Boolean(this._getLocalUserInfo("hasPassword"));
        this.phone = this._getLocalUserInfo("phone");
        this.username = this._getLocalUserInfo("username");
        this.location = {
          country: this._getLocalUserInfo("country"),
          province: this._getLocalUserInfo("province"),
          city: this._getLocalUserInfo("city")
        };
        return [2];
      });
    });
  };
  User2.prototype.checkLocalInfoAsync = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
      return __generator$8(this, function(_u) {
        switch (_u.label) {
          case 0:
            _a2 = this;
            return [4, this._getLocalUserInfoAsync("uid")];
          case 1:
            _a2.uid = _u.sent();
            _b = this;
            return [4, this._getLocalUserInfoAsync("loginType")];
          case 2:
            _b.loginType = _u.sent();
            _c = this;
            return [4, this._getLocalUserInfoAsync("wxOpenId")];
          case 3:
            _c.openid = _u.sent();
            _d = this;
            return [4, this._getLocalUserInfoAsync("wxOpenId")];
          case 4:
            _d.wxOpenId = _u.sent();
            _e = this;
            return [4, this._getLocalUserInfoAsync("wxPublicId")];
          case 5:
            _e.wxPublicId = _u.sent();
            _f = this;
            return [4, this._getLocalUserInfoAsync("wxUnionId")];
          case 6:
            _f.unionId = _u.sent();
            _g = this;
            return [4, this._getLocalUserInfoAsync("qqMiniOpenId")];
          case 7:
            _g.qqMiniOpenId = _u.sent();
            _h = this;
            return [4, this._getLocalUserInfoAsync("customUserId")];
          case 8:
            _h.customUserId = _u.sent();
            _j = this;
            return [4, this._getLocalUserInfoAsync("nickName")];
          case 9:
            _j.nickName = _u.sent();
            _k = this;
            return [4, this._getLocalUserInfoAsync("gender")];
          case 10:
            _k.gender = _u.sent();
            _l = this;
            return [4, this._getLocalUserInfoAsync("avatarUrl")];
          case 11:
            _l.avatarUrl = _u.sent();
            _m = this;
            return [4, this._getLocalUserInfoAsync("email")];
          case 12:
            _m.email = _u.sent();
            _o = this;
            _p = Boolean;
            return [4, this._getLocalUserInfoAsync("hasPassword")];
          case 13:
            _o.hasPassword = _p.apply(void 0, [_u.sent()]);
            _q = this;
            return [4, this._getLocalUserInfoAsync("phone")];
          case 14:
            _q.phone = _u.sent();
            _r = this;
            return [4, this._getLocalUserInfoAsync("username")];
          case 15:
            _r.username = _u.sent();
            _s = this;
            _t = {};
            return [4, this._getLocalUserInfoAsync("country")];
          case 16:
            _t.country = _u.sent();
            return [4, this._getLocalUserInfoAsync("province")];
          case 17:
            _t.province = _u.sent();
            return [4, this._getLocalUserInfoAsync("city")];
          case 18:
            _s.location = (_t.city = _u.sent(), _t);
            return [2];
        }
      });
    });
  };
  User2.prototype.linkWithTicket = function(ticket) {
    if (typeof ticket !== "string") {
      throw new Error("ticket must be string");
    }
    return this._request.send("auth.linkWithTicket", { ticket });
  };
  User2.prototype.linkWithRedirect = function(provider) {
    provider.signInWithRedirect();
  };
  User2.prototype.getLinkedUidList = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var data, hasPrimaryUid, users, _i, users_1, user;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._request.send("auth.getLinkedUidList", {})];
          case 1:
            data = _a2.sent().data;
            hasPrimaryUid = false;
            users = data.users;
            for (_i = 0, users_1 = users; _i < users_1.length; _i++) {
              user = users_1[_i];
              if (user.wxOpenId && user.wxPublicId) {
                hasPrimaryUid = true;
                break;
              }
            }
            return [2, {
              users,
              hasPrimaryUid
            }];
        }
      });
    });
  };
  User2.prototype.setPrimaryUid = function(uid2) {
    return this._request.send("auth.setPrimaryUid", { uid: uid2 });
  };
  User2.prototype.unlink = function(loginType) {
    return this._request.send("auth.unlink", { platform: loginType });
  };
  User2.prototype.update = function(userInfo) {
    return __awaiter$8(this, void 0, void 0, function() {
      var nickName, gender, avatarUrl, province, country, city, newUserInfo;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            nickName = userInfo.nickName, gender = userInfo.gender, avatarUrl = userInfo.avatarUrl, province = userInfo.province, country = userInfo.country, city = userInfo.city;
            return [4, this._request.send("auth.updateUserInfo", { nickName, gender, avatarUrl, province, country, city })];
          case 1:
            newUserInfo = _a2.sent().data;
            this._setLocalUserInfo(newUserInfo);
            return [2];
        }
      });
    });
  };
  User2.prototype.updatePassword = function(newPassword, oldPassword) {
    return this._request.send("auth.updatePassword", {
      oldPassword,
      newPassword
    });
  };
  User2.prototype.updateEmail = function(newEmail, password) {
    return this._request.send("auth.updateEmail", {
      newEmail,
      password
    });
  };
  User2.prototype.updateUsername = function(username) {
    if (typeof username !== "string") {
      throwError(ERRORS$4.INVALID_PARAMS, "username must be a string");
    }
    return this._request.send("auth.updateUsername", {
      username
    });
  };
  User2.prototype.refresh = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var action, userInfo;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            action = "auth.getUserInfo";
            return [4, this._request.send(action, {})];
          case 1:
            userInfo = _a2.sent().data;
            this._setLocalUserInfo(userInfo);
            return [2, userInfo];
        }
      });
    });
  };
  User2.prototype.linkWithPhoneNumber = function(phoneNumber, phoneCode) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this._request.send("auth.linkOrUpdatePhoneNumber", {
          phoneNumber: transformPhone(phoneNumber),
          phoneCode
        })];
      });
    });
  };
  User2.prototype.updatePhoneNumber = function(phoneNumber, phoneCode) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this._request.send("auth.linkOrUpdatePhoneNumber", {
          phoneNumber: transformPhone(phoneNumber),
          phoneCode
        })];
      });
    });
  };
  User2.prototype._getLocalUserInfo = function(key) {
    var userInfoKey = this._cache.keys.userInfoKey;
    var userInfo = this._cache.getStore(userInfoKey);
    return userInfo[key];
  };
  User2.prototype._getLocalUserInfoAsync = function(key) {
    return __awaiter$8(this, void 0, void 0, function() {
      var userInfoKey, userInfo;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            userInfoKey = this._cache.keys.userInfoKey;
            return [4, this._cache.getStoreAsync(userInfoKey)];
          case 1:
            userInfo = _a2.sent();
            return [2, userInfo[key]];
        }
      });
    });
  };
  User2.prototype._setUserInfo = function() {
    var _this = this;
    var userInfoKey = this._cache.keys.userInfoKey;
    var userInfo = this._cache.getStore(userInfoKey);
    [
      "uid",
      "loginType",
      "openid",
      "wxOpenId",
      "wxPublicId",
      "unionId",
      "qqMiniOpenId",
      "email",
      "hasPassword",
      "customUserId",
      "nickName",
      "gender",
      "avatarUrl",
      "phone",
      "username"
    ].forEach(function(infoKey) {
      _this[infoKey] = userInfo[infoKey];
    });
    this.location = {
      country: userInfo["country"],
      province: userInfo["province"],
      city: userInfo["city"]
    };
  };
  User2.prototype._setLocalUserInfo = function(userInfo) {
    var userInfoKey = this._cache.keys.userInfoKey;
    this._cache.setStore(userInfoKey, userInfo);
    this._setUserInfo();
  };
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u7ED1\u5B9A\u81EA\u5B9A\u4E49\u767B\u5F55\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.linkWithTicket() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u6B64\u8D26\u6237\u662F\u5426\u5DF2\u7ECF\u7ED1\u5B9A\u81EA\u5B9A\u4E49\u767B\u5F55",
        "  3 - ticket \u53C2\u6570\u662F\u5426\u5F52\u5C5E\u5F53\u524D\u73AF\u5883",
        "  4 - \u521B\u5EFA ticket \u7684\u81EA\u5B9A\u4E49\u767B\u5F55\u79C1\u94A5\u662F\u5426\u8FC7\u671F",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String]),
    __metadata$3("design:returntype", Promise)
  ], User2.prototype, "linkWithTicket", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u7ED1\u5B9A\u7B2C\u4E09\u65B9\u767B\u5F55\u65B9\u5F0F\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.linkWithRedirect() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u6B64\u8D26\u6237\u662F\u5426\u5DF2\u7ECF\u7ED1\u5B9A\u6B64\u7B2C\u4E09\u65B9",
        "  3 - \u6B64\u7B2C\u4E09\u65B9\u662F\u5426\u5DF2\u7ECF\u6388\u6743",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [Object]),
    __metadata$3("design:returntype", void 0)
  ], User2.prototype, "linkWithRedirect", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u83B7\u53D6\u8D26\u6237\u5217\u8868\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.getLinkedUidList() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", Promise)
  ], User2.prototype, "getLinkedUidList", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u8BBE\u7F6E\u5FAE\u4FE1\u4E3B\u8D26\u53F7\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.setPrimaryUid() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String]),
    __metadata$3("design:returntype", void 0)
  ], User2.prototype, "setPrimaryUid", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u63A5\u89E6\u7ED1\u5B9A\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.unlink() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u8D26\u6237\u662F\u5426\u5DF2\u7ECF\u4E0E\u6B64\u767B\u5F55\u65B9\u5F0F\u89E3\u7ED1",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String]),
    __metadata$3("design:returntype", void 0)
  ], User2.prototype, "unlink", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u66F4\u65B0\u7528\u6237\u4FE1\u606F\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.update() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u7528\u6237\u4FE1\u606F\u4E2D\u662F\u5426\u5305\u542B\u975E\u6CD5\u503C",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [Object]),
    __metadata$3("design:returntype", Promise)
  ], User2.prototype, "update", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u66F4\u65B0\u5BC6\u7801\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.updatePassword() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  3 - \u65B0\u5BC6\u7801\u4E2D\u662F\u5426\u5305\u542B\u975E\u6CD5\u5B57\u7B26",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String, String]),
    __metadata$3("design:returntype", void 0)
  ], User2.prototype, "updatePassword", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u66F4\u65B0\u90AE\u7BB1\u5730\u5740\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.updateEmail() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u90AE\u7BB1\u5BC6\u7801\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String, String]),
    __metadata$3("design:returntype", void 0)
  ], User2.prototype, "updateEmail", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u66F4\u65B0\u7528\u6237\u540D\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.updateUsername() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u7528\u6237\u540D\u5BC6\u7801\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String]),
    __metadata$3("design:returntype", void 0)
  ], User2.prototype, "updateUsername", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u5237\u65B0\u672C\u5730\u7528\u6237\u4FE1\u606F\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 User.refresh() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", Promise)
  ], User2.prototype, "refresh", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u7ED1\u5B9A\u624B\u673A\u53F7\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().linkWithPhoneNumber() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u77ED\u4FE1\u9A8C\u8BC1\u7801\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String, String]),
    __metadata$3("design:returntype", Promise)
  ], User2.prototype, "linkWithPhoneNumber", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u66F4\u65B0\u624B\u673A\u53F7\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u77ED\u4FE1\u9A8C\u8BC1\u7801\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String, String]),
    __metadata$3("design:returntype", Promise)
  ], User2.prototype, "updatePhoneNumber", null);
  return User2;
}();
var LoginState = function() {
  function LoginState2(options) {
    var envId = options.envId, cache2 = options.cache, request = options.request;
    if (!envId) {
      throwError(ERRORS$4.INVALID_PARAMS, "envId is not defined");
    }
    this._cache = cache2;
    this.user = new User({
      cache: cache2,
      request
    });
  }
  LoginState2.prototype.checkLocalState = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var _a2, refreshTokenKey, accessTokenKey, accessTokenExpireKey, refreshToken, accessToken, accessTokenExpire;
      return __generator$8(this, function(_b) {
        _a2 = this._cache.keys, refreshTokenKey = _a2.refreshTokenKey, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey;
        refreshToken = this._cache.getStore(refreshTokenKey);
        accessToken = this._cache.getStore(accessTokenKey);
        accessTokenExpire = this._cache.getStore(accessTokenExpireKey);
        this.credential = {
          refreshToken,
          accessToken,
          accessTokenExpire
        };
        this._loginType = this._cache.getStore(this._cache.keys.loginTypeKey);
        this.user.checkLocalInfo();
        return [2];
      });
    });
  };
  LoginState2.prototype.checkLocalStateAsync = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var _a2, refreshTokenKey, accessTokenKey, accessTokenExpireKey, refreshToken, accessToken, accessTokenExpire, _b;
      return __generator$8(this, function(_c) {
        switch (_c.label) {
          case 0:
            _a2 = this._cache.keys, refreshTokenKey = _a2.refreshTokenKey, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey;
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 1:
            refreshToken = _c.sent();
            return [4, this._cache.getStoreAsync(accessTokenKey)];
          case 2:
            accessToken = _c.sent();
            return [4, this._cache.getStoreAsync(accessTokenExpireKey)];
          case 3:
            accessTokenExpire = _c.sent();
            this.credential = {
              refreshToken,
              accessToken,
              accessTokenExpire
            };
            _b = this;
            return [4, this._cache.getStoreAsync(this._cache.keys.loginTypeKey)];
          case 4:
            _b._loginType = _c.sent();
            return [4, this.user.checkLocalInfoAsync()];
          case 5:
            _c.sent();
            return [2];
        }
      });
    });
  };
  Object.defineProperty(LoginState2.prototype, "isAnonymousAuth", {
    get: function() {
      return this.loginType === LOGINTYPE.ANONYMOUS;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LoginState2.prototype, "isCustomAuth", {
    get: function() {
      return this.loginType === LOGINTYPE.CUSTOM;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LoginState2.prototype, "isWeixinAuth", {
    get: function() {
      return this.loginType === LOGINTYPE.WECHAT || this.loginType === LOGINTYPE.WECHAT_OPEN || this.loginType === LOGINTYPE.WECHAT_PUBLIC;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LoginState2.prototype, "isUsernameAuth", {
    get: function() {
      return this.loginType === LOGINTYPE.USERNAME;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LoginState2.prototype, "loginType", {
    get: function() {
      return this._loginType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LoginState2.prototype, "isPhoneAuth", {
    get: function() {
      return this.loginType === LOGINTYPE.PHONE;
    },
    enumerable: false,
    configurable: true
  });
  return LoginState2;
}();
var Auth = function() {
  function Auth2(config) {
    this._config = config;
    this._cache = config.cache;
    this._request = config.request;
    this._runtime = config.runtime || RUNTIME.WEB;
    eventBus.on(EVENTS.LOGIN_TYPE_CHANGED, this._onLoginTypeChanged.bind(this));
  }
  Object.defineProperty(Auth2.prototype, "currentUser", {
    get: function() {
      if (this._cache.mode === "async") {
        printWarn(ERRORS$4.INVALID_OPERATION, "current platform's storage is asynchronous, please use getCurrenUser insteed");
        return;
      }
      var loginState = this.hasLoginState();
      if (loginState) {
        return loginState.user || null;
      } else {
        return null;
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Auth2.prototype, "loginType", {
    get: function() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    },
    enumerable: false,
    configurable: true
  });
  Auth2.prototype.getCurrenUser = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var loginState;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this.getLoginState()];
          case 1:
            loginState = _a2.sent();
            if (!loginState)
              return [3, 3];
            return [4, loginState.user.checkLocalInfoAsync()];
          case 2:
            _a2.sent();
            return [2, loginState.user || null];
          case 3:
            return [2, null];
        }
      });
    });
  };
  Auth2.prototype.getLoginType = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._cache.getStoreAsync(this._cache.keys.loginTypeKey)];
          case 1:
            return [2, _a2.sent()];
        }
      });
    });
  };
  Auth2.prototype.getAccessToken = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var _a2;
      return __generator$8(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = {};
            return [4, this._request.getAccessToken()];
          case 1:
            return [2, (_a2.accessToken = _b.sent().accessToken, _a2.env = this._config.env, _a2)];
        }
      });
    });
  };
  Auth2.prototype.weixinAuthProvider = function(_a2) {
    var appid = _a2.appid, scope = _a2.scope, state = _a2.state;
    if (!this._weixinAuthProvider) {
      this._weixinAuthProvider = new WeixinAuthProvider(__assign$7(__assign$7({}, this._config), { cache: this._cache, request: this._request, runtime: this._runtime }), appid, scope, state);
    }
    return this._weixinAuthProvider;
  };
  Auth2.prototype.anonymousAuthProvider = function() {
    if (!this._anonymousAuthProvider) {
      this._anonymousAuthProvider = new AnonymousAuthProvider(__assign$7(__assign$7({}, this._config), { cache: this._cache, request: this._request }));
    }
    return this._anonymousAuthProvider;
  };
  Auth2.prototype.customAuthProvider = function() {
    if (!this._customAuthProvider) {
      this._customAuthProvider = new CustomAuthProvider(__assign$7(__assign$7({}, this._config), { cache: this._cache, request: this._request }));
    }
    return this._customAuthProvider;
  };
  Auth2.prototype.emailAuthProvider = function() {
    if (!this._emailAuthProvider) {
      this._emailAuthProvider = new EmailAuthProvider(__assign$7(__assign$7({}, this._config), { cache: this._cache, request: this._request }));
    }
    return this._emailAuthProvider;
  };
  Auth2.prototype.usernameAuthProvider = function() {
    if (!this._usernameAuthProvider) {
      this._usernameAuthProvider = new UsernameAuthProvider(__assign$7(__assign$7({}, this._config), { cache: this._cache, request: this._request }));
    }
    return this._usernameAuthProvider;
  };
  Auth2.prototype.phoneAuthProvider = function() {
    if (!this._phoneAuthProvider) {
      this._phoneAuthProvider = new PhoneAuthProvider(__assign$7(__assign$7({}, this._config), { cache: this._cache, request: this._request }));
    }
    return this._phoneAuthProvider;
  };
  Auth2.prototype.signInWithUsernameAndPassword = function(username, password) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this.usernameAuthProvider().signIn(username, password)];
      });
    });
  };
  Auth2.prototype.isUsernameRegistered = function(username) {
    return __awaiter$8(this, void 0, void 0, function() {
      var data;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (typeof username !== "string") {
              throwError(ERRORS$4.INVALID_PARAMS, "username must be a string");
            }
            return [4, this._request.send("auth.isUsernameRegistered", {
              username
            })];
          case 1:
            data = _a2.sent().data;
            return [2, data === null || data === void 0 ? void 0 : data.isRegistered];
        }
      });
    });
  };
  Auth2.prototype.signInWithEmailAndPassword = function(email, password) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this.emailAuthProvider().signIn(email, password)];
      });
    });
  };
  Auth2.prototype.signUpWithEmailAndPassword = function(email, password) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this.emailAuthProvider().signUp(email, password)];
      });
    });
  };
  Auth2.prototype.sendPasswordResetEmail = function(email) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this.emailAuthProvider().resetPassword(email)];
      });
    });
  };
  Auth2.prototype.signOut = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var _a2, refreshTokenKey, accessTokenKey, accessTokenExpireKey, action, refresh_token, res;
      return __generator$8(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = this._cache.keys, refreshTokenKey = _a2.refreshTokenKey, accessTokenKey = _a2.accessTokenKey, accessTokenExpireKey = _a2.accessTokenExpireKey;
            action = "auth.logout";
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 1:
            refresh_token = _b.sent();
            if (!refresh_token) {
              return [2];
            }
            return [4, this._request.send(action, { refresh_token })];
          case 2:
            res = _b.sent();
            this._cache.removeStoreAsync(refreshTokenKey);
            this._cache.removeStoreAsync(accessTokenKey);
            this._cache.removeStoreAsync(accessTokenExpireKey);
            eventBus.fire(EVENTS.LOGIN_STATE_CHANGED);
            eventBus.fire(EVENTS.LOGIN_TYPE_CHANGED, {
              env: this._config.env,
              loginType: LOGINTYPE.NULL,
              persistence: this._config.persistence
            });
            return [2, res];
        }
      });
    });
  };
  Auth2.prototype.onLoginStateChanged = function(callback) {
    return __awaiter$8(this, void 0, void 0, function() {
      var loginState;
      var _this = this;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            eventBus.on(EVENTS.LOGIN_STATE_CHANGED, function() {
              return __awaiter$8(_this, void 0, void 0, function() {
                var loginState2;
                return __generator$8(this, function(_a3) {
                  switch (_a3.label) {
                    case 0:
                      return [4, this.getLoginState()];
                    case 1:
                      loginState2 = _a3.sent();
                      callback.call(this, loginState2);
                      return [2];
                  }
                });
              });
            });
            return [4, this.getLoginState()];
          case 1:
            loginState = _a2.sent();
            callback.call(this, loginState);
            return [2];
        }
      });
    });
  };
  Auth2.prototype.onLoginStateExpired = function(callback) {
    eventBus.on(EVENTS.LOGIN_STATE_EXPIRED, callback.bind(this));
  };
  Auth2.prototype.onAccessTokenRefreshed = function(callback) {
    eventBus.on(EVENTS.ACCESS_TOKEN_REFRESHD, callback.bind(this));
  };
  Auth2.prototype.onAnonymousConverted = function(callback) {
    eventBus.on(EVENTS.ANONYMOUS_CONVERTED, callback.bind(this));
  };
  Auth2.prototype.onLoginTypeChanged = function(callback) {
    var _this = this;
    eventBus.on(EVENTS.LOGIN_TYPE_CHANGED, function() {
      return __awaiter$8(_this, void 0, void 0, function() {
        var loginState;
        return __generator$8(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.getLoginState()];
            case 1:
              loginState = _a2.sent();
              callback.call(this, loginState);
              return [2];
          }
        });
      });
    });
  };
  Auth2.prototype.hasLoginState = function() {
    if (this._cache.mode === "async") {
      printWarn(ERRORS$4.INVALID_OPERATION, "current platform's storage is asynchronous, please use getLoginState insteed");
      return;
    }
    var refreshTokenKey = this._cache.keys.refreshTokenKey;
    var refreshToken = this._cache.getStore(refreshTokenKey);
    if (refreshToken) {
      var loginState = new LoginState({
        envId: this._config.env,
        cache: this._cache,
        request: this._request
      });
      loginState.checkLocalState();
      return loginState;
    } else {
      return null;
    }
  };
  Auth2.prototype.getLoginState = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var refreshTokenKey, refreshToken, loginState;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            refreshTokenKey = this._cache.keys.refreshTokenKey;
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 1:
            refreshToken = _a2.sent();
            if (!refreshToken)
              return [3, 3];
            loginState = new LoginState({
              envId: this._config.env,
              cache: this._cache,
              request: this._request
            });
            return [4, loginState.checkLocalStateAsync()];
          case 2:
            _a2.sent();
            return [2, loginState];
          case 3:
            return [2, null];
        }
      });
    });
  };
  Auth2.prototype.shouldRefreshAccessToken = function(hook2) {
    this._request._shouldRefreshAccessTokenHook = hook2.bind(this);
  };
  Auth2.prototype.getUserInfo = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var action, res;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            action = "auth.getUserInfo";
            return [4, this._request.send(action, {})];
          case 1:
            res = _a2.sent();
            if (res.code) {
              return [2, res];
            } else {
              return [2, __assign$7(__assign$7({}, res.data), { requestId: res.seqId })];
            }
        }
      });
    });
  };
  Auth2.prototype.getAuthHeader = function() {
    var _a2 = this._cache.keys, refreshTokenKey = _a2.refreshTokenKey, accessTokenKey = _a2.accessTokenKey;
    var refreshToken = this._cache.getStore(refreshTokenKey);
    var accessToken = this._cache.getStore(accessTokenKey);
    return {
      "x-cloudbase-credentials": accessToken + "/@@/" + refreshToken
    };
  };
  Auth2.prototype.getAuthHeaderAsync = function() {
    return __awaiter$8(this, void 0, void 0, function() {
      var _a2, refreshTokenKey, accessTokenKey, refreshToken, accessToken;
      return __generator$8(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, this._request.refreshAccessToken()];
          case 1:
            _b.sent();
            _a2 = this._cache.keys, refreshTokenKey = _a2.refreshTokenKey, accessTokenKey = _a2.accessTokenKey;
            return [4, this._cache.getStoreAsync(refreshTokenKey)];
          case 2:
            refreshToken = _b.sent();
            return [4, this._cache.getStoreAsync(accessTokenKey)];
          case 3:
            accessToken = _b.sent();
            return [2, {
              "x-cloudbase-credentials": accessToken + "/@@/" + refreshToken
            }];
        }
      });
    });
  };
  Auth2.prototype.sendPhoneCode = function(phoneNumber) {
    return __awaiter$8(this, void 0, void 0, function() {
      var data;
      return __generator$8(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._request.send("auth.sendPhoneCode", {
              phoneNumber: transformPhone(phoneNumber)
            })];
          case 1:
            data = _a2.sent().data;
            return [2, data.SendStatus === "Ok"];
        }
      });
    });
  };
  Auth2.prototype.signUpWithPhoneCode = function(phoneNumber, phoneCode, password) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this.phoneAuthProvider().signUp(phoneNumber, phoneCode, password)];
      });
    });
  };
  Auth2.prototype.signInWithPhoneCodeOrPassword = function(param) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this.phoneAuthProvider().signIn(param)];
      });
    });
  };
  Auth2.prototype.forceResetPwdByPhoneCode = function(param) {
    return __awaiter$8(this, void 0, void 0, function() {
      return __generator$8(this, function(_a2) {
        return [2, this.phoneAuthProvider().signIn(__assign$7(__assign$7({}, param), { signMethod: SIGN_METHOD.FORCERESETPWD }))];
      });
    });
  };
  Auth2.prototype._onLoginTypeChanged = function(ev) {
    return __awaiter$8(this, void 0, void 0, function() {
      var _a2, loginType, persistence, env;
      return __generator$8(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a2 = ev.data, loginType = _a2.loginType, persistence = _a2.persistence, env = _a2.env;
            if (env !== this._config.env) {
              return [2];
            }
            return [4, this._cache.updatePersistenceAsync(persistence)];
          case 1:
            _b.sent();
            return [4, this._cache.setStoreAsync(this._cache.keys.loginTypeKey, loginType)];
          case 2:
            _b.sent();
            return [2];
        }
      });
    });
  };
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u83B7\u53D6\u7528\u6237\u4FE1\u606F\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().getCurrenUser() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", Promise)
  ], Auth2.prototype, "getCurrenUser", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u83B7\u53D6\u7528\u6237\u662F\u5426\u88AB\u5360\u7528\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().isUsernameRegistered() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String]),
    __metadata$3("design:returntype", Promise)
  ], Auth2.prototype, "isUsernameRegistered", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u7528\u6237\u767B\u51FA\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().signOut() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u7528\u6237\u662F\u5426\u4E3A\u533F\u540D\u767B\u5F55\uFF08\u533F\u540D\u767B\u5F55\u4E0D\u652F\u6301signOut\uFF09",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", Promise)
  ], Auth2.prototype, "signOut", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u83B7\u53D6\u672C\u5730\u767B\u5F55\u6001\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 auth().getLoginState() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", Promise)
  ], Auth2.prototype, "getLoginState", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u83B7\u53D6\u7528\u6237\u4FE1\u606F\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u662F\u5426\u5DF2\u767B\u5F55",
        "  2 - \u8C03\u7528 auth().getUserInfo() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", []),
    __metadata$3("design:returntype", Promise)
  ], Auth2.prototype, "getUserInfo", null);
  __decorate$3([
    catchErrorsDecorator$3({
      title: "\u53D1\u9001\u77ED\u4FE1\u9A8C\u8BC1\u7801\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u662F\u5426\u5F00\u901A\u4E86\u77ED\u4FE1\u9A8C\u8BC1\u7801\u767B\u5F55",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$3
      ]
    }),
    __metadata$3("design:type", Function),
    __metadata$3("design:paramtypes", [String]),
    __metadata$3("design:returntype", Promise)
  ], Auth2.prototype, "sendPhoneCode", null);
  return Auth2;
}();
var EVENTS = {
  LOGIN_STATE_CHANGED: "loginStateChanged",
  LOGIN_STATE_EXPIRED: "loginStateExpire",
  LOGIN_TYPE_CHANGED: "loginTypeChanged",
  ANONYMOUS_CONVERTED: "anonymousConverted",
  ACCESS_TOKEN_REFRESHD: "refreshAccessToken"
};
var component$5 = {
  name: COMPONENT_NAME$4,
  namespace: "auth",
  injectEvents: {
    bus: eventBus,
    events: [
      EVENTS.LOGIN_TYPE_CHANGED,
      EVENTS.LOGIN_STATE_EXPIRED,
      EVENTS.LOGIN_STATE_CHANGED,
      EVENTS.ACCESS_TOKEN_REFRESHD,
      EVENTS.ANONYMOUS_CONVERTED
    ]
  },
  entity: function(config) {
    if (config === void 0) {
      config = { region: "", persistence: "local" };
    }
    if (this.authInstance) {
      printWarn(ERRORS$4.INVALID_OPERATION, "every cloudbase instance should has only one auth object");
      return this.authInstance;
    }
    var _a2 = this.platform, adapter2 = _a2.adapter, runtime2 = _a2.runtime;
    var newPersistence = config.persistence || adapter2.primaryStorage;
    if (newPersistence && newPersistence !== this.config.persistence) {
      this.updateConfig({ persistence: newPersistence });
    }
    var _b = this.config, env = _b.env, persistence = _b.persistence, debug = _b.debug;
    this.authInstance = new Auth({
      env,
      region: config.region,
      persistence,
      debug,
      cache: this.cache,
      request: this.request,
      runtime: runtime2
    });
    return this.authInstance;
  }
};
try {
  cloudbase.registerComponent(component$5);
} catch (e) {
}
function registerAuth(app) {
  try {
    app.registerComponent(component$5);
  } catch (e) {
    console.warn(e);
  }
}
var __decorate$2 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$7 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$7 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getSdkName$1 = constants_1.getSdkName, ERRORS$3 = constants_1.ERRORS, COMMUNITY_SITE_URL$2 = constants_1.COMMUNITY_SITE_URL;
var execCallback$1 = utils_1.execCallback;
var catchErrorsDecorator$2 = helpers_1.catchErrorsDecorator;
var COMPONENT_NAME$3 = "functions";
var CloudbaseFunctions = function() {
  function CloudbaseFunctions2() {
  }
  CloudbaseFunctions2.prototype.callFunction = function(options, callback) {
    return __awaiter$7(this, void 0, void 0, function() {
      var name2, data, query, parse, search, jsonData, action, params, request, res, result, e_1;
      return __generator$7(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            name2 = options.name, data = options.data, query = options.query, parse = options.parse, search = options.search;
            if (!name2) {
              throw new Error(JSON.stringify({
                code: ERRORS$3.INVALID_PARAMS,
                msg: "[" + COMPONENT_NAME$3 + ".callFunction] invalid function name"
              }));
            }
            try {
              jsonData = data ? JSON.stringify(data) : "";
            } catch (e) {
              throw new Error(JSON.stringify({
                code: ERRORS$3.INVALID_PARAMS,
                msg: "[" + COMPONENT_NAME$3 + ".callFunction] invalid data"
              }));
            }
            action = "functions.invokeFunction";
            params = {
              inQuery: query,
              parse,
              search,
              function_name: name2,
              request_data: jsonData
            };
            request = this.request;
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, request.send(action, params)];
          case 2:
            res = _a2.sent();
            if (res.code) {
              return [2, execCallback$1(callback, null, res)];
            } else {
              result = res.data.response_data;
              if (parse) {
                return [2, execCallback$1(callback, null, {
                  result,
                  requestId: res.requestId
                })];
              } else {
                try {
                  result = JSON.parse(res.data.response_data);
                  return [2, execCallback$1(callback, null, {
                    result,
                    requestId: res.requestId
                  })];
                } catch (e) {
                  execCallback$1(callback, new Error("[" + getSdkName$1() + "][" + ERRORS$3.INVALID_PARAMS + "][" + COMPONENT_NAME$3 + ".callFunction] response data must be json"));
                }
              }
            }
            return [3, 4];
          case 3:
            e_1 = _a2.sent();
            execCallback$1(callback, e_1);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  __decorate$2([
    catchErrorsDecorator$2({
      customInfo: {
        className: "Cloudbase",
        methodName: "callFunction"
      },
      title: "\u51FD\u6570\u8C03\u7528\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 callFunction() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u73AF\u5883\u4E0B\u662F\u5426\u5B58\u5728\u6B64\u51FD\u6570",
        "  3 - \u51FD\u6570\u5B89\u5168\u89C4\u5219\u662F\u5426\u9650\u5236\u4E86\u5F53\u524D\u767B\u5F55\u72B6\u6001\u8BBF\u95EE",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$2
      ]
    }),
    __metadata$2("design:type", Function),
    __metadata$2("design:paramtypes", [Object, Function]),
    __metadata$2("design:returntype", Promise)
  ], CloudbaseFunctions2.prototype, "callFunction", null);
  return CloudbaseFunctions2;
}();
var cloudbaseFunctions = new CloudbaseFunctions();
var component$4 = {
  name: COMPONENT_NAME$3,
  entity: {
    callFunction: cloudbaseFunctions.callFunction
  }
};
try {
  cloudbase.registerComponent(component$4);
} catch (e) {
}
function registerFunctions(app) {
  try {
    app.registerComponent(component$4);
  } catch (e) {
    console.warn(e);
  }
}
var __decorate$1 = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$6 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$6 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getSdkName = constants_1.getSdkName, ERRORS$2 = constants_1.ERRORS, COMMUNITY_SITE_URL$1 = constants_1.COMMUNITY_SITE_URL;
var isArray$5 = utils_1.isArray, isString$3 = utils_1.isString, isPalinObject = utils_1.isPalinObject, execCallback = utils_1.execCallback;
var catchErrorsDecorator$1 = helpers_1.catchErrorsDecorator;
var COMPONENT_NAME$2 = "storage";
var CloudbaseStorage = function() {
  function CloudbaseStorage2() {
  }
  CloudbaseStorage2.prototype.uploadFile = function(params, callback) {
    return __awaiter$6(this, void 0, void 0, function() {
      var cloudPath, filePath, onUploadProgress, action, request, metaData, _a2, url, authorization, token2, fileId, cosFileId, download_url, requestId, data, res;
      return __generator$6(this, function(_b) {
        switch (_b.label) {
          case 0:
            cloudPath = params.cloudPath, filePath = params.filePath, onUploadProgress = params.onUploadProgress;
            if (!isString$3(cloudPath) || !filePath) {
              throw new Error(JSON.stringify({
                code: ERRORS$2.INVALID_PARAMS,
                msg: "[" + COMPONENT_NAME$2 + ".uploadFile] invalid params"
              }));
            }
            action = "storage.getUploadMetadata";
            request = this.request;
            return [4, request.send(action, {
              path: cloudPath
            })];
          case 1:
            metaData = _b.sent();
            _a2 = metaData.data, url = _a2.url, authorization = _a2.authorization, token2 = _a2.token, fileId = _a2.fileId, cosFileId = _a2.cosFileId, download_url = _a2.download_url, requestId = metaData.requestId;
            data = {
              key: cloudPath,
              signature: authorization,
              "x-cos-meta-fileid": cosFileId,
              "success_action_status": "201",
              "x-cos-security-token": token2
            };
            return [4, request.upload({
              url,
              data,
              file: filePath,
              name: cloudPath,
              onUploadProgress
            })];
          case 2:
            res = _b.sent();
            if (res.statusCode === 201) {
              return [2, execCallback(callback, null, {
                fileID: fileId,
                download_url,
                requestId
              })];
            } else {
              return [2, execCallback(callback, new Error("[" + getSdkName() + "][" + ERRORS$2.OPERATION_FAIL + "][" + COMPONENT_NAME$2 + "]:" + res.data))];
            }
        }
      });
    });
  };
  CloudbaseStorage2.prototype.getUploadMetadata = function(params, callback) {
    return __awaiter$6(this, void 0, void 0, function() {
      var cloudPath, request, action, metaData, err_1;
      return __generator$6(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            cloudPath = params.cloudPath;
            if (!isString$3(cloudPath)) {
              throw new Error(JSON.stringify({
                code: ERRORS$2.INVALID_PARAMS,
                msg: "[" + COMPONENT_NAME$2 + ".getUploadMetadata] invalid cloudPath"
              }));
            }
            request = this.request;
            action = "storage.getUploadMetadata";
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, request.send(action, {
              path: cloudPath
            })];
          case 2:
            metaData = _a2.sent();
            return [2, execCallback(callback, null, metaData)];
          case 3:
            err_1 = _a2.sent();
            return [2, execCallback(callback, err_1)];
          case 4:
            return [2];
        }
      });
    });
  };
  CloudbaseStorage2.prototype.deleteFile = function(params, callback) {
    return __awaiter$6(this, void 0, void 0, function() {
      var fileList, _i, fileList_1, fileId, action, request, res, data;
      return __generator$6(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            fileList = params.fileList;
            if (!fileList || !isArray$5(fileList) || fileList.length === 0) {
              throw new Error(JSON.stringify({
                code: ERRORS$2.INVALID_PARAMS,
                msg: "[" + COMPONENT_NAME$2 + ".deleteFile] fileList must not be empty"
              }));
            }
            for (_i = 0, fileList_1 = fileList; _i < fileList_1.length; _i++) {
              fileId = fileList_1[_i];
              if (!fileId || !isString$3(fileId)) {
                throw new Error(JSON.stringify({
                  code: ERRORS$2.INVALID_PARAMS,
                  msg: "[" + COMPONENT_NAME$2 + ".deleteFile] fileID must be string"
                }));
              }
            }
            action = "storage.batchDeleteFile";
            request = this.request;
            return [4, request.send(action, {
              fileid_list: fileList
            })];
          case 1:
            res = _a2.sent();
            if (res.code) {
              return [2, execCallback(callback, null, res)];
            }
            data = {
              fileList: res.data.delete_list,
              requestId: res.requestId
            };
            return [2, execCallback(callback, null, data)];
        }
      });
    });
  };
  CloudbaseStorage2.prototype.getTempFileURL = function(params, callback) {
    return __awaiter$6(this, void 0, void 0, function() {
      var fileList, file_list, _i, fileList_2, file, action, request, res;
      return __generator$6(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            fileList = params.fileList;
            if (!fileList || !isArray$5(fileList) || fileList.length === 0) {
              throw new Error(JSON.stringify({
                code: ERRORS$2.INVALID_PARAMS,
                msg: "[" + COMPONENT_NAME$2 + ".getTempFileURL] fileList must not be empty"
              }));
            }
            file_list = [];
            for (_i = 0, fileList_2 = fileList; _i < fileList_2.length; _i++) {
              file = fileList_2[_i];
              if (isPalinObject(file)) {
                if (!file.hasOwnProperty("fileID") || !file.hasOwnProperty("maxAge")) {
                  throw new Error(JSON.stringify({
                    code: ERRORS$2.INVALID_PARAMS,
                    msg: "[" + COMPONENT_NAME$2 + ".getTempFileURL] file info must include fileID and maxAge"
                  }));
                }
                file_list.push({
                  fileid: file.fileID,
                  max_age: file.maxAge
                });
              } else if (isString$3(file)) {
                file_list.push({
                  fileid: file
                });
              } else {
                throw new Error(JSON.stringify({
                  code: ERRORS$2.INVALID_PARAMS,
                  msg: "[" + COMPONENT_NAME$2 + ".getTempFileURL] invalid fileList"
                }));
              }
            }
            action = "storage.batchGetDownloadUrl";
            request = this.request;
            return [4, request.send(action, { file_list })];
          case 1:
            res = _a2.sent();
            if (res.code) {
              return [2, execCallback(callback, null, res)];
            }
            return [2, execCallback(callback, null, {
              fileList: res.data.download_list,
              requestId: res.requestId
            })];
        }
      });
    });
  };
  CloudbaseStorage2.prototype.downloadFile = function(params, callback) {
    return __awaiter$6(this, void 0, void 0, function() {
      var fileID, tmpUrlRes, res, request, tmpUrl, result;
      return __generator$6(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            fileID = params.fileID;
            if (!isString$3(fileID)) {
              throw new Error(JSON.stringify({
                code: ERRORS$2.INVALID_PARAMS,
                msg: "[" + COMPONENT_NAME$2 + ".getTempFileURL] fileID must be string"
              }));
            }
            return [4, this.getTempFileURL.call(this, {
              fileList: [{
                fileID,
                maxAge: 600
              }]
            })];
          case 1:
            tmpUrlRes = _a2.sent();
            res = tmpUrlRes.fileList[0];
            if (res.code !== "SUCCESS") {
              return [2, execCallback(callback, res)];
            }
            request = this.request;
            tmpUrl = encodeURI(res.download_url);
            return [4, request.download({ url: tmpUrl })];
          case 2:
            result = _a2.sent();
            return [2, execCallback(callback, null, result)];
        }
      });
    });
  };
  __decorate$1([
    catchErrorsDecorator$1({
      customInfo: {
        className: "Cloudbase",
        methodName: "uploadFile"
      },
      title: "\u4E0A\u4F20\u6587\u4EF6\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 uploadFile() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u57DF\u540D\u662F\u5426\u5728\u5B89\u5168\u57DF\u540D\u5217\u8868\u4E2D\uFF1Ahttps://console.cloud.tencent.com/tcb/env/safety",
        "  3 - \u4E91\u5B58\u50A8\u5B89\u5168\u89C4\u5219\u662F\u5426\u9650\u5236\u4E86\u5F53\u524D\u767B\u5F55\u72B6\u6001\u8BBF\u95EE",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$1
      ]
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", [Object, Function]),
    __metadata$1("design:returntype", Promise)
  ], CloudbaseStorage2.prototype, "uploadFile", null);
  __decorate$1([
    catchErrorsDecorator$1({
      customInfo: {
        className: "Cloudbase",
        methodName: "getUploadMetadata"
      },
      title: "\u83B7\u53D6\u4E0A\u4F20\u5143\u4FE1\u606F\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 getUploadMetadata() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u57DF\u540D\u662F\u5426\u5728\u5B89\u5168\u57DF\u540D\u5217\u8868\u4E2D\uFF1Ahttps://console.cloud.tencent.com/tcb/env/safety",
        "  3 - \u4E91\u5B58\u50A8\u5B89\u5168\u89C4\u5219\u662F\u5426\u9650\u5236\u4E86\u5F53\u524D\u767B\u5F55\u72B6\u6001\u8BBF\u95EE",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$1
      ]
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", [Object, Function]),
    __metadata$1("design:returntype", Promise)
  ], CloudbaseStorage2.prototype, "getUploadMetadata", null);
  __decorate$1([
    catchErrorsDecorator$1({
      customInfo: {
        className: "Cloudbase",
        methodName: "deleteFile"
      },
      title: "\u5220\u9664\u6587\u4EF6\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 deleteFile() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u57DF\u540D\u662F\u5426\u5728\u5B89\u5168\u57DF\u540D\u5217\u8868\u4E2D\uFF1Ahttps://console.cloud.tencent.com/tcb/env/safety",
        "  3 - \u4E91\u5B58\u50A8\u5B89\u5168\u89C4\u5219\u662F\u5426\u9650\u5236\u4E86\u5F53\u524D\u767B\u5F55\u72B6\u6001\u8BBF\u95EE",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$1
      ]
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", [Object, Function]),
    __metadata$1("design:returntype", Promise)
  ], CloudbaseStorage2.prototype, "deleteFile", null);
  __decorate$1([
    catchErrorsDecorator$1({
      customInfo: {
        className: "Cloudbase",
        methodName: "getTempFileURL"
      },
      title: "\u83B7\u53D6\u6587\u4EF6\u4E0B\u8F7D\u94FE\u63A5",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 getTempFileURL() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u57DF\u540D\u662F\u5426\u5728\u5B89\u5168\u57DF\u540D\u5217\u8868\u4E2D\uFF1Ahttps://console.cloud.tencent.com/tcb/env/safety",
        "  3 - \u4E91\u5B58\u50A8\u5B89\u5168\u89C4\u5219\u662F\u5426\u9650\u5236\u4E86\u5F53\u524D\u767B\u5F55\u72B6\u6001\u8BBF\u95EE",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$1
      ]
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", [Object, Function]),
    __metadata$1("design:returntype", Promise)
  ], CloudbaseStorage2.prototype, "getTempFileURL", null);
  __decorate$1([
    catchErrorsDecorator$1({
      customInfo: {
        className: "Cloudbase",
        methodName: "downloadFile"
      },
      title: "\u4E0B\u8F7D\u6587\u4EF6\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 downloadFile() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "  2 - \u5F53\u524D\u57DF\u540D\u662F\u5426\u5728\u5B89\u5168\u57DF\u540D\u5217\u8868\u4E2D\uFF1Ahttps://console.cloud.tencent.com/tcb/env/safety",
        "  3 - \u4E91\u5B58\u50A8\u5B89\u5168\u89C4\u5219\u662F\u5426\u9650\u5236\u4E86\u5F53\u524D\u767B\u5F55\u72B6\u6001\u8BBF\u95EE",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL$1
      ]
    }),
    __metadata$1("design:type", Function),
    __metadata$1("design:paramtypes", [Object, Function]),
    __metadata$1("design:returntype", Promise)
  ], CloudbaseStorage2.prototype, "downloadFile", null);
  return CloudbaseStorage2;
}();
var cloudbaseStorage = new CloudbaseStorage();
var component$3 = {
  name: COMPONENT_NAME$2,
  entity: {
    uploadFile: cloudbaseStorage.uploadFile,
    deleteFile: cloudbaseStorage.deleteFile,
    getTempFileURL: cloudbaseStorage.getTempFileURL,
    downloadFile: cloudbaseStorage.downloadFile,
    getUploadMetadata: cloudbaseStorage.getUploadMetadata
  }
};
try {
  cloudbase.registerComponent(component$3);
} catch (e) {
}
function registerStorage(app) {
  try {
    app.registerComponent(component$3);
  } catch (e) {
    console.warn(e);
  }
}
var FUNC_ERROR_TEXT$1 = "Expected a function";
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
var INFINITY$1 = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991;
var funcTag$1 = "[object Function]", genTag$1 = "[object GeneratorFunction]", symbolTag$1 = "[object Symbol]";
var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp$1 = /^\w*$/, reLeadingDot$1 = /^\./, rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;
var reEscapeChar$1 = /\\(\\)?/g;
var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;
var reIsUint = /^(?:0|[1-9]\d*)$/;
var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var freeSelf$1 = typeof self == "object" && self && self.Object === Object && self;
var root$1 = freeGlobal$1 || freeSelf$1 || Function("return this")();
function getValue$1(object, key) {
  return object == null ? void 0 : object[key];
}
function isHostObject$1(value) {
  var result = false;
  if (value != null && typeof value.toString != "function") {
    try {
      result = !!(value + "");
    } catch (e) {
    }
  }
  return result;
}
var arrayProto$1 = Array.prototype, funcProto$1 = Function.prototype, objectProto$1 = Object.prototype;
var coreJsData$1 = root$1["__core-js_shared__"];
var maskSrcKey$1 = function() {
  var uid2 = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || "");
  return uid2 ? "Symbol(src)_1." + uid2 : "";
}();
var funcToString$1 = funcProto$1.toString;
var hasOwnProperty$3 = objectProto$1.hasOwnProperty;
var objectToString$2 = objectProto$1.toString;
var reIsNative$1 = RegExp(
  "^" + funcToString$1.call(hasOwnProperty$3).replace(reRegExpChar$1, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
var Symbol$2 = root$1.Symbol, splice$1 = arrayProto$1.splice;
var Map$2 = getNative$1(root$1, "Map"), nativeCreate$1 = getNative$1(Object, "create");
var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0, symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : void 0;
function Hash$1(entries) {
  var index2 = -1, length = entries ? entries.length : 0;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
function hashClear$1() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
}
function hashDelete$1(key) {
  return this.has(key) && delete this.__data__[key];
}
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$1) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? void 0 : result;
  }
  return hasOwnProperty$3.call(data, key) ? data[key] : void 0;
}
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$3.call(data, key);
}
function hashSet$1(key, value) {
  var data = this.__data__;
  data[key] = nativeCreate$1 && value === void 0 ? HASH_UNDEFINED$1 : value;
  return this;
}
Hash$1.prototype.clear = hashClear$1;
Hash$1.prototype["delete"] = hashDelete$1;
Hash$1.prototype.get = hashGet$1;
Hash$1.prototype.has = hashHas$1;
Hash$1.prototype.set = hashSet$1;
function ListCache$1(entries) {
  var index2 = -1, length = entries ? entries.length : 0;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
function listCacheClear$1() {
  this.__data__ = [];
}
function listCacheDelete$1(key) {
  var data = this.__data__, index2 = assocIndexOf$1(data, key);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index2 == lastIndex) {
    data.pop();
  } else {
    splice$1.call(data, index2, 1);
  }
  return true;
}
function listCacheGet$1(key) {
  var data = this.__data__, index2 = assocIndexOf$1(data, key);
  return index2 < 0 ? void 0 : data[index2][1];
}
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}
function listCacheSet$1(key, value) {
  var data = this.__data__, index2 = assocIndexOf$1(data, key);
  if (index2 < 0) {
    data.push([key, value]);
  } else {
    data[index2][1] = value;
  }
  return this;
}
ListCache$1.prototype.clear = listCacheClear$1;
ListCache$1.prototype["delete"] = listCacheDelete$1;
ListCache$1.prototype.get = listCacheGet$1;
ListCache$1.prototype.has = listCacheHas$1;
ListCache$1.prototype.set = listCacheSet$1;
function MapCache$1(entries) {
  var index2 = -1, length = entries ? entries.length : 0;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
function mapCacheClear$1() {
  this.__data__ = {
    "hash": new Hash$1(),
    "map": new (Map$2 || ListCache$1)(),
    "string": new Hash$1()
  };
}
function mapCacheDelete$1(key) {
  return getMapData$1(this, key)["delete"](key);
}
function mapCacheGet$1(key) {
  return getMapData$1(this, key).get(key);
}
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}
function mapCacheSet$1(key, value) {
  getMapData$1(this, key).set(key, value);
  return this;
}
MapCache$1.prototype.clear = mapCacheClear$1;
MapCache$1.prototype["delete"] = mapCacheDelete$1;
MapCache$1.prototype.get = mapCacheGet$1;
MapCache$1.prototype.has = mapCacheHas$1;
MapCache$1.prototype.set = mapCacheSet$1;
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$3.call(object, key) && eq$1(objValue, value)) || value === void 0 && !(key in object)) {
    object[key] = value;
  }
}
function assocIndexOf$1(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
function baseIsNative$1(value) {
  if (!isObject$5(value) || isMasked$1(value)) {
    return false;
  }
  var pattern = isFunction$4(value) || isHostObject$1(value) ? reIsNative$1 : reIsHostCtor$1;
  return pattern.test(toSource$1(value));
}
function baseSet(object, path, value, customizer) {
  if (!isObject$5(object)) {
    return object;
  }
  path = isKey$1(path, object) ? [path] : castPath$1(path);
  var index2 = -1, length = path.length, lastIndex = length - 1, nested = object;
  while (nested != null && ++index2 < length) {
    var key = toKey$1(path[index2]), newValue = value;
    if (index2 != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : void 0;
      if (newValue === void 0) {
        newValue = isObject$5(objValue) ? objValue : isIndex(path[index2 + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}
function baseToString$1(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isSymbol$2(value)) {
    return symbolToString$1 ? symbolToString$1.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
function castPath$1(value) {
  return isArray$4(value) ? value : stringToPath$1(value);
}
function getMapData$1(map2, key) {
  var data = map2.__data__;
  return isKeyable$1(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
function getNative$1(object, key) {
  var value = getValue$1(object, key);
  return baseIsNative$1(value) ? value : void 0;
}
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
function isKey$1(value, object) {
  if (isArray$4(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$2(value)) {
    return true;
  }
  return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) || object != null && value in Object(object);
}
function isKeyable$1(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
function isMasked$1(func) {
  return !!maskSrcKey$1 && maskSrcKey$1 in func;
}
var stringToPath$1 = memoize$1(function(string) {
  string = toString$2(string);
  var result = [];
  if (reLeadingDot$1.test(string)) {
    result.push("");
  }
  string.replace(rePropName$1, function(match, number, quote, string2) {
    result.push(quote ? string2.replace(reEscapeChar$1, "$1") : number || match);
  });
  return result;
});
function toKey$1(value) {
  if (typeof value == "string" || isSymbol$2(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
}
function toSource$1(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
function memoize$1(func, resolver) {
  if (typeof func != "function" || resolver && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
    if (cache2.has(key)) {
      return cache2.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache2.set(key, result);
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache$1)();
  return memoized;
}
memoize$1.Cache = MapCache$1;
function eq$1(value, other) {
  return value === other || value !== value && other !== other;
}
var isArray$4 = Array.isArray;
function isFunction$4(value) {
  var tag = isObject$5(value) ? objectToString$2.call(value) : "";
  return tag == funcTag$1 || tag == genTag$1;
}
function isObject$5(value) {
  var type = typeof value;
  return !!value && (type == "object" || type == "function");
}
function isObjectLike$2(value) {
  return !!value && typeof value == "object";
}
function isSymbol$2(value) {
  return typeof value == "symbol" || isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$1;
}
function toString$2(value) {
  return value == null ? "" : baseToString$1(value);
}
function set$3(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}
var lodash_set = set$3;
var FUNC_ERROR_TEXT = "Expected a function";
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var INFINITY = 1 / 0;
var funcTag = "[object Function]", genTag = "[object GeneratorFunction]", symbolTag = "[object Symbol]";
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, reLeadingDot = /^\./, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reEscapeChar = /\\(\\)?/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
function isHostObject(value) {
  var result = false;
  if (value != null && typeof value.toString != "function") {
    try {
      result = !!(value + "");
    } catch (e) {
    }
  }
  return result;
}
var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
var coreJsData = root["__core-js_shared__"];
var maskSrcKey = function() {
  var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid2 ? "Symbol(src)_1." + uid2 : "";
}();
var funcToString = funcProto.toString;
var hasOwnProperty$2 = objectProto.hasOwnProperty;
var objectToString$1 = objectProto.toString;
var reIsNative = RegExp(
  "^" + funcToString.call(hasOwnProperty$2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
var Symbol$1 = root.Symbol, splice = arrayProto.splice;
var Map$1 = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
function Hash(entries) {
  var index2 = -1, length = entries ? entries.length : 0;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty$2.call(data, key) ? data[key] : void 0;
}
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== void 0 : hasOwnProperty$2.call(data, key);
}
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
  return this;
}
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
function ListCache(entries) {
  var index2 = -1, length = entries ? entries.length : 0;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
function listCacheClear() {
  this.__data__ = [];
}
function listCacheDelete(key) {
  var data = this.__data__, index2 = assocIndexOf(data, key);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index2 == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index2, 1);
  }
  return true;
}
function listCacheGet(key) {
  var data = this.__data__, index2 = assocIndexOf(data, key);
  return index2 < 0 ? void 0 : data[index2][1];
}
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
function listCacheSet(key, value) {
  var data = this.__data__, index2 = assocIndexOf(data, key);
  if (index2 < 0) {
    data.push([key, value]);
  } else {
    data[index2][1] = value;
  }
  return this;
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
function MapCache(entries) {
  var index2 = -1, length = entries ? entries.length : 0;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
function mapCacheClear() {
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$1 || ListCache)(),
    "string": new Hash()
  };
}
function mapCacheDelete(key) {
  return getMapData(this, key)["delete"](key);
}
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);
  var index2 = 0, length = path.length;
  while (object != null && index2 < length) {
    object = object[toKey(path[index2++])];
  }
  return index2 && index2 == length ? object : void 0;
}
function baseIsNative(value) {
  if (!isObject$4(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$3(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
function baseSlice(array, start, end) {
  var index2 = -1, length = array.length;
  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);
  while (++index2 < length) {
    result[index2] = array[index2 + start];
  }
  return result;
}
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isSymbol$1(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function baseUnset(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);
  object = parent(object, path);
  var key = toKey(last(path));
  return !(object != null && hasOwnProperty$2.call(object, key)) || delete object[key];
}
function castPath(value) {
  return isArray$3(value) ? value : stringToPath(value);
}
function getMapData(map2, key) {
  var data = map2.__data__;
  return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : void 0;
}
function isKey(value, object) {
  if (isArray$3(value)) {
    return false;
  }
  var type = typeof value;
  if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
function parent(object, path) {
  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
}
var stringToPath = memoize(function(string) {
  string = toString$1(string);
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push("");
  }
  string.replace(rePropName, function(match, number, quote, string2) {
    result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
  });
  return result;
});
function toKey(value) {
  if (typeof value == "string" || isSymbol$1(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
function last(array) {
  var length = array ? array.length : 0;
  return length ? array[length - 1] : void 0;
}
function memoize(func, resolver) {
  if (typeof func != "function" || resolver && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
    if (cache2.has(key)) {
      return cache2.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache2.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}
memoize.Cache = MapCache;
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var isArray$3 = Array.isArray;
function isFunction$3(value) {
  var tag = isObject$4(value) ? objectToString$1.call(value) : "";
  return tag == funcTag || tag == genTag;
}
function isObject$4(value) {
  var type = typeof value;
  return !!value && (type == "object" || type == "function");
}
function isObjectLike$1(value) {
  return !!value && typeof value == "object";
}
function isSymbol$1(value) {
  return typeof value == "symbol" || isObjectLike$1(value) && objectToString$1.call(value) == symbolTag;
}
function toString$1(value) {
  return value == null ? "" : baseToString(value);
}
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}
var lodash_unset = unset;
var lodash_clonedeep = { exports: {} };
(function(module2, exports) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
  var MAX_SAFE_INTEGER2 = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", promiseTag = "[object Promise]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag2 = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
  var reFlags = /\w*$/;
  var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
  var reIsUint2 = /^(?:0|[1-9]\d*)$/;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag2] = cloneableTags[weakMapTag] = false;
  var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
  var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  function addMapEntry(map2, pair) {
    map2.set(pair[0], pair[1]);
    return map2;
  }
  function addSetEntry(set2, value) {
    set2.add(value);
    return set2;
  }
  function arrayEach(array, iteratee) {
    var index2 = -1, length = array ? array.length : 0;
    while (++index2 < length) {
      if (iteratee(array[index2], index2, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayPush(array, values) {
    var index2 = -1, length = values.length, offset2 = array.length;
    while (++index2 < length) {
      array[offset2 + index2] = values[index2];
    }
    return array;
  }
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index2 = -1, length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[++index2];
    }
    while (++index2 < length) {
      accumulator = iteratee(accumulator, array[index2], index2, array);
    }
    return accumulator;
  }
  function baseTimes(n, iteratee) {
    var index2 = -1, result = Array(n);
    while (++index2 < n) {
      result[index2] = iteratee(index2);
    }
    return result;
  }
  function getValue2(object, key) {
    return object == null ? void 0 : object[key];
  }
  function isHostObject2(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  function mapToArray(map2) {
    var index2 = -1, result = Array(map2.size);
    map2.forEach(function(value, key) {
      result[++index2] = [key, value];
    });
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  function setToArray(set2) {
    var index2 = -1, result = Array(set2.size);
    set2.forEach(function(value) {
      result[++index2] = value;
    });
    return result;
  }
  var arrayProto2 = Array.prototype, funcProto2 = Function.prototype, objectProto2 = Object.prototype;
  var coreJsData2 = root2["__core-js_shared__"];
  var maskSrcKey2 = function() {
    var uid2 = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
    return uid2 ? "Symbol(src)_1." + uid2 : "";
  }();
  var funcToString2 = funcProto2.toString;
  var hasOwnProperty2 = objectProto2.hasOwnProperty;
  var objectToString2 = objectProto2.toString;
  var reIsNative2 = RegExp(
    "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  var Buffer2 = moduleExports ? root2.Buffer : void 0, Symbol2 = root2.Symbol, Uint8Array2 = root2.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto2.propertyIsEnumerable, splice2 = arrayProto2.splice;
  var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, nativeKeys = overArg(Object.keys, Object);
  var DataView2 = getNative2(root2, "DataView"), Map2 = getNative2(root2, "Map"), Promise2 = getNative2(root2, "Promise"), Set2 = getNative2(root2, "Set"), WeakMap2 = getNative2(root2, "WeakMap"), nativeCreate2 = getNative2(Object, "create");
  var dataViewCtorString = toSource2(DataView2), mapCtorString = toSource2(Map2), promiseCtorString = toSource2(Promise2), setCtorString = toSource2(Set2), weakMapCtorString = toSource2(WeakMap2);
  var symbolProto2 = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
  function Hash2(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index2 < length) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear2() {
    this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
  }
  function hashDelete2(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet2(key) {
    var data = this.__data__;
    if (nativeCreate2) {
      var result = data[key];
      return result === HASH_UNDEFINED2 ? void 0 : result;
    }
    return hasOwnProperty2.call(data, key) ? data[key] : void 0;
  }
  function hashHas2(key) {
    var data = this.__data__;
    return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
  }
  function hashSet2(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED2 : value;
    return this;
  }
  Hash2.prototype.clear = hashClear2;
  Hash2.prototype["delete"] = hashDelete2;
  Hash2.prototype.get = hashGet2;
  Hash2.prototype.has = hashHas2;
  Hash2.prototype.set = hashSet2;
  function ListCache2(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index2 < length) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear2() {
    this.__data__ = [];
  }
  function listCacheDelete2(key) {
    var data = this.__data__, index2 = assocIndexOf2(data, key);
    if (index2 < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index2 == lastIndex) {
      data.pop();
    } else {
      splice2.call(data, index2, 1);
    }
    return true;
  }
  function listCacheGet2(key) {
    var data = this.__data__, index2 = assocIndexOf2(data, key);
    return index2 < 0 ? void 0 : data[index2][1];
  }
  function listCacheHas2(key) {
    return assocIndexOf2(this.__data__, key) > -1;
  }
  function listCacheSet2(key, value) {
    var data = this.__data__, index2 = assocIndexOf2(data, key);
    if (index2 < 0) {
      data.push([key, value]);
    } else {
      data[index2][1] = value;
    }
    return this;
  }
  ListCache2.prototype.clear = listCacheClear2;
  ListCache2.prototype["delete"] = listCacheDelete2;
  ListCache2.prototype.get = listCacheGet2;
  ListCache2.prototype.has = listCacheHas2;
  ListCache2.prototype.set = listCacheSet2;
  function MapCache2(entries) {
    var index2 = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index2 < length) {
      var entry = entries[index2];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear2() {
    this.__data__ = {
      "hash": new Hash2(),
      "map": new (Map2 || ListCache2)(),
      "string": new Hash2()
    };
  }
  function mapCacheDelete2(key) {
    return getMapData2(this, key)["delete"](key);
  }
  function mapCacheGet2(key) {
    return getMapData2(this, key).get(key);
  }
  function mapCacheHas2(key) {
    return getMapData2(this, key).has(key);
  }
  function mapCacheSet2(key, value) {
    getMapData2(this, key).set(key, value);
    return this;
  }
  MapCache2.prototype.clear = mapCacheClear2;
  MapCache2.prototype["delete"] = mapCacheDelete2;
  MapCache2.prototype.get = mapCacheGet2;
  MapCache2.prototype.has = mapCacheHas2;
  MapCache2.prototype.set = mapCacheSet2;
  function Stack(entries) {
    this.__data__ = new ListCache2(entries);
  }
  function stackClear() {
    this.__data__ = new ListCache2();
  }
  function stackDelete(key) {
    return this.__data__["delete"](key);
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value) {
    var cache2 = this.__data__;
    if (cache2 instanceof ListCache2) {
      var pairs = cache2.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        return this;
      }
      cache2 = this.__data__ = new MapCache2(pairs);
    }
    cache2.set(key, value);
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var result = isArray2(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value) {
      if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isIndex2(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignValue2(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty2.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
      object[key] = value;
    }
  }
  function assocIndexOf2(array, key) {
    var length = array.length;
    while (length--) {
      if (eq2(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssign(object, source) {
    return object && copyObject(source, keys2(source), object);
  }
  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject2(value)) {
      return value;
    }
    var isArr = isArray2(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value), isFunc = tag == funcTag2 || tag == genTag2;
      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        if (isHostObject2(value)) {
          return object ? value : {};
        }
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, baseClone, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (!isArr) {
      var props = isFull ? getAllKeys(value) : keys2(value);
    }
    arrayEach(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue2(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
    });
    return result;
  }
  function baseCreate(proto2) {
    return isObject2(proto2) ? objectCreate(proto2) : {};
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function baseGetTag(value) {
    return objectToString2.call(value);
  }
  function baseIsNative2(value) {
    if (!isObject2(value) || isMasked2(value)) {
      return false;
    }
    var pattern = isFunction2(value) || isHostObject2(value) ? reIsNative2 : reIsHostCtor2;
    return pattern.test(toSource2(value));
  }
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty2.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  function cloneMap(map2, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map2), true) : mapToArray(map2);
    return arrayReduce(array, addMapEntry, new map2.constructor());
  }
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  function cloneSet(set2, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set2), true) : setToArray(set2);
    return arrayReduce(array, addSetEntry, new set2.constructor());
  }
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array) {
    var index2 = -1, length = source.length;
    array || (array = Array(length));
    while (++index2 < length) {
      array[index2] = source[index2];
    }
    return array;
  }
  function copyObject(source, props, object, customizer) {
    object || (object = {});
    var index2 = -1, length = props.length;
    while (++index2 < length) {
      var key = props[index2];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      assignValue2(object, key, newValue === void 0 ? source[key] : newValue);
    }
    return object;
  }
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys2, getSymbols);
  }
  function getMapData2(map2, key) {
    var data = map2.__data__;
    return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative2(object, key) {
    var value = getValue2(object, key);
    return baseIsNative2(value) ? value : void 0;
  }
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getTag = baseGetTag;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
    getTag = function(value) {
      var result = objectToString2.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : void 0;
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  function initCloneArray(array) {
    var length = array.length, result = array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function initCloneByTag(object, tag, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);
      case boolTag:
      case dateTag:
        return new Ctor(+object);
      case dataViewTag:
        return cloneDataView(object, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);
      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);
      case numberTag:
      case stringTag:
        return new Ctor(object);
      case regexpTag:
        return cloneRegExp(object);
      case setTag:
        return cloneSet(object, isDeep, cloneFunc);
      case symbolTag2:
        return cloneSymbol(object);
    }
  }
  function isIndex2(value, length) {
    length = length == null ? MAX_SAFE_INTEGER2 : length;
    return !!length && (typeof value == "number" || reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isKeyable2(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked2(func) {
    return !!maskSrcKey2 && maskSrcKey2 in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto2;
    return value === proto2;
  }
  function toSource2(func) {
    if (func != null) {
      try {
        return funcToString2.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function cloneDeep2(value) {
    return baseClone(value, true, true);
  }
  function eq2(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty2.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString2.call(value) == argsTag);
  }
  var isArray2 = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction2(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike2(value) && isArrayLike(value);
  }
  var isBuffer = nativeIsBuffer || stubFalse;
  function isFunction2(value) {
    var tag = isObject2(value) ? objectToString2.call(value) : "";
    return tag == funcTag2 || tag == genTag2;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
  }
  function isObject2(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike2(value) {
    return !!value && typeof value == "object";
  }
  function keys2(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function stubArray() {
    return [];
  }
  function stubFalse() {
    return false;
  }
  module2.exports = cloneDeep2;
})(lodash_clonedeep, lodash_clonedeep.exports);
var cloneDeep = lodash_clonedeep.exports;
function genRequestId(prefix) {
  if (prefix === void 0) {
    prefix = "";
  }
  return (prefix ? prefix + "_" : "") + +new Date() + "_" + Math.random();
}
var RealtimeListener = function() {
  function RealtimeListener2(options) {
    this.close = options.close;
    this.onChange = options.onChange;
    this.onError = options.onError;
    if (options.debug) {
      Object.defineProperty(this, "virtualClient", {
        get: function() {
          return options.virtualClient;
        }
      });
    }
  }
  return RealtimeListener2;
}();
var Snapshot = function() {
  function Snapshot2(options) {
    var id = options.id, docChanges = options.docChanges, docs = options.docs, msgType = options.msgType, type = options.type;
    var cachedDocChanges;
    var cachedDocs;
    Object.defineProperties(this, {
      id: {
        get: function() {
          return id;
        },
        enumerable: true
      },
      docChanges: {
        get: function() {
          if (!cachedDocChanges) {
            cachedDocChanges = JSON.parse(JSON.stringify(docChanges));
          }
          return cachedDocChanges;
        },
        enumerable: true
      },
      docs: {
        get: function() {
          if (!cachedDocs) {
            cachedDocs = JSON.parse(JSON.stringify(docs));
          }
          return cachedDocs;
        },
        enumerable: true
      },
      msgType: {
        get: function() {
          return msgType;
        },
        enumerable: true
      },
      type: {
        get: function() {
          return type;
        },
        enumerable: true
      }
    });
  }
  return Snapshot2;
}();
var __extends$5 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RealtimeErrorMessageError = function(_super) {
  __extends$5(RealtimeErrorMessageError2, _super);
  function RealtimeErrorMessageError2(serverErrorMsg) {
    var _this = _super.call(this, "Watch Error " + JSON.stringify(serverErrorMsg.msgData) + " (requestid: " + serverErrorMsg.requestId + ")") || this;
    _this.isRealtimeErrorMessageError = true;
    _this.payload = serverErrorMsg;
    return _this;
  }
  return RealtimeErrorMessageError2;
}(Error);
var isRealtimeErrorMessageError = function(e) {
  return e === null || e === void 0 ? void 0 : e.isRealtimeErrorMessageError;
};
var TimeoutError = function(_super) {
  __extends$5(TimeoutError2, _super);
  function TimeoutError2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.type = "timeout";
    _this.payload = null;
    _this.generic = true;
    return _this;
  }
  return TimeoutError2;
}(Error);
var isTimeoutError = function(e) {
  return e.type === "timeout";
};
var CancelledError = function(_super) {
  __extends$5(CancelledError2, _super);
  function CancelledError2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.type = "cancelled";
    _this.payload = null;
    _this.generic = true;
    return _this;
  }
  return CancelledError2;
}(Error);
var isCancelledError = function(e) {
  return e.type === "cancelled";
};
var CloudSDKError = function(_super) {
  __extends$5(CloudSDKError2, _super);
  function CloudSDKError2(options) {
    var _this = _super.call(this, options.errMsg) || this;
    _this.errCode = "UNKNOWN_ERROR";
    Object.defineProperties(_this, {
      message: {
        get: function() {
          return "errCode: " + this.errCode + " " + (ERR_CODE[this.errCode] || "") + " | errMsg: " + this.errMsg;
        },
        set: function(msg) {
          this.errMsg = msg;
        }
      }
    });
    _this.errCode = options.errCode || "UNKNOWN_ERROR";
    _this.errMsg = options.errMsg;
    return _this;
  }
  Object.defineProperty(CloudSDKError2.prototype, "message", {
    get: function() {
      return "errCode: " + this.errCode + " | errMsg: " + this.errMsg;
    },
    set: function(msg) {
      this.errMsg = msg;
    },
    enumerable: false,
    configurable: true
  });
  return CloudSDKError2;
}(Error);
var ERR_CODE = {
  UNKNOWN_ERROR: "UNKNOWN_ERROR",
  SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL: "SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL",
  SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL: "SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL",
  SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL: "SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL",
  SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL: "SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL",
  SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG: "SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG",
  SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA: "SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA",
  SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR: "SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR",
  SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED: "SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED",
  SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL: "SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL",
  SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR: "SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR"
};
var sleep = function(ms) {
  if (ms === void 0) {
    ms = 0;
  }
  return new Promise(function(r) {
    return setTimeout(r, ms);
  });
};
var __awaiter$5 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$5 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __spreadArrays = globalThis && globalThis.__spreadArrays || function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var WATCH_STATUS;
(function(WATCH_STATUS2) {
  WATCH_STATUS2["LOGGINGIN"] = "LOGGINGIN";
  WATCH_STATUS2["INITING"] = "INITING";
  WATCH_STATUS2["REBUILDING"] = "REBUILDING";
  WATCH_STATUS2["ACTIVE"] = "ACTIVE";
  WATCH_STATUS2["ERRORED"] = "ERRORED";
  WATCH_STATUS2["CLOSING"] = "CLOSING";
  WATCH_STATUS2["CLOSED"] = "CLOSED";
  WATCH_STATUS2["PAUSED"] = "PAUSED";
  WATCH_STATUS2["RESUMING"] = "RESUMING";
})(WATCH_STATUS || (WATCH_STATUS = {}));
var DEFAULT_WAIT_TIME_ON_UNKNOWN_ERROR = 100;
var DEFAULT_MAX_AUTO_RETRY_ON_ERROR = 2;
var DEFAULT_MAX_SEND_ACK_AUTO_RETRY_ON_ERROR = 2;
var DEFAULT_SEND_ACK_DEBOUNCE_TIMEOUT = 10 * 1e3;
var DEFAULT_INIT_WATCH_TIMEOUT = 10 * 1e3;
var DEFAULT_REBUILD_WATCH_TIMEOUT = 10 * 1e3;
var VirtualWebSocketClient = function() {
  function VirtualWebSocketClient2(options) {
    var _this = this;
    this.watchStatus = WATCH_STATUS.INITING;
    this._login = function(envId, refresh) {
      return __awaiter$5(_this, void 0, void 0, function() {
        var loginResult;
        return __generator$5(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              this.watchStatus = WATCH_STATUS.LOGGINGIN;
              return [4, this.login(envId, refresh)];
            case 1:
              loginResult = _a2.sent();
              if (!this.envId) {
                this.envId = loginResult.envId;
              }
              return [2, loginResult];
          }
        });
      });
    };
    this.initWatch = function(forceRefreshLogin) {
      return __awaiter$5(_this, void 0, void 0, function() {
        var success;
        var _this2 = this;
        return __generator$5(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (this._initWatchPromise) {
                return [2, this._initWatchPromise];
              }
              this._initWatchPromise = new Promise(function(resolve, reject) {
                return __awaiter$5(_this2, void 0, void 0, function() {
                  var envId, initWatchMsg, initEventMsg, _a3, events2, currEvent, _i, events_12, e, snapshot, e_1;
                  return __generator$5(this, function(_b) {
                    switch (_b.label) {
                      case 0:
                        _b.trys.push([0, 3, , 4]);
                        if (this.watchStatus === WATCH_STATUS.PAUSED) {
                          console.log("[realtime] initWatch cancelled on pause");
                          return [2, resolve()];
                        }
                        return [4, this._login(this.envId, forceRefreshLogin)];
                      case 1:
                        envId = _b.sent().envId;
                        if (this.watchStatus === WATCH_STATUS.PAUSED) {
                          console.log("[realtime] initWatch cancelled on pause");
                          return [2, resolve()];
                        }
                        this.watchStatus = WATCH_STATUS.INITING;
                        initWatchMsg = {
                          watchId: this.watchId,
                          requestId: genRequestId(),
                          msgType: "INIT_WATCH",
                          msgData: {
                            envId,
                            collName: this.collectionName,
                            query: this.query,
                            limit: this.limit,
                            orderBy: this.orderBy
                          }
                        };
                        return [4, this.send({
                          msg: initWatchMsg,
                          waitResponse: true,
                          skipOnMessage: true,
                          timeout: DEFAULT_INIT_WATCH_TIMEOUT
                        })];
                      case 2:
                        initEventMsg = _b.sent();
                        _a3 = initEventMsg.msgData, events2 = _a3.events, currEvent = _a3.currEvent;
                        this.sessionInfo = {
                          queryID: initEventMsg.msgData.queryID,
                          currentEventId: currEvent - 1,
                          currentDocs: []
                        };
                        if (events2.length > 0) {
                          for (_i = 0, events_12 = events2; _i < events_12.length; _i++) {
                            e = events_12[_i];
                            e.ID = currEvent;
                          }
                          this.handleServerEvents(initEventMsg);
                        } else {
                          this.sessionInfo.currentEventId = currEvent;
                          snapshot = new Snapshot({
                            id: currEvent,
                            docChanges: [],
                            docs: [],
                            type: "init"
                          });
                          this.listener.onChange(snapshot);
                          this.scheduleSendACK();
                        }
                        this.onWatchStart(this, this.sessionInfo.queryID);
                        this.watchStatus = WATCH_STATUS.ACTIVE;
                        this._availableRetries.INIT_WATCH = DEFAULT_MAX_AUTO_RETRY_ON_ERROR;
                        resolve();
                        return [3, 4];
                      case 3:
                        e_1 = _b.sent();
                        this.handleWatchEstablishmentError(e_1, {
                          operationName: "INIT_WATCH",
                          resolve,
                          reject
                        });
                        return [3, 4];
                      case 4:
                        return [2];
                    }
                  });
                });
              });
              success = false;
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, , 3, 4]);
              return [4, this._initWatchPromise];
            case 2:
              _a2.sent();
              success = true;
              return [3, 4];
            case 3:
              this._initWatchPromise = void 0;
              return [7];
            case 4:
              console.log("[realtime] initWatch " + (success ? "success" : "fail"));
              return [2];
          }
        });
      });
    };
    this.rebuildWatch = function(forceRefreshLogin) {
      return __awaiter$5(_this, void 0, void 0, function() {
        var success;
        var _this2 = this;
        return __generator$5(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (this._rebuildWatchPromise) {
                return [2, this._rebuildWatchPromise];
              }
              this._rebuildWatchPromise = new Promise(function(resolve, reject) {
                return __awaiter$5(_this2, void 0, void 0, function() {
                  var envId, rebuildWatchMsg, nextEventMsg, e_2;
                  return __generator$5(this, function(_a3) {
                    switch (_a3.label) {
                      case 0:
                        _a3.trys.push([0, 3, , 4]);
                        if (this.watchStatus === WATCH_STATUS.PAUSED) {
                          console.log("[realtime] rebuildWatch cancelled on pause");
                          return [2, resolve()];
                        }
                        return [4, this._login(this.envId, forceRefreshLogin)];
                      case 1:
                        envId = _a3.sent().envId;
                        if (!this.sessionInfo) {
                          throw new Error("can not rebuildWatch without a successful initWatch (lack of sessionInfo)");
                        }
                        if (this.watchStatus === WATCH_STATUS.PAUSED) {
                          console.log("[realtime] rebuildWatch cancelled on pause");
                          return [2, resolve()];
                        }
                        this.watchStatus = WATCH_STATUS.REBUILDING;
                        rebuildWatchMsg = {
                          watchId: this.watchId,
                          requestId: genRequestId(),
                          msgType: "REBUILD_WATCH",
                          msgData: {
                            envId,
                            collName: this.collectionName,
                            queryID: this.sessionInfo.queryID,
                            eventID: this.sessionInfo.currentEventId
                          }
                        };
                        return [4, this.send({
                          msg: rebuildWatchMsg,
                          waitResponse: true,
                          skipOnMessage: false,
                          timeout: DEFAULT_REBUILD_WATCH_TIMEOUT
                        })];
                      case 2:
                        nextEventMsg = _a3.sent();
                        this.handleServerEvents(nextEventMsg);
                        this.watchStatus = WATCH_STATUS.ACTIVE;
                        this._availableRetries.REBUILD_WATCH = DEFAULT_MAX_AUTO_RETRY_ON_ERROR;
                        resolve();
                        return [3, 4];
                      case 3:
                        e_2 = _a3.sent();
                        this.handleWatchEstablishmentError(e_2, {
                          operationName: "REBUILD_WATCH",
                          resolve,
                          reject
                        });
                        return [3, 4];
                      case 4:
                        return [2];
                    }
                  });
                });
              });
              success = false;
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, , 3, 4]);
              return [4, this._rebuildWatchPromise];
            case 2:
              _a2.sent();
              success = true;
              return [3, 4];
            case 3:
              this._rebuildWatchPromise = void 0;
              return [7];
            case 4:
              console.log("[realtime] rebuildWatch " + (success ? "success" : "fail"));
              return [2];
          }
        });
      });
    };
    this.handleWatchEstablishmentError = function(e, options2) {
      return __awaiter$5(_this, void 0, void 0, function() {
        var isInitWatch, abortWatch, retry;
        var _this2 = this;
        return __generator$5(this, function(_a2) {
          isInitWatch = options2.operationName === "INIT_WATCH";
          abortWatch = function() {
            _this2.closeWithError(new CloudSDKError({
              errCode: isInitWatch ? ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL : ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL,
              errMsg: e
            }));
            options2.reject(e);
          };
          retry = function(refreshLogin) {
            if (_this2.useRetryTicket(options2.operationName)) {
              if (isInitWatch) {
                _this2._initWatchPromise = void 0;
                options2.resolve(_this2.initWatch(refreshLogin));
              } else {
                _this2._rebuildWatchPromise = void 0;
                options2.resolve(_this2.rebuildWatch(refreshLogin));
              }
            } else {
              abortWatch();
            }
          };
          this.handleCommonError(e, {
            onSignError: function() {
              return retry(true);
            },
            onTimeoutError: function() {
              return retry(false);
            },
            onNotRetryableError: abortWatch,
            onCancelledError: options2.reject,
            onUnknownError: function() {
              return __awaiter$5(_this2, void 0, void 0, function() {
                var onWSDisconnected;
                var _this3 = this;
                return __generator$5(this, function(_a3) {
                  switch (_a3.label) {
                    case 0:
                      _a3.trys.push([0, 8, , 9]);
                      onWSDisconnected = function() {
                        return __awaiter$5(_this3, void 0, void 0, function() {
                          return __generator$5(this, function(_a4) {
                            switch (_a4.label) {
                              case 0:
                                this.pause();
                                return [4, this.onceWSConnected()];
                              case 1:
                                _a4.sent();
                                retry(true);
                                return [2];
                            }
                          });
                        });
                      };
                      if (!!this.isWSConnected())
                        return [3, 2];
                      return [4, onWSDisconnected()];
                    case 1:
                      _a3.sent();
                      return [3, 7];
                    case 2:
                      return [4, sleep(DEFAULT_WAIT_TIME_ON_UNKNOWN_ERROR)];
                    case 3:
                      _a3.sent();
                      if (!(this.watchStatus === WATCH_STATUS.PAUSED))
                        return [3, 4];
                      options2.reject(new CancelledError(options2.operationName + " cancelled due to pause after unknownError"));
                      return [3, 7];
                    case 4:
                      if (!!this.isWSConnected())
                        return [3, 6];
                      return [4, onWSDisconnected()];
                    case 5:
                      _a3.sent();
                      return [3, 7];
                    case 6:
                      retry(false);
                      _a3.label = 7;
                    case 7:
                      return [3, 9];
                    case 8:
                      _a3.sent();
                      retry(true);
                      return [3, 9];
                    case 9:
                      return [2];
                  }
                });
              });
            }
          });
          return [2];
        });
      });
    };
    this.closeWatch = function() {
      return __awaiter$5(_this, void 0, void 0, function() {
        var queryId, closeWatchMsg, e_4;
        return __generator$5(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              queryId = this.sessionInfo ? this.sessionInfo.queryID : "";
              if (this.watchStatus !== WATCH_STATUS.ACTIVE) {
                this.watchStatus = WATCH_STATUS.CLOSED;
                this.onWatchClose(this, queryId);
                return [2];
              }
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, 4, 5]);
              this.watchStatus = WATCH_STATUS.CLOSING;
              closeWatchMsg = {
                watchId: this.watchId,
                requestId: genRequestId(),
                msgType: "CLOSE_WATCH",
                msgData: null
              };
              return [4, this.send({
                msg: closeWatchMsg
              })];
            case 2:
              _a2.sent();
              this.sessionInfo = void 0;
              this.watchStatus = WATCH_STATUS.CLOSED;
              return [3, 5];
            case 3:
              e_4 = _a2.sent();
              this.closeWithError(new CloudSDKError({
                errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL,
                errMsg: e_4
              }));
              return [3, 5];
            case 4:
              this.onWatchClose(this, queryId);
              return [7];
            case 5:
              return [2];
          }
        });
      });
    };
    this.scheduleSendACK = function() {
      _this.clearACKSchedule();
      _this._ackTimeoutId = setTimeout(function() {
        if (_this._waitExpectedTimeoutId) {
          _this.scheduleSendACK();
        } else {
          _this.sendACK();
        }
      }, DEFAULT_SEND_ACK_DEBOUNCE_TIMEOUT);
    };
    this.clearACKSchedule = function() {
      if (_this._ackTimeoutId) {
        clearTimeout(_this._ackTimeoutId);
      }
    };
    this.sendACK = function() {
      return __awaiter$5(_this, void 0, void 0, function() {
        var ackMsg, e_5, msg;
        return __generator$5(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 2, , 3]);
              if (this.watchStatus !== WATCH_STATUS.ACTIVE) {
                this.scheduleSendACK();
                return [2];
              }
              if (!this.sessionInfo) {
                console.warn("[realtime listener] can not send ack without a successful initWatch (lack of sessionInfo)");
                return [2];
              }
              ackMsg = {
                watchId: this.watchId,
                requestId: genRequestId(),
                msgType: "CHECK_LAST",
                msgData: {
                  queryID: this.sessionInfo.queryID,
                  eventID: this.sessionInfo.currentEventId
                }
              };
              return [4, this.send({
                msg: ackMsg
              })];
            case 1:
              _a2.sent();
              this.scheduleSendACK();
              return [3, 3];
            case 2:
              e_5 = _a2.sent();
              if (isRealtimeErrorMessageError(e_5)) {
                msg = e_5.payload;
                switch (msg.msgData.code) {
                  case "CHECK_LOGIN_FAILED":
                  case "SIGN_EXPIRED_ERROR":
                  case "SIGN_INVALID_ERROR":
                  case "SIGN_PARAM_INVALID": {
                    this.rebuildWatch();
                    return [2];
                  }
                  case "QUERYID_INVALID_ERROR":
                  case "SYS_ERR":
                  case "INVALIID_ENV":
                  case "COLLECTION_PERMISSION_DENIED": {
                    this.closeWithError(new CloudSDKError({
                      errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL,
                      errMsg: msg.msgData.code
                    }));
                    return [2];
                  }
                }
              }
              if (this._availableRetries.CHECK_LAST && this._availableRetries.CHECK_LAST > 0) {
                this._availableRetries.CHECK_LAST--;
                this.scheduleSendACK();
              } else {
                this.closeWithError(new CloudSDKError({
                  errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL,
                  errMsg: e_5
                }));
              }
              return [3, 3];
            case 3:
              return [2];
          }
        });
      });
    };
    this.handleCommonError = function(e, options2) {
      if (isRealtimeErrorMessageError(e)) {
        var msg = e.payload;
        switch (msg.msgData.code) {
          case "CHECK_LOGIN_FAILED":
          case "SIGN_EXPIRED_ERROR":
          case "SIGN_INVALID_ERROR":
          case "SIGN_PARAM_INVALID": {
            options2.onSignError(e);
            return;
          }
          case "QUERYID_INVALID_ERROR":
          case "SYS_ERR":
          case "INVALIID_ENV":
          case "COLLECTION_PERMISSION_DENIED": {
            options2.onNotRetryableError(e);
            return;
          }
          default: {
            options2.onNotRetryableError(e);
            return;
          }
        }
      } else if (isTimeoutError(e)) {
        options2.onTimeoutError(e);
        return;
      } else if (isCancelledError(e)) {
        options2.onCancelledError(e);
        return;
      }
      options2.onUnknownError(e);
    };
    this.watchId = "watchid_" + +new Date() + "_" + Math.random();
    this.envId = options.envId;
    this.collectionName = options.collectionName;
    this.query = options.query;
    this.limit = options.limit;
    this.orderBy = options.orderBy;
    this.send = options.send;
    this.login = options.login;
    this.isWSConnected = options.isWSConnected;
    this.onceWSConnected = options.onceWSConnected;
    this.getWaitExpectedTimeoutLength = options.getWaitExpectedTimeoutLength;
    this.onWatchStart = options.onWatchStart;
    this.onWatchClose = options.onWatchClose;
    this.debug = options.debug;
    this._availableRetries = {
      INIT_WATCH: DEFAULT_MAX_AUTO_RETRY_ON_ERROR,
      REBUILD_WATCH: DEFAULT_MAX_AUTO_RETRY_ON_ERROR,
      CHECK_LAST: DEFAULT_MAX_SEND_ACK_AUTO_RETRY_ON_ERROR
    };
    this.listener = new RealtimeListener({
      close: this.closeWatch,
      onChange: options.onChange,
      onError: options.onError,
      debug: this.debug,
      virtualClient: this
    });
    this.initWatch();
  }
  VirtualWebSocketClient2.prototype.onMessage = function(msg) {
    var _this = this;
    switch (this.watchStatus) {
      case WATCH_STATUS.PAUSED: {
        if (msg.msgType !== "ERROR") {
          return;
        }
        break;
      }
      case WATCH_STATUS.LOGGINGIN:
      case WATCH_STATUS.INITING:
      case WATCH_STATUS.REBUILDING: {
        console.warn("[realtime listener] internal non-fatal error: unexpected message received while " + this.watchStatus);
        return;
      }
      case WATCH_STATUS.CLOSED: {
        console.warn("[realtime listener] internal non-fatal error: unexpected message received when the watch has closed");
        return;
      }
      case WATCH_STATUS.ERRORED: {
        console.warn("[realtime listener] internal non-fatal error: unexpected message received when the watch has ended with error");
        return;
      }
    }
    if (!this.sessionInfo) {
      console.warn("[realtime listener] internal non-fatal error: sessionInfo not found while message is received.");
      return;
    }
    this.scheduleSendACK();
    switch (msg.msgType) {
      case "NEXT_EVENT": {
        console.warn("nextevent " + msg.msgData.currEvent + " ignored", msg);
        this.handleServerEvents(msg);
        break;
      }
      case "CHECK_EVENT": {
        if (this.sessionInfo.currentEventId < msg.msgData.currEvent) {
          this.sessionInfo.expectEventId = msg.msgData.currEvent;
          this.clearWaitExpectedEvent();
          this._waitExpectedTimeoutId = setTimeout(function() {
            _this.rebuildWatch();
          }, this.getWaitExpectedTimeoutLength());
          console.log("[realtime] waitExpectedTimeoutLength " + this.getWaitExpectedTimeoutLength());
        }
        break;
      }
      case "ERROR": {
        this.closeWithError(new CloudSDKError({
          errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG,
          errMsg: msg.msgData.code + " - " + msg.msgData.message
        }));
        break;
      }
      default: {
        console.warn("[realtime listener] virtual client receive unexpected msg " + msg.msgType + ": ", msg);
        break;
      }
    }
  };
  VirtualWebSocketClient2.prototype.closeWithError = function(error) {
    this.watchStatus = WATCH_STATUS.ERRORED;
    this.clearACKSchedule();
    this.listener.onError(error);
    this.onWatchClose(this, this.sessionInfo && this.sessionInfo.queryID || "");
    console.log("[realtime] client closed (" + this.collectionName + " " + this.query + ") (watchId " + this.watchId + ")");
  };
  VirtualWebSocketClient2.prototype.pause = function() {
    this.watchStatus = WATCH_STATUS.PAUSED;
    console.log("[realtime] client paused (" + this.collectionName + " " + this.query + ") (watchId " + this.watchId + ")");
  };
  VirtualWebSocketClient2.prototype.resume = function() {
    return __awaiter$5(this, void 0, void 0, function() {
      var e_6;
      return __generator$5(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            this.watchStatus = WATCH_STATUS.RESUMING;
            console.log("[realtime] client resuming with " + (this.sessionInfo ? "REBUILD_WATCH" : "INIT_WATCH") + " (" + this.collectionName + " " + this.query + ") (" + this.watchId + ")");
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 3, , 4]);
            return [4, this.sessionInfo ? this.rebuildWatch() : this.initWatch()];
          case 2:
            _a2.sent();
            console.log("[realtime] client successfully resumed (" + this.collectionName + " " + this.query + ") (" + this.watchId + ")");
            return [3, 4];
          case 3:
            e_6 = _a2.sent();
            console.error("[realtime] client resume failed (" + this.collectionName + " " + this.query + ") (" + this.watchId + ")", e_6);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  VirtualWebSocketClient2.prototype.useRetryTicket = function(operationName) {
    if (this._availableRetries[operationName] && this._availableRetries[operationName] > 0) {
      this._availableRetries[operationName]--;
      console.log("[realtime] " + operationName + " use a retry ticket, now only " + this._availableRetries[operationName] + " retry left");
      return true;
    }
    return false;
  };
  VirtualWebSocketClient2.prototype.handleServerEvents = function(msg) {
    return __awaiter$5(this, void 0, void 0, function() {
      var e_7;
      return __generator$5(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            _a2.trys.push([0, 2, , 3]);
            this.scheduleSendACK();
            return [4, this._handleServerEvents(msg)];
          case 1:
            _a2.sent();
            this._postHandleServerEventsValidityCheck(msg);
            return [3, 3];
          case 2:
            e_7 = _a2.sent();
            console.error("[realtime listener] internal non-fatal error: handle server events failed with error: ", e_7);
            throw e_7;
          case 3:
            return [2];
        }
      });
    });
  };
  VirtualWebSocketClient2.prototype._handleServerEvents = function(msg) {
    return __awaiter$5(this, void 0, void 0, function() {
      var requestId, events2, msgType, sessionInfo, allChangeEvents, docs, initEncountered, _loop_1, this_1, i, len, state_1;
      return __generator$5(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            requestId = msg.requestId;
            events2 = msg.msgData.events;
            msgType = msg.msgType;
            if (!events2.length || !this.sessionInfo) {
              return [2];
            }
            sessionInfo = this.sessionInfo;
            try {
              allChangeEvents = events2.map(getPublicEvent);
            } catch (e) {
              this.closeWithError(new CloudSDKError({
                errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA,
                errMsg: e
              }));
              return [2];
            }
            docs = __spreadArrays(sessionInfo.currentDocs);
            initEncountered = false;
            _loop_1 = function(i2, len2) {
              var change, localDoc, doc2, fieldPath, _i, _a3, fieldPath, err, err, doc2, doc2, err, ind, ind, docsSnapshot, docChanges, snapshot;
              return __generator$5(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    change = allChangeEvents[i2];
                    if (!(sessionInfo.currentEventId >= change.id))
                      return [3, 1];
                    if (!allChangeEvents[i2 - 1] || change.id > allChangeEvents[i2 - 1].id) {
                      console.warn("[realtime] duplicate event received, cur " + sessionInfo.currentEventId + " but got " + change.id);
                    } else {
                      console.error("[realtime listener] server non-fatal error: events out of order (the latter event's id is smaller than that of the former) (requestId " + requestId + ")");
                    }
                    return [2, "continue"];
                  case 1:
                    if (!(sessionInfo.currentEventId === change.id - 1))
                      return [3, 2];
                    switch (change.dataType) {
                      case "update": {
                        if (!change.doc) {
                          switch (change.queueType) {
                            case "update":
                            case "dequeue": {
                              localDoc = docs.find(function(doc3) {
                                return doc3._id === change.docId;
                              });
                              if (localDoc) {
                                doc2 = cloneDeep(localDoc);
                                if (change.updatedFields) {
                                  for (fieldPath in change.updatedFields) {
                                    lodash_set(doc2, fieldPath, change.updatedFields[fieldPath]);
                                  }
                                }
                                if (change.removedFields) {
                                  for (_i = 0, _a3 = change.removedFields; _i < _a3.length; _i++) {
                                    fieldPath = _a3[_i];
                                    lodash_unset(doc2, fieldPath);
                                  }
                                }
                                change.doc = doc2;
                              } else {
                                console.error("[realtime listener] internal non-fatal server error: unexpected update dataType event where no doc is associated.");
                              }
                              break;
                            }
                            case "enqueue": {
                              err = new CloudSDKError({
                                errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR,
                                errMsg: 'HandleServerEvents: full doc is not provided with dataType="update" and queueType="enqueue" (requestId ' + msg.requestId + ")"
                              });
                              this_1.closeWithError(err);
                              throw err;
                            }
                          }
                        }
                        break;
                      }
                      case "replace": {
                        if (!change.doc) {
                          err = new CloudSDKError({
                            errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR,
                            errMsg: 'HandleServerEvents: full doc is not provided with dataType="replace" (requestId ' + msg.requestId + ")"
                          });
                          this_1.closeWithError(err);
                          throw err;
                        }
                        break;
                      }
                      case "remove": {
                        doc2 = docs.find(function(doc3) {
                          return doc3._id === change.docId;
                        });
                        if (doc2) {
                          change.doc = doc2;
                        } else {
                          console.error("[realtime listener] internal non-fatal server error: unexpected remove event where no doc is associated.");
                        }
                        break;
                      }
                      case "limit": {
                        if (!change.doc) {
                          switch (change.queueType) {
                            case "dequeue": {
                              doc2 = docs.find(function(doc3) {
                                return doc3._id === change.docId;
                              });
                              if (doc2) {
                                change.doc = doc2;
                              } else {
                                console.error("[realtime listener] internal non-fatal server error: unexpected limit dataType event where no doc is associated.");
                              }
                              break;
                            }
                            case "enqueue": {
                              err = new CloudSDKError({
                                errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR,
                                errMsg: 'HandleServerEvents: full doc is not provided with dataType="limit" and queueType="enqueue" (requestId ' + msg.requestId + ")"
                              });
                              this_1.closeWithError(err);
                              throw err;
                            }
                          }
                        }
                        break;
                      }
                    }
                    switch (change.queueType) {
                      case "init": {
                        if (!initEncountered) {
                          initEncountered = true;
                          docs = [change.doc];
                        } else {
                          docs.push(change.doc);
                        }
                        break;
                      }
                      case "enqueue": {
                        docs.push(change.doc);
                        break;
                      }
                      case "dequeue": {
                        ind = docs.findIndex(function(doc3) {
                          return doc3._id === change.docId;
                        });
                        if (ind > -1) {
                          docs.splice(ind, 1);
                        } else {
                          console.error("[realtime listener] internal non-fatal server error: unexpected dequeue event where no doc is associated.");
                        }
                        break;
                      }
                      case "update": {
                        ind = docs.findIndex(function(doc3) {
                          return doc3._id === change.docId;
                        });
                        if (ind > -1) {
                          docs[ind] = change.doc;
                        } else {
                          console.error("[realtime listener] internal non-fatal server error: unexpected queueType update event where no doc is associated.");
                        }
                        break;
                      }
                    }
                    if (i2 === len2 - 1 || allChangeEvents[i2 + 1] && allChangeEvents[i2 + 1].id !== change.id) {
                      docsSnapshot = __spreadArrays(docs);
                      docChanges = allChangeEvents.slice(0, i2 + 1).filter(function(c) {
                        return c.id === change.id;
                      });
                      this_1.sessionInfo.currentEventId = change.id;
                      this_1.sessionInfo.currentDocs = docs;
                      snapshot = new Snapshot({
                        id: change.id,
                        docChanges,
                        docs: docsSnapshot,
                        msgType
                      });
                      this_1.listener.onChange(snapshot);
                    }
                    return [3, 4];
                  case 2:
                    console.warn("[realtime listener] event received is out of order, cur " + this_1.sessionInfo.currentEventId + " but got " + change.id);
                    return [4, this_1.rebuildWatch()];
                  case 3:
                    _b.sent();
                    return [2, { value: void 0 }];
                  case 4:
                    return [2];
                }
              });
            };
            this_1 = this;
            i = 0, len = allChangeEvents.length;
            _a2.label = 1;
          case 1:
            if (!(i < len))
              return [3, 4];
            return [5, _loop_1(i, len)];
          case 2:
            state_1 = _a2.sent();
            if (typeof state_1 === "object")
              return [2, state_1.value];
            _a2.label = 3;
          case 3:
            i++;
            return [3, 1];
          case 4:
            return [2];
        }
      });
    });
  };
  VirtualWebSocketClient2.prototype._postHandleServerEventsValidityCheck = function(msg) {
    if (!this.sessionInfo) {
      console.error("[realtime listener] internal non-fatal error: sessionInfo lost after server event handling, this should never occur");
      return;
    }
    if (this.sessionInfo.expectEventId && this.sessionInfo.currentEventId >= this.sessionInfo.expectEventId) {
      this.clearWaitExpectedEvent();
    }
    if (this.sessionInfo.currentEventId < msg.msgData.currEvent) {
      console.warn("[realtime listener] internal non-fatal error: client eventId does not match with server event id after server event handling");
      return;
    }
  };
  VirtualWebSocketClient2.prototype.clearWaitExpectedEvent = function() {
    if (this._waitExpectedTimeoutId) {
      clearTimeout(this._waitExpectedTimeoutId);
      this._waitExpectedTimeoutId = void 0;
    }
  };
  return VirtualWebSocketClient2;
}();
function getPublicEvent(event) {
  var e = {
    id: event.ID,
    dataType: event.DataType,
    queueType: event.QueueType,
    docId: event.DocID,
    doc: event.Doc && event.Doc !== "{}" ? JSON.parse(event.Doc) : void 0
  };
  if (event.DataType === "update") {
    if (event.UpdatedFields) {
      e.updatedFields = JSON.parse(event.UpdatedFields);
    }
    if (event.removedFields || event.RemovedFields) {
      e.removedFields = JSON.parse(event.removedFields);
    }
  }
  return e;
}
var CLOSE_EVENT_CODE_INFO = {
  1e3: {
    code: 1e3,
    name: "Normal Closure",
    description: "Normal closure; the connection successfully completed whatever purpose for which it was created."
  },
  1001: {
    code: 1001,
    name: "Going Away",
    description: "The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection."
  },
  1002: {
    code: 1002,
    name: "Protocol Error",
    description: "The endpoint is terminating the connection due to a protocol error."
  },
  1003: {
    code: 1003,
    name: "Unsupported Data",
    description: "The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data)."
  },
  1005: {
    code: 1005,
    name: "No Status Received",
    description: "Indicates that no status code was provided even though one was expected."
  },
  1006: {
    code: 1006,
    name: "Abnormal Closure",
    description: "Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected."
  },
  1007: {
    code: 1007,
    name: "Invalid frame payload data",
    description: "The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message)."
  },
  1008: {
    code: 1008,
    name: "Policy Violation",
    description: "The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable."
  },
  1009: {
    code: 1009,
    name: "Message too big",
    description: "The endpoint is terminating the connection because a data frame was received that is too large."
  },
  1010: {
    code: 1010,
    name: "Missing Extension",
    description: "The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't."
  },
  1011: {
    code: 1011,
    name: "Internal Error",
    description: "The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request."
  },
  1012: {
    code: 1012,
    name: "Service Restart",
    description: "The server is terminating the connection because it is restarting."
  },
  1013: {
    code: 1013,
    name: "Try Again Later",
    description: "The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients."
  },
  1014: {
    code: 1014,
    name: "Bad Gateway",
    description: "The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code."
  },
  1015: {
    code: 1015,
    name: "TLS Handshake",
    description: "Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified)."
  },
  3e3: {
    code: 3e3,
    name: "Reconnect WebSocket",
    description: "The client is terminating the connection because it wants to reconnect"
  },
  3001: {
    code: 3001,
    name: "No Realtime Listeners",
    description: "The client is terminating the connection because no more realtime listeners exist"
  },
  3002: {
    code: 3002,
    name: "Heartbeat Ping Error",
    description: "The client is terminating the connection due to its failure in sending heartbeat messages"
  },
  3003: {
    code: 3003,
    name: "Heartbeat Pong Timeout Error",
    description: "The client is terminating the connection because no heartbeat response is received from the server"
  },
  3050: {
    code: 3050,
    name: "Server Close",
    description: "The client is terminating the connection because no heartbeat response is received from the server"
  }
};
var CLOSE_EVENT_CODE;
(function(CLOSE_EVENT_CODE2) {
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["NormalClosure"] = 1e3] = "NormalClosure";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["GoingAway"] = 1001] = "GoingAway";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["ProtocolError"] = 1002] = "ProtocolError";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["UnsupportedData"] = 1003] = "UnsupportedData";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["NoStatusReceived"] = 1005] = "NoStatusReceived";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["AbnormalClosure"] = 1006] = "AbnormalClosure";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["InvalidFramePayloadData"] = 1007] = "InvalidFramePayloadData";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["PolicyViolation"] = 1008] = "PolicyViolation";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["MessageTooBig"] = 1009] = "MessageTooBig";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["MissingExtension"] = 1010] = "MissingExtension";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["InternalError"] = 1011] = "InternalError";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["ServiceRestart"] = 1012] = "ServiceRestart";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["TryAgainLater"] = 1013] = "TryAgainLater";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["BadGateway"] = 1014] = "BadGateway";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["TLSHandshake"] = 1015] = "TLSHandshake";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["ReconnectWebSocket"] = 3e3] = "ReconnectWebSocket";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["NoRealtimeListeners"] = 3001] = "NoRealtimeListeners";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["HeartbeatPingError"] = 3002] = "HeartbeatPingError";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["HeartbeatPongTimeoutError"] = 3003] = "HeartbeatPongTimeoutError";
  CLOSE_EVENT_CODE2[CLOSE_EVENT_CODE2["NoAuthentication"] = 3050] = "NoAuthentication";
})(CLOSE_EVENT_CODE || (CLOSE_EVENT_CODE = {}));
var getWSCloseError = function(code2, reason) {
  var info = CLOSE_EVENT_CODE_INFO[code2];
  var errMsg = !info ? "code " + code2 : info.name + ", code " + code2 + ", reason " + (reason || info.description);
  return new CloudSDKError({
    errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED,
    errMsg
  });
};
var wsClass = null;
var runtime = "web";
function getWsClass() {
  return wsClass;
}
function setWsClass(val) {
  wsClass = val;
}
function getRuntime() {
  return runtime;
}
function setRuntime(val) {
  runtime = val;
}
var __assign$6 = globalThis && globalThis.__assign || function() {
  __assign$6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$6.apply(this, arguments);
};
var __awaiter$4 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$4 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var WS_READY_STATE = {
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3
};
var MAX_RTT_OBSERVED = 3;
var DEFAULT_EXPECTED_EVENT_WAIT_TIME = 5e3;
var DEFAULT_UNTRUSTED_RTT_THRESHOLD = 1e4;
var DEFAULT_MAX_RECONNECT = 5;
var DEFAULT_WS_RECONNECT_INTERVAL = 1e4;
var DEFAULT_PING_FAIL_TOLERANCE = 2;
var DEFAULT_PONG_MISS_TOLERANCE = 2;
var DEFAULT_LOGIN_TIMEOUT = 5e3;
var RealtimeWebSocketClient = function() {
  function RealtimeWebSocketClient2(options) {
    var _this = this;
    this._virtualWSClient = /* @__PURE__ */ new Set();
    this._queryIdClientMap = /* @__PURE__ */ new Map();
    this._watchIdClientMap = /* @__PURE__ */ new Map();
    this._pingFailed = 0;
    this._pongMissed = 0;
    this._logins = /* @__PURE__ */ new Map();
    this._wsReadySubsribers = [];
    this._wsResponseWait = /* @__PURE__ */ new Map();
    this._rttObserved = [];
    this.send = function(opts) {
      return __awaiter$4(_this, void 0, void 0, function() {
        var _this2 = this;
        return __generator$4(this, function(_a2) {
          return [2, new Promise(function(_resolve, _reject) {
            return __awaiter$4(_this2, void 0, void 0, function() {
              var timeoutId, _hasResolved, _hasRejected, resolve, reject, err_1, e_1;
              var _this3 = this;
              return __generator$4(this, function(_a3) {
                switch (_a3.label) {
                  case 0:
                    _hasResolved = false;
                    _hasRejected = false;
                    resolve = function(value) {
                      _hasResolved = true;
                      timeoutId && clearTimeout(timeoutId);
                      _resolve(value);
                    };
                    reject = function(error) {
                      _hasRejected = true;
                      timeoutId && clearTimeout(timeoutId);
                      _reject(error);
                    };
                    if (opts.timeout) {
                      timeoutId = setTimeout(function() {
                        return __awaiter$4(_this3, void 0, void 0, function() {
                          return __generator$4(this, function(_a4) {
                            switch (_a4.label) {
                              case 0:
                                if (!(!_hasResolved || !_hasRejected))
                                  return [3, 2];
                                return [4, sleep(0)];
                              case 1:
                                _a4.sent();
                                if (!_hasResolved || !_hasRejected) {
                                  reject(new TimeoutError("wsclient.send timedout"));
                                }
                                _a4.label = 2;
                              case 2:
                                return [2];
                            }
                          });
                        });
                      }, opts.timeout);
                    }
                    _a3.label = 1;
                  case 1:
                    _a3.trys.push([1, 8, , 9]);
                    if (!this._wsInitPromise)
                      return [3, 3];
                    return [4, this._wsInitPromise];
                  case 2:
                    _a3.sent();
                    _a3.label = 3;
                  case 3:
                    if (!this._ws) {
                      reject(new Error("invalid state: ws connection not exists, can not send message"));
                      return [2];
                    }
                    if (this._ws.readyState !== WS_READY_STATE.OPEN) {
                      reject(new Error("ws readyState invalid: " + this._ws.readyState + ", can not send message"));
                      return [2];
                    }
                    if (opts.waitResponse) {
                      this._wsResponseWait.set(opts.msg.requestId, {
                        resolve,
                        reject,
                        skipOnMessage: opts.skipOnMessage
                      });
                    }
                    _a3.label = 4;
                  case 4:
                    _a3.trys.push([4, 6, , 7]);
                    return [4, this._ws.send(JSON.stringify(opts.msg))];
                  case 5:
                    _a3.sent();
                    if (!opts.waitResponse) {
                      resolve();
                    }
                    return [3, 7];
                  case 6:
                    err_1 = _a3.sent();
                    if (err_1) {
                      reject(err_1);
                      if (opts.waitResponse) {
                        this._wsResponseWait.delete(opts.msg.requestId);
                      }
                    }
                    return [3, 7];
                  case 7:
                    return [3, 9];
                  case 8:
                    e_1 = _a3.sent();
                    reject(e_1);
                    return [3, 9];
                  case 9:
                    return [2];
                }
              });
            });
          })];
        });
      });
    };
    this.closeAllClients = function(error) {
      _this._virtualWSClient.forEach(function(client) {
        client.closeWithError(error);
      });
    };
    this.pauseClients = function(clients) {
      (clients || _this._virtualWSClient).forEach(function(client) {
        client.pause();
      });
    };
    this.resumeClients = function(clients) {
      (clients || _this._virtualWSClient).forEach(function(client) {
        client.resume();
      });
    };
    this.initWebSocketConnection = function(reconnect, availableRetries) {
      if (availableRetries === void 0) {
        availableRetries = _this._maxReconnect;
      }
      return __awaiter$4(_this, void 0, void 0, function() {
        var _this2 = this;
        return __generator$4(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (reconnect && this._reconnectState) {
                return [2];
              }
              if (reconnect) {
                this._reconnectState = true;
              }
              if (this._wsInitPromise) {
                return [2, this._wsInitPromise];
              }
              if (reconnect) {
                this.pauseClients();
              }
              this.close(CLOSE_EVENT_CODE.ReconnectWebSocket);
              this._wsInitPromise = new Promise(function(resolve, reject) {
                return __awaiter$4(_this2, void 0, void 0, function() {
                  var wsSign_1, e_3, isConnected;
                  var _this3 = this;
                  return __generator$4(this, function(_a3) {
                    switch (_a3.label) {
                      case 0:
                        _a3.trys.push([0, 6, , 11]);
                        return [4, this.getWsSign()];
                      case 1:
                        wsSign_1 = _a3.sent();
                        return [4, new Promise(function(success) {
                          var url = wsSign_1.wsUrl || "wss://tcb-ws.tencentcloudapi.com";
                          var wsClass2 = getWsClass();
                          _this3._ws = wsClass2 ? new wsClass2(url) : new WebSocket(url);
                          success();
                        })];
                      case 2:
                        _a3.sent();
                        if (!this._ws.connect)
                          return [3, 4];
                        return [4, this._ws.connect()];
                      case 3:
                        _a3.sent();
                        _a3.label = 4;
                      case 4:
                        return [4, this.initWebSocketEvent()];
                      case 5:
                        _a3.sent();
                        resolve();
                        if (reconnect) {
                          this.resumeClients();
                          this._reconnectState = false;
                        }
                        return [3, 11];
                      case 6:
                        e_3 = _a3.sent();
                        console.error("[realtime] initWebSocketConnection connect fail", e_3);
                        if (!(availableRetries > 0))
                          return [3, 9];
                        isConnected = true;
                        this._wsInitPromise = void 0;
                        if (!isConnected)
                          return [3, 8];
                        return [4, sleep(this._reconnectInterval)];
                      case 7:
                        _a3.sent();
                        if (reconnect) {
                          this._reconnectState = false;
                        }
                        _a3.label = 8;
                      case 8:
                        resolve(this.initWebSocketConnection(reconnect, availableRetries - 1));
                        return [3, 10];
                      case 9:
                        reject(e_3);
                        if (reconnect) {
                          this.closeAllClients(new CloudSDKError({
                            errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL,
                            errMsg: e_3
                          }));
                        }
                        _a3.label = 10;
                      case 10:
                        return [3, 11];
                      case 11:
                        return [2];
                    }
                  });
                });
              });
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, 4, 5]);
              return [4, this._wsInitPromise];
            case 2:
              _a2.sent();
              this._wsReadySubsribers.forEach(function(_a3) {
                var resolve = _a3.resolve;
                return resolve();
              });
              return [3, 5];
            case 3:
              _a2.sent();
              this._wsReadySubsribers.forEach(function(_a3) {
                var reject = _a3.reject;
                return reject();
              });
              return [3, 5];
            case 4:
              this._wsInitPromise = void 0;
              this._wsReadySubsribers = [];
              return [7];
            case 5:
              return [2];
          }
        });
      });
    };
    this.initWebSocketEvent = function() {
      return new Promise(function(resolve, reject) {
        if (!_this._ws) {
          throw new Error("can not initWebSocketEvent, ws not exists");
        }
        var wsOpened = false;
        _this._ws.onopen = function(event) {
          console.warn("[realtime] ws event: open", event);
          wsOpened = true;
          resolve();
        };
        _this._ws.onerror = function(event) {
          _this._logins = /* @__PURE__ */ new Map();
          if (!wsOpened) {
            console.error("[realtime] ws open failed with ws event: error", event);
            reject(event);
          } else {
            console.error("[realtime] ws event: error", event);
            _this.clearHeartbeat();
            _this._virtualWSClient.forEach(function(client) {
              return client.closeWithError(new CloudSDKError({
                errCode: ERR_CODE.SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR,
                errMsg: event
              }));
            });
          }
        };
        _this._ws.onclose = function(closeEvent) {
          console.warn("[realtime] ws event: close", closeEvent);
          _this._logins = /* @__PURE__ */ new Map();
          _this.clearHeartbeat();
          switch (closeEvent.code) {
            case CLOSE_EVENT_CODE.ReconnectWebSocket: {
              break;
            }
            case CLOSE_EVENT_CODE.NoRealtimeListeners: {
              break;
            }
            case CLOSE_EVENT_CODE.HeartbeatPingError:
            case CLOSE_EVENT_CODE.HeartbeatPongTimeoutError:
            case CLOSE_EVENT_CODE.NormalClosure:
            case CLOSE_EVENT_CODE.AbnormalClosure: {
              if (_this._maxReconnect > 0) {
                _this.initWebSocketConnection(true, _this._maxReconnect);
              } else {
                _this.closeAllClients(getWSCloseError(closeEvent.code));
              }
              break;
            }
            case CLOSE_EVENT_CODE.NoAuthentication: {
              _this.closeAllClients(getWSCloseError(closeEvent.code, closeEvent.reason));
              break;
            }
            default: {
              if (_this._maxReconnect > 0) {
                _this.initWebSocketConnection(true, _this._maxReconnect);
              } else {
                _this.closeAllClients(getWSCloseError(closeEvent.code));
              }
            }
          }
        };
        _this._ws.onmessage = function(res) {
          var rawMsg = res.data;
          _this.heartbeat();
          var msg;
          try {
            msg = JSON.parse(rawMsg);
          } catch (e) {
            throw new Error("[realtime] onMessage parse res.data error: " + e);
          }
          if (msg.msgType === "ERROR") {
            var virtualWatch_1 = null;
            _this._virtualWSClient.forEach(function(item) {
              if (item.watchId === msg.watchId) {
                virtualWatch_1 = item;
              }
            });
            if (virtualWatch_1) {
              virtualWatch_1.listener.onError(msg);
            }
          }
          var responseWaitSpec = _this._wsResponseWait.get(msg.requestId);
          if (responseWaitSpec) {
            try {
              if (msg.msgType === "ERROR") {
                responseWaitSpec.reject(new RealtimeErrorMessageError(msg));
              } else {
                responseWaitSpec.resolve(msg);
              }
            } catch (e) {
              console.error("ws onMessage responseWaitSpec.resolve(msg) errored:", e);
            } finally {
              _this._wsResponseWait.delete(msg.requestId);
            }
            if (responseWaitSpec.skipOnMessage) {
              return;
            }
          }
          if (msg.msgType === "PONG") {
            if (_this._lastPingSendTS) {
              var rtt = Date.now() - _this._lastPingSendTS;
              if (rtt > DEFAULT_UNTRUSTED_RTT_THRESHOLD) {
                console.warn("[realtime] untrusted rtt observed: " + rtt);
                return;
              }
              if (_this._rttObserved.length >= MAX_RTT_OBSERVED) {
                _this._rttObserved.splice(0, _this._rttObserved.length - MAX_RTT_OBSERVED + 1);
              }
              _this._rttObserved.push(rtt);
            }
            return;
          }
          var client = msg.watchId && _this._watchIdClientMap.get(msg.watchId);
          if (client) {
            client.onMessage(msg);
          } else {
            console.error("[realtime] no realtime listener found responsible for watchId " + msg.watchId + ": ", msg);
            switch (msg.msgType) {
              case "INIT_EVENT":
              case "NEXT_EVENT":
              case "CHECK_EVENT": {
                client = _this._queryIdClientMap.get(msg.msgData.queryID);
                if (client) {
                  client.onMessage(msg);
                }
                break;
              }
              default: {
                for (var _i = 0, _a2 = Array.from(_this._watchIdClientMap.entries()); _i < _a2.length; _i++) {
                  var _b = _a2[_i], client_1 = _b[1];
                  client_1.onMessage(msg);
                  break;
                }
              }
            }
          }
        };
        _this.heartbeat();
      });
    };
    this.isWSConnected = function() {
      return Boolean(_this._ws && _this._ws.readyState === WS_READY_STATE.OPEN);
    };
    this.onceWSConnected = function() {
      return __awaiter$4(_this, void 0, void 0, function() {
        var _this2 = this;
        return __generator$4(this, function(_a2) {
          if (this.isWSConnected()) {
            return [2];
          }
          if (this._wsInitPromise) {
            return [2, this._wsInitPromise];
          }
          return [2, new Promise(function(resolve, reject) {
            _this2._wsReadySubsribers.push({
              resolve,
              reject
            });
          })];
        });
      });
    };
    this.webLogin = function(envId, refresh) {
      return __awaiter$4(_this, void 0, void 0, function() {
        var loginInfo_1, emptyEnvLoginInfo, promise, loginInfo, loginStartTS, loginResult, curLoginInfo, e_4;
        var _this2 = this;
        return __generator$4(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!refresh) {
                if (envId) {
                  loginInfo_1 = this._logins.get(envId);
                  if (loginInfo_1) {
                    if (loginInfo_1.loggedIn && loginInfo_1.loginResult) {
                      return [2, loginInfo_1.loginResult];
                    } else if (loginInfo_1.loggingInPromise) {
                      return [2, loginInfo_1.loggingInPromise];
                    }
                  }
                } else {
                  emptyEnvLoginInfo = this._logins.get("");
                  if (emptyEnvLoginInfo === null || emptyEnvLoginInfo === void 0 ? void 0 : emptyEnvLoginInfo.loggingInPromise) {
                    return [2, emptyEnvLoginInfo.loggingInPromise];
                  }
                }
              }
              promise = new Promise(function(resolve, reject) {
                return __awaiter$4(_this2, void 0, void 0, function() {
                  var wsSign, msgData, loginMsg, loginResMsg, e_5;
                  return __generator$4(this, function(_a3) {
                    switch (_a3.label) {
                      case 0:
                        _a3.trys.push([0, 3, , 4]);
                        return [4, this.getWsSign()];
                      case 1:
                        wsSign = _a3.sent();
                        msgData = {
                          envId: wsSign.envId || "",
                          accessToken: "",
                          referrer: "web",
                          sdkVersion: "",
                          dataVersion: ""
                        };
                        loginMsg = {
                          watchId: void 0,
                          requestId: genRequestId(),
                          msgType: "LOGIN",
                          msgData,
                          exMsgData: {
                            runtime: getRuntime(),
                            signStr: wsSign.signStr,
                            secretVersion: wsSign.secretVersion
                          }
                        };
                        return [4, this.send({
                          msg: loginMsg,
                          waitResponse: true,
                          skipOnMessage: true,
                          timeout: DEFAULT_LOGIN_TIMEOUT
                        })];
                      case 2:
                        loginResMsg = _a3.sent();
                        if (!loginResMsg.msgData.code) {
                          resolve({
                            envId: wsSign.envId
                          });
                        } else {
                          reject(new Error(loginResMsg.msgData.code + " " + loginResMsg.msgData.message));
                        }
                        return [3, 4];
                      case 3:
                        e_5 = _a3.sent();
                        reject(e_5);
                        return [3, 4];
                      case 4:
                        return [2];
                    }
                  });
                });
              });
              loginInfo = envId && this._logins.get(envId);
              loginStartTS = Date.now();
              if (loginInfo) {
                loginInfo.loggedIn = false;
                loginInfo.loggingInPromise = promise;
                loginInfo.loginStartTS = loginStartTS;
              } else {
                loginInfo = {
                  loggedIn: false,
                  loggingInPromise: promise,
                  loginStartTS
                };
                this._logins.set(envId || "", loginInfo);
              }
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, promise];
            case 2:
              loginResult = _a2.sent();
              curLoginInfo = envId && this._logins.get(envId);
              if (curLoginInfo && curLoginInfo === loginInfo && curLoginInfo.loginStartTS === loginStartTS) {
                loginInfo.loggedIn = true;
                loginInfo.loggingInPromise = void 0;
                loginInfo.loginStartTS = void 0;
                loginInfo.loginResult = loginResult;
                return [2, loginResult];
              } else if (curLoginInfo) {
                if (curLoginInfo.loggedIn && curLoginInfo.loginResult) {
                  return [2, curLoginInfo.loginResult];
                } else if (curLoginInfo.loggingInPromise) {
                  return [2, curLoginInfo.loggingInPromise];
                } else {
                  throw new Error("ws unexpected login info");
                }
              } else {
                throw new Error("ws login info reset");
              }
            case 3:
              e_4 = _a2.sent();
              loginInfo.loggedIn = false;
              loginInfo.loggingInPromise = void 0;
              loginInfo.loginStartTS = void 0;
              loginInfo.loginResult = void 0;
              throw e_4;
            case 4:
              return [2];
          }
        });
      });
    };
    this.getWsSign = function() {
      return __awaiter$4(_this, void 0, void 0, function() {
        var expiredTs, res, _a2, signStr, wsUrl, secretVersion, envId;
        return __generator$4(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (this._wsSign && this._wsSign.expiredTs > Date.now()) {
                return [2, this._wsSign];
              }
              expiredTs = Date.now() + 6e4;
              return [4, this._context.appConfig.request.send("auth.wsWebSign", { runtime: getRuntime() })];
            case 1:
              res = _b.sent();
              if (res.code) {
                throw new Error("[tcb-js-sdk] \u83B7\u53D6\u5B9E\u65F6\u6570\u636E\u63A8\u9001\u767B\u5F55\u7968\u636E\u5931\u8D25: " + res.code);
              }
              if (res.data) {
                _a2 = res.data, signStr = _a2.signStr, wsUrl = _a2.wsUrl, secretVersion = _a2.secretVersion, envId = _a2.envId;
                return [2, {
                  signStr,
                  wsUrl,
                  secretVersion,
                  envId,
                  expiredTs
                }];
              } else {
                throw new Error("[tcb-js-sdk] \u83B7\u53D6\u5B9E\u65F6\u6570\u636E\u63A8\u9001\u767B\u5F55\u7968\u636E\u5931\u8D25");
              }
          }
        });
      });
    };
    this.getWaitExpectedTimeoutLength = function() {
      if (!_this._rttObserved.length) {
        return DEFAULT_EXPECTED_EVENT_WAIT_TIME;
      }
      return _this._rttObserved.reduce(function(acc, cur) {
        return acc + cur;
      }) / _this._rttObserved.length * 1.5;
    };
    this.ping = function() {
      return __awaiter$4(_this, void 0, void 0, function() {
        var msg;
        return __generator$4(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              msg = {
                watchId: void 0,
                requestId: genRequestId(),
                msgType: "PING",
                msgData: null
              };
              return [4, this.send({
                msg
              })];
            case 1:
              _a2.sent();
              return [2];
          }
        });
      });
    };
    this.onWatchStart = function(client, queryID) {
      _this._queryIdClientMap.set(queryID, client);
    };
    this.onWatchClose = function(client, queryID) {
      if (queryID) {
        _this._queryIdClientMap.delete(queryID);
      }
      _this._watchIdClientMap.delete(client.watchId);
      _this._virtualWSClient.delete(client);
      if (!_this._virtualWSClient.size) {
        _this.close(CLOSE_EVENT_CODE.NoRealtimeListeners);
      }
    };
    this._maxReconnect = options.maxReconnect || DEFAULT_MAX_RECONNECT;
    this._reconnectInterval = options.reconnectInterval || DEFAULT_WS_RECONNECT_INTERVAL;
    this._context = options.context;
  }
  RealtimeWebSocketClient2.prototype.clearHeartbeat = function() {
    this._pingTimeoutId && clearTimeout(this._pingTimeoutId);
    this._pongTimeoutId && clearTimeout(this._pongTimeoutId);
  };
  RealtimeWebSocketClient2.prototype.close = function(code2) {
    this.clearHeartbeat();
    if (this._ws) {
      this._ws.close(code2, CLOSE_EVENT_CODE_INFO[code2].name);
      this._ws = void 0;
    }
  };
  RealtimeWebSocketClient2.prototype.watch = function(options) {
    if (!this._ws && !this._wsInitPromise) {
      this.initWebSocketConnection(false);
    }
    var virtualClient = new VirtualWebSocketClient(__assign$6(__assign$6({}, options), { send: this.send, login: this.webLogin, isWSConnected: this.isWSConnected, onceWSConnected: this.onceWSConnected, getWaitExpectedTimeoutLength: this.getWaitExpectedTimeoutLength, onWatchStart: this.onWatchStart, onWatchClose: this.onWatchClose, debug: true }));
    this._virtualWSClient.add(virtualClient);
    this._watchIdClientMap.set(virtualClient.watchId, virtualClient);
    return virtualClient.listener;
  };
  RealtimeWebSocketClient2.prototype.heartbeat = function(immediate) {
    var _this = this;
    this.clearHeartbeat();
    this._pingTimeoutId = setTimeout(function() {
      return __awaiter$4(_this, void 0, void 0, function() {
        var _this2 = this;
        return __generator$4(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 2, , 3]);
              if (!this._ws || this._ws.readyState !== WS_READY_STATE.OPEN) {
                return [2];
              }
              this._lastPingSendTS = Date.now();
              return [4, this.ping()];
            case 1:
              _a2.sent();
              this._pingFailed = 0;
              this._pongTimeoutId = setTimeout(function() {
                console.error("pong timed out");
                if (_this2._pongMissed < DEFAULT_PONG_MISS_TOLERANCE) {
                  _this2._pongMissed++;
                  _this2.heartbeat(true);
                } else {
                  _this2.initWebSocketConnection(true);
                }
              }, this._context.appConfig.realtimePongWaitTimeout);
              return [3, 3];
            case 2:
              _a2.sent();
              if (this._pingFailed < DEFAULT_PING_FAIL_TOLERANCE) {
                this._pingFailed++;
                this.heartbeat();
              } else {
                this.close(CLOSE_EVENT_CODE.HeartbeatPingError);
              }
              return [3, 3];
            case 3:
              return [2];
          }
        });
      });
    }, immediate ? 0 : this._context.appConfig.realtimePingInterval);
  };
  return RealtimeWebSocketClient2;
}();
var hook = {
  target: "database",
  entity: function() {
    var _a2 = this.platform, adapter2 = _a2.adapter, runtime2 = _a2.runtime;
    setWsClass(adapter2.wsClass);
    setRuntime(runtime2);
  }
};
var component$2 = {
  name: "realtime",
  IIFE: true,
  entity: function() {
    this.prototype.wsClientClass = RealtimeWebSocketClient;
  }
};
try {
  cloudbase.registerComponent(component$2);
  cloudbase.registerHook(hook);
} catch (e) {
}
function registerRealtime(app) {
  try {
    app.registerComponent(component$2);
    app.registerHook(hook);
  } catch (e) {
    console.warn(e);
  }
}
var __decorate = globalThis && globalThis.__decorate || function(decorators2, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators2, target, key, desc);
  else
    for (var i = decorators2.length - 1; i >= 0; i--)
      if (d = decorators2[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = globalThis && globalThis.__metadata || function(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(k, v);
};
var __awaiter$3 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$3 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var ERRORS$1 = constants_1.ERRORS, COMMUNITY_SITE_URL = constants_1.COMMUNITY_SITE_URL;
var catchErrorsDecorator = helpers_1.catchErrorsDecorator;
var COMPONENT_NAME$1 = "analytics";
var reportTypes = ["mall"];
function validateAnalyticsData(data) {
  if (Object.prototype.toString.call(data).slice(8, -1) !== "Object") {
    return false;
  }
  var report_data = data.report_data, report_type = data.report_type;
  if (reportTypes.includes(report_type) === false) {
    return false;
  }
  if (Object.prototype.toString.call(report_data).slice(8, -1) !== "Object") {
    return false;
  }
  if (report_data.action_time !== void 0 && !Number.isInteger(report_data.action_time)) {
    return false;
  }
  if (typeof report_data.action_type !== "string") {
    return false;
  }
  return true;
}
var CloudbaseAnalytics = function() {
  function CloudbaseAnalytics2() {
  }
  CloudbaseAnalytics2.prototype.analytics = function(requestData) {
    return __awaiter$3(this, void 0, void 0, function() {
      var action, action_time, transformData, params, request;
      return __generator$3(this, function(_a2) {
        if (!validateAnalyticsData(requestData)) {
          throw new Error(JSON.stringify({
            code: ERRORS$1.INVALID_PARAMS,
            msg: "[" + COMPONENT_NAME$1 + ".analytics] invalid report data"
          }));
        }
        action = "analytics.report";
        action_time = requestData.report_data.action_time === void 0 ? Math.floor(Date.now() / 1e3) : requestData.report_data.action_time;
        transformData = {
          analytics_scene: requestData.report_type,
          analytics_data: Object.assign({}, requestData.report_data, {
            action_time
          })
        };
        params = {
          requestData: transformData
        };
        request = this.request;
        request.send(action, params);
        return [2];
      });
    });
  };
  __decorate([
    catchErrorsDecorator({
      customInfo: {
        className: "Cloudbase",
        methodName: "analytics"
      },
      title: "\u4E0A\u62A5\u8C03\u7528\u5931\u8D25",
      messages: [
        "\u8BF7\u786E\u8BA4\u4EE5\u4E0B\u5404\u9879\uFF1A",
        "  1 - \u8C03\u7528 analytics() \u7684\u8BED\u6CD5\u6216\u53C2\u6570\u662F\u5426\u6B63\u786E",
        "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A" + COMMUNITY_SITE_URL
      ]
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
  ], CloudbaseAnalytics2.prototype, "analytics", null);
  return CloudbaseAnalytics2;
}();
var cloudbaseAnalytics = new CloudbaseAnalytics();
var component$1 = {
  name: COMPONENT_NAME$1,
  entity: {
    analytics: cloudbaseAnalytics.analytics
  }
};
try {
  cloudbase.registerComponent(component$1);
} catch (e) {
}
function registerAnalytics(app) {
  try {
    app.registerComponent(component$1);
  } catch (e) {
    console.warn(e);
  }
}
var _a;
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["DocIDError"] = "\u6587\u6863ID\u4E0D\u5408\u6CD5";
  ErrorCode2["CollNameError"] = "\u96C6\u5408\u540D\u79F0\u4E0D\u5408\u6CD5";
  ErrorCode2["OpStrError"] = "\u64CD\u4F5C\u7B26\u4E0D\u5408\u6CD5";
  ErrorCode2["DirectionError"] = "\u6392\u5E8F\u5B57\u7B26\u4E0D\u5408\u6CD5";
  ErrorCode2["IntergerError"] = "must be integer";
  ErrorCode2["QueryParamTypeError"] = "\u67E5\u8BE2\u53C2\u6570\u5FC5\u987B\u4E3A\u5BF9\u8C61";
  ErrorCode2["QueryParamValueError"] = "\u67E5\u8BE2\u53C2\u6570\u5BF9\u8C61\u503C\u4E0D\u80FD\u5747\u4E3Aundefined";
})(ErrorCode || (ErrorCode = {}));
var FieldType = {
  String: "String",
  Number: "Number",
  Object: "Object",
  Array: "Array",
  Boolean: "Boolean",
  Null: "Null",
  GeoPoint: "GeoPoint",
  GeoLineString: "GeoLineString",
  GeoPolygon: "GeoPolygon",
  GeoMultiPoint: "GeoMultiPoint",
  GeoMultiLineString: "GeoMultiLineString",
  GeoMultiPolygon: "GeoMultiPolygon",
  Timestamp: "Date",
  Command: "Command",
  ServerDate: "ServerDate",
  BsonDate: "BsonDate"
};
var OrderDirectionList = ["desc", "asc"];
var WhereFilterOpList = ["<", "<=", "==", ">=", ">"];
var Opeartor;
(function(Opeartor2) {
  Opeartor2["lt"] = "<";
  Opeartor2["gt"] = ">";
  Opeartor2["lte"] = "<=";
  Opeartor2["gte"] = ">=";
  Opeartor2["eq"] = "==";
})(Opeartor || (Opeartor = {}));
_a = {}, _a[Opeartor.eq] = "$eq", _a[Opeartor.lt] = "$lt", _a[Opeartor.lte] = "$lte", _a[Opeartor.gt] = "$gt", _a[Opeartor.gte] = "$gte", _a;
var QueryType;
(function(QueryType2) {
  QueryType2["WHERE"] = "WHERE";
  QueryType2["DOC"] = "DOC";
})(QueryType || (QueryType = {}));
var __extends$4 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var _symbols = [];
var __internalMark__ = {};
var HiddenSymbol = function() {
  function HiddenSymbol2(target) {
    Object.defineProperties(this, {
      target: {
        enumerable: false,
        writable: false,
        configurable: false,
        value: target
      }
    });
  }
  return HiddenSymbol2;
}();
var InternalSymbol = function(_super) {
  __extends$4(InternalSymbol2, _super);
  function InternalSymbol2(target, __mark__) {
    var _this = this;
    if (__mark__ !== __internalMark__) {
      throw new TypeError("InternalSymbol cannot be constructed with new operator");
    }
    _this = _super.call(this, target) || this;
    return _this;
  }
  InternalSymbol2.for = function(target) {
    for (var i = 0, len = _symbols.length; i < len; i++) {
      if (_symbols[i].target === target) {
        return _symbols[i].instance;
      }
    }
    var symbol = new InternalSymbol2(target, __internalMark__);
    _symbols.push({
      target,
      instance: symbol
    });
    return symbol;
  };
  return InternalSymbol2;
}(HiddenSymbol);
var InternalSymbol$1 = InternalSymbol;
var SYMBOL_UNSET_FIELD_NAME = InternalSymbol$1.for("UNSET_FIELD_NAME");
var SYMBOL_UPDATE_COMMAND = InternalSymbol$1.for("UPDATE_COMMAND");
var SYMBOL_QUERY_COMMAND = InternalSymbol$1.for("QUERY_COMMAND");
var SYMBOL_LOGIC_COMMAND = InternalSymbol$1.for("LOGIC_COMMAND");
var SYMBOL_GEO_POINT = InternalSymbol$1.for("GEO_POINT");
var SYMBOL_GEO_LINE_STRING = InternalSymbol$1.for("SYMBOL_GEO_LINE_STRING");
var SYMBOL_GEO_POLYGON = InternalSymbol$1.for("SYMBOL_GEO_POLYGON");
var SYMBOL_GEO_MULTI_POINT = InternalSymbol$1.for("SYMBOL_GEO_MULTI_POINT");
var SYMBOL_GEO_MULTI_LINE_STRING = InternalSymbol$1.for("SYMBOL_GEO_MULTI_LINE_STRING");
var SYMBOL_GEO_MULTI_POLYGON = InternalSymbol$1.for("SYMBOL_GEO_MULTI_POLYGON");
var SYMBOL_SERVER_DATE = InternalSymbol$1.for("SERVER_DATE");
var SYMBOL_REGEXP = InternalSymbol$1.for("REGEXP");
var ServerDate = function() {
  function ServerDate2(_a2) {
    var _b = (_a2 === void 0 ? {} : _a2).offset, offset2 = _b === void 0 ? 0 : _b;
    this.offset = offset2;
  }
  Object.defineProperty(ServerDate2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_SERVER_DATE;
    },
    enumerable: true,
    configurable: true
  });
  ServerDate2.prototype.parse = function() {
    return {
      $date: {
        offset: this.offset
      }
    };
  };
  return ServerDate2;
}();
function ServerDateConstructor(opt) {
  return new ServerDate(opt);
}
var __read$2 = globalThis && globalThis.__read || function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var Util = function() {
  function Util2() {
  }
  Util2.formatResDocumentData = function(documents) {
    return documents.map(function(document2) {
      return Util2.formatField(document2);
    });
  };
  Util2.formatField = function(document2) {
    var keys2 = Object.keys(document2);
    var protoField = {};
    if (Array.isArray(document2)) {
      protoField = [];
    }
    keys2.forEach(function(key) {
      var item = document2[key];
      var type = Util2.whichType(item);
      var realValue;
      switch (type) {
        case FieldType.GeoPoint:
          realValue = new Point(item.coordinates[0], item.coordinates[1]);
          break;
        case FieldType.GeoLineString:
          realValue = new LineString(item.coordinates.map(function(point) {
            return new Point(point[0], point[1]);
          }));
          break;
        case FieldType.GeoPolygon:
          realValue = new Polygon(item.coordinates.map(function(line) {
            return new LineString(line.map(function(_a2) {
              var _b = __read$2(_a2, 2), lng = _b[0], lat = _b[1];
              return new Point(lng, lat);
            }));
          }));
          break;
        case FieldType.GeoMultiPoint:
          realValue = new MultiPoint(item.coordinates.map(function(point) {
            return new Point(point[0], point[1]);
          }));
          break;
        case FieldType.GeoMultiLineString:
          realValue = new MultiLineString(item.coordinates.map(function(line) {
            return new LineString(line.map(function(_a2) {
              var _b = __read$2(_a2, 2), lng = _b[0], lat = _b[1];
              return new Point(lng, lat);
            }));
          }));
          break;
        case FieldType.GeoMultiPolygon:
          realValue = new MultiPolygon(item.coordinates.map(function(polygon) {
            return new Polygon(polygon.map(function(line) {
              return new LineString(line.map(function(_a2) {
                var _b = __read$2(_a2, 2), lng = _b[0], lat = _b[1];
                return new Point(lng, lat);
              }));
            }));
          }));
          break;
        case FieldType.Timestamp:
          realValue = new Date(item.$timestamp * 1e3);
          break;
        case FieldType.Object:
        case FieldType.Array:
          realValue = Util2.formatField(item);
          break;
        case FieldType.ServerDate:
          realValue = new Date(item.$date);
          break;
        default:
          realValue = item;
      }
      if (Array.isArray(protoField)) {
        protoField.push(realValue);
      } else {
        protoField[key] = realValue;
      }
    });
    return protoField;
  };
  Util2.whichType = function(obj) {
    var type = Object.prototype.toString.call(obj).slice(8, -1);
    if (type === FieldType.Timestamp) {
      return FieldType.BsonDate;
    }
    if (type === FieldType.Object) {
      if (obj instanceof Point) {
        return FieldType.GeoPoint;
      } else if (obj instanceof Date) {
        return FieldType.Timestamp;
      } else if (obj instanceof ServerDate) {
        return FieldType.ServerDate;
      }
      if (obj.$timestamp) {
        type = FieldType.Timestamp;
      } else if (obj.$date) {
        type = FieldType.ServerDate;
      } else if (Point.validate(obj)) {
        type = FieldType.GeoPoint;
      } else if (LineString.validate(obj)) {
        type = FieldType.GeoLineString;
      } else if (Polygon.validate(obj)) {
        type = FieldType.GeoPolygon;
      } else if (MultiPoint.validate(obj)) {
        type = FieldType.GeoMultiPoint;
      } else if (MultiLineString.validate(obj)) {
        type = FieldType.GeoMultiLineString;
      } else if (MultiPolygon.validate(obj)) {
        type = FieldType.GeoMultiPolygon;
      }
    }
    return type;
  };
  Util2.generateDocId = function() {
    var chars = "ABCDEFabcdef0123456789";
    var autoId = "";
    for (var i = 0; i < 24; i++) {
      autoId += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return autoId;
  };
  return Util2;
}();
var Validate = function() {
  function Validate2() {
  }
  Validate2.isGeopoint = function(point, degree) {
    if (Util.whichType(degree) !== FieldType.Number) {
      throw new Error("Geo Point must be number type");
    }
    var degreeAbs = Math.abs(degree);
    if (point === "latitude" && degreeAbs > 90) {
      throw new Error("latitude should be a number ranges from -90 to 90");
    } else if (point === "longitude" && degreeAbs > 180) {
      throw new Error("longitude should be a number ranges from -180 to 180");
    }
    return true;
  };
  Validate2.isInteger = function(param, num) {
    if (!Number.isInteger(num)) {
      throw new Error(param + ErrorCode.IntergerError);
    }
    return true;
  };
  Validate2.isFieldOrder = function(direction) {
    if (OrderDirectionList.indexOf(direction) === -1) {
      throw new Error(ErrorCode.DirectionError);
    }
    return true;
  };
  Validate2.isFieldPath = function(path) {
    if (!/^[a-zA-Z0-9-_\.]/.test(path)) {
      throw new Error();
    }
    return true;
  };
  Validate2.isOperator = function(op) {
    if (WhereFilterOpList.indexOf(op) === -1) {
      throw new Error(ErrorCode.OpStrError);
    }
    return true;
  };
  Validate2.isCollName = function(name2) {
    if (!/^[a-zA-Z0-9]([a-zA-Z0-9-_]){1,32}$/.test(name2)) {
      throw new Error(ErrorCode.CollNameError);
    }
    return true;
  };
  Validate2.isDocID = function(docId) {
    if (!/^([a-fA-F0-9]){24}$/.test(docId)) {
      throw new Error(ErrorCode.DocIDError);
    }
    return true;
  };
  return Validate2;
}();
var getType$1 = function(x) {
  return Object.prototype.toString.call(x).slice(8, -1).toLowerCase();
};
var isObject$3 = function(x) {
  return getType$1(x) === "object";
};
var isString$2 = function(x) {
  return getType$1(x) === "string";
};
var isNumber$1 = function(x) {
  return getType$1(x) === "number";
};
var isArray$2 = function(x) {
  return Array.isArray(x);
};
var isDate$2 = function(x) {
  return getType$1(x) === "date";
};
var isRegExp$1 = function(x) {
  return getType$1(x) === "regexp";
};
var isInternalObject = function(x) {
  return x && x._internalType instanceof InternalSymbol;
};
var Point = function() {
  function Point2(longitude, latitude) {
    Validate.isGeopoint("longitude", longitude);
    Validate.isGeopoint("latitude", latitude);
    this.longitude = longitude;
    this.latitude = latitude;
  }
  Point2.prototype.parse = function(key) {
    var _a2;
    return _a2 = {}, _a2[key] = {
      type: "Point",
      coordinates: [this.longitude, this.latitude]
    }, _a2;
  };
  Point2.prototype.toJSON = function() {
    return {
      type: "Point",
      coordinates: [
        this.longitude,
        this.latitude
      ]
    };
  };
  Point2.prototype.toReadableString = function() {
    return "[" + this.longitude + "," + this.latitude + "]";
  };
  Point2.validate = function(point) {
    return point.type === "Point" && isArray$2(point.coordinates) && Validate.isGeopoint("longitude", point.coordinates[0]) && Validate.isGeopoint("latitude", point.coordinates[1]);
  };
  Object.defineProperty(Point2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_GEO_POINT;
    },
    enumerable: true,
    configurable: true
  });
  return Point2;
}();
var __values$4 = globalThis && globalThis.__values || function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var LineString = function() {
  function LineString2(points) {
    if (!isArray$2(points)) {
      throw new TypeError('"points" must be of type Point[]. Received type ' + typeof points);
    }
    if (points.length < 2) {
      throw new Error('"points" must contain 2 points at least');
    }
    points.forEach(function(point) {
      if (!(point instanceof Point)) {
        throw new TypeError('"points" must be of type Point[]. Received type ' + typeof point + "[]");
      }
    });
    this.points = points;
  }
  LineString2.prototype.parse = function(key) {
    var _a2;
    return _a2 = {}, _a2[key] = {
      type: "LineString",
      coordinates: this.points.map(function(point) {
        return point.toJSON().coordinates;
      })
    }, _a2;
  };
  LineString2.prototype.toJSON = function() {
    return {
      type: "LineString",
      coordinates: this.points.map(function(point) {
        return point.toJSON().coordinates;
      })
    };
  };
  LineString2.validate = function(lineString) {
    var e_1, _a2;
    if (lineString.type !== "LineString" || !isArray$2(lineString.coordinates)) {
      return false;
    }
    try {
      for (var _b = __values$4(lineString.coordinates), _c = _b.next(); !_c.done; _c = _b.next()) {
        var point = _c.value;
        if (!isNumber$1(point[0]) || !isNumber$1(point[1])) {
          return false;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return true;
  };
  LineString2.isClosed = function(lineString) {
    var firstPoint = lineString.points[0];
    var lastPoint = lineString.points[lineString.points.length - 1];
    if (firstPoint.latitude === lastPoint.latitude && firstPoint.longitude === lastPoint.longitude) {
      return true;
    }
  };
  Object.defineProperty(LineString2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_GEO_LINE_STRING;
    },
    enumerable: true,
    configurable: true
  });
  return LineString2;
}();
var __values$3 = globalThis && globalThis.__values || function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var Polygon = function() {
  function Polygon2(lines) {
    if (!isArray$2(lines)) {
      throw new TypeError('"lines" must be of type LineString[]. Received type ' + typeof lines);
    }
    if (lines.length === 0) {
      throw new Error("Polygon must contain 1 linestring at least");
    }
    lines.forEach(function(line) {
      if (!(line instanceof LineString)) {
        throw new TypeError('"lines" must be of type LineString[]. Received type ' + typeof line + "[]");
      }
      if (!LineString.isClosed(line)) {
        throw new Error("LineString " + line.points.map(function(p2) {
          return p2.toReadableString();
        }) + " is not a closed cycle");
      }
    });
    this.lines = lines;
  }
  Polygon2.prototype.parse = function(key) {
    var _a2;
    return _a2 = {}, _a2[key] = {
      type: "Polygon",
      coordinates: this.lines.map(function(line) {
        return line.points.map(function(point) {
          return [point.longitude, point.latitude];
        });
      })
    }, _a2;
  };
  Polygon2.prototype.toJSON = function() {
    return {
      type: "Polygon",
      coordinates: this.lines.map(function(line) {
        return line.points.map(function(point) {
          return [point.longitude, point.latitude];
        });
      })
    };
  };
  Polygon2.validate = function(polygon) {
    var e_1, _a2, e_2, _b;
    if (polygon.type !== "Polygon" || !isArray$2(polygon.coordinates)) {
      return false;
    }
    try {
      for (var _c = __values$3(polygon.coordinates), _d = _c.next(); !_d.done; _d = _c.next()) {
        var line = _d.value;
        if (!this.isCloseLineString(line)) {
          return false;
        }
        try {
          for (var line_1 = (e_2 = void 0, __values$3(line)), line_1_1 = line_1.next(); !line_1_1.done; line_1_1 = line_1.next()) {
            var point = line_1_1.value;
            if (!isNumber$1(point[0]) || !isNumber$1(point[1])) {
              return false;
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (line_1_1 && !line_1_1.done && (_b = line_1.return))
              _b.call(line_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a2 = _c.return))
          _a2.call(_c);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return true;
  };
  Polygon2.isCloseLineString = function(lineString) {
    var firstPoint = lineString[0];
    var lastPoint = lineString[lineString.length - 1];
    if (firstPoint[0] !== lastPoint[0] || firstPoint[1] !== lastPoint[1]) {
      return false;
    }
    return true;
  };
  Object.defineProperty(Polygon2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_GEO_MULTI_POLYGON;
    },
    enumerable: true,
    configurable: true
  });
  return Polygon2;
}();
var __values$2 = globalThis && globalThis.__values || function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var MultiPoint = function() {
  function MultiPoint2(points) {
    if (!isArray$2(points)) {
      throw new TypeError('"points" must be of type Point[]. Received type ' + typeof points);
    }
    if (points.length === 0) {
      throw new Error('"points" must contain 1 point at least');
    }
    points.forEach(function(point) {
      if (!(point instanceof Point)) {
        throw new TypeError('"points" must be of type Point[]. Received type ' + typeof point + "[]");
      }
    });
    this.points = points;
  }
  MultiPoint2.prototype.parse = function(key) {
    var _a2;
    return _a2 = {}, _a2[key] = {
      type: "MultiPoint",
      coordinates: this.points.map(function(point) {
        return point.toJSON().coordinates;
      })
    }, _a2;
  };
  MultiPoint2.prototype.toJSON = function() {
    return {
      type: "MultiPoint",
      coordinates: this.points.map(function(point) {
        return point.toJSON().coordinates;
      })
    };
  };
  MultiPoint2.validate = function(multiPoint) {
    var e_1, _a2;
    if (multiPoint.type !== "MultiPoint" || !isArray$2(multiPoint.coordinates)) {
      return false;
    }
    try {
      for (var _b = __values$2(multiPoint.coordinates), _c = _b.next(); !_c.done; _c = _b.next()) {
        var point = _c.value;
        if (!isNumber$1(point[0]) || !isNumber$1(point[1])) {
          return false;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return true;
  };
  Object.defineProperty(MultiPoint2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_GEO_MULTI_POINT;
    },
    enumerable: true,
    configurable: true
  });
  return MultiPoint2;
}();
var __values$1 = globalThis && globalThis.__values || function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var MultiLineString = function() {
  function MultiLineString2(lines) {
    if (!isArray$2(lines)) {
      throw new TypeError('"lines" must be of type LineString[]. Received type ' + typeof lines);
    }
    if (lines.length === 0) {
      throw new Error("Polygon must contain 1 linestring at least");
    }
    lines.forEach(function(line) {
      if (!(line instanceof LineString)) {
        throw new TypeError('"lines" must be of type LineString[]. Received type ' + typeof line + "[]");
      }
    });
    this.lines = lines;
  }
  MultiLineString2.prototype.parse = function(key) {
    var _a2;
    return _a2 = {}, _a2[key] = {
      type: "MultiLineString",
      coordinates: this.lines.map(function(line) {
        return line.points.map(function(point) {
          return [point.longitude, point.latitude];
        });
      })
    }, _a2;
  };
  MultiLineString2.prototype.toJSON = function() {
    return {
      type: "MultiLineString",
      coordinates: this.lines.map(function(line) {
        return line.points.map(function(point) {
          return [point.longitude, point.latitude];
        });
      })
    };
  };
  MultiLineString2.validate = function(multiLineString) {
    var e_1, _a2, e_2, _b;
    if (multiLineString.type !== "MultiLineString" || !isArray$2(multiLineString.coordinates)) {
      return false;
    }
    try {
      for (var _c = __values$1(multiLineString.coordinates), _d = _c.next(); !_d.done; _d = _c.next()) {
        var line = _d.value;
        try {
          for (var line_1 = (e_2 = void 0, __values$1(line)), line_1_1 = line_1.next(); !line_1_1.done; line_1_1 = line_1.next()) {
            var point = line_1_1.value;
            if (!isNumber$1(point[0]) || !isNumber$1(point[1])) {
              return false;
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (line_1_1 && !line_1_1.done && (_b = line_1.return))
              _b.call(line_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a2 = _c.return))
          _a2.call(_c);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return true;
  };
  Object.defineProperty(MultiLineString2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_GEO_MULTI_LINE_STRING;
    },
    enumerable: true,
    configurable: true
  });
  return MultiLineString2;
}();
var __values = globalThis && globalThis.__values || function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var MultiPolygon = function() {
  function MultiPolygon2(polygons) {
    var e_1, _a2;
    if (!isArray$2(polygons)) {
      throw new TypeError('"polygons" must be of type Polygon[]. Received type ' + typeof polygons);
    }
    if (polygons.length === 0) {
      throw new Error("MultiPolygon must contain 1 polygon at least");
    }
    try {
      for (var polygons_1 = __values(polygons), polygons_1_1 = polygons_1.next(); !polygons_1_1.done; polygons_1_1 = polygons_1.next()) {
        var polygon = polygons_1_1.value;
        if (!(polygon instanceof Polygon)) {
          throw new TypeError('"polygon" must be of type Polygon[]. Received type ' + typeof polygon + "[]");
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (polygons_1_1 && !polygons_1_1.done && (_a2 = polygons_1.return))
          _a2.call(polygons_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    this.polygons = polygons;
  }
  MultiPolygon2.prototype.parse = function(key) {
    var _a2;
    return _a2 = {}, _a2[key] = {
      type: "MultiPolygon",
      coordinates: this.polygons.map(function(polygon) {
        return polygon.lines.map(function(line) {
          return line.points.map(function(point) {
            return [point.longitude, point.latitude];
          });
        });
      })
    }, _a2;
  };
  MultiPolygon2.prototype.toJSON = function() {
    return {
      type: "MultiPolygon",
      coordinates: this.polygons.map(function(polygon) {
        return polygon.lines.map(function(line) {
          return line.points.map(function(point) {
            return [point.longitude, point.latitude];
          });
        });
      })
    };
  };
  MultiPolygon2.validate = function(multiPolygon) {
    var e_2, _a2, e_3, _b, e_4, _c;
    if (multiPolygon.type !== "MultiPolygon" || !isArray$2(multiPolygon.coordinates)) {
      return false;
    }
    try {
      for (var _d = __values(multiPolygon.coordinates), _e = _d.next(); !_e.done; _e = _d.next()) {
        var polygon = _e.value;
        try {
          for (var polygon_1 = (e_3 = void 0, __values(polygon)), polygon_1_1 = polygon_1.next(); !polygon_1_1.done; polygon_1_1 = polygon_1.next()) {
            var line = polygon_1_1.value;
            try {
              for (var line_1 = (e_4 = void 0, __values(line)), line_1_1 = line_1.next(); !line_1_1.done; line_1_1 = line_1.next()) {
                var point = line_1_1.value;
                if (!isNumber$1(point[0]) || !isNumber$1(point[1])) {
                  return false;
                }
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (line_1_1 && !line_1_1.done && (_c = line_1.return))
                  _c.call(line_1);
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (polygon_1_1 && !polygon_1_1.done && (_b = polygon_1.return))
              _b.call(polygon_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_e && !_e.done && (_a2 = _d.return))
          _a2.call(_d);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return true;
  };
  Object.defineProperty(MultiPolygon2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_GEO_POLYGON;
    },
    enumerable: true,
    configurable: true
  });
  return MultiPolygon2;
}();
var Geo = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Point,
  LineString,
  Polygon,
  MultiPoint,
  MultiLineString,
  MultiPolygon
}, Symbol.toStringTag, { value: "Module" }));
var createPromiseCallback = function() {
  var cb;
  if (!Promise) {
    cb = function() {
    };
    cb.promise = {};
    var throwPromiseNotDefined = function() {
      throw new Error('Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.');
    };
    Object.defineProperty(cb.promise, "then", { get: throwPromiseNotDefined });
    Object.defineProperty(cb.promise, "catch", { get: throwPromiseNotDefined });
    return cb;
  }
  var promise = new Promise(function(resolve, reject) {
    cb = function(err, data) {
      if (err)
        return reject(err);
      return resolve(data);
    };
  });
  cb.promise = promise;
  return cb;
};
var UPDATE_COMMANDS_LITERAL;
(function(UPDATE_COMMANDS_LITERAL2) {
  UPDATE_COMMANDS_LITERAL2["SET"] = "set";
  UPDATE_COMMANDS_LITERAL2["REMOVE"] = "remove";
  UPDATE_COMMANDS_LITERAL2["INC"] = "inc";
  UPDATE_COMMANDS_LITERAL2["MUL"] = "mul";
  UPDATE_COMMANDS_LITERAL2["PUSH"] = "push";
  UPDATE_COMMANDS_LITERAL2["PULL"] = "pull";
  UPDATE_COMMANDS_LITERAL2["PULL_ALL"] = "pullAll";
  UPDATE_COMMANDS_LITERAL2["POP"] = "pop";
  UPDATE_COMMANDS_LITERAL2["SHIFT"] = "shift";
  UPDATE_COMMANDS_LITERAL2["UNSHIFT"] = "unshift";
  UPDATE_COMMANDS_LITERAL2["ADD_TO_SET"] = "addToSet";
  UPDATE_COMMANDS_LITERAL2["BIT"] = "bit";
  UPDATE_COMMANDS_LITERAL2["RENAME"] = "rename";
  UPDATE_COMMANDS_LITERAL2["MAX"] = "max";
  UPDATE_COMMANDS_LITERAL2["MIN"] = "min";
})(UPDATE_COMMANDS_LITERAL || (UPDATE_COMMANDS_LITERAL = {}));
var UpdateCommand = function() {
  function UpdateCommand2(operator, operands, fieldName) {
    this._internalType = SYMBOL_UPDATE_COMMAND;
    Object.defineProperties(this, {
      _internalType: {
        enumerable: false,
        configurable: false
      }
    });
    this.operator = operator;
    this.operands = operands;
    this.fieldName = fieldName || SYMBOL_UNSET_FIELD_NAME;
  }
  UpdateCommand2.prototype._setFieldName = function(fieldName) {
    var command = new UpdateCommand2(this.operator, this.operands, fieldName);
    return command;
  };
  return UpdateCommand2;
}();
function isUpdateCommand(object) {
  return object && object instanceof UpdateCommand && object._internalType === SYMBOL_UPDATE_COMMAND;
}
var LOGIC_COMMANDS_LITERAL;
(function(LOGIC_COMMANDS_LITERAL2) {
  LOGIC_COMMANDS_LITERAL2["AND"] = "and";
  LOGIC_COMMANDS_LITERAL2["OR"] = "or";
  LOGIC_COMMANDS_LITERAL2["NOT"] = "not";
  LOGIC_COMMANDS_LITERAL2["NOR"] = "nor";
})(LOGIC_COMMANDS_LITERAL || (LOGIC_COMMANDS_LITERAL = {}));
var LogicCommand = function() {
  function LogicCommand2(operator, operands, fieldName) {
    this._internalType = SYMBOL_LOGIC_COMMAND;
    Object.defineProperties(this, {
      _internalType: {
        enumerable: false,
        configurable: false
      }
    });
    this.operator = operator;
    this.operands = operands;
    this.fieldName = fieldName || SYMBOL_UNSET_FIELD_NAME;
    if (this.fieldName !== SYMBOL_UNSET_FIELD_NAME) {
      if (Array.isArray(operands)) {
        operands = operands.slice();
        this.operands = operands;
        for (var i = 0, len = operands.length; i < len; i++) {
          var query = operands[i];
          if (isLogicCommand(query) || isQueryCommand(query)) {
            operands[i] = query._setFieldName(this.fieldName);
          }
        }
      } else {
        var query = operands;
        if (isLogicCommand(query) || isQueryCommand(query)) {
          operands = query._setFieldName(this.fieldName);
        }
      }
    }
  }
  LogicCommand2.prototype._setFieldName = function(fieldName) {
    var operands = this.operands.map(function(operand) {
      if (operand instanceof LogicCommand2) {
        return operand._setFieldName(fieldName);
      } else {
        return operand;
      }
    });
    var command = new LogicCommand2(this.operator, operands, fieldName);
    return command;
  };
  LogicCommand2.prototype.and = function() {
    var expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);
    expressions.unshift(this);
    return new LogicCommand2(LOGIC_COMMANDS_LITERAL.AND, expressions, this.fieldName);
  };
  LogicCommand2.prototype.or = function() {
    var expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);
    expressions.unshift(this);
    return new LogicCommand2(LOGIC_COMMANDS_LITERAL.OR, expressions, this.fieldName);
  };
  return LogicCommand2;
}();
function isLogicCommand(object) {
  return object && object instanceof LogicCommand && object._internalType === SYMBOL_LOGIC_COMMAND;
}
var __extends$3 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var QUERY_COMMANDS_LITERAL;
(function(QUERY_COMMANDS_LITERAL2) {
  QUERY_COMMANDS_LITERAL2["EQ"] = "eq";
  QUERY_COMMANDS_LITERAL2["NEQ"] = "neq";
  QUERY_COMMANDS_LITERAL2["GT"] = "gt";
  QUERY_COMMANDS_LITERAL2["GTE"] = "gte";
  QUERY_COMMANDS_LITERAL2["LT"] = "lt";
  QUERY_COMMANDS_LITERAL2["LTE"] = "lte";
  QUERY_COMMANDS_LITERAL2["IN"] = "in";
  QUERY_COMMANDS_LITERAL2["NIN"] = "nin";
  QUERY_COMMANDS_LITERAL2["ALL"] = "all";
  QUERY_COMMANDS_LITERAL2["ELEM_MATCH"] = "elemMatch";
  QUERY_COMMANDS_LITERAL2["EXISTS"] = "exists";
  QUERY_COMMANDS_LITERAL2["SIZE"] = "size";
  QUERY_COMMANDS_LITERAL2["MOD"] = "mod";
  QUERY_COMMANDS_LITERAL2["GEO_NEAR"] = "geoNear";
  QUERY_COMMANDS_LITERAL2["GEO_WITHIN"] = "geoWithin";
  QUERY_COMMANDS_LITERAL2["GEO_INTERSECTS"] = "geoIntersects";
})(QUERY_COMMANDS_LITERAL || (QUERY_COMMANDS_LITERAL = {}));
var QueryCommand = function(_super) {
  __extends$3(QueryCommand2, _super);
  function QueryCommand2(operator, operands, fieldName) {
    var _this = _super.call(this, operator, operands, fieldName) || this;
    _this.operator = operator;
    _this._internalType = SYMBOL_QUERY_COMMAND;
    return _this;
  }
  QueryCommand2.prototype.toJSON = function() {
    var _a2, _b;
    switch (this.operator) {
      case QUERY_COMMANDS_LITERAL.IN:
      case QUERY_COMMANDS_LITERAL.NIN:
        return _a2 = {}, _a2["$" + this.operator] = this.operands, _a2;
      default:
        return _b = {}, _b["$" + this.operator] = this.operands[0], _b;
    }
  };
  QueryCommand2.prototype._setFieldName = function(fieldName) {
    var command = new QueryCommand2(this.operator, this.operands, fieldName);
    return command;
  };
  QueryCommand2.prototype.eq = function(val) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.EQ, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.neq = function(val) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.NEQ, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.gt = function(val) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.GT, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.gte = function(val) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.GTE, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.lt = function(val) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.LT, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.lte = function(val) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.LTE, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.in = function(list) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.IN, list, this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.nin = function(list) {
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.NIN, list, this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.geoNear = function(val) {
    if (!(val.geometry instanceof Point)) {
      throw new TypeError('"geometry" must be of type Point. Received type ' + typeof val.geometry);
    }
    if (val.maxDistance !== void 0 && !isNumber$1(val.maxDistance)) {
      throw new TypeError('"maxDistance" must be of type Number. Received type ' + typeof val.maxDistance);
    }
    if (val.minDistance !== void 0 && !isNumber$1(val.minDistance)) {
      throw new TypeError('"minDistance" must be of type Number. Received type ' + typeof val.minDistance);
    }
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.GEO_NEAR, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.geoWithin = function(val) {
    if (!(val.geometry instanceof MultiPolygon) && !(val.geometry instanceof Polygon)) {
      throw new TypeError('"geometry" must be of type Polygon or MultiPolygon. Received type ' + typeof val.geometry);
    }
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.GEO_WITHIN, [val], this.fieldName);
    return this.and(command);
  };
  QueryCommand2.prototype.geoIntersects = function(val) {
    if (!(val.geometry instanceof Point) && !(val.geometry instanceof LineString) && !(val.geometry instanceof Polygon) && !(val.geometry instanceof MultiPoint) && !(val.geometry instanceof MultiLineString) && !(val.geometry instanceof MultiPolygon)) {
      throw new TypeError('"geometry" must be of type Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon. Received type ' + typeof val.geometry);
    }
    var command = new QueryCommand2(QUERY_COMMANDS_LITERAL.GEO_INTERSECTS, [val], this.fieldName);
    return this.and(command);
  };
  return QueryCommand2;
}(LogicCommand);
function isQueryCommand(object) {
  return object && object instanceof QueryCommand && object._internalType === SYMBOL_QUERY_COMMAND;
}
function isComparisonCommand(object) {
  return isQueryCommand(object);
}
var OperatorMap = {};
for (var key in QUERY_COMMANDS_LITERAL) {
  OperatorMap[key] = "$" + key;
}
for (var key in LOGIC_COMMANDS_LITERAL) {
  OperatorMap[key] = "$" + key;
}
for (var key in UPDATE_COMMANDS_LITERAL) {
  OperatorMap[key] = "$" + key;
}
OperatorMap[QUERY_COMMANDS_LITERAL.NEQ] = "$ne";
OperatorMap[UPDATE_COMMANDS_LITERAL.REMOVE] = "$unset";
OperatorMap[UPDATE_COMMANDS_LITERAL.SHIFT] = "$pop";
OperatorMap[UPDATE_COMMANDS_LITERAL.UNSHIFT] = "$push";
function operatorToString(operator) {
  return OperatorMap[operator] || "$" + operator;
}
var __assign$5 = globalThis && globalThis.__assign || function() {
  __assign$5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$5.apply(this, arguments);
};
var __read$1 = globalThis && globalThis.__read || function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread$1 = globalThis && globalThis.__spread || function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read$1(arguments[i]));
  return ar;
};
function serialize(val) {
  return serializeHelper(val, [val]);
}
function serializeHelper(val, visited) {
  if (isInternalObject(val)) {
    switch (val._internalType) {
      case SYMBOL_GEO_POINT: {
        return val.toJSON();
      }
      case SYMBOL_SERVER_DATE: {
        return val.parse();
      }
      case SYMBOL_REGEXP: {
        return val.parse();
      }
      default: {
        return val.toJSON ? val.toJSON() : val;
      }
    }
  } else if (isDate$2(val)) {
    return {
      $date: +val
    };
  } else if (isRegExp$1(val)) {
    return {
      $regex: val.source,
      $options: val.flags
    };
  } else if (isArray$2(val)) {
    return val.map(function(item) {
      if (visited.indexOf(item) > -1) {
        throw new Error("Cannot convert circular structure to JSON");
      }
      return serializeHelper(item, __spread$1(visited, [
        item
      ]));
    });
  } else if (isObject$3(val)) {
    var ret = __assign$5({}, val);
    for (var key in ret) {
      if (visited.indexOf(ret[key]) > -1) {
        throw new Error("Cannot convert circular structure to JSON");
      }
      ret[key] = serializeHelper(ret[key], __spread$1(visited, [
        ret[key]
      ]));
    }
    return ret;
  } else {
    return val;
  }
}
var __assign$4 = globalThis && globalThis.__assign || function() {
  __assign$4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$4.apply(this, arguments);
};
var __read = globalThis && globalThis.__read || function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread = globalThis && globalThis.__spread || function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
};
function flatten(query, shouldPreserverObject, parents, visited) {
  var cloned = __assign$4({}, query);
  for (var key in query) {
    if (/^\$/.test(key))
      continue;
    var value = query[key];
    if (!value)
      continue;
    if (isObject$3(value) && !shouldPreserverObject(value)) {
      if (visited.indexOf(value) > -1) {
        throw new Error("Cannot convert circular structure to JSON");
      }
      var newParents = __spread(parents, [
        key
      ]);
      var newVisited = __spread(visited, [
        value
      ]);
      var flattenedChild = flatten(value, shouldPreserverObject, newParents, newVisited);
      cloned[key] = flattenedChild;
      var hasKeyNotCombined = false;
      for (var childKey in flattenedChild) {
        if (!/^\$/.test(childKey)) {
          cloned[key + "." + childKey] = flattenedChild[childKey];
          delete cloned[key][childKey];
        } else {
          hasKeyNotCombined = true;
        }
      }
      if (!hasKeyNotCombined) {
        delete cloned[key];
      }
    }
  }
  return cloned;
}
function flattenQueryObject(query) {
  return flatten(query, isConversionRequired, [], [query]);
}
function mergeConditionAfterEncode(query, condition, key) {
  if (!condition[key]) {
    delete query[key];
  }
  for (var conditionKey in condition) {
    if (query[conditionKey]) {
      if (isArray$2(query[conditionKey])) {
        query[conditionKey].push(condition[conditionKey]);
      } else if (isObject$3(query[conditionKey])) {
        if (isObject$3(condition[conditionKey])) {
          Object.assign(query[conditionKey], condition[conditionKey]);
        } else {
          console.warn("unmergable condition, query is object but condition is " + getType$1(condition) + ", can only overwrite", condition, key);
          query[conditionKey] = condition[conditionKey];
        }
      } else {
        console.warn("to-merge query is of type " + getType$1(query) + ", can only overwrite", query, condition, key);
        query[conditionKey] = condition[conditionKey];
      }
    } else {
      query[conditionKey] = condition[conditionKey];
    }
  }
}
function isConversionRequired(val) {
  return isInternalObject(val) || isDate$2(val) || isRegExp$1(val);
}
function encodeInternalDataType(val) {
  return serialize(val);
}
var UpdateSerializer = function() {
  function UpdateSerializer2() {
  }
  UpdateSerializer2.encode = function(query) {
    var stringifier = new UpdateSerializer2();
    return stringifier.encodeUpdate(query);
  };
  UpdateSerializer2.prototype.encodeUpdate = function(query) {
    if (isUpdateCommand(query)) {
      return this.encodeUpdateCommand(query);
    } else if (getType$1(query) === "object") {
      return this.encodeUpdateObject(query);
    } else {
      return query;
    }
  };
  UpdateSerializer2.prototype.encodeUpdateCommand = function(query) {
    if (query.fieldName === SYMBOL_UNSET_FIELD_NAME) {
      throw new Error("Cannot encode a comparison command with unset field name");
    }
    switch (query.operator) {
      case UPDATE_COMMANDS_LITERAL.PUSH:
      case UPDATE_COMMANDS_LITERAL.PULL:
      case UPDATE_COMMANDS_LITERAL.PULL_ALL:
      case UPDATE_COMMANDS_LITERAL.POP:
      case UPDATE_COMMANDS_LITERAL.SHIFT:
      case UPDATE_COMMANDS_LITERAL.UNSHIFT:
      case UPDATE_COMMANDS_LITERAL.ADD_TO_SET: {
        return this.encodeArrayUpdateCommand(query);
      }
      default: {
        return this.encodeFieldUpdateCommand(query);
      }
    }
  };
  UpdateSerializer2.prototype.encodeFieldUpdateCommand = function(query) {
    var _a2, _b, _c, _d;
    var $op = operatorToString(query.operator);
    switch (query.operator) {
      case UPDATE_COMMANDS_LITERAL.REMOVE: {
        return _a2 = {}, _a2[$op] = (_b = {}, _b[query.fieldName] = "", _b), _a2;
      }
      default: {
        return _c = {}, _c[$op] = (_d = {}, _d[query.fieldName] = query.operands[0], _d), _c;
      }
    }
  };
  UpdateSerializer2.prototype.encodeArrayUpdateCommand = function(query) {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var $op = operatorToString(query.operator);
    switch (query.operator) {
      case UPDATE_COMMANDS_LITERAL.PUSH: {
        var modifiers = void 0;
        if (isArray$2(query.operands)) {
          modifiers = {
            $each: query.operands.map(encodeInternalDataType)
          };
        } else {
          modifiers = query.operands;
        }
        return _a2 = {}, _a2[$op] = (_b = {}, _b[query.fieldName] = modifiers, _b), _a2;
      }
      case UPDATE_COMMANDS_LITERAL.UNSHIFT: {
        var modifiers = {
          $each: query.operands.map(encodeInternalDataType),
          $position: 0
        };
        return _c = {}, _c[$op] = (_d = {}, _d[query.fieldName] = modifiers, _d), _c;
      }
      case UPDATE_COMMANDS_LITERAL.POP: {
        return _e = {}, _e[$op] = (_f = {}, _f[query.fieldName] = 1, _f), _e;
      }
      case UPDATE_COMMANDS_LITERAL.SHIFT: {
        return _g = {}, _g[$op] = (_h = {}, _h[query.fieldName] = -1, _h), _g;
      }
      default: {
        return _j = {}, _j[$op] = (_k = {}, _k[query.fieldName] = encodeInternalDataType(query.operands), _k), _j;
      }
    }
  };
  UpdateSerializer2.prototype.encodeUpdateObject = function(query) {
    var flattened = flattenQueryObject(query);
    for (var key in flattened) {
      if (/^\$/.test(key))
        continue;
      var val = flattened[key];
      if (isUpdateCommand(val)) {
        flattened[key] = val._setFieldName(key);
        var condition = this.encodeUpdateCommand(flattened[key]);
        mergeConditionAfterEncode(flattened, condition, key);
      } else {
        flattened[key] = val = encodeInternalDataType(val);
        var $setCommand = new UpdateCommand(UPDATE_COMMANDS_LITERAL.SET, [val], key);
        var condition = this.encodeUpdateCommand($setCommand);
        mergeConditionAfterEncode(flattened, condition, key);
      }
    }
    return flattened;
  };
  return UpdateSerializer2;
}();
var wsList = {};
function getWsInstance(db) {
  if (!Db.wsClientClass) {
    throw new Error("to use realtime you must import realtime module first");
  }
  var env = db.config.env;
  if (!wsList[env]) {
    wsList[env] = new Db.wsClientClass({
      context: {
        appConfig: {
          docSizeLimit: 1e3,
          realtimePingInterval: 1e4,
          realtimePongWaitTimeout: 5e3,
          request: new Db.reqClass(db.config)
        }
      }
    });
  }
  return wsList[env];
}
var __assign$3 = globalThis && globalThis.__assign || function() {
  __assign$3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$3.apply(this, arguments);
};
var DocumentReference$1 = function() {
  function DocumentReference2(db, coll, docID, projection) {
    var _this = this;
    if (projection === void 0) {
      projection = {};
    }
    this.watch = function(options) {
      var ws = getWsInstance(_this._db);
      return ws.watch(__assign$3(__assign$3({}, options), { envId: _this._db.config.env, collectionName: _this._coll, query: JSON.stringify({
        _id: _this.id
      }) }));
    };
    this._db = db;
    this._coll = coll;
    this.id = docID;
    this.request = new Db.reqClass(this._db.config);
    this.projection = projection;
  }
  DocumentReference2.prototype.create = function(data, callback) {
    callback = callback || createPromiseCallback();
    var params = {
      collectionName: this._coll,
      data: serialize(data)
    };
    if (this.id) {
      params["_id"] = this.id;
    }
    this.request.send("database.addDocument", params).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        callback(0, {
          id: res.data._id,
          requestId: res.requestId
        });
      }
    }).catch(function(err) {
      callback(err);
    });
    return callback.promise;
  };
  DocumentReference2.prototype.set = function(data, callback) {
    callback = callback || createPromiseCallback();
    if (!this.id) {
      return Promise.resolve({
        code: "INVALID_PARAM",
        message: "docId\u4E0D\u80FD\u4E3A\u7A7A"
      });
    }
    if (!data || typeof data !== "object") {
      return Promise.resolve({
        code: "INVALID_PARAM",
        message: "\u53C2\u6570\u5FC5\u9700\u662F\u975E\u7A7A\u5BF9\u8C61"
      });
    }
    if (data.hasOwnProperty("_id")) {
      return Promise.resolve({
        code: "INVALID_PARAM",
        message: "\u4E0D\u80FD\u66F4\u65B0_id\u7684\u503C"
      });
    }
    var hasOperator = false;
    var checkMixed = function(objs) {
      if (typeof objs === "object") {
        for (var key in objs) {
          if (objs[key] instanceof UpdateCommand) {
            hasOperator = true;
          } else if (typeof objs[key] === "object") {
            checkMixed(objs[key]);
          }
        }
      }
    };
    checkMixed(data);
    if (hasOperator) {
      return Promise.resolve({
        code: "DATABASE_REQUEST_FAILED",
        message: "update operator complicit"
      });
    }
    var merge = false;
    var param = {
      collectionName: this._coll,
      queryType: QueryType.DOC,
      data: serialize(data),
      multi: false,
      merge,
      upsert: true
    };
    if (this.id) {
      param["query"] = { _id: this.id };
    }
    this.request.send("database.updateDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        callback(0, {
          updated: res.data.updated,
          upsertedId: res.data.upserted_id,
          requestId: res.requestId
        });
      }
    }).catch(function(err) {
      callback(err);
    });
    return callback.promise;
  };
  DocumentReference2.prototype.update = function(data, callback) {
    callback = callback || createPromiseCallback();
    if (!data || typeof data !== "object") {
      return Promise.resolve({
        code: "INVALID_PARAM",
        message: "\u53C2\u6570\u5FC5\u9700\u662F\u975E\u7A7A\u5BF9\u8C61"
      });
    }
    if (data.hasOwnProperty("_id")) {
      return Promise.resolve({
        code: "INVALID_PARAM",
        message: "\u4E0D\u80FD\u66F4\u65B0_id\u7684\u503C"
      });
    }
    var query = { _id: this.id };
    var merge = true;
    var param = {
      collectionName: this._coll,
      data: UpdateSerializer.encode(data),
      query,
      queryType: QueryType.DOC,
      multi: false,
      merge,
      upsert: false
    };
    this.request.send("database.updateDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        callback(0, {
          updated: res.data.updated,
          upsertedId: res.data.upserted_id,
          requestId: res.requestId
        });
      }
    }).catch(function(err) {
      callback(err);
    });
    return callback.promise;
  };
  DocumentReference2.prototype.remove = function(callback) {
    callback = callback || createPromiseCallback();
    var query = { _id: this.id };
    var param = {
      collectionName: this._coll,
      query,
      queryType: QueryType.DOC,
      multi: false
    };
    this.request.send("database.deleteDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        callback(0, {
          deleted: res.data.deleted,
          requestId: res.requestId
        });
      }
    }).catch(function(err) {
      callback(err);
    });
    return callback.promise;
  };
  DocumentReference2.prototype.get = function(callback) {
    callback = callback || createPromiseCallback();
    var query = { _id: this.id };
    var param = {
      collectionName: this._coll,
      query,
      queryType: QueryType.DOC,
      multi: false,
      projection: this.projection
    };
    this.request.send("database.queryDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        var documents = Util.formatResDocumentData(res.data.list);
        callback(0, {
          data: documents,
          requestId: res.requestId,
          total: res.TotalCount,
          limit: res.Limit,
          offset: res.Offset
        });
      }
    }).catch(function(err) {
      callback(err);
    });
    return callback.promise;
  };
  DocumentReference2.prototype.field = function(projection) {
    for (var k in projection) {
      if (projection[k]) {
        projection[k] = 1;
      } else {
        projection[k] = 0;
      }
    }
    return new DocumentReference2(this._db, this._coll, this.id, projection);
  };
  return DocumentReference2;
}();
var QuerySerializer = function() {
  function QuerySerializer2() {
  }
  QuerySerializer2.encode = function(query) {
    var encoder = new QueryEncoder();
    return encoder.encodeQuery(query);
  };
  return QuerySerializer2;
}();
var QueryEncoder = function() {
  function QueryEncoder2() {
  }
  QueryEncoder2.prototype.encodeQuery = function(query, key) {
    var _a2;
    if (isConversionRequired(query)) {
      if (isLogicCommand(query)) {
        return this.encodeLogicCommand(query);
      } else if (isQueryCommand(query)) {
        return this.encodeQueryCommand(query);
      } else {
        return _a2 = {}, _a2[key] = this.encodeQueryObject(query), _a2;
      }
    } else {
      if (isObject$3(query)) {
        return this.encodeQueryObject(query);
      } else {
        return query;
      }
    }
  };
  QueryEncoder2.prototype.encodeRegExp = function(query) {
    return {
      $regex: query.source,
      $options: query.flags
    };
  };
  QueryEncoder2.prototype.encodeLogicCommand = function(query) {
    var _a2, _b, _c, _d, _e, _f, _g;
    var _this = this;
    switch (query.operator) {
      case LOGIC_COMMANDS_LITERAL.NOR:
      case LOGIC_COMMANDS_LITERAL.AND:
      case LOGIC_COMMANDS_LITERAL.OR: {
        var $op = operatorToString(query.operator);
        var subqueries = query.operands.map(function(oprand) {
          return _this.encodeQuery(oprand, query.fieldName);
        });
        return _a2 = {}, _a2[$op] = subqueries, _a2;
      }
      case LOGIC_COMMANDS_LITERAL.NOT: {
        var $op = operatorToString(query.operator);
        var operatorExpression = query.operands[0];
        if (isRegExp$1(operatorExpression)) {
          return _b = {}, _b[query.fieldName] = (_c = {}, _c[$op] = this.encodeRegExp(operatorExpression), _c), _b;
        } else {
          var subqueries = this.encodeQuery(operatorExpression)[query.fieldName];
          return _d = {}, _d[query.fieldName] = (_e = {}, _e[$op] = subqueries, _e), _d;
        }
      }
      default: {
        var $op = operatorToString(query.operator);
        if (query.operands.length === 1) {
          var subquery = this.encodeQuery(query.operands[0]);
          return _f = {}, _f[$op] = subquery, _f;
        } else {
          var subqueries = query.operands.map(this.encodeQuery.bind(this));
          return _g = {}, _g[$op] = subqueries, _g;
        }
      }
    }
  };
  QueryEncoder2.prototype.encodeQueryCommand = function(query) {
    if (isComparisonCommand(query)) {
      return this.encodeComparisonCommand(query);
    } else {
      return this.encodeComparisonCommand(query);
    }
  };
  QueryEncoder2.prototype.encodeComparisonCommand = function(query) {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _j;
    if (query.fieldName === SYMBOL_UNSET_FIELD_NAME) {
      throw new Error("Cannot encode a comparison command with unset field name");
    }
    var $op = operatorToString(query.operator);
    switch (query.operator) {
      case QUERY_COMMANDS_LITERAL.EQ:
      case QUERY_COMMANDS_LITERAL.NEQ:
      case QUERY_COMMANDS_LITERAL.LT:
      case QUERY_COMMANDS_LITERAL.LTE:
      case QUERY_COMMANDS_LITERAL.GT:
      case QUERY_COMMANDS_LITERAL.GTE:
      case QUERY_COMMANDS_LITERAL.ELEM_MATCH:
      case QUERY_COMMANDS_LITERAL.EXISTS:
      case QUERY_COMMANDS_LITERAL.SIZE:
      case QUERY_COMMANDS_LITERAL.MOD: {
        return _a2 = {}, _a2[query.fieldName] = (_b = {}, _b[$op] = encodeInternalDataType(query.operands[0]), _b), _a2;
      }
      case QUERY_COMMANDS_LITERAL.IN:
      case QUERY_COMMANDS_LITERAL.NIN:
      case QUERY_COMMANDS_LITERAL.ALL: {
        return _c = {}, _c[query.fieldName] = (_d = {}, _d[$op] = encodeInternalDataType(query.operands), _d), _c;
      }
      case QUERY_COMMANDS_LITERAL.GEO_NEAR: {
        var options = query.operands[0];
        return _e = {}, _e[query.fieldName] = {
          $nearSphere: {
            $geometry: options.geometry.toJSON(),
            $maxDistance: options.maxDistance,
            $minDistance: options.minDistance
          }
        }, _e;
      }
      case QUERY_COMMANDS_LITERAL.GEO_WITHIN: {
        var options = query.operands[0];
        return _f = {}, _f[query.fieldName] = {
          $geoWithin: {
            $geometry: options.geometry.toJSON()
          }
        }, _f;
      }
      case QUERY_COMMANDS_LITERAL.GEO_INTERSECTS: {
        var options = query.operands[0];
        return _g = {}, _g[query.fieldName] = {
          $geoIntersects: {
            $geometry: options.geometry.toJSON()
          }
        }, _g;
      }
      default: {
        return _h = {}, _h[query.fieldName] = (_j = {}, _j[$op] = encodeInternalDataType(query.operands[0]), _j), _h;
      }
    }
  };
  QueryEncoder2.prototype.encodeQueryObject = function(query) {
    var flattened = flattenQueryObject(query);
    for (var key in flattened) {
      var val = flattened[key];
      if (isLogicCommand(val)) {
        flattened[key] = val._setFieldName(key);
        var condition = this.encodeLogicCommand(flattened[key]);
        this.mergeConditionAfterEncode(flattened, condition, key);
      } else if (isComparisonCommand(val)) {
        flattened[key] = val._setFieldName(key);
        var condition = this.encodeComparisonCommand(flattened[key]);
        this.mergeConditionAfterEncode(flattened, condition, key);
      } else if (isConversionRequired(val)) {
        flattened[key] = encodeInternalDataType(val);
      }
    }
    return flattened;
  };
  QueryEncoder2.prototype.mergeConditionAfterEncode = function(query, condition, key) {
    if (!condition[key]) {
      delete query[key];
    }
    for (var conditionKey in condition) {
      if (query[conditionKey]) {
        if (isArray$2(query[conditionKey])) {
          query[conditionKey] = query[conditionKey].concat(condition[conditionKey]);
        } else if (isObject$3(query[conditionKey])) {
          if (isObject$3(condition[conditionKey])) {
            Object.assign(query, condition);
          } else {
            console.warn("unmergable condition, query is object but condition is " + getType$1(condition) + ", can only overwrite", condition, key);
            query[conditionKey] = condition[conditionKey];
          }
        } else {
          console.warn("to-merge query is of type " + getType$1(query) + ", can only overwrite", query, condition, key);
          query[conditionKey] = condition[conditionKey];
        }
      } else {
        query[conditionKey] = condition[conditionKey];
      }
    }
  };
  return QueryEncoder2;
}();
var __assign$2 = globalThis && globalThis.__assign || function() {
  __assign$2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$2.apply(this, arguments);
};
var Query$1 = function() {
  function Query2(db, coll, fieldFilters, fieldOrders, queryOptions) {
    var _this = this;
    this.watch = function(options) {
      var ws = getWsInstance(_this._db);
      return ws.watch(__assign$2(__assign$2({}, options), { envId: _this._db.config.env, collectionName: _this._coll, query: JSON.stringify(_this._fieldFilters || {}), limit: _this._queryOptions.limit, orderBy: _this._fieldOrders ? _this._fieldOrders.reduce(function(acc, cur) {
        acc[cur.field] = cur.direction;
        return acc;
      }, {}) : void 0 }));
    };
    this._db = db;
    this._coll = coll;
    this._fieldFilters = fieldFilters;
    this._fieldOrders = fieldOrders || [];
    this._queryOptions = queryOptions || {};
    this._request = new Db.reqClass(this._db.config);
  }
  Query2.prototype.get = function(callback) {
    callback = callback || createPromiseCallback();
    var newOder = [];
    if (this._fieldOrders) {
      this._fieldOrders.forEach(function(order) {
        newOder.push(order);
      });
    }
    var param = {
      collectionName: this._coll,
      queryType: QueryType.WHERE
    };
    if (this._fieldFilters) {
      param.query = this._fieldFilters;
    }
    if (newOder.length > 0) {
      param.order = newOder;
    }
    if (this._queryOptions.offset) {
      param.offset = this._queryOptions.offset;
    }
    if (this._queryOptions.limit) {
      param.limit = this._queryOptions.limit < 1e3 ? this._queryOptions.limit : 1e3;
    } else {
      param.limit = 100;
    }
    if (this._queryOptions.projection) {
      param.projection = this._queryOptions.projection;
    }
    this._request.send("database.queryDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        var documents = Util.formatResDocumentData(res.data.list);
        var result = {
          data: documents,
          requestId: res.requestId
        };
        if (res.TotalCount)
          result.total = res.TotalCount;
        if (res.Limit)
          result.limit = res.Limit;
        if (res.Offset)
          result.offset = res.Offset;
        callback(0, result);
      }
    }).catch(function(err) {
      callback(err);
    });
    return callback.promise;
  };
  Query2.prototype.count = function(callback) {
    callback = callback || createPromiseCallback();
    var param = {
      collectionName: this._coll,
      queryType: QueryType.WHERE
    };
    if (this._fieldFilters) {
      param.query = this._fieldFilters;
    }
    this._request.send("database.countDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        callback(0, {
          requestId: res.requestId,
          total: res.data.total
        });
      }
    }).catch(function(e) {
      callback(e);
    });
    return callback.promise;
  };
  Query2.prototype.where = function(query) {
    if (Object.prototype.toString.call(query).slice(8, -1) !== "Object") {
      throw Error(ErrorCode.QueryParamTypeError);
    }
    var keys2 = Object.keys(query);
    var checkFlag = keys2.some(function(item) {
      return query[item] !== void 0;
    });
    if (keys2.length && !checkFlag) {
      throw Error(ErrorCode.QueryParamValueError);
    }
    return new Query2(this._db, this._coll, QuerySerializer.encode(query), this._fieldOrders, this._queryOptions);
  };
  Query2.prototype.orderBy = function(fieldPath, directionStr) {
    Validate.isFieldPath(fieldPath);
    Validate.isFieldOrder(directionStr);
    var newOrder = {
      field: fieldPath,
      direction: directionStr
    };
    var combinedOrders = this._fieldOrders.concat(newOrder);
    return new Query2(this._db, this._coll, this._fieldFilters, combinedOrders, this._queryOptions);
  };
  Query2.prototype.limit = function(limit) {
    Validate.isInteger("limit", limit);
    var option = __assign$2({}, this._queryOptions);
    option.limit = limit;
    return new Query2(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);
  };
  Query2.prototype.skip = function(offset2) {
    Validate.isInteger("offset", offset2);
    var option = __assign$2({}, this._queryOptions);
    option.offset = offset2;
    return new Query2(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);
  };
  Query2.prototype.update = function(data, callback) {
    callback = callback || createPromiseCallback();
    if (!data || typeof data !== "object") {
      return Promise.resolve({
        code: "INVALID_PARAM",
        message: "\u53C2\u6570\u5FC5\u9700\u662F\u975E\u7A7A\u5BF9\u8C61"
      });
    }
    if (data.hasOwnProperty("_id")) {
      return Promise.resolve({
        code: "INVALID_PARAM",
        message: "\u4E0D\u80FD\u66F4\u65B0_id\u7684\u503C"
      });
    }
    var param = {
      collectionName: this._coll,
      query: this._fieldFilters,
      queryType: QueryType.WHERE,
      multi: true,
      merge: true,
      upsert: false,
      data: UpdateSerializer.encode(data)
    };
    this._request.send("database.updateDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        callback(0, {
          requestId: res.requestId,
          updated: res.data.updated,
          upsertId: res.data.upsert_id
        });
      }
    }).catch(function(e) {
      callback(e);
    });
    return callback.promise;
  };
  Query2.prototype.field = function(projection) {
    for (var k in projection) {
      if (projection[k]) {
        if (typeof projection[k] !== "object") {
          projection[k] = 1;
        }
      } else {
        projection[k] = 0;
      }
    }
    var option = __assign$2({}, this._queryOptions);
    option.projection = projection;
    return new Query2(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);
  };
  Query2.prototype.remove = function(callback) {
    callback = callback || createPromiseCallback();
    if (Object.keys(this._queryOptions).length > 0) {
      console.warn("`offset`, `limit` and `projection` are not supported in remove() operation");
    }
    if (this._fieldOrders.length > 0) {
      console.warn("`orderBy` is not supported in remove() operation");
    }
    var param = {
      collectionName: this._coll,
      query: QuerySerializer.encode(this._fieldFilters),
      queryType: QueryType.WHERE,
      multi: true
    };
    this._request.send("database.deleteDocument", param).then(function(res) {
      if (res.code) {
        callback(0, res);
      } else {
        callback(0, {
          requestId: res.requestId,
          deleted: res.data.deleted
        });
      }
    }).catch(function(e) {
      callback(e);
    });
    return callback.promise;
  };
  return Query2;
}();
function createCommonjsModule(fn, module2) {
  return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
}
var byteLength_1 = byteLength;
var toByteArray_1 = toByteArray;
var fromByteArray_1 = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1)
    validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;
  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
  }
  return parts.join("");
}
var base64Js = {
  byteLength: byteLength_1,
  toByteArray: toByteArray_1,
  fromByteArray: fromByteArray_1
};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
var read = function read2(buffer, offset2, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset2 + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset2 + i], i += d, nBits -= 8) {
  }
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset2 + i], i += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
var write = function write2(buffer, value, offset2, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset2 + i] = m & 255, i += d, m /= 256, mLen -= 8) {
  }
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset2 + i] = e & 255, i += d, e /= 256, eLen -= 8) {
  }
  buffer[offset2 + i - d] |= s * 128;
};
var ieee754 = {
  read,
  write
};
var buffer$1 = createCommonjsModule(function(module2, exports) {
  var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports.Buffer = Buffer2;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 2147483647;
  exports.kMaxLength = K_MAX_LENGTH;
  Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  }
  function typedArraySupport() {
    try {
      var arr = new Uint8Array(1);
      var proto2 = {
        foo: function foo() {
          return 42;
        }
      };
      Object.setPrototypeOf(proto2, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto2);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }
  Object.defineProperty(Buffer2.prototype, "parent", {
    enumerable: true,
    get: function get2() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer2.prototype, "offset", {
    enumerable: true,
    get: function get2() {
      if (!Buffer2.isBuffer(this))
        return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
      return allocUnsafe(arg);
    }
    return from2(arg, encodingOrOffset, length);
  }
  Buffer2.poolSize = 8192;
  function from2(value, encodingOrOffset, length) {
    if (typeof value === "string") {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === "number") {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    var valueOf2 = value.valueOf && value.valueOf();
    if (valueOf2 != null && valueOf2 !== value) {
      return Buffer2.from(valueOf2, encodingOrOffset, length);
    }
    var b = fromObject(value);
    if (b)
      return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
      return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    }
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
  }
  Buffer2.from = function(value, encodingOrOffset, length) {
    return from2(value, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer2, Uint8Array);
  function assertSize(size2) {
    if (typeof size2 !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size2 < 0) {
      throw new RangeError('The value "' + size2 + '" is invalid for option "size"');
    }
  }
  function alloc(size2, fill, encoding) {
    assertSize(size2);
    if (size2 <= 0) {
      return createBuffer(size2);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size2).fill(fill, encoding) : createBuffer(size2).fill(fill);
    }
    return createBuffer(size2);
  }
  Buffer2.alloc = function(size2, fill, encoding) {
    return alloc(size2, fill, encoding);
  };
  function allocUnsafe(size2) {
    assertSize(size2);
    return createBuffer(size2 < 0 ? 0 : checked(size2) | 0);
  }
  Buffer2.allocUnsafe = function(size2) {
    return allocUnsafe(size2);
  };
  Buffer2.allocUnsafeSlow = function(size2) {
    return allocUnsafe(size2);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    var length = byteLength2(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    var buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new Uint8Array(array);
    } else if (length === void 0) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer2.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer2.alloc(+length);
  }
  Buffer2.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer2.prototype;
  };
  Buffer2.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array))
      a = Buffer2.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array))
      b = Buffer2.from(b, b.offset, b.byteLength);
    if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a === b)
      return 0;
    var x = a.length;
    var y = b.length;
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }
    if (x < y)
      return -1;
    if (y < x)
      return 1;
    return 0;
  };
  Buffer2.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer2.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer2.alloc(0);
    }
    var i;
    if (length === void 0) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }
    var buffer = Buffer2.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer.length) {
          Buffer2.from(buf).copy(buffer, pos);
        } else {
          Uint8Array.prototype.set.call(buffer, buf, pos);
        }
      } else if (!Buffer2.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer, pos);
      }
      pos += buf.length;
    }
    return buffer;
  };
  function byteLength2(string, encoding) {
    if (Buffer2.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== "string") {
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + babelHelpers["typeof"](string));
    }
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0)
      return 0;
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len >>> 1;
        case "base64":
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.byteLength = byteLength2;
  function slowToString(encoding, start, end) {
    var loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.prototype._isBuffer = true;
  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }
  Buffer2.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this;
  };
  Buffer2.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this;
  };
  Buffer2.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this;
  };
  Buffer2.prototype.toString = function toString2() {
    var length = this.length;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
  Buffer2.prototype.equals = function equals(b) {
    if (!Buffer2.isBuffer(b))
      throw new TypeError("Argument must be a Buffer");
    if (this === b)
      return true;
    return Buffer2.compare(this, b) === 0;
  };
  Buffer2.prototype.inspect = function inspect2() {
    var str = "";
    var max2 = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max2).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max2)
      str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
  }
  Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer2.from(target, target.offset, target.byteLength);
    }
    if (!Buffer2.isBuffer(target)) {
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + babelHelpers["typeof"](target));
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target)
      return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }
    if (x < y)
      return -1;
    if (y < x)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    if (buffer.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer.length - 1;
    }
    if (byteOffset < 0)
      byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer2.from(val, encoding);
    }
    if (Buffer2.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read3(buf, i2) {
      if (indexSize === 1) {
        return buf[i2];
      } else {
        return buf.readUInt16BE(i2 * indexSize);
      }
    }
    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read3(arr, i) === read3(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i;
          if (i - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read3(arr, i + j) !== read3(val, j)) {
            found = false;
            break;
          }
        }
        if (found)
          return i;
      }
    }
    return -1;
  }
  Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer2.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset2, length) {
    offset2 = Number(offset2) || 0;
    var remaining = buf.length - offset2;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    var strLen = string.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed))
        return i;
      buf[offset2 + i] = parsed;
    }
    return i;
  }
  function utf8Write(buf, string, offset2, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset2), buf, offset2, length);
  }
  function asciiWrite(buf, string, offset2, length) {
    return blitBuffer(asciiToBytes(string), buf, offset2, length);
  }
  function base64Write(buf, string, offset2, length) {
    return blitBuffer(base64ToBytes(string), buf, offset2, length);
  }
  function ucs2Write(buf, string, offset2, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset2), buf, offset2, length);
  }
  Buffer2.prototype.write = function write3(string, offset2, length, encoding) {
    if (offset2 === void 0) {
      encoding = "utf8";
      length = this.length;
      offset2 = 0;
    } else if (length === void 0 && typeof offset2 === "string") {
      encoding = offset2;
      length = this.length;
      offset2 = 0;
    } else if (isFinite(offset2)) {
      offset2 = offset2 >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    }
    var remaining = this.length - offset2;
    if (length === void 0 || length > remaining)
      length = remaining;
    if (string.length > 0 && (length < 0 || offset2 < 0) || offset2 > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    var loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string, offset2, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string, offset2, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string, offset2, length);
        case "base64":
          return base64Write(this, string, offset2, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string, offset2, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer2.prototype.toJSON = function toJSON2() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64Js.fromByteArray(buf);
    } else {
      return base64Js.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  var MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    var res = "";
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len)
      end = len;
    var out = "";
    for (var i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for (var i = 0; i < bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res;
  }
  Buffer2.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === void 0 ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0)
        start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0)
        end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start)
      end = start;
    var newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer2.prototype);
    return newBuf;
  };
  function checkOffset(offset2, ext, length) {
    if (offset2 % 1 !== 0 || offset2 < 0)
      throw new RangeError("offset is not uint");
    if (offset2 + ext > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset2, byteLength3, noAssert) {
    offset2 = offset2 >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset2, byteLength3, this.length);
    var val = this[offset2];
    var mul = 1;
    var i = 0;
    while (++i < byteLength3 && (mul *= 256)) {
      val += this[offset2 + i] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset2, byteLength3, noAssert) {
    offset2 = offset2 >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      checkOffset(offset2, byteLength3, this.length);
    }
    var val = this[offset2 + --byteLength3];
    var mul = 1;
    while (byteLength3 > 0 && (mul *= 256)) {
      val += this[offset2 + --byteLength3] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 1, this.length);
    return this[offset2];
  };
  Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    return this[offset2] | this[offset2 + 1] << 8;
  };
  Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    return this[offset2] << 8 | this[offset2 + 1];
  };
  Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return (this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16) + this[offset2 + 3] * 16777216;
  };
  Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return this[offset2] * 16777216 + (this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3]);
  };
  Buffer2.prototype.readIntLE = function readIntLE(offset2, byteLength3, noAssert) {
    offset2 = offset2 >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset2, byteLength3, this.length);
    var val = this[offset2];
    var mul = 1;
    var i = 0;
    while (++i < byteLength3 && (mul *= 256)) {
      val += this[offset2 + i] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readIntBE = function readIntBE(offset2, byteLength3, noAssert) {
    offset2 = offset2 >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert)
      checkOffset(offset2, byteLength3, this.length);
    var i = byteLength3;
    var mul = 1;
    var val = this[offset2 + --i];
    while (i > 0 && (mul *= 256)) {
      val += this[offset2 + --i] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readInt8 = function readInt8(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 1, this.length);
    if (!(this[offset2] & 128))
      return this[offset2];
    return (255 - this[offset2] + 1) * -1;
  };
  Buffer2.prototype.readInt16LE = function readInt16LE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    var val = this[offset2] | this[offset2 + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt16BE = function readInt16BE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 2, this.length);
    var val = this[offset2 + 1] | this[offset2] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt32LE = function readInt32LE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return this[offset2] | this[offset2 + 1] << 8 | this[offset2 + 2] << 16 | this[offset2 + 3] << 24;
  };
  Buffer2.prototype.readInt32BE = function readInt32BE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return this[offset2] << 24 | this[offset2 + 1] << 16 | this[offset2 + 2] << 8 | this[offset2 + 3];
  };
  Buffer2.prototype.readFloatLE = function readFloatLE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return ieee754.read(this, offset2, true, 23, 4);
  };
  Buffer2.prototype.readFloatBE = function readFloatBE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 4, this.length);
    return ieee754.read(this, offset2, false, 23, 4);
  };
  Buffer2.prototype.readDoubleLE = function readDoubleLE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 8, this.length);
    return ieee754.read(this, offset2, true, 52, 8);
  };
  Buffer2.prototype.readDoubleBE = function readDoubleBE(offset2, noAssert) {
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkOffset(offset2, 8, this.length);
    return ieee754.read(this, offset2, false, 52, 8);
  };
  function checkInt(buf, value, offset2, ext, max2, min2) {
    if (!Buffer2.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max2 || value < min2)
      throw new RangeError('"value" argument is out of bounds');
    if (offset2 + ext > buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset2, byteLength3, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value, offset2, byteLength3, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset2] = value & 255;
    while (++i < byteLength3 && (mul *= 256)) {
      this[offset2 + i] = value / mul & 255;
    }
    return offset2 + byteLength3;
  };
  Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset2, byteLength3, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value, offset2, byteLength3, maxBytes, 0);
    }
    var i = byteLength3 - 1;
    var mul = 1;
    this[offset2 + i] = value & 255;
    while (--i >= 0 && (mul *= 256)) {
      this[offset2 + i] = value / mul & 255;
    }
    return offset2 + byteLength3;
  };
  Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 1, 255, 0);
    this[offset2] = value & 255;
    return offset2 + 1;
  };
  Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 65535, 0);
    this[offset2] = value & 255;
    this[offset2 + 1] = value >>> 8;
    return offset2 + 2;
  };
  Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 65535, 0);
    this[offset2] = value >>> 8;
    this[offset2 + 1] = value & 255;
    return offset2 + 2;
  };
  Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 4294967295, 0);
    this[offset2 + 3] = value >>> 24;
    this[offset2 + 2] = value >>> 16;
    this[offset2 + 1] = value >>> 8;
    this[offset2] = value & 255;
    return offset2 + 4;
  };
  Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 4294967295, 0);
    this[offset2] = value >>> 24;
    this[offset2 + 1] = value >>> 16;
    this[offset2 + 2] = value >>> 8;
    this[offset2 + 3] = value & 255;
    return offset2 + 4;
  };
  Buffer2.prototype.writeIntLE = function writeIntLE(value, offset2, byteLength3, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value, offset2, byteLength3, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset2] = value & 255;
    while (++i < byteLength3 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset2 + i - 1] !== 0) {
        sub = 1;
      }
      this[offset2 + i] = (value / mul >> 0) - sub & 255;
    }
    return offset2 + byteLength3;
  };
  Buffer2.prototype.writeIntBE = function writeIntBE(value, offset2, byteLength3, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value, offset2, byteLength3, limit - 1, -limit);
    }
    var i = byteLength3 - 1;
    var mul = 1;
    var sub = 0;
    this[offset2 + i] = value & 255;
    while (--i >= 0 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset2 + i + 1] !== 0) {
        sub = 1;
      }
      this[offset2 + i] = (value / mul >> 0) - sub & 255;
    }
    return offset2 + byteLength3;
  };
  Buffer2.prototype.writeInt8 = function writeInt8(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 1, 127, -128);
    if (value < 0)
      value = 255 + value + 1;
    this[offset2] = value & 255;
    return offset2 + 1;
  };
  Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 32767, -32768);
    this[offset2] = value & 255;
    this[offset2 + 1] = value >>> 8;
    return offset2 + 2;
  };
  Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 2, 32767, -32768);
    this[offset2] = value >>> 8;
    this[offset2 + 1] = value & 255;
    return offset2 + 2;
  };
  Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 2147483647, -2147483648);
    this[offset2] = value & 255;
    this[offset2 + 1] = value >>> 8;
    this[offset2 + 2] = value >>> 16;
    this[offset2 + 3] = value >>> 24;
    return offset2 + 4;
  };
  Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset2, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert)
      checkInt(this, value, offset2, 4, 2147483647, -2147483648);
    if (value < 0)
      value = 4294967295 + value + 1;
    this[offset2] = value >>> 24;
    this[offset2 + 1] = value >>> 16;
    this[offset2 + 2] = value >>> 8;
    this[offset2 + 3] = value & 255;
    return offset2 + 4;
  };
  function checkIEEE754(buf, value, offset2, ext, max2, min2) {
    if (offset2 + ext > buf.length)
      throw new RangeError("Index out of range");
    if (offset2 < 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset2, littleEndian, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset2, 4);
    }
    ieee754.write(buf, value, offset2, littleEndian, 23, 4);
    return offset2 + 4;
  }
  Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset2, noAssert) {
    return writeFloat(this, value, offset2, true, noAssert);
  };
  Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset2, noAssert) {
    return writeFloat(this, value, offset2, false, noAssert);
  };
  function writeDouble(buf, value, offset2, littleEndian, noAssert) {
    value = +value;
    offset2 = offset2 >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset2, 8);
    }
    ieee754.write(buf, value, offset2, littleEndian, 52, 8);
    return offset2 + 8;
  }
  Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset2, noAssert) {
    return writeDouble(this, value, offset2, true, noAssert);
  };
  Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset2, noAssert) {
    return writeDouble(this, value, offset2, false, noAssert);
  };
  Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer2.isBuffer(target))
      throw new TypeError("argument should be a Buffer");
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length)
      throw new RangeError("Index out of range");
    if (end < 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
  };
  Buffer2.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        var code2 = val.charCodeAt(0);
        if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
          val = code2;
        }
      }
    } else if (typeof val === "number") {
      val = val & 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val)
      val = 0;
    var i;
    if (typeof val === "number") {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
      var len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }
    return this;
  };
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          } else if (i + 1 === length) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      byteArray.push(str.charCodeAt(i) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0)
        break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64Js.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset2, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset2 >= dst.length || i >= src.length)
        break;
      dst[i + offset2] = src[i];
    }
    return i;
  }
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  var hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for (var i = 0; i < 16; ++i) {
      var i16 = i * 16;
      for (var j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }
    return table;
  }();
});
var buffer_1 = buffer$1.Buffer;
buffer$1.SlowBuffer;
buffer$1.INSPECT_MAX_BYTES;
buffer$1.kMaxLength;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p2 in b2) {
      if (b2.hasOwnProperty(p2))
        d2[p2] = b2[p2];
    }
  };
  return _extendStatics(d, b);
};
function __extends$2(d, b) {
  _extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var BSONError = function(_super) {
  __extends$2(BSONError2, _super);
  function BSONError2(message) {
    var _this = _super.call(this, message) || this;
    Object.setPrototypeOf(_this, BSONError2.prototype);
    return _this;
  }
  Object.defineProperty(BSONError2.prototype, "name", {
    get: function() {
      return "BSONError";
    },
    enumerable: false,
    configurable: true
  });
  return BSONError2;
}(Error);
var BSONTypeError = function(_super) {
  __extends$2(BSONTypeError2, _super);
  function BSONTypeError2(message) {
    var _this = _super.call(this, message) || this;
    Object.setPrototypeOf(_this, BSONTypeError2.prototype);
    return _this;
  }
  Object.defineProperty(BSONTypeError2.prototype, "name", {
    get: function() {
      return "BSONTypeError";
    },
    enumerable: false,
    configurable: true
  });
  return BSONTypeError2;
}(TypeError);
function checkForMath(potentialGlobal) {
  return potentialGlobal && potentialGlobal.Math == Math && potentialGlobal;
}
function getGlobal() {
  return checkForMath(typeof globalThis === "object" && globalThis) || checkForMath(typeof window === "object" && window) || checkForMath(typeof self === "object" && self) || checkForMath(typeof global === "object" && global) || Function("return this")();
}
function isReactNative() {
  var g = getGlobal();
  return typeof g.navigator === "object" && g.navigator.product === "ReactNative";
}
var insecureRandomBytes = function insecureRandomBytes2(size2) {
  var insecureWarning = isReactNative() ? "BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values." : "BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.";
  console.warn(insecureWarning);
  var result = buffer_1.alloc(size2);
  for (var i = 0; i < size2; ++i)
    result[i] = Math.floor(Math.random() * 256);
  return result;
};
var detectRandomBytes = function() {
  {
    if (typeof window !== "undefined") {
      var target_1 = window.crypto || window.msCrypto;
      if (target_1 && target_1.getRandomValues) {
        return function(size2) {
          return target_1.getRandomValues(buffer_1.alloc(size2));
        };
      }
    }
    if (typeof global !== "undefined" && global.crypto && global.crypto.getRandomValues) {
      return function(size2) {
        return global.crypto.getRandomValues(buffer_1.alloc(size2));
      };
    }
    return insecureRandomBytes;
  }
};
var randomBytes = detectRandomBytes();
function isAnyArrayBuffer(value) {
  return ["[object ArrayBuffer]", "[object SharedArrayBuffer]"].includes(Object.prototype.toString.call(value));
}
function isUint8Array(value) {
  return Object.prototype.toString.call(value) === "[object Uint8Array]";
}
function isRegExp(d) {
  return Object.prototype.toString.call(d) === "[object RegExp]";
}
function isDate$1(d) {
  return isObjectLike(d) && Object.prototype.toString.call(d) === "[object Date]";
}
function isObjectLike(candidate) {
  return typeof candidate === "object" && candidate !== null;
}
function deprecate$1(fn, message) {
  var warned = false;
  function deprecated() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (!warned) {
      console.warn(message);
      warned = true;
    }
    return fn.apply(this, args);
  }
  return deprecated;
}
function ensureBuffer(potentialBuffer) {
  if (ArrayBuffer.isView(potentialBuffer)) {
    return buffer_1.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);
  }
  if (isAnyArrayBuffer(potentialBuffer)) {
    return buffer_1.from(potentialBuffer);
  }
  throw new BSONTypeError("Must use either Buffer or TypedArray");
}
var VALIDATION_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;
var uuidValidateString = function(str) {
  return typeof str === "string" && VALIDATION_REGEX.test(str);
};
var uuidHexStringToBuffer = function(hexString) {
  if (!uuidValidateString(hexString)) {
    throw new BSONTypeError('UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" or "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".');
  }
  var sanitizedHexString = hexString.replace(/-/g, "");
  return buffer_1.from(sanitizedHexString, "hex");
};
var bufferToUuidHexString = function(buffer, includeDashes) {
  if (includeDashes === void 0) {
    includeDashes = true;
  }
  return includeDashes ? buffer.toString("hex", 0, 4) + "-" + buffer.toString("hex", 4, 6) + "-" + buffer.toString("hex", 6, 8) + "-" + buffer.toString("hex", 8, 10) + "-" + buffer.toString("hex", 10, 16) : buffer.toString("hex");
};
var BYTE_LENGTH = 16;
var kId$1 = Symbol("id");
var UUID = function() {
  function UUID2(input) {
    if (typeof input === "undefined") {
      this.id = UUID2.generate();
    } else if (input instanceof UUID2) {
      this[kId$1] = buffer_1.from(input.id);
      this.__id = input.__id;
    } else if (ArrayBuffer.isView(input) && input.byteLength === BYTE_LENGTH) {
      this.id = ensureBuffer(input);
    } else if (typeof input === "string") {
      this.id = uuidHexStringToBuffer(input);
    } else {
      throw new BSONTypeError("Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).");
    }
  }
  Object.defineProperty(UUID2.prototype, "id", {
    get: function() {
      return this[kId$1];
    },
    set: function(value) {
      this[kId$1] = value;
      if (UUID2.cacheHexString) {
        this.__id = bufferToUuidHexString(value);
      }
    },
    enumerable: false,
    configurable: true
  });
  UUID2.prototype.toHexString = function(includeDashes) {
    if (includeDashes === void 0) {
      includeDashes = true;
    }
    if (UUID2.cacheHexString && this.__id) {
      return this.__id;
    }
    var uuidHexString = bufferToUuidHexString(this.id, includeDashes);
    if (UUID2.cacheHexString) {
      this.__id = uuidHexString;
    }
    return uuidHexString;
  };
  UUID2.prototype.toString = function(encoding) {
    return encoding ? this.id.toString(encoding) : this.toHexString();
  };
  UUID2.prototype.toJSON = function() {
    return this.toHexString();
  };
  UUID2.prototype.equals = function(otherId) {
    if (!otherId) {
      return false;
    }
    if (otherId instanceof UUID2) {
      return otherId.id.equals(this.id);
    }
    try {
      return new UUID2(otherId).id.equals(this.id);
    } catch (_a2) {
      return false;
    }
  };
  UUID2.prototype.toBinary = function() {
    return new Binary(this.id, Binary.SUBTYPE_UUID);
  };
  UUID2.generate = function() {
    var bytes = randomBytes(BYTE_LENGTH);
    bytes[6] = bytes[6] & 15 | 64;
    bytes[8] = bytes[8] & 63 | 128;
    return buffer_1.from(bytes);
  };
  UUID2.isValid = function(input) {
    if (!input) {
      return false;
    }
    if (input instanceof UUID2) {
      return true;
    }
    if (typeof input === "string") {
      return uuidValidateString(input);
    }
    if (isUint8Array(input)) {
      if (input.length !== BYTE_LENGTH) {
        return false;
      }
      try {
        return parseInt(input[6].toString(16)[0], 10) === Binary.SUBTYPE_UUID;
      } catch (_a2) {
        return false;
      }
    }
    return false;
  };
  UUID2.createFromHexString = function(hexString) {
    var buffer = uuidHexStringToBuffer(hexString);
    return new UUID2(buffer);
  };
  UUID2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  UUID2.prototype.inspect = function() {
    return 'new UUID("'.concat(this.toHexString(), '")');
  };
  return UUID2;
}();
Object.defineProperty(UUID.prototype, "_bsontype", { value: "UUID" });
var Binary = function() {
  function Binary2(buffer, subType) {
    if (!(this instanceof Binary2))
      return new Binary2(buffer, subType);
    if (!(buffer == null) && !(typeof buffer === "string") && !ArrayBuffer.isView(buffer) && !(buffer instanceof ArrayBuffer) && !Array.isArray(buffer)) {
      throw new BSONTypeError("Binary can only be constructed from string, Buffer, TypedArray, or Array<number>");
    }
    this.sub_type = subType !== null && subType !== void 0 ? subType : Binary2.BSON_BINARY_SUBTYPE_DEFAULT;
    if (buffer == null) {
      this.buffer = buffer_1.alloc(Binary2.BUFFER_SIZE);
      this.position = 0;
    } else {
      if (typeof buffer === "string") {
        this.buffer = buffer_1.from(buffer, "binary");
      } else if (Array.isArray(buffer)) {
        this.buffer = buffer_1.from(buffer);
      } else {
        this.buffer = ensureBuffer(buffer);
      }
      this.position = this.buffer.byteLength;
    }
  }
  Binary2.prototype.put = function(byteValue) {
    if (typeof byteValue === "string" && byteValue.length !== 1) {
      throw new BSONTypeError("only accepts single character String");
    } else if (typeof byteValue !== "number" && byteValue.length !== 1)
      throw new BSONTypeError("only accepts single character Uint8Array or Array");
    var decodedByte;
    if (typeof byteValue === "string") {
      decodedByte = byteValue.charCodeAt(0);
    } else if (typeof byteValue === "number") {
      decodedByte = byteValue;
    } else {
      decodedByte = byteValue[0];
    }
    if (decodedByte < 0 || decodedByte > 255) {
      throw new BSONTypeError("only accepts number in a valid unsigned byte range 0-255");
    }
    if (this.buffer.length > this.position) {
      this.buffer[this.position++] = decodedByte;
    } else {
      var buffer = buffer_1.alloc(Binary2.BUFFER_SIZE + this.buffer.length);
      this.buffer.copy(buffer, 0, 0, this.buffer.length);
      this.buffer = buffer;
      this.buffer[this.position++] = decodedByte;
    }
  };
  Binary2.prototype.write = function(sequence, offset2) {
    offset2 = typeof offset2 === "number" ? offset2 : this.position;
    if (this.buffer.length < offset2 + sequence.length) {
      var buffer = buffer_1.alloc(this.buffer.length + sequence.length);
      this.buffer.copy(buffer, 0, 0, this.buffer.length);
      this.buffer = buffer;
    }
    if (ArrayBuffer.isView(sequence)) {
      this.buffer.set(ensureBuffer(sequence), offset2);
      this.position = offset2 + sequence.byteLength > this.position ? offset2 + sequence.length : this.position;
    } else if (typeof sequence === "string") {
      this.buffer.write(sequence, offset2, sequence.length, "binary");
      this.position = offset2 + sequence.length > this.position ? offset2 + sequence.length : this.position;
    }
  };
  Binary2.prototype.read = function(position, length) {
    length = length && length > 0 ? length : this.position;
    return this.buffer.slice(position, position + length);
  };
  Binary2.prototype.value = function(asRaw) {
    asRaw = !!asRaw;
    if (asRaw && this.buffer.length === this.position) {
      return this.buffer;
    }
    if (asRaw) {
      return this.buffer.slice(0, this.position);
    }
    return this.buffer.toString("binary", 0, this.position);
  };
  Binary2.prototype.length = function() {
    return this.position;
  };
  Binary2.prototype.toJSON = function() {
    return this.buffer.toString("base64");
  };
  Binary2.prototype.toString = function(format2) {
    return this.buffer.toString(format2);
  };
  Binary2.prototype.toExtendedJSON = function(options) {
    options = options || {};
    var base64String = this.buffer.toString("base64");
    var subType = Number(this.sub_type).toString(16);
    if (options.legacy) {
      return {
        $binary: base64String,
        $type: subType.length === 1 ? "0" + subType : subType
      };
    }
    return {
      $binary: {
        base64: base64String,
        subType: subType.length === 1 ? "0" + subType : subType
      }
    };
  };
  Binary2.prototype.toUUID = function() {
    if (this.sub_type === Binary2.SUBTYPE_UUID) {
      return new UUID(this.buffer.slice(0, this.position));
    }
    throw new BSONError('Binary sub_type "'.concat(this.sub_type, '" is not supported for converting to UUID. Only "').concat(Binary2.SUBTYPE_UUID, '" is currently supported.'));
  };
  Binary2.fromExtendedJSON = function(doc2, options) {
    options = options || {};
    var data;
    var type;
    if ("$binary" in doc2) {
      if (options.legacy && typeof doc2.$binary === "string" && "$type" in doc2) {
        type = doc2.$type ? parseInt(doc2.$type, 16) : 0;
        data = buffer_1.from(doc2.$binary, "base64");
      } else {
        if (typeof doc2.$binary !== "string") {
          type = doc2.$binary.subType ? parseInt(doc2.$binary.subType, 16) : 0;
          data = buffer_1.from(doc2.$binary.base64, "base64");
        }
      }
    } else if ("$uuid" in doc2) {
      type = 4;
      data = uuidHexStringToBuffer(doc2.$uuid);
    }
    if (!data) {
      throw new BSONTypeError("Unexpected Binary Extended JSON format ".concat(JSON.stringify(doc2)));
    }
    return new Binary2(data, type);
  };
  Binary2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  Binary2.prototype.inspect = function() {
    var asBuffer = this.value(true);
    return 'new Binary(Buffer.from("'.concat(asBuffer.toString("hex"), '", "hex"), ').concat(this.sub_type, ")");
  };
  Binary2.BSON_BINARY_SUBTYPE_DEFAULT = 0;
  Binary2.BUFFER_SIZE = 256;
  Binary2.SUBTYPE_DEFAULT = 0;
  Binary2.SUBTYPE_FUNCTION = 1;
  Binary2.SUBTYPE_BYTE_ARRAY = 2;
  Binary2.SUBTYPE_UUID_OLD = 3;
  Binary2.SUBTYPE_UUID = 4;
  Binary2.SUBTYPE_MD5 = 5;
  Binary2.SUBTYPE_ENCRYPTED = 6;
  Binary2.SUBTYPE_COLUMN = 7;
  Binary2.SUBTYPE_USER_DEFINED = 128;
  return Binary2;
}();
Object.defineProperty(Binary.prototype, "_bsontype", { value: "Binary" });
var Code = function() {
  function Code2(code2, scope) {
    if (!(this instanceof Code2))
      return new Code2(code2, scope);
    this.code = code2;
    this.scope = scope;
  }
  Code2.prototype.toJSON = function() {
    return { code: this.code, scope: this.scope };
  };
  Code2.prototype.toExtendedJSON = function() {
    if (this.scope) {
      return { $code: this.code, $scope: this.scope };
    }
    return { $code: this.code };
  };
  Code2.fromExtendedJSON = function(doc2) {
    return new Code2(doc2.$code, doc2.$scope);
  };
  Code2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  Code2.prototype.inspect = function() {
    var codeJson = this.toJSON();
    return 'new Code("'.concat(String(codeJson.code), '"').concat(codeJson.scope ? ", ".concat(JSON.stringify(codeJson.scope)) : "", ")");
  };
  return Code2;
}();
Object.defineProperty(Code.prototype, "_bsontype", { value: "Code" });
function isDBRefLike(value) {
  return isObjectLike(value) && value.$id != null && typeof value.$ref === "string" && (value.$db == null || typeof value.$db === "string");
}
var DBRef = function() {
  function DBRef2(collection, oid, db, fields) {
    if (!(this instanceof DBRef2))
      return new DBRef2(collection, oid, db, fields);
    var parts = collection.split(".");
    if (parts.length === 2) {
      db = parts.shift();
      collection = parts.shift();
    }
    this.collection = collection;
    this.oid = oid;
    this.db = db;
    this.fields = fields || {};
  }
  Object.defineProperty(DBRef2.prototype, "namespace", {
    get: function() {
      return this.collection;
    },
    set: function(value) {
      this.collection = value;
    },
    enumerable: false,
    configurable: true
  });
  DBRef2.prototype.toJSON = function() {
    var o = Object.assign({
      $ref: this.collection,
      $id: this.oid
    }, this.fields);
    if (this.db != null)
      o.$db = this.db;
    return o;
  };
  DBRef2.prototype.toExtendedJSON = function(options) {
    options = options || {};
    var o = {
      $ref: this.collection,
      $id: this.oid
    };
    if (options.legacy) {
      return o;
    }
    if (this.db)
      o.$db = this.db;
    o = Object.assign(o, this.fields);
    return o;
  };
  DBRef2.fromExtendedJSON = function(doc2) {
    var copy = Object.assign({}, doc2);
    delete copy.$ref;
    delete copy.$id;
    delete copy.$db;
    return new DBRef2(doc2.$ref, doc2.$id, doc2.$db, copy);
  };
  DBRef2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  DBRef2.prototype.inspect = function() {
    var oid = this.oid === void 0 || this.oid.toString === void 0 ? this.oid : this.oid.toString();
    return 'new DBRef("'.concat(this.namespace, '", new ObjectId("').concat(String(oid), '")').concat(this.db ? ', "'.concat(this.db, '"') : "", ")");
  };
  return DBRef2;
}();
Object.defineProperty(DBRef.prototype, "_bsontype", { value: "DBRef" });
var wasm = void 0;
try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(
    new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])
  ), {}).exports;
} catch (_a2) {
}
var TWO_PWR_16_DBL = 1 << 16;
var TWO_PWR_24_DBL = 1 << 24;
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
var INT_CACHE = {};
var UINT_CACHE = {};
var Long = function() {
  function Long2(low, high, unsigned) {
    if (low === void 0) {
      low = 0;
    }
    if (!(this instanceof Long2))
      return new Long2(low, high, unsigned);
    if (typeof low === "bigint") {
      Object.assign(this, Long2.fromBigInt(low, !!high));
    } else if (typeof low === "string") {
      Object.assign(this, Long2.fromString(low, !!high));
    } else {
      this.low = low | 0;
      this.high = high | 0;
      this.unsigned = !!unsigned;
    }
    Object.defineProperty(this, "__isLong__", {
      value: true,
      configurable: false,
      writable: false,
      enumerable: false
    });
  }
  Long2.fromBits = function(lowBits, highBits, unsigned) {
    return new Long2(lowBits, highBits, unsigned);
  };
  Long2.fromInt = function(value, unsigned) {
    var obj, cachedObj, cache2;
    if (unsigned) {
      value >>>= 0;
      if (cache2 = 0 <= value && value < 256) {
        cachedObj = UINT_CACHE[value];
        if (cachedObj)
          return cachedObj;
      }
      obj = Long2.fromBits(value, (value | 0) < 0 ? -1 : 0, true);
      if (cache2)
        UINT_CACHE[value] = obj;
      return obj;
    } else {
      value |= 0;
      if (cache2 = -128 <= value && value < 128) {
        cachedObj = INT_CACHE[value];
        if (cachedObj)
          return cachedObj;
      }
      obj = Long2.fromBits(value, value < 0 ? -1 : 0, false);
      if (cache2)
        INT_CACHE[value] = obj;
      return obj;
    }
  };
  Long2.fromNumber = function(value, unsigned) {
    if (isNaN(value))
      return unsigned ? Long2.UZERO : Long2.ZERO;
    if (unsigned) {
      if (value < 0)
        return Long2.UZERO;
      if (value >= TWO_PWR_64_DBL)
        return Long2.MAX_UNSIGNED_VALUE;
    } else {
      if (value <= -TWO_PWR_63_DBL)
        return Long2.MIN_VALUE;
      if (value + 1 >= TWO_PWR_63_DBL)
        return Long2.MAX_VALUE;
    }
    if (value < 0)
      return Long2.fromNumber(-value, unsigned).neg();
    return Long2.fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
  };
  Long2.fromBigInt = function(value, unsigned) {
    return Long2.fromString(value.toString(), unsigned);
  };
  Long2.fromString = function(str, unsigned, radix) {
    if (str.length === 0)
      throw Error("empty string");
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
      return Long2.ZERO;
    if (typeof unsigned === "number") {
      radix = unsigned, unsigned = false;
    } else {
      unsigned = !!unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
      throw RangeError("radix");
    var p2;
    if ((p2 = str.indexOf("-")) > 0)
      throw Error("interior hyphen");
    else if (p2 === 0) {
      return Long2.fromString(str.substring(1), unsigned, radix).neg();
    }
    var radixToPower = Long2.fromNumber(Math.pow(radix, 8));
    var result = Long2.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size2 = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size2), radix);
      if (size2 < 8) {
        var power = Long2.fromNumber(Math.pow(radix, size2));
        result = result.mul(power).add(Long2.fromNumber(value));
      } else {
        result = result.mul(radixToPower);
        result = result.add(Long2.fromNumber(value));
      }
    }
    result.unsigned = unsigned;
    return result;
  };
  Long2.fromBytes = function(bytes, unsigned, le) {
    return le ? Long2.fromBytesLE(bytes, unsigned) : Long2.fromBytesBE(bytes, unsigned);
  };
  Long2.fromBytesLE = function(bytes, unsigned) {
    return new Long2(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
  };
  Long2.fromBytesBE = function(bytes, unsigned) {
    return new Long2(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
  };
  Long2.isLong = function(value) {
    return isObjectLike(value) && value["__isLong__"] === true;
  };
  Long2.fromValue = function(val, unsigned) {
    if (typeof val === "number")
      return Long2.fromNumber(val, unsigned);
    if (typeof val === "string")
      return Long2.fromString(val, unsigned);
    return Long2.fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
  };
  Long2.prototype.add = function(addend) {
    if (!Long2.isLong(addend))
      addend = Long2.fromValue(addend);
    var a48 = this.high >>> 16;
    var a32 = this.high & 65535;
    var a16 = this.low >>> 16;
    var a00 = this.low & 65535;
    var b48 = addend.high >>> 16;
    var b32 = addend.high & 65535;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 + b48;
    c48 &= 65535;
    return Long2.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
  };
  Long2.prototype.and = function(other) {
    if (!Long2.isLong(other))
      other = Long2.fromValue(other);
    return Long2.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
  };
  Long2.prototype.compare = function(other) {
    if (!Long2.isLong(other))
      other = Long2.fromValue(other);
    if (this.eq(other))
      return 0;
    var thisNeg = this.isNegative(), otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
      return -1;
    if (!thisNeg && otherNeg)
      return 1;
    if (!this.unsigned)
      return this.sub(other).isNegative() ? -1 : 1;
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
  };
  Long2.prototype.comp = function(other) {
    return this.compare(other);
  };
  Long2.prototype.divide = function(divisor) {
    if (!Long2.isLong(divisor))
      divisor = Long2.fromValue(divisor);
    if (divisor.isZero())
      throw Error("division by zero");
    if (wasm) {
      if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
        return this;
      }
      var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
      return Long2.fromBits(low, wasm.get_high(), this.unsigned);
    }
    if (this.isZero())
      return this.unsigned ? Long2.UZERO : Long2.ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
      if (this.eq(Long2.MIN_VALUE)) {
        if (divisor.eq(Long2.ONE) || divisor.eq(Long2.NEG_ONE))
          return Long2.MIN_VALUE;
        else if (divisor.eq(Long2.MIN_VALUE))
          return Long2.ONE;
        else {
          var halfThis = this.shr(1);
          approx = halfThis.div(divisor).shl(1);
          if (approx.eq(Long2.ZERO)) {
            return divisor.isNegative() ? Long2.ONE : Long2.NEG_ONE;
          } else {
            rem = this.sub(divisor.mul(approx));
            res = approx.add(rem.div(divisor));
            return res;
          }
        }
      } else if (divisor.eq(Long2.MIN_VALUE))
        return this.unsigned ? Long2.UZERO : Long2.ZERO;
      if (this.isNegative()) {
        if (divisor.isNegative())
          return this.neg().div(divisor.neg());
        return this.neg().div(divisor).neg();
      } else if (divisor.isNegative())
        return this.div(divisor.neg()).neg();
      res = Long2.ZERO;
    } else {
      if (!divisor.unsigned)
        divisor = divisor.toUnsigned();
      if (divisor.gt(this))
        return Long2.UZERO;
      if (divisor.gt(this.shru(1)))
        return Long2.UONE;
      res = Long2.UZERO;
    }
    rem = this;
    while (rem.gte(divisor)) {
      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
      var approxRes = Long2.fromNumber(approx);
      var approxRem = approxRes.mul(divisor);
      while (approxRem.isNegative() || approxRem.gt(rem)) {
        approx -= delta;
        approxRes = Long2.fromNumber(approx, this.unsigned);
        approxRem = approxRes.mul(divisor);
      }
      if (approxRes.isZero())
        approxRes = Long2.ONE;
      res = res.add(approxRes);
      rem = rem.sub(approxRem);
    }
    return res;
  };
  Long2.prototype.div = function(divisor) {
    return this.divide(divisor);
  };
  Long2.prototype.equals = function(other) {
    if (!Long2.isLong(other))
      other = Long2.fromValue(other);
    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
      return false;
    return this.high === other.high && this.low === other.low;
  };
  Long2.prototype.eq = function(other) {
    return this.equals(other);
  };
  Long2.prototype.getHighBits = function() {
    return this.high;
  };
  Long2.prototype.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  Long2.prototype.getLowBits = function() {
    return this.low;
  };
  Long2.prototype.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  Long2.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      return this.eq(Long2.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    }
    var val = this.high !== 0 ? this.high : this.low;
    var bit;
    for (bit = 31; bit > 0; bit--)
      if ((val & 1 << bit) !== 0)
        break;
    return this.high !== 0 ? bit + 33 : bit + 1;
  };
  Long2.prototype.greaterThan = function(other) {
    return this.comp(other) > 0;
  };
  Long2.prototype.gt = function(other) {
    return this.greaterThan(other);
  };
  Long2.prototype.greaterThanOrEqual = function(other) {
    return this.comp(other) >= 0;
  };
  Long2.prototype.gte = function(other) {
    return this.greaterThanOrEqual(other);
  };
  Long2.prototype.ge = function(other) {
    return this.greaterThanOrEqual(other);
  };
  Long2.prototype.isEven = function() {
    return (this.low & 1) === 0;
  };
  Long2.prototype.isNegative = function() {
    return !this.unsigned && this.high < 0;
  };
  Long2.prototype.isOdd = function() {
    return (this.low & 1) === 1;
  };
  Long2.prototype.isPositive = function() {
    return this.unsigned || this.high >= 0;
  };
  Long2.prototype.isZero = function() {
    return this.high === 0 && this.low === 0;
  };
  Long2.prototype.lessThan = function(other) {
    return this.comp(other) < 0;
  };
  Long2.prototype.lt = function(other) {
    return this.lessThan(other);
  };
  Long2.prototype.lessThanOrEqual = function(other) {
    return this.comp(other) <= 0;
  };
  Long2.prototype.lte = function(other) {
    return this.lessThanOrEqual(other);
  };
  Long2.prototype.modulo = function(divisor) {
    if (!Long2.isLong(divisor))
      divisor = Long2.fromValue(divisor);
    if (wasm) {
      var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
      return Long2.fromBits(low, wasm.get_high(), this.unsigned);
    }
    return this.sub(this.div(divisor).mul(divisor));
  };
  Long2.prototype.mod = function(divisor) {
    return this.modulo(divisor);
  };
  Long2.prototype.rem = function(divisor) {
    return this.modulo(divisor);
  };
  Long2.prototype.multiply = function(multiplier) {
    if (this.isZero())
      return Long2.ZERO;
    if (!Long2.isLong(multiplier))
      multiplier = Long2.fromValue(multiplier);
    if (wasm) {
      var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
      return Long2.fromBits(low, wasm.get_high(), this.unsigned);
    }
    if (multiplier.isZero())
      return Long2.ZERO;
    if (this.eq(Long2.MIN_VALUE))
      return multiplier.isOdd() ? Long2.MIN_VALUE : Long2.ZERO;
    if (multiplier.eq(Long2.MIN_VALUE))
      return this.isOdd() ? Long2.MIN_VALUE : Long2.ZERO;
    if (this.isNegative()) {
      if (multiplier.isNegative())
        return this.neg().mul(multiplier.neg());
      else
        return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
      return this.mul(multiplier.neg()).neg();
    if (this.lt(Long2.TWO_PWR_24) && multiplier.lt(Long2.TWO_PWR_24))
      return Long2.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
    var a48 = this.high >>> 16;
    var a32 = this.high & 65535;
    var a16 = this.low >>> 16;
    var a00 = this.low & 65535;
    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 65535;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 65535;
    return Long2.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
  };
  Long2.prototype.mul = function(multiplier) {
    return this.multiply(multiplier);
  };
  Long2.prototype.negate = function() {
    if (!this.unsigned && this.eq(Long2.MIN_VALUE))
      return Long2.MIN_VALUE;
    return this.not().add(Long2.ONE);
  };
  Long2.prototype.neg = function() {
    return this.negate();
  };
  Long2.prototype.not = function() {
    return Long2.fromBits(~this.low, ~this.high, this.unsigned);
  };
  Long2.prototype.notEquals = function(other) {
    return !this.equals(other);
  };
  Long2.prototype.neq = function(other) {
    return this.notEquals(other);
  };
  Long2.prototype.ne = function(other) {
    return this.notEquals(other);
  };
  Long2.prototype.or = function(other) {
    if (!Long2.isLong(other))
      other = Long2.fromValue(other);
    return Long2.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
  };
  Long2.prototype.shiftLeft = function(numBits) {
    if (Long2.isLong(numBits))
      numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
      return this;
    else if (numBits < 32)
      return Long2.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
    else
      return Long2.fromBits(0, this.low << numBits - 32, this.unsigned);
  };
  Long2.prototype.shl = function(numBits) {
    return this.shiftLeft(numBits);
  };
  Long2.prototype.shiftRight = function(numBits) {
    if (Long2.isLong(numBits))
      numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
      return this;
    else if (numBits < 32)
      return Long2.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
    else
      return Long2.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  };
  Long2.prototype.shr = function(numBits) {
    return this.shiftRight(numBits);
  };
  Long2.prototype.shiftRightUnsigned = function(numBits) {
    if (Long2.isLong(numBits))
      numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
      return this;
    else {
      var high = this.high;
      if (numBits < 32) {
        var low = this.low;
        return Long2.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
      } else if (numBits === 32)
        return Long2.fromBits(high, 0, this.unsigned);
      else
        return Long2.fromBits(high >>> numBits - 32, 0, this.unsigned);
    }
  };
  Long2.prototype.shr_u = function(numBits) {
    return this.shiftRightUnsigned(numBits);
  };
  Long2.prototype.shru = function(numBits) {
    return this.shiftRightUnsigned(numBits);
  };
  Long2.prototype.subtract = function(subtrahend) {
    if (!Long2.isLong(subtrahend))
      subtrahend = Long2.fromValue(subtrahend);
    return this.add(subtrahend.neg());
  };
  Long2.prototype.sub = function(subtrahend) {
    return this.subtract(subtrahend);
  };
  Long2.prototype.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  Long2.prototype.toNumber = function() {
    if (this.unsigned)
      return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
  };
  Long2.prototype.toBigInt = function() {
    return BigInt(this.toString());
  };
  Long2.prototype.toBytes = function(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
  };
  Long2.prototype.toBytesLE = function() {
    var hi = this.high, lo = this.low;
    return [
      lo & 255,
      lo >>> 8 & 255,
      lo >>> 16 & 255,
      lo >>> 24,
      hi & 255,
      hi >>> 8 & 255,
      hi >>> 16 & 255,
      hi >>> 24
    ];
  };
  Long2.prototype.toBytesBE = function() {
    var hi = this.high, lo = this.low;
    return [
      hi >>> 24,
      hi >>> 16 & 255,
      hi >>> 8 & 255,
      hi & 255,
      lo >>> 24,
      lo >>> 16 & 255,
      lo >>> 8 & 255,
      lo & 255
    ];
  };
  Long2.prototype.toSigned = function() {
    if (!this.unsigned)
      return this;
    return Long2.fromBits(this.low, this.high, false);
  };
  Long2.prototype.toString = function(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
      throw RangeError("radix");
    if (this.isZero())
      return "0";
    if (this.isNegative()) {
      if (this.eq(Long2.MIN_VALUE)) {
        var radixLong = Long2.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
        return div.toString(radix) + rem1.toInt().toString(radix);
      } else
        return "-" + this.neg().toString(radix);
    }
    var radixToPower = Long2.fromNumber(Math.pow(radix, 6), this.unsigned);
    var rem = this;
    var result = "";
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6)
          digits = "0" + digits;
        result = "" + digits + result;
      }
    }
  };
  Long2.prototype.toUnsigned = function() {
    if (this.unsigned)
      return this;
    return Long2.fromBits(this.low, this.high, true);
  };
  Long2.prototype.xor = function(other) {
    if (!Long2.isLong(other))
      other = Long2.fromValue(other);
    return Long2.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
  };
  Long2.prototype.eqz = function() {
    return this.isZero();
  };
  Long2.prototype.le = function(other) {
    return this.lessThanOrEqual(other);
  };
  Long2.prototype.toExtendedJSON = function(options) {
    if (options && options.relaxed)
      return this.toNumber();
    return { $numberLong: this.toString() };
  };
  Long2.fromExtendedJSON = function(doc2, options) {
    var result = Long2.fromString(doc2.$numberLong);
    return options && options.relaxed ? result.toNumber() : result;
  };
  Long2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  Long2.prototype.inspect = function() {
    return 'new Long("'.concat(this.toString(), '"').concat(this.unsigned ? ", true" : "", ")");
  };
  Long2.TWO_PWR_24 = Long2.fromInt(TWO_PWR_24_DBL);
  Long2.MAX_UNSIGNED_VALUE = Long2.fromBits(4294967295 | 0, 4294967295 | 0, true);
  Long2.ZERO = Long2.fromInt(0);
  Long2.UZERO = Long2.fromInt(0, true);
  Long2.ONE = Long2.fromInt(1);
  Long2.UONE = Long2.fromInt(1, true);
  Long2.NEG_ONE = Long2.fromInt(-1);
  Long2.MAX_VALUE = Long2.fromBits(4294967295 | 0, 2147483647 | 0, false);
  Long2.MIN_VALUE = Long2.fromBits(0, 2147483648 | 0, false);
  return Long2;
}();
Object.defineProperty(Long.prototype, "__isLong__", { value: true });
Object.defineProperty(Long.prototype, "_bsontype", { value: "Long" });
var PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
var PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
var PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;
var EXPONENT_MAX = 6111;
var EXPONENT_MIN = -6176;
var EXPONENT_BIAS = 6176;
var MAX_DIGITS = 34;
var NAN_BUFFER = [
  124,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
].reverse();
var INF_NEGATIVE_BUFFER = [
  248,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
].reverse();
var INF_POSITIVE_BUFFER = [
  120,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
].reverse();
var EXPONENT_REGEX = /^([-+])?(\d+)?$/;
var COMBINATION_MASK = 31;
var EXPONENT_MASK = 16383;
var COMBINATION_INFINITY = 30;
var COMBINATION_NAN = 31;
function isDigit(value) {
  return !isNaN(parseInt(value, 10));
}
function divideu128(value) {
  var DIVISOR = Long.fromNumber(1e3 * 1e3 * 1e3);
  var _rem = Long.fromNumber(0);
  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {
    return { quotient: value, rem: _rem };
  }
  for (var i = 0; i <= 3; i++) {
    _rem = _rem.shiftLeft(32);
    _rem = _rem.add(new Long(value.parts[i], 0));
    value.parts[i] = _rem.div(DIVISOR).low;
    _rem = _rem.modulo(DIVISOR);
  }
  return { quotient: value, rem: _rem };
}
function multiply64x2(left, right) {
  if (!left && !right) {
    return { high: Long.fromNumber(0), low: Long.fromNumber(0) };
  }
  var leftHigh = left.shiftRightUnsigned(32);
  var leftLow = new Long(left.getLowBits(), 0);
  var rightHigh = right.shiftRightUnsigned(32);
  var rightLow = new Long(right.getLowBits(), 0);
  var productHigh = leftHigh.multiply(rightHigh);
  var productMid = leftHigh.multiply(rightLow);
  var productMid2 = leftLow.multiply(rightHigh);
  var productLow = leftLow.multiply(rightLow);
  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
  productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));
  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));
  return { high: productHigh, low: productLow };
}
function lessThan(left, right) {
  var uhleft = left.high >>> 0;
  var uhright = right.high >>> 0;
  if (uhleft < uhright) {
    return true;
  } else if (uhleft === uhright) {
    var ulleft = left.low >>> 0;
    var ulright = right.low >>> 0;
    if (ulleft < ulright)
      return true;
  }
  return false;
}
function invalidErr(string, message) {
  throw new BSONTypeError('"'.concat(string, '" is not a valid Decimal128 string - ').concat(message));
}
var Decimal128 = function() {
  function Decimal1282(bytes) {
    if (!(this instanceof Decimal1282))
      return new Decimal1282(bytes);
    if (typeof bytes === "string") {
      this.bytes = Decimal1282.fromString(bytes).bytes;
    } else if (isUint8Array(bytes)) {
      if (bytes.byteLength !== 16) {
        throw new BSONTypeError("Decimal128 must take a Buffer of 16 bytes");
      }
      this.bytes = bytes;
    } else {
      throw new BSONTypeError("Decimal128 must take a Buffer or string");
    }
  }
  Decimal1282.fromString = function(representation) {
    var isNegative = false;
    var sawRadix = false;
    var foundNonZero = false;
    var significantDigits = 0;
    var nDigitsRead = 0;
    var nDigits = 0;
    var radixPosition = 0;
    var firstNonZero = 0;
    var digits = [0];
    var nDigitsStored = 0;
    var digitsInsert = 0;
    var firstDigit = 0;
    var lastDigit = 0;
    var exponent = 0;
    var i = 0;
    var significandHigh = new Long(0, 0);
    var significandLow = new Long(0, 0);
    var biasedExponent = 0;
    var index2 = 0;
    if (representation.length >= 7e3) {
      throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
    }
    var stringMatch = representation.match(PARSE_STRING_REGEXP);
    var infMatch = representation.match(PARSE_INF_REGEXP);
    var nanMatch = representation.match(PARSE_NAN_REGEXP);
    if (!stringMatch && !infMatch && !nanMatch || representation.length === 0) {
      throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
    }
    if (stringMatch) {
      var unsignedNumber = stringMatch[2];
      var e = stringMatch[4];
      var expSign = stringMatch[5];
      var expNumber = stringMatch[6];
      if (e && expNumber === void 0)
        invalidErr(representation, "missing exponent power");
      if (e && unsignedNumber === void 0)
        invalidErr(representation, "missing exponent base");
      if (e === void 0 && (expSign || expNumber)) {
        invalidErr(representation, "missing e before exponent");
      }
    }
    if (representation[index2] === "+" || representation[index2] === "-") {
      isNegative = representation[index2++] === "-";
    }
    if (!isDigit(representation[index2]) && representation[index2] !== ".") {
      if (representation[index2] === "i" || representation[index2] === "I") {
        return new Decimal1282(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
      } else if (representation[index2] === "N") {
        return new Decimal1282(buffer_1.from(NAN_BUFFER));
      }
    }
    while (isDigit(representation[index2]) || representation[index2] === ".") {
      if (representation[index2] === ".") {
        if (sawRadix)
          invalidErr(representation, "contains multiple periods");
        sawRadix = true;
        index2 = index2 + 1;
        continue;
      }
      if (nDigitsStored < 34) {
        if (representation[index2] !== "0" || foundNonZero) {
          if (!foundNonZero) {
            firstNonZero = nDigitsRead;
          }
          foundNonZero = true;
          digits[digitsInsert++] = parseInt(representation[index2], 10);
          nDigitsStored = nDigitsStored + 1;
        }
      }
      if (foundNonZero)
        nDigits = nDigits + 1;
      if (sawRadix)
        radixPosition = radixPosition + 1;
      nDigitsRead = nDigitsRead + 1;
      index2 = index2 + 1;
    }
    if (sawRadix && !nDigitsRead)
      throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
    if (representation[index2] === "e" || representation[index2] === "E") {
      var match = representation.substr(++index2).match(EXPONENT_REGEX);
      if (!match || !match[2])
        return new Decimal1282(buffer_1.from(NAN_BUFFER));
      exponent = parseInt(match[0], 10);
      index2 = index2 + match[0].length;
    }
    if (representation[index2])
      return new Decimal1282(buffer_1.from(NAN_BUFFER));
    firstDigit = 0;
    if (!nDigitsStored) {
      firstDigit = 0;
      lastDigit = 0;
      digits[0] = 0;
      nDigits = 1;
      nDigitsStored = 1;
      significantDigits = 0;
    } else {
      lastDigit = nDigitsStored - 1;
      significantDigits = nDigits;
      if (significantDigits !== 1) {
        while (digits[firstNonZero + significantDigits - 1] === 0) {
          significantDigits = significantDigits - 1;
        }
      }
    }
    if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {
      exponent = EXPONENT_MIN;
    } else {
      exponent = exponent - radixPosition;
    }
    while (exponent > EXPONENT_MAX) {
      lastDigit = lastDigit + 1;
      if (lastDigit - firstDigit > MAX_DIGITS) {
        var digitsString = digits.join("");
        if (digitsString.match(/^0+$/)) {
          exponent = EXPONENT_MAX;
          break;
        }
        invalidErr(representation, "overflow");
      }
      exponent = exponent - 1;
    }
    while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {
      if (lastDigit === 0 && significantDigits < nDigitsStored) {
        exponent = EXPONENT_MIN;
        significantDigits = 0;
        break;
      }
      if (nDigitsStored < nDigits) {
        nDigits = nDigits - 1;
      } else {
        lastDigit = lastDigit - 1;
      }
      if (exponent < EXPONENT_MAX) {
        exponent = exponent + 1;
      } else {
        var digitsString = digits.join("");
        if (digitsString.match(/^0+$/)) {
          exponent = EXPONENT_MAX;
          break;
        }
        invalidErr(representation, "overflow");
      }
    }
    if (lastDigit - firstDigit + 1 < significantDigits) {
      var endOfString = nDigitsRead;
      if (sawRadix) {
        firstNonZero = firstNonZero + 1;
        endOfString = endOfString + 1;
      }
      if (isNegative) {
        firstNonZero = firstNonZero + 1;
        endOfString = endOfString + 1;
      }
      var roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);
      var roundBit = 0;
      if (roundDigit >= 5) {
        roundBit = 1;
        if (roundDigit === 5) {
          roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;
          for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {
            if (parseInt(representation[i], 10)) {
              roundBit = 1;
              break;
            }
          }
        }
      }
      if (roundBit) {
        var dIdx = lastDigit;
        for (; dIdx >= 0; dIdx--) {
          if (++digits[dIdx] > 9) {
            digits[dIdx] = 0;
            if (dIdx === 0) {
              if (exponent < EXPONENT_MAX) {
                exponent = exponent + 1;
                digits[dIdx] = 1;
              } else {
                return new Decimal1282(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
              }
            }
          }
        }
      }
    }
    significandHigh = Long.fromNumber(0);
    significandLow = Long.fromNumber(0);
    if (significantDigits === 0) {
      significandHigh = Long.fromNumber(0);
      significandLow = Long.fromNumber(0);
    } else if (lastDigit - firstDigit < 17) {
      var dIdx = firstDigit;
      significandLow = Long.fromNumber(digits[dIdx++]);
      significandHigh = new Long(0, 0);
      for (; dIdx <= lastDigit; dIdx++) {
        significandLow = significandLow.multiply(Long.fromNumber(10));
        significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
      }
    } else {
      var dIdx = firstDigit;
      significandHigh = Long.fromNumber(digits[dIdx++]);
      for (; dIdx <= lastDigit - 17; dIdx++) {
        significandHigh = significandHigh.multiply(Long.fromNumber(10));
        significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));
      }
      significandLow = Long.fromNumber(digits[dIdx++]);
      for (; dIdx <= lastDigit; dIdx++) {
        significandLow = significandLow.multiply(Long.fromNumber(10));
        significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
      }
    }
    var significand = multiply64x2(significandHigh, Long.fromString("100000000000000000"));
    significand.low = significand.low.add(significandLow);
    if (lessThan(significand.low, significandLow)) {
      significand.high = significand.high.add(Long.fromNumber(1));
    }
    biasedExponent = exponent + EXPONENT_BIAS;
    var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };
    if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {
      dec.high = dec.high.or(Long.fromNumber(3).shiftLeft(61));
      dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(16383).shiftLeft(47)));
      dec.high = dec.high.or(significand.high.and(Long.fromNumber(140737488355327)));
    } else {
      dec.high = dec.high.or(Long.fromNumber(biasedExponent & 16383).shiftLeft(49));
      dec.high = dec.high.or(significand.high.and(Long.fromNumber(562949953421311)));
    }
    dec.low = significand.low;
    if (isNegative) {
      dec.high = dec.high.or(Long.fromString("9223372036854775808"));
    }
    var buffer = buffer_1.alloc(16);
    index2 = 0;
    buffer[index2++] = dec.low.low & 255;
    buffer[index2++] = dec.low.low >> 8 & 255;
    buffer[index2++] = dec.low.low >> 16 & 255;
    buffer[index2++] = dec.low.low >> 24 & 255;
    buffer[index2++] = dec.low.high & 255;
    buffer[index2++] = dec.low.high >> 8 & 255;
    buffer[index2++] = dec.low.high >> 16 & 255;
    buffer[index2++] = dec.low.high >> 24 & 255;
    buffer[index2++] = dec.high.low & 255;
    buffer[index2++] = dec.high.low >> 8 & 255;
    buffer[index2++] = dec.high.low >> 16 & 255;
    buffer[index2++] = dec.high.low >> 24 & 255;
    buffer[index2++] = dec.high.high & 255;
    buffer[index2++] = dec.high.high >> 8 & 255;
    buffer[index2++] = dec.high.high >> 16 & 255;
    buffer[index2++] = dec.high.high >> 24 & 255;
    return new Decimal1282(buffer);
  };
  Decimal1282.prototype.toString = function() {
    var biased_exponent;
    var significand_digits = 0;
    var significand = new Array(36);
    for (var i = 0; i < significand.length; i++)
      significand[i] = 0;
    var index2 = 0;
    var is_zero = false;
    var significand_msb;
    var significand128 = { parts: [0, 0, 0, 0] };
    var j, k;
    var string = [];
    index2 = 0;
    var buffer = this.bytes;
    var low = buffer[index2++] | buffer[index2++] << 8 | buffer[index2++] << 16 | buffer[index2++] << 24;
    var midl = buffer[index2++] | buffer[index2++] << 8 | buffer[index2++] << 16 | buffer[index2++] << 24;
    var midh = buffer[index2++] | buffer[index2++] << 8 | buffer[index2++] << 16 | buffer[index2++] << 24;
    var high = buffer[index2++] | buffer[index2++] << 8 | buffer[index2++] << 16 | buffer[index2++] << 24;
    index2 = 0;
    var dec = {
      low: new Long(low, midl),
      high: new Long(midh, high)
    };
    if (dec.high.lessThan(Long.ZERO)) {
      string.push("-");
    }
    var combination = high >> 26 & COMBINATION_MASK;
    if (combination >> 3 === 3) {
      if (combination === COMBINATION_INFINITY) {
        return string.join("") + "Infinity";
      } else if (combination === COMBINATION_NAN) {
        return "NaN";
      } else {
        biased_exponent = high >> 15 & EXPONENT_MASK;
        significand_msb = 8 + (high >> 14 & 1);
      }
    } else {
      significand_msb = high >> 14 & 7;
      biased_exponent = high >> 17 & EXPONENT_MASK;
    }
    var exponent = biased_exponent - EXPONENT_BIAS;
    significand128.parts[0] = (high & 16383) + ((significand_msb & 15) << 14);
    significand128.parts[1] = midh;
    significand128.parts[2] = midl;
    significand128.parts[3] = low;
    if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {
      is_zero = true;
    } else {
      for (k = 3; k >= 0; k--) {
        var least_digits = 0;
        var result = divideu128(significand128);
        significand128 = result.quotient;
        least_digits = result.rem.low;
        if (!least_digits)
          continue;
        for (j = 8; j >= 0; j--) {
          significand[k * 9 + j] = least_digits % 10;
          least_digits = Math.floor(least_digits / 10);
        }
      }
    }
    if (is_zero) {
      significand_digits = 1;
      significand[index2] = 0;
    } else {
      significand_digits = 36;
      while (!significand[index2]) {
        significand_digits = significand_digits - 1;
        index2 = index2 + 1;
      }
    }
    var scientific_exponent = significand_digits - 1 + exponent;
    if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
      if (significand_digits > 34) {
        string.push("".concat(0));
        if (exponent > 0)
          string.push("E+".concat(exponent));
        else if (exponent < 0)
          string.push("E".concat(exponent));
        return string.join("");
      }
      string.push("".concat(significand[index2++]));
      significand_digits = significand_digits - 1;
      if (significand_digits) {
        string.push(".");
      }
      for (var i = 0; i < significand_digits; i++) {
        string.push("".concat(significand[index2++]));
      }
      string.push("E");
      if (scientific_exponent > 0) {
        string.push("+".concat(scientific_exponent));
      } else {
        string.push("".concat(scientific_exponent));
      }
    } else {
      if (exponent >= 0) {
        for (var i = 0; i < significand_digits; i++) {
          string.push("".concat(significand[index2++]));
        }
      } else {
        var radix_position = significand_digits + exponent;
        if (radix_position > 0) {
          for (var i = 0; i < radix_position; i++) {
            string.push("".concat(significand[index2++]));
          }
        } else {
          string.push("0");
        }
        string.push(".");
        while (radix_position++ < 0) {
          string.push("0");
        }
        for (var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {
          string.push("".concat(significand[index2++]));
        }
      }
    }
    return string.join("");
  };
  Decimal1282.prototype.toJSON = function() {
    return { $numberDecimal: this.toString() };
  };
  Decimal1282.prototype.toExtendedJSON = function() {
    return { $numberDecimal: this.toString() };
  };
  Decimal1282.fromExtendedJSON = function(doc2) {
    return Decimal1282.fromString(doc2.$numberDecimal);
  };
  Decimal1282.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  Decimal1282.prototype.inspect = function() {
    return 'new Decimal128("'.concat(this.toString(), '")');
  };
  return Decimal1282;
}();
Object.defineProperty(Decimal128.prototype, "_bsontype", { value: "Decimal128" });
var Double = function() {
  function Double2(value) {
    if (!(this instanceof Double2))
      return new Double2(value);
    if (value instanceof Number) {
      value = value.valueOf();
    }
    this.value = +value;
  }
  Double2.prototype.valueOf = function() {
    return this.value;
  };
  Double2.prototype.toJSON = function() {
    return this.value;
  };
  Double2.prototype.toString = function(radix) {
    return this.value.toString(radix);
  };
  Double2.prototype.toExtendedJSON = function(options) {
    if (options && (options.legacy || options.relaxed && isFinite(this.value))) {
      return this.value;
    }
    if (Object.is(Math.sign(this.value), -0)) {
      return { $numberDouble: "-".concat(this.value.toFixed(1)) };
    }
    var $numberDouble;
    if (Number.isInteger(this.value)) {
      $numberDouble = this.value.toFixed(1);
      if ($numberDouble.length >= 13) {
        $numberDouble = this.value.toExponential(13).toUpperCase();
      }
    } else {
      $numberDouble = this.value.toString();
    }
    return { $numberDouble };
  };
  Double2.fromExtendedJSON = function(doc2, options) {
    var doubleValue = parseFloat(doc2.$numberDouble);
    return options && options.relaxed ? doubleValue : new Double2(doubleValue);
  };
  Double2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  Double2.prototype.inspect = function() {
    var eJSON = this.toExtendedJSON();
    return "new Double(".concat(eJSON.$numberDouble, ")");
  };
  return Double2;
}();
Object.defineProperty(Double.prototype, "_bsontype", { value: "Double" });
var Int32 = function() {
  function Int322(value) {
    if (!(this instanceof Int322))
      return new Int322(value);
    if (value instanceof Number) {
      value = value.valueOf();
    }
    this.value = +value | 0;
  }
  Int322.prototype.valueOf = function() {
    return this.value;
  };
  Int322.prototype.toString = function(radix) {
    return this.value.toString(radix);
  };
  Int322.prototype.toJSON = function() {
    return this.value;
  };
  Int322.prototype.toExtendedJSON = function(options) {
    if (options && (options.relaxed || options.legacy))
      return this.value;
    return { $numberInt: this.value.toString() };
  };
  Int322.fromExtendedJSON = function(doc2, options) {
    return options && options.relaxed ? parseInt(doc2.$numberInt, 10) : new Int322(doc2.$numberInt);
  };
  Int322.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  Int322.prototype.inspect = function() {
    return "new Int32(".concat(this.valueOf(), ")");
  };
  return Int322;
}();
Object.defineProperty(Int32.prototype, "_bsontype", { value: "Int32" });
var MaxKey = function() {
  function MaxKey2() {
    if (!(this instanceof MaxKey2))
      return new MaxKey2();
  }
  MaxKey2.prototype.toExtendedJSON = function() {
    return { $maxKey: 1 };
  };
  MaxKey2.fromExtendedJSON = function() {
    return new MaxKey2();
  };
  MaxKey2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  MaxKey2.prototype.inspect = function() {
    return "new MaxKey()";
  };
  return MaxKey2;
}();
Object.defineProperty(MaxKey.prototype, "_bsontype", { value: "MaxKey" });
var MinKey = function() {
  function MinKey2() {
    if (!(this instanceof MinKey2))
      return new MinKey2();
  }
  MinKey2.prototype.toExtendedJSON = function() {
    return { $minKey: 1 };
  };
  MinKey2.fromExtendedJSON = function() {
    return new MinKey2();
  };
  MinKey2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  MinKey2.prototype.inspect = function() {
    return "new MinKey()";
  };
  return MinKey2;
}();
Object.defineProperty(MinKey.prototype, "_bsontype", { value: "MinKey" });
var checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");
var PROCESS_UNIQUE = null;
var kId = Symbol("id");
var ObjectId = function() {
  function ObjectId2(inputId) {
    if (!(this instanceof ObjectId2))
      return new ObjectId2(inputId);
    var workingId;
    if (typeof inputId === "object" && inputId && "id" in inputId) {
      if (typeof inputId.id !== "string" && !ArrayBuffer.isView(inputId.id)) {
        throw new BSONTypeError("Argument passed in must have an id that is of type string or Buffer");
      }
      if ("toHexString" in inputId && typeof inputId.toHexString === "function") {
        workingId = buffer_1.from(inputId.toHexString(), "hex");
      } else {
        workingId = inputId.id;
      }
    } else {
      workingId = inputId;
    }
    if (workingId == null || typeof workingId === "number") {
      this[kId] = ObjectId2.generate(typeof workingId === "number" ? workingId : void 0);
    } else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {
      this[kId] = workingId instanceof buffer_1 ? workingId : ensureBuffer(workingId);
    } else if (typeof workingId === "string") {
      if (workingId.length === 12) {
        var bytes = buffer_1.from(workingId);
        if (bytes.byteLength === 12) {
          this[kId] = bytes;
        } else {
          throw new BSONTypeError("Argument passed in must be a string of 12 bytes");
        }
      } else if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {
        this[kId] = buffer_1.from(workingId, "hex");
      } else {
        throw new BSONTypeError("Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer");
      }
    } else {
      throw new BSONTypeError("Argument passed in does not match the accepted types");
    }
    if (ObjectId2.cacheHexString) {
      this.__id = this.id.toString("hex");
    }
  }
  Object.defineProperty(ObjectId2.prototype, "id", {
    get: function() {
      return this[kId];
    },
    set: function(value) {
      this[kId] = value;
      if (ObjectId2.cacheHexString) {
        this.__id = value.toString("hex");
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ObjectId2.prototype, "generationTime", {
    get: function() {
      return this.id.readInt32BE(0);
    },
    set: function(value) {
      this.id.writeUInt32BE(value, 0);
    },
    enumerable: false,
    configurable: true
  });
  ObjectId2.prototype.toHexString = function() {
    if (ObjectId2.cacheHexString && this.__id) {
      return this.__id;
    }
    var hexString = this.id.toString("hex");
    if (ObjectId2.cacheHexString && !this.__id) {
      this.__id = hexString;
    }
    return hexString;
  };
  ObjectId2.getInc = function() {
    return ObjectId2.index = (ObjectId2.index + 1) % 16777215;
  };
  ObjectId2.generate = function(time) {
    if ("number" !== typeof time) {
      time = Math.floor(Date.now() / 1e3);
    }
    var inc = ObjectId2.getInc();
    var buffer = buffer_1.alloc(12);
    buffer.writeUInt32BE(time, 0);
    if (PROCESS_UNIQUE === null) {
      PROCESS_UNIQUE = randomBytes(5);
    }
    buffer[4] = PROCESS_UNIQUE[0];
    buffer[5] = PROCESS_UNIQUE[1];
    buffer[6] = PROCESS_UNIQUE[2];
    buffer[7] = PROCESS_UNIQUE[3];
    buffer[8] = PROCESS_UNIQUE[4];
    buffer[11] = inc & 255;
    buffer[10] = inc >> 8 & 255;
    buffer[9] = inc >> 16 & 255;
    return buffer;
  };
  ObjectId2.prototype.toString = function(format2) {
    if (format2)
      return this.id.toString(format2);
    return this.toHexString();
  };
  ObjectId2.prototype.toJSON = function() {
    return this.toHexString();
  };
  ObjectId2.prototype.equals = function(otherId) {
    if (otherId === void 0 || otherId === null) {
      return false;
    }
    if (otherId instanceof ObjectId2) {
      return this[kId][11] === otherId[kId][11] && this[kId].equals(otherId[kId]);
    }
    if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 12 && isUint8Array(this.id)) {
      return otherId === buffer_1.prototype.toString.call(this.id, "latin1");
    }
    if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 24) {
      return otherId.toLowerCase() === this.toHexString();
    }
    if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 12) {
      return buffer_1.from(otherId).equals(this.id);
    }
    if (typeof otherId === "object" && "toHexString" in otherId && typeof otherId.toHexString === "function") {
      var otherIdString = otherId.toHexString();
      var thisIdString = this.toHexString().toLowerCase();
      return typeof otherIdString === "string" && otherIdString.toLowerCase() === thisIdString;
    }
    return false;
  };
  ObjectId2.prototype.getTimestamp = function() {
    var timestamp = new Date();
    var time = this.id.readUInt32BE(0);
    timestamp.setTime(Math.floor(time) * 1e3);
    return timestamp;
  };
  ObjectId2.createPk = function() {
    return new ObjectId2();
  };
  ObjectId2.createFromTime = function(time) {
    var buffer = buffer_1.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    buffer.writeUInt32BE(time, 0);
    return new ObjectId2(buffer);
  };
  ObjectId2.createFromHexString = function(hexString) {
    if (typeof hexString === "undefined" || hexString != null && hexString.length !== 24) {
      throw new BSONTypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
    }
    return new ObjectId2(buffer_1.from(hexString, "hex"));
  };
  ObjectId2.isValid = function(id) {
    if (id == null)
      return false;
    try {
      new ObjectId2(id);
      return true;
    } catch (_a2) {
      return false;
    }
  };
  ObjectId2.prototype.toExtendedJSON = function() {
    if (this.toHexString)
      return { $oid: this.toHexString() };
    return { $oid: this.toString("hex") };
  };
  ObjectId2.fromExtendedJSON = function(doc2) {
    return new ObjectId2(doc2.$oid);
  };
  ObjectId2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  ObjectId2.prototype.inspect = function() {
    return 'new ObjectId("'.concat(this.toHexString(), '")');
  };
  ObjectId2.index = Math.floor(Math.random() * 16777215);
  return ObjectId2;
}();
Object.defineProperty(ObjectId.prototype, "generate", {
  value: deprecate$1(function(time) {
    return ObjectId.generate(time);
  }, "Please use the static `ObjectId.generate(time)` instead")
});
Object.defineProperty(ObjectId.prototype, "getInc", {
  value: deprecate$1(function() {
    return ObjectId.getInc();
  }, "Please use the static `ObjectId.getInc()` instead")
});
Object.defineProperty(ObjectId.prototype, "get_inc", {
  value: deprecate$1(function() {
    return ObjectId.getInc();
  }, "Please use the static `ObjectId.getInc()` instead")
});
Object.defineProperty(ObjectId, "get_inc", {
  value: deprecate$1(function() {
    return ObjectId.getInc();
  }, "Please use the static `ObjectId.getInc()` instead")
});
Object.defineProperty(ObjectId.prototype, "_bsontype", { value: "ObjectID" });
function alphabetize(str) {
  return str.split("").sort().join("");
}
var BSONRegExp = function() {
  function BSONRegExp2(pattern, options) {
    if (!(this instanceof BSONRegExp2))
      return new BSONRegExp2(pattern, options);
    this.pattern = pattern;
    this.options = alphabetize(options !== null && options !== void 0 ? options : "");
    if (this.pattern.indexOf("\0") !== -1) {
      throw new BSONError("BSON Regex patterns cannot contain null bytes, found: ".concat(JSON.stringify(this.pattern)));
    }
    if (this.options.indexOf("\0") !== -1) {
      throw new BSONError("BSON Regex options cannot contain null bytes, found: ".concat(JSON.stringify(this.options)));
    }
    for (var i = 0; i < this.options.length; i++) {
      if (!(this.options[i] === "i" || this.options[i] === "m" || this.options[i] === "x" || this.options[i] === "l" || this.options[i] === "s" || this.options[i] === "u")) {
        throw new BSONError("The regular expression option [".concat(this.options[i], "] is not supported"));
      }
    }
  }
  BSONRegExp2.parseOptions = function(options) {
    return options ? options.split("").sort().join("") : "";
  };
  BSONRegExp2.prototype.toExtendedJSON = function(options) {
    options = options || {};
    if (options.legacy) {
      return { $regex: this.pattern, $options: this.options };
    }
    return { $regularExpression: { pattern: this.pattern, options: this.options } };
  };
  BSONRegExp2.fromExtendedJSON = function(doc2) {
    if ("$regex" in doc2) {
      if (typeof doc2.$regex !== "string") {
        if (doc2.$regex._bsontype === "BSONRegExp") {
          return doc2;
        }
      } else {
        return new BSONRegExp2(doc2.$regex, BSONRegExp2.parseOptions(doc2.$options));
      }
    }
    if ("$regularExpression" in doc2) {
      return new BSONRegExp2(doc2.$regularExpression.pattern, BSONRegExp2.parseOptions(doc2.$regularExpression.options));
    }
    throw new BSONTypeError("Unexpected BSONRegExp EJSON object form: ".concat(JSON.stringify(doc2)));
  };
  return BSONRegExp2;
}();
Object.defineProperty(BSONRegExp.prototype, "_bsontype", { value: "BSONRegExp" });
var BSONSymbol = function() {
  function BSONSymbol2(value) {
    if (!(this instanceof BSONSymbol2))
      return new BSONSymbol2(value);
    this.value = value;
  }
  BSONSymbol2.prototype.valueOf = function() {
    return this.value;
  };
  BSONSymbol2.prototype.toString = function() {
    return this.value;
  };
  BSONSymbol2.prototype.inspect = function() {
    return 'new BSONSymbol("'.concat(this.value, '")');
  };
  BSONSymbol2.prototype.toJSON = function() {
    return this.value;
  };
  BSONSymbol2.prototype.toExtendedJSON = function() {
    return { $symbol: this.value };
  };
  BSONSymbol2.fromExtendedJSON = function(doc2) {
    return new BSONSymbol2(doc2.$symbol);
  };
  BSONSymbol2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  return BSONSymbol2;
}();
Object.defineProperty(BSONSymbol.prototype, "_bsontype", { value: "Symbol" });
var LongWithoutOverridesClass = Long;
var Timestamp = function(_super) {
  __extends$2(Timestamp2, _super);
  function Timestamp2(low, high) {
    var _this = this;
    if (!(_this instanceof Timestamp2))
      return new Timestamp2(low, high);
    if (Long.isLong(low)) {
      _this = _super.call(this, low.low, low.high, true) || this;
    } else if (isObjectLike(low) && typeof low.t !== "undefined" && typeof low.i !== "undefined") {
      _this = _super.call(this, low.i, low.t, true) || this;
    } else {
      _this = _super.call(this, low, high, true) || this;
    }
    Object.defineProperty(_this, "_bsontype", {
      value: "Timestamp",
      writable: false,
      configurable: false,
      enumerable: false
    });
    return _this;
  }
  Timestamp2.prototype.toJSON = function() {
    return {
      $timestamp: this.toString()
    };
  };
  Timestamp2.fromInt = function(value) {
    return new Timestamp2(Long.fromInt(value, true));
  };
  Timestamp2.fromNumber = function(value) {
    return new Timestamp2(Long.fromNumber(value, true));
  };
  Timestamp2.fromBits = function(lowBits, highBits) {
    return new Timestamp2(lowBits, highBits);
  };
  Timestamp2.fromString = function(str, optRadix) {
    return new Timestamp2(Long.fromString(str, true, optRadix));
  };
  Timestamp2.prototype.toExtendedJSON = function() {
    return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };
  };
  Timestamp2.fromExtendedJSON = function(doc2) {
    return new Timestamp2(doc2.$timestamp);
  };
  Timestamp2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return this.inspect();
  };
  Timestamp2.prototype.inspect = function() {
    return "new Timestamp({ t: ".concat(this.getHighBits(), ", i: ").concat(this.getLowBits(), " })");
  };
  Timestamp2.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;
  return Timestamp2;
}(LongWithoutOverridesClass);
function isBSONType(value) {
  return isObjectLike(value) && Reflect.has(value, "_bsontype") && typeof value._bsontype === "string";
}
var BSON_INT32_MAX$1 = 2147483647;
var BSON_INT32_MIN$1 = -2147483648;
var BSON_INT64_MAX$1 = 9223372036854776e3;
var BSON_INT64_MIN$1 = -9223372036854776e3;
var keysToCodecs = {
  $oid: ObjectId,
  $binary: Binary,
  $uuid: Binary,
  $symbol: BSONSymbol,
  $numberInt: Int32,
  $numberDecimal: Decimal128,
  $numberDouble: Double,
  $numberLong: Long,
  $minKey: MinKey,
  $maxKey: MaxKey,
  $regex: BSONRegExp,
  $regularExpression: BSONRegExp,
  $timestamp: Timestamp
};
function deserializeValue(value, options) {
  if (options === void 0) {
    options = {};
  }
  if (typeof value === "number") {
    if (options.relaxed || options.legacy) {
      return value;
    }
    if (Math.floor(value) === value) {
      if (value >= BSON_INT32_MIN$1 && value <= BSON_INT32_MAX$1)
        return new Int32(value);
      if (value >= BSON_INT64_MIN$1 && value <= BSON_INT64_MAX$1)
        return Long.fromNumber(value);
    }
    return new Double(value);
  }
  if (value == null || typeof value !== "object")
    return value;
  if (value.$undefined)
    return null;
  var keys2 = Object.keys(value).filter(function(k) {
    return k.startsWith("$") && value[k] != null;
  });
  for (var i = 0; i < keys2.length; i++) {
    var c = keysToCodecs[keys2[i]];
    if (c)
      return c.fromExtendedJSON(value, options);
  }
  if (value.$date != null) {
    var d = value.$date;
    var date = new Date();
    if (options.legacy) {
      if (typeof d === "number")
        date.setTime(d);
      else if (typeof d === "string")
        date.setTime(Date.parse(d));
    } else {
      if (typeof d === "string")
        date.setTime(Date.parse(d));
      else if (Long.isLong(d))
        date.setTime(d.toNumber());
      else if (typeof d === "number" && options.relaxed)
        date.setTime(d);
    }
    return date;
  }
  if (value.$code != null) {
    var copy = Object.assign({}, value);
    if (value.$scope) {
      copy.$scope = deserializeValue(value.$scope);
    }
    return Code.fromExtendedJSON(value);
  }
  if (isDBRefLike(value) || value.$dbPointer) {
    var v = value.$ref ? value : value.$dbPointer;
    if (v instanceof DBRef)
      return v;
    var dollarKeys = Object.keys(v).filter(function(k) {
      return k.startsWith("$");
    });
    var valid_1 = true;
    dollarKeys.forEach(function(k) {
      if (["$ref", "$id", "$db"].indexOf(k) === -1)
        valid_1 = false;
    });
    if (valid_1)
      return DBRef.fromExtendedJSON(v);
  }
  return value;
}
function serializeArray(array, options) {
  return array.map(function(v, index2) {
    options.seenObjects.push({ propertyName: "index ".concat(index2), obj: null });
    try {
      return serializeValue(v, options);
    } finally {
      options.seenObjects.pop();
    }
  });
}
function getISOString(date) {
  var isoStr = date.toISOString();
  return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + "Z";
}
function serializeValue(value, options) {
  if ((typeof value === "object" || typeof value === "function") && value !== null) {
    var index2 = options.seenObjects.findIndex(function(entry) {
      return entry.obj === value;
    });
    if (index2 !== -1) {
      var props = options.seenObjects.map(function(entry) {
        return entry.propertyName;
      });
      var leadingPart = props.slice(0, index2).map(function(prop) {
        return "".concat(prop, " -> ");
      }).join("");
      var alreadySeen = props[index2];
      var circularPart = " -> " + props.slice(index2 + 1, props.length - 1).map(function(prop) {
        return "".concat(prop, " -> ");
      }).join("");
      var current = props[props.length - 1];
      var leadingSpace = " ".repeat(leadingPart.length + alreadySeen.length / 2);
      var dashes = "-".repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);
      throw new BSONTypeError("Converting circular structure to EJSON:\n" + "    ".concat(leadingPart).concat(alreadySeen).concat(circularPart).concat(current, "\n") + "    ".concat(leadingSpace, "\\").concat(dashes, "/"));
    }
    options.seenObjects[options.seenObjects.length - 1].obj = value;
  }
  if (Array.isArray(value))
    return serializeArray(value, options);
  if (value === void 0)
    return null;
  if (value instanceof Date || isDate$1(value)) {
    var dateNum = value.getTime(), inRange = dateNum > -1 && dateNum < 2534023188e5;
    if (options.legacy) {
      return options.relaxed && inRange ? { $date: value.getTime() } : { $date: getISOString(value) };
    }
    return options.relaxed && inRange ? { $date: getISOString(value) } : { $date: { $numberLong: value.getTime().toString() } };
  }
  if (typeof value === "number" && (!options.relaxed || !isFinite(value))) {
    if (Math.floor(value) === value) {
      var int32Range = value >= BSON_INT32_MIN$1 && value <= BSON_INT32_MAX$1, int64Range = value >= BSON_INT64_MIN$1 && value <= BSON_INT64_MAX$1;
      if (int32Range)
        return { $numberInt: value.toString() };
      if (int64Range)
        return { $numberLong: value.toString() };
    }
    return { $numberDouble: value.toString() };
  }
  if (value instanceof RegExp || isRegExp(value)) {
    var flags = value.flags;
    if (flags === void 0) {
      var match = value.toString().match(/[gimuy]*$/);
      if (match) {
        flags = match[0];
      }
    }
    var rx = new BSONRegExp(value.source, flags);
    return rx.toExtendedJSON(options);
  }
  if (value != null && typeof value === "object")
    return serializeDocument(value, options);
  return value;
}
var BSON_TYPE_MAPPINGS = {
  Binary: function(o) {
    return new Binary(o.value(), o.sub_type);
  },
  Code: function(o) {
    return new Code(o.code, o.scope);
  },
  DBRef: function(o) {
    return new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields);
  },
  Decimal128: function(o) {
    return new Decimal128(o.bytes);
  },
  Double: function(o) {
    return new Double(o.value);
  },
  Int32: function(o) {
    return new Int32(o.value);
  },
  Long: function(o) {
    return Long.fromBits(
      o.low != null ? o.low : o.low_,
      o.low != null ? o.high : o.high_,
      o.low != null ? o.unsigned : o.unsigned_
    );
  },
  MaxKey: function() {
    return new MaxKey();
  },
  MinKey: function() {
    return new MinKey();
  },
  ObjectID: function(o) {
    return new ObjectId(o);
  },
  ObjectId: function(o) {
    return new ObjectId(o);
  },
  BSONRegExp: function(o) {
    return new BSONRegExp(o.pattern, o.options);
  },
  Symbol: function(o) {
    return new BSONSymbol(o.value);
  },
  Timestamp: function(o) {
    return Timestamp.fromBits(o.low, o.high);
  }
};
function serializeDocument(doc2, options) {
  if (doc2 == null || typeof doc2 !== "object")
    throw new BSONError("not an object instance");
  var bsontype = doc2._bsontype;
  if (typeof bsontype === "undefined") {
    var _doc = {};
    for (var name2 in doc2) {
      options.seenObjects.push({ propertyName: name2, obj: null });
      try {
        var value = serializeValue(doc2[name2], options);
        if (name2 === "__proto__") {
          Object.defineProperty(_doc, name2, {
            value,
            writable: true,
            enumerable: true,
            configurable: true
          });
        } else {
          _doc[name2] = value;
        }
      } finally {
        options.seenObjects.pop();
      }
    }
    return _doc;
  } else if (isBSONType(doc2)) {
    var outDoc = doc2;
    if (typeof outDoc.toExtendedJSON !== "function") {
      var mapper = BSON_TYPE_MAPPINGS[doc2._bsontype];
      if (!mapper) {
        throw new BSONTypeError("Unrecognized or invalid _bsontype: " + doc2._bsontype);
      }
      outDoc = mapper(outDoc);
    }
    if (bsontype === "Code" && outDoc.scope) {
      outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));
    } else if (bsontype === "DBRef" && outDoc.oid) {
      outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));
    }
    return outDoc.toExtendedJSON(options);
  } else {
    throw new BSONError("_bsontype must be a string, but was: " + typeof bsontype);
  }
}
var EJSON;
(function(EJSON2) {
  function parse(text, options) {
    var finalOptions = Object.assign({}, { relaxed: true, legacy: false }, options);
    if (typeof finalOptions.relaxed === "boolean")
      finalOptions.strict = !finalOptions.relaxed;
    if (typeof finalOptions.strict === "boolean")
      finalOptions.relaxed = !finalOptions.strict;
    return JSON.parse(text, function(key, value) {
      if (key.indexOf("\0") !== -1) {
        throw new BSONError("BSON Document field names cannot contain null bytes, found: ".concat(JSON.stringify(key)));
      }
      return deserializeValue(value, finalOptions);
    });
  }
  EJSON2.parse = parse;
  function stringify(value, replacer, space, options) {
    if (space != null && typeof space === "object") {
      options = space;
      space = 0;
    }
    if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
      options = replacer;
      replacer = void 0;
      space = 0;
    }
    var serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {
      seenObjects: [{ propertyName: "(root)", obj: null }]
    });
    var doc2 = serializeValue(value, serializeOptions);
    return JSON.stringify(doc2, replacer, space);
  }
  EJSON2.stringify = stringify;
  function serialize2(value, options) {
    options = options || {};
    return JSON.parse(stringify(value, options));
  }
  EJSON2.serialize = serialize2;
  function deserialize(ejson, options) {
    options = options || {};
    return parse(JSON.stringify(ejson), options);
  }
  EJSON2.deserialize = deserialize;
})(EJSON || (EJSON = {}));
var bsonGlobal = getGlobal();
if (bsonGlobal.Map) {
  bsonGlobal.Map;
} else {
  (function() {
    function Map2(array) {
      if (array === void 0) {
        array = [];
      }
      this._keys = [];
      this._values = {};
      for (var i = 0; i < array.length; i++) {
        if (array[i] == null)
          continue;
        var entry = array[i];
        var key = entry[0];
        var value = entry[1];
        this._keys.push(key);
        this._values[key] = { v: value, i: this._keys.length - 1 };
      }
    }
    Map2.prototype.clear = function() {
      this._keys = [];
      this._values = {};
    };
    Map2.prototype.delete = function(key) {
      var value = this._values[key];
      if (value == null)
        return false;
      delete this._values[key];
      this._keys.splice(value.i, 1);
      return true;
    };
    Map2.prototype.entries = function() {
      var _this = this;
      var index2 = 0;
      return {
        next: function() {
          var key = _this._keys[index2++];
          return {
            value: key !== void 0 ? [key, _this._values[key].v] : void 0,
            done: key !== void 0 ? false : true
          };
        }
      };
    };
    Map2.prototype.forEach = function(callback, self2) {
      self2 = self2 || this;
      for (var i = 0; i < this._keys.length; i++) {
        var key = this._keys[i];
        callback.call(self2, this._values[key].v, key, self2);
      }
    };
    Map2.prototype.get = function(key) {
      return this._values[key] ? this._values[key].v : void 0;
    };
    Map2.prototype.has = function(key) {
      return this._values[key] != null;
    };
    Map2.prototype.keys = function() {
      var _this = this;
      var index2 = 0;
      return {
        next: function() {
          var key = _this._keys[index2++];
          return {
            value: key !== void 0 ? key : void 0,
            done: key !== void 0 ? false : true
          };
        }
      };
    };
    Map2.prototype.set = function(key, value) {
      if (this._values[key]) {
        this._values[key].v = value;
        return this;
      }
      this._keys.push(key);
      this._values[key] = { v: value, i: this._keys.length - 1 };
      return this;
    };
    Map2.prototype.values = function() {
      var _this = this;
      var index2 = 0;
      return {
        next: function() {
          var key = _this._keys[index2++];
          return {
            value: key !== void 0 ? _this._values[key].v : void 0,
            done: key !== void 0 ? false : true
          };
        }
      };
    };
    Object.defineProperty(Map2.prototype, "size", {
      get: function() {
        return this._keys.length;
      },
      enumerable: false,
      configurable: true
    });
    return Map2;
  })();
}
var JS_INT_MAX = Math.pow(2, 53);
var JS_INT_MIN = -Math.pow(2, 53);
Long.fromNumber(JS_INT_MAX);
Long.fromNumber(JS_INT_MIN);
var SPACE_FOR_FLOAT64 = new Uint8Array(8);
new DataView(SPACE_FOR_FLOAT64.buffer, SPACE_FOR_FLOAT64.byteOffset, SPACE_FOR_FLOAT64.byteLength);
var MAXSIZE = 1024 * 1024 * 17;
buffer_1.alloc(MAXSIZE);
var __awaiter$2 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$2 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var Aggregation = function() {
  function Aggregation2(db, collectionName) {
    this._stages = [];
    if (db && collectionName) {
      this._db = db;
      this._request = new Db.reqClass(this._db.config);
      this._collectionName = collectionName;
    }
  }
  Aggregation2.prototype.end = function() {
    return __awaiter$2(this, void 0, void 0, function() {
      var result;
      return __generator$2(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!this._collectionName || !this._db) {
              throw new Error("Aggregation pipeline cannot send request");
            }
            return [4, this._request.send("database.aggregate", {
              collectionName: this._collectionName,
              stages: this._stages
            })];
          case 1:
            result = _a2.sent();
            if (result && result.data && result.data.list) {
              return [2, {
                requestId: result.requestId,
                data: JSON.parse(result.data.list).map(EJSON.parse)
              }];
            }
            return [2, result];
        }
      });
    });
  };
  Aggregation2.prototype.unwrap = function() {
    return this._stages;
  };
  Aggregation2.prototype.done = function() {
    return this._stages.map(function(_a2) {
      var _b;
      var stageKey = _a2.stageKey, stageValue = _a2.stageValue;
      return _b = {}, _b[stageKey] = JSON.parse(stageValue), _b;
    });
  };
  Aggregation2.prototype._pipe = function(stage, param) {
    this._stages.push({
      stageKey: "$" + stage,
      stageValue: JSON.stringify(param)
    });
    return this;
  };
  Aggregation2.prototype.addFields = function(param) {
    return this._pipe("addFields", param);
  };
  Aggregation2.prototype.bucket = function(param) {
    return this._pipe("bucket", param);
  };
  Aggregation2.prototype.bucketAuto = function(param) {
    return this._pipe("bucketAuto", param);
  };
  Aggregation2.prototype.count = function(param) {
    return this._pipe("count", param);
  };
  Aggregation2.prototype.geoNear = function(param) {
    return this._pipe("geoNear", param);
  };
  Aggregation2.prototype.group = function(param) {
    return this._pipe("group", param);
  };
  Aggregation2.prototype.limit = function(param) {
    return this._pipe("limit", param);
  };
  Aggregation2.prototype.match = function(param) {
    return this._pipe("match", QuerySerializer.encode(param));
  };
  Aggregation2.prototype.project = function(param) {
    return this._pipe("project", param);
  };
  Aggregation2.prototype.lookup = function(param) {
    return this._pipe("lookup", param);
  };
  Aggregation2.prototype.replaceRoot = function(param) {
    return this._pipe("replaceRoot", param);
  };
  Aggregation2.prototype.sample = function(param) {
    return this._pipe("sample", param);
  };
  Aggregation2.prototype.skip = function(param) {
    return this._pipe("skip", param);
  };
  Aggregation2.prototype.sort = function(param) {
    return this._pipe("sort", param);
  };
  Aggregation2.prototype.sortByCount = function(param) {
    return this._pipe("sortByCount", param);
  };
  Aggregation2.prototype.unwind = function(param) {
    return this._pipe("unwind", param);
  };
  return Aggregation2;
}();
var Aggregation$1 = Aggregation;
var __extends$1 = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CollectionReference$1 = function(_super) {
  __extends$1(CollectionReference2, _super);
  function CollectionReference2(db, coll) {
    return _super.call(this, db, coll) || this;
  }
  Object.defineProperty(CollectionReference2.prototype, "name", {
    get: function() {
      return this._coll;
    },
    enumerable: true,
    configurable: true
  });
  CollectionReference2.prototype.doc = function(docID) {
    if (typeof docID !== "string" && typeof docID !== "number") {
      throw new Error("docId\u5FC5\u987B\u4E3A\u5B57\u7B26\u4E32\u6216\u6570\u5B57");
    }
    return new DocumentReference$1(this._db, this._coll, docID);
  };
  CollectionReference2.prototype.add = function(data, callback) {
    var docRef = new DocumentReference$1(this._db, this._coll, void 0);
    return docRef.create(data, callback);
  };
  CollectionReference2.prototype.aggregate = function() {
    return new Aggregation$1(this._db, this._coll);
  };
  return CollectionReference2;
}(Query$1);
var Command = {
  eq: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.EQ, [val]);
  },
  neq: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.NEQ, [val]);
  },
  lt: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.LT, [val]);
  },
  lte: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.LTE, [val]);
  },
  gt: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.GT, [val]);
  },
  gte: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.GTE, [val]);
  },
  in: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.IN, val);
  },
  nin: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.NIN, val);
  },
  all: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.ALL, val);
  },
  elemMatch: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.ELEM_MATCH, [val]);
  },
  exists: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.EXISTS, [val]);
  },
  size: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.SIZE, [val]);
  },
  mod: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.MOD, [val]);
  },
  geoNear: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_NEAR, [val]);
  },
  geoWithin: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_WITHIN, [val]);
  },
  geoIntersects: function(val) {
    return new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_INTERSECTS, [val]);
  },
  and: function() {
    var expressions = isArray$2(arguments[0]) ? arguments[0] : Array.from(arguments);
    return new LogicCommand(LOGIC_COMMANDS_LITERAL.AND, expressions);
  },
  nor: function() {
    var expressions = isArray$2(arguments[0]) ? arguments[0] : Array.from(arguments);
    return new LogicCommand(LOGIC_COMMANDS_LITERAL.NOR, expressions);
  },
  or: function() {
    var expressions = isArray$2(arguments[0]) ? arguments[0] : Array.from(arguments);
    return new LogicCommand(LOGIC_COMMANDS_LITERAL.OR, expressions);
  },
  not: function() {
    var expressions = isArray$2(arguments[0]) ? arguments[0] : Array.from(arguments);
    return new LogicCommand(LOGIC_COMMANDS_LITERAL.NOT, expressions);
  },
  set: function(val) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.SET, [val]);
  },
  remove: function() {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.REMOVE, []);
  },
  inc: function(val) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.INC, [val]);
  },
  mul: function(val) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.MUL, [val]);
  },
  push: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var values;
    if (isObject$3(args[0]) && args[0].hasOwnProperty("each")) {
      var options = args[0];
      values = {
        $each: options.each,
        $position: options.position,
        $sort: options.sort,
        $slice: options.slice
      };
    } else if (isArray$2(args[0])) {
      values = args[0];
    } else {
      values = Array.from(args);
    }
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.PUSH, values);
  },
  pull: function(values) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.PULL, values);
  },
  pullAll: function(values) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.PULL_ALL, values);
  },
  pop: function() {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.POP, []);
  },
  shift: function() {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.SHIFT, []);
  },
  unshift: function() {
    var values = isArray$2(arguments[0]) ? arguments[0] : Array.from(arguments);
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.UNSHIFT, values);
  },
  addToSet: function(values) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.ADD_TO_SET, values);
  },
  rename: function(values) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.RENAME, [values]);
  },
  bit: function(values) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.BIT, [values]);
  },
  max: function(values) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.MAX, [values]);
  },
  min: function(values) {
    return new UpdateCommand(UPDATE_COMMANDS_LITERAL.MIN, [values]);
  },
  expr: function(values) {
    return {
      $expr: values
    };
  },
  jsonSchema: function(schema) {
    return {
      $jsonSchema: schema
    };
  },
  text: function(values) {
    if (isString$2(values)) {
      return {
        $search: values.search
      };
    } else {
      return {
        $search: values.search,
        $language: values.language,
        $caseSensitive: values.caseSensitive,
        $diacriticSensitive: values.diacriticSensitive
      };
    }
  },
  aggregate: {
    pipeline: function() {
      return new Aggregation$1();
    },
    abs: function(param) {
      return new AggregationOperator("abs", param);
    },
    add: function(param) {
      return new AggregationOperator("add", param);
    },
    ceil: function(param) {
      return new AggregationOperator("ceil", param);
    },
    divide: function(param) {
      return new AggregationOperator("divide", param);
    },
    exp: function(param) {
      return new AggregationOperator("exp", param);
    },
    floor: function(param) {
      return new AggregationOperator("floor", param);
    },
    ln: function(param) {
      return new AggregationOperator("ln", param);
    },
    log: function(param) {
      return new AggregationOperator("log", param);
    },
    log10: function(param) {
      return new AggregationOperator("log10", param);
    },
    mod: function(param) {
      return new AggregationOperator("mod", param);
    },
    multiply: function(param) {
      return new AggregationOperator("multiply", param);
    },
    pow: function(param) {
      return new AggregationOperator("pow", param);
    },
    sqrt: function(param) {
      return new AggregationOperator("sqrt", param);
    },
    subtract: function(param) {
      return new AggregationOperator("subtract", param);
    },
    trunc: function(param) {
      return new AggregationOperator("trunc", param);
    },
    arrayElemAt: function(param) {
      return new AggregationOperator("arrayElemAt", param);
    },
    arrayToObject: function(param) {
      return new AggregationOperator("arrayToObject", param);
    },
    concatArrays: function(param) {
      return new AggregationOperator("concatArrays", param);
    },
    filter: function(param) {
      return new AggregationOperator("filter", param);
    },
    in: function(param) {
      return new AggregationOperator("in", param);
    },
    indexOfArray: function(param) {
      return new AggregationOperator("indexOfArray", param);
    },
    isArray: function(param) {
      return new AggregationOperator("isArray", param);
    },
    map: function(param) {
      return new AggregationOperator("map", param);
    },
    range: function(param) {
      return new AggregationOperator("range", param);
    },
    reduce: function(param) {
      return new AggregationOperator("reduce", param);
    },
    reverseArray: function(param) {
      return new AggregationOperator("reverseArray", param);
    },
    size: function(param) {
      return new AggregationOperator("size", param);
    },
    slice: function(param) {
      return new AggregationOperator("slice", param);
    },
    zip: function(param) {
      return new AggregationOperator("zip", param);
    },
    and: function(param) {
      return new AggregationOperator("and", param);
    },
    not: function(param) {
      return new AggregationOperator("not", param);
    },
    or: function(param) {
      return new AggregationOperator("or", param);
    },
    cmp: function(param) {
      return new AggregationOperator("cmp", param);
    },
    eq: function(param) {
      return new AggregationOperator("eq", param);
    },
    gt: function(param) {
      return new AggregationOperator("gt", param);
    },
    gte: function(param) {
      return new AggregationOperator("gte", param);
    },
    lt: function(param) {
      return new AggregationOperator("lt", param);
    },
    lte: function(param) {
      return new AggregationOperator("lte", param);
    },
    neq: function(param) {
      return new AggregationOperator("ne", param);
    },
    cond: function(param) {
      return new AggregationOperator("cond", param);
    },
    ifNull: function(param) {
      return new AggregationOperator("ifNull", param);
    },
    switch: function(param) {
      return new AggregationOperator("switch", param);
    },
    dateFromParts: function(param) {
      return new AggregationOperator("dateFromParts", param);
    },
    dateFromString: function(param) {
      return new AggregationOperator("dateFromString", param);
    },
    dayOfMonth: function(param) {
      return new AggregationOperator("dayOfMonth", param);
    },
    dayOfWeek: function(param) {
      return new AggregationOperator("dayOfWeek", param);
    },
    dayOfYear: function(param) {
      return new AggregationOperator("dayOfYear", param);
    },
    isoDayOfWeek: function(param) {
      return new AggregationOperator("isoDayOfWeek", param);
    },
    isoWeek: function(param) {
      return new AggregationOperator("isoWeek", param);
    },
    isoWeekYear: function(param) {
      return new AggregationOperator("isoWeekYear", param);
    },
    millisecond: function(param) {
      return new AggregationOperator("millisecond", param);
    },
    minute: function(param) {
      return new AggregationOperator("minute", param);
    },
    month: function(param) {
      return new AggregationOperator("month", param);
    },
    second: function(param) {
      return new AggregationOperator("second", param);
    },
    hour: function(param) {
      return new AggregationOperator("hour", param);
    },
    week: function(param) {
      return new AggregationOperator("week", param);
    },
    year: function(param) {
      return new AggregationOperator("year", param);
    },
    literal: function(param) {
      return new AggregationOperator("literal", param);
    },
    mergeObjects: function(param) {
      return new AggregationOperator("mergeObjects", param);
    },
    objectToArray: function(param) {
      return new AggregationOperator("objectToArray", param);
    },
    allElementsTrue: function(param) {
      return new AggregationOperator("allElementsTrue", param);
    },
    anyElementTrue: function(param) {
      return new AggregationOperator("anyElementTrue", param);
    },
    setDifference: function(param) {
      return new AggregationOperator("setDifference", param);
    },
    setEquals: function(param) {
      return new AggregationOperator("setEquals", param);
    },
    setIntersection: function(param) {
      return new AggregationOperator("setIntersection", param);
    },
    setIsSubset: function(param) {
      return new AggregationOperator("setIsSubset", param);
    },
    setUnion: function(param) {
      return new AggregationOperator("setUnion", param);
    },
    concat: function(param) {
      return new AggregationOperator("concat", param);
    },
    dateToString: function(param) {
      return new AggregationOperator("dateToString", param);
    },
    indexOfBytes: function(param) {
      return new AggregationOperator("indexOfBytes", param);
    },
    indexOfCP: function(param) {
      return new AggregationOperator("indexOfCP", param);
    },
    split: function(param) {
      return new AggregationOperator("split", param);
    },
    strLenBytes: function(param) {
      return new AggregationOperator("strLenBytes", param);
    },
    strLenCP: function(param) {
      return new AggregationOperator("strLenCP", param);
    },
    strcasecmp: function(param) {
      return new AggregationOperator("strcasecmp", param);
    },
    substr: function(param) {
      return new AggregationOperator("substr", param);
    },
    substrBytes: function(param) {
      return new AggregationOperator("substrBytes", param);
    },
    substrCP: function(param) {
      return new AggregationOperator("substrCP", param);
    },
    toLower: function(param) {
      return new AggregationOperator("toLower", param);
    },
    toUpper: function(param) {
      return new AggregationOperator("toUpper", param);
    },
    meta: function(param) {
      return new AggregationOperator("meta", param);
    },
    addToSet: function(param) {
      return new AggregationOperator("addToSet", param);
    },
    avg: function(param) {
      return new AggregationOperator("avg", param);
    },
    first: function(param) {
      return new AggregationOperator("first", param);
    },
    last: function(param) {
      return new AggregationOperator("last", param);
    },
    max: function(param) {
      return new AggregationOperator("max", param);
    },
    min: function(param) {
      return new AggregationOperator("min", param);
    },
    push: function(param) {
      return new AggregationOperator("push", param);
    },
    stdDevPop: function(param) {
      return new AggregationOperator("stdDevPop", param);
    },
    stdDevSamp: function(param) {
      return new AggregationOperator("stdDevSamp", param);
    },
    sum: function(param) {
      return new AggregationOperator("sum", param);
    },
    let: function(param) {
      return new AggregationOperator("let", param);
    }
  },
  project: {
    slice: function(param) {
      return new ProjectionOperator("slice", param);
    },
    elemMatch: function(param) {
      return new ProjectionOperator("elemMatch", param);
    }
  }
};
var AggregationOperator = function() {
  function AggregationOperator2(name2, param) {
    this["$" + name2] = param;
  }
  return AggregationOperator2;
}();
var ProjectionOperator = function() {
  function ProjectionOperator2(name2, param) {
    this["$" + name2] = param;
  }
  return ProjectionOperator2;
}();
var RegExp$1 = function() {
  function RegExp2(_a2) {
    var regexp = _a2.regexp, options = _a2.options;
    if (!regexp) {
      throw new TypeError("regexp must be a string");
    }
    this.$regex = regexp;
    this.$options = options;
  }
  RegExp2.prototype.parse = function() {
    return {
      $regex: this.$regex,
      $options: this.$options
    };
  };
  Object.defineProperty(RegExp2.prototype, "_internalType", {
    get: function() {
      return SYMBOL_REGEXP;
    },
    enumerable: true,
    configurable: true
  });
  return RegExp2;
}();
function RegExpConstructor(param) {
  return new RegExp$1(param);
}
var ERRORS = {
  CREATE_WATCH_NET_ERROR: {
    code: "CREATE_WATCH_NET_ERROR",
    message: "create watch network error"
  },
  CREATE_WACTH_EXCEED_ERROR: {
    code: "CREATE_WACTH_EXCEED_ERROR",
    message: "maximum connections exceed"
  },
  CREATE_WATCH_SERVER_ERROR: {
    code: "CREATE_WATCH_SERVER_ERROR",
    message: "create watch server error"
  },
  CONN_ERROR: {
    code: "CONN_ERROR",
    message: "connection error"
  },
  INVALID_PARAM: {
    code: "INVALID_PARAM",
    message: "Invalid request param"
  },
  INSERT_DOC_FAIL: {
    code: "INSERT_DOC_FAIL",
    message: "insert document failed"
  },
  DATABASE_TRANSACTION_CONFLICT: {
    code: "DATABASE_TRANSACTION_CONFLICT",
    message: "database transaction conflict"
  }
};
var __assign$1 = globalThis && globalThis.__assign || function() {
  __assign$1 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign$1.apply(this, arguments);
};
var __awaiter$1 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$1 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var GET_DOC = "database.getInTransaction";
var UPDATE_DOC = "database.updateDocInTransaction";
var DELETE_DOC = "database.deleteDocInTransaction";
var INSERT_DOC = "database.insertDocInTransaction";
var DocumentReference = function() {
  function DocumentReference2(transaction, coll, docID) {
    this._coll = coll;
    this.id = docID;
    this._transaction = transaction;
    this._request = this._transaction.getRequestMethod();
    this._transactionId = this._transaction.getTransactionId();
  }
  DocumentReference2.prototype.create = function(data) {
    return __awaiter$1(this, void 0, void 0, function() {
      var params, res, inserted, ok;
      return __generator$1(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            params = {
              collectionName: this._coll,
              transactionId: this._transactionId,
              data: EJSON.stringify(serialize(data), { relaxed: false })
            };
            if (this.id) {
              params["_id"] = this.id;
            }
            return [4, this._request.send(INSERT_DOC, params)];
          case 1:
            res = _a2.sent();
            if (res.code) {
              throw res;
            }
            inserted = EJSON.parse(res.inserted);
            ok = EJSON.parse(res.ok);
            if (ok == 1 && inserted == 1) {
              return [2, __assign$1(__assign$1({}, res), {
                ok,
                inserted
              })];
            } else {
              throw new Error(ERRORS.INSERT_DOC_FAIL.message);
            }
        }
      });
    });
  };
  DocumentReference2.prototype.get = function() {
    return __awaiter$1(this, void 0, void 0, function() {
      var param, res;
      return __generator$1(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            param = {
              collectionName: this._coll,
              transactionId: this._transactionId,
              query: {
                _id: { $eq: this.id }
              }
            };
            return [4, this._request.send(GET_DOC, param)];
          case 1:
            res = _a2.sent();
            if (res.code)
              throw res;
            return [2, {
              data: res.data !== "null" ? Util.formatField(EJSON.parse(res.data)) : EJSON.parse(res.data),
              requestId: res.requestId
            }];
        }
      });
    });
  };
  DocumentReference2.prototype.set = function(data) {
    return __awaiter$1(this, void 0, void 0, function() {
      var param, res;
      return __generator$1(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            param = {
              collectionName: this._coll,
              transactionId: this._transactionId,
              query: {
                _id: { $eq: this.id }
              },
              data: EJSON.stringify(serialize(data), { relaxed: false }),
              upsert: true
            };
            return [4, this._request.send(UPDATE_DOC, param)];
          case 1:
            res = _a2.sent();
            if (res.code)
              throw res;
            return [2, __assign$1(__assign$1({}, res), { updated: EJSON.parse(res.updated), upserted: res.upserted ? JSON.parse(res.upserted) : null })];
        }
      });
    });
  };
  DocumentReference2.prototype.update = function(data) {
    return __awaiter$1(this, void 0, void 0, function() {
      var param, res;
      return __generator$1(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            param = {
              collectionName: this._coll,
              transactionId: this._transactionId,
              query: {
                _id: { $eq: this.id }
              },
              data: EJSON.stringify(UpdateSerializer.encode(data), {
                relaxed: false
              })
            };
            return [4, this._request.send(UPDATE_DOC, param)];
          case 1:
            res = _a2.sent();
            if (res.code)
              throw res;
            return [2, __assign$1(__assign$1({}, res), { updated: EJSON.parse(res.updated) })];
        }
      });
    });
  };
  DocumentReference2.prototype.delete = function() {
    return __awaiter$1(this, void 0, void 0, function() {
      var param, res;
      return __generator$1(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            param = {
              collectionName: this._coll,
              transactionId: this._transactionId,
              query: {
                _id: { $eq: this.id }
              }
            };
            return [4, this._request.send(DELETE_DOC, param)];
          case 1:
            res = _a2.sent();
            if (res.code)
              throw res;
            return [2, __assign$1(__assign$1({}, res), { deleted: EJSON.parse(res.deleted) })];
        }
      });
    });
  };
  return DocumentReference2;
}();
var Query = function() {
  function Query2(transaction, coll) {
    this._coll = coll;
    this._transaction = transaction;
  }
  return Query2;
}();
var __extends = globalThis && globalThis.__extends || function() {
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d2[p2] = b2[p2];
    };
    return extendStatics2(d, b);
  };
  return function(d, b) {
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CollectionReference = function(_super) {
  __extends(CollectionReference2, _super);
  function CollectionReference2(transaction, coll) {
    return _super.call(this, transaction, coll) || this;
  }
  Object.defineProperty(CollectionReference2.prototype, "name", {
    get: function() {
      return this._coll;
    },
    enumerable: true,
    configurable: true
  });
  CollectionReference2.prototype.doc = function(docID) {
    if (typeof docID !== "string" && typeof docID !== "number") {
      throw new Error("docId\u5FC5\u987B\u4E3A\u5B57\u7B26\u4E32\u6216\u6570\u5B57");
    }
    return new DocumentReference(this._transaction, this._coll, docID);
  };
  CollectionReference2.prototype.add = function(data) {
    var docID;
    if (data._id !== void 0) {
      docID = data._id;
    }
    var docRef = new DocumentReference(this._transaction, this._coll, docID);
    return docRef.create(data);
  };
  return CollectionReference2;
}(Query);
var __awaiter = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = globalThis && globalThis.__generator || function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var START = "database.startTransaction";
var COMMIT = "database.commitTransaction";
var ABORT = "database.abortTransaction";
var Transaction = function() {
  function Transaction2(db) {
    this._db = db;
    this._request = new Db.reqClass(this._db.config);
    this.aborted = false;
    this.commited = false;
    this.inited = false;
  }
  Transaction2.prototype.init = function() {
    return __awaiter(this, void 0, void 0, function() {
      var res;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this._request.send(START)];
          case 1:
            res = _a2.sent();
            if (res.code) {
              throw res;
            }
            this.inited = true;
            this._id = res.transactionId;
            return [2];
        }
      });
    });
  };
  Transaction2.prototype.collection = function(collName) {
    if (!collName) {
      throw new Error("Collection name is required");
    }
    return new CollectionReference(this, collName);
  };
  Transaction2.prototype.getTransactionId = function() {
    return this._id;
  };
  Transaction2.prototype.getRequestMethod = function() {
    return this._request;
  };
  Transaction2.prototype.commit = function() {
    return __awaiter(this, void 0, void 0, function() {
      var param, res;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            param = {
              transactionId: this._id
            };
            return [4, this._request.send(COMMIT, param)];
          case 1:
            res = _a2.sent();
            if (res.code)
              throw res;
            this.commited = true;
            return [2, res];
        }
      });
    });
  };
  Transaction2.prototype.rollback = function(customRollbackRes) {
    return __awaiter(this, void 0, void 0, function() {
      var param, res;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            param = {
              transactionId: this._id
            };
            return [4, this._request.send(ABORT, param)];
          case 1:
            res = _a2.sent();
            if (res.code)
              throw res;
            this.aborted = true;
            this.abortReason = customRollbackRes;
            return [2, res];
        }
      });
    });
  };
  return Transaction2;
}();
function startTransaction() {
  return __awaiter(this, void 0, void 0, function() {
    var transaction;
    return __generator(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          transaction = new Transaction(this);
          return [4, transaction.init()];
        case 1:
          _a2.sent();
          return [2, transaction];
      }
    });
  });
}
function runTransaction(callback, times) {
  if (times === void 0) {
    times = 3;
  }
  return __awaiter(this, void 0, void 0, function() {
    var transaction, callbackRes, error_1, throwWithRollback;
    var _this = this;
    return __generator(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          _a2.trys.push([0, 4, , 10]);
          transaction = new Transaction(this);
          return [4, transaction.init()];
        case 1:
          _a2.sent();
          return [4, callback(transaction)];
        case 2:
          callbackRes = _a2.sent();
          if (transaction.aborted === true) {
            throw transaction.abortReason;
          }
          return [4, transaction.commit()];
        case 3:
          _a2.sent();
          return [2, callbackRes];
        case 4:
          error_1 = _a2.sent();
          if (transaction.inited === false) {
            throw error_1;
          }
          throwWithRollback = function(error) {
            return __awaiter(_this, void 0, void 0, function() {
              return __generator(this, function(_a3) {
                switch (_a3.label) {
                  case 0:
                    if (!(!transaction.aborted && !transaction.commited))
                      return [3, 5];
                    _a3.label = 1;
                  case 1:
                    _a3.trys.push([1, 3, , 4]);
                    return [4, transaction.rollback()];
                  case 2:
                    _a3.sent();
                    return [3, 4];
                  case 3:
                    _a3.sent();
                    return [3, 4];
                  case 4:
                    throw error;
                  case 5:
                    if (transaction.aborted === true) {
                      throw transaction.abortReason;
                    }
                    throw error;
                }
              });
            });
          };
          if (!(times <= 0))
            return [3, 6];
          return [4, throwWithRollback(error_1)];
        case 5:
          _a2.sent();
          _a2.label = 6;
        case 6:
          if (!(error_1 && error_1.code === ERRORS.DATABASE_TRANSACTION_CONFLICT.code))
            return [3, 8];
          return [4, runTransaction.bind(this)(callback, --times)];
        case 7:
          return [2, _a2.sent()];
        case 8:
          return [4, throwWithRollback(error_1)];
        case 9:
          _a2.sent();
          return [3, 10];
        case 10:
          return [2];
      }
    });
  });
}
var Db = function() {
  function Db2(config) {
    this.config = config;
    this.Geo = Geo;
    this.serverDate = ServerDateConstructor;
    this.command = Command;
    this.RegExp = RegExpConstructor;
    this.startTransaction = startTransaction;
    this.runTransaction = runTransaction;
    this.logicCommand = LogicCommand;
    this.updateCommand = UpdateCommand;
    this.queryCommand = QueryCommand;
  }
  Db2.prototype.collection = function(collName) {
    if (!collName) {
      throw new Error("Collection name is required");
    }
    return new CollectionReference$1(this, collName);
  };
  Db2.prototype.createCollection = function(collName) {
    var request = new Db2.reqClass(this.config);
    var params = {
      collectionName: collName
    };
    return request.send("database.addCollection", params);
  };
  return Db2;
}();
var __assign = globalThis && globalThis.__assign || function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var COMPONENT_NAME = "database";
function database(dbConfig) {
  var _a2 = this.platform, adapter2 = _a2.adapter, runtime2 = _a2.runtime;
  Db.reqClass = this.request.constructor;
  Db.getAccessToken = this.authInstance ? this.authInstance.getAccessToken.bind(this.authInstance) : function() {
    return "";
  };
  Db.runtime = runtime2;
  if (this.wsClientClass) {
    Db.wsClass = adapter2.wsClass;
    Db.wsClientClass = this.wsClientClass;
  }
  if (!Db.ws) {
    Db.ws = null;
  }
  return new Db(__assign(__assign({}, this.config), dbConfig));
}
var component = {
  name: COMPONENT_NAME,
  entity: {
    database
  }
};
try {
  cloudbase.registerComponent(component);
} catch (e) {
}
function registerDatabase(app) {
  try {
    app.registerComponent(component);
  } catch (e) {
    console.warn(e);
  }
}
const name$7 = "@cloudbase/js-sdk";
const version$2 = "1.7.2";
const description = "cloudbase javascript sdk";
const main = "dist/index.cjs.js";
const module$1 = "dist/index.esm.js";
const miniprogram = "miniprogram_dist";
const typings = "./index.d.ts";
const scripts = {
  lint: 'eslint --fix "./src/**/*.ts" "./database/**/*.ts"',
  build: "rm -rf dist/ && gulp build",
  "build:cdn": "gulp cdn",
  "build:miniapp": "gulp miniapp",
  "build:e2e": "rm -rf dist/ && NODE_ENV=e2e gulp e2e"
};
const publishConfig = {
  access: "public"
};
const repository = {
  type: "git",
  url: "https://github.com/TencentCloudBase/cloudbase-js-sdk"
};
const keywords = [
  "tcb",
  "cloudbase",
  "Cloudbase",
  "serverless",
  "Serverless",
  "javascript",
  "JavaScript"
];
const files = [
  "miniprogram_dist",
  "**/dist/",
  "/index.d.ts",
  "**/package.json"
];
const components = [
  "app",
  "auth",
  "database",
  "functions",
  "storage"
];
const author = "";
const license = "ISC";
const dependencies = {
  "@cloudbase/analytics": "^1.1.1-alpha.0",
  "@cloudbase/app": "^1.4.1",
  "@cloudbase/auth": "^1.6.1",
  "@cloudbase/database": "0.9.18-next",
  "@cloudbase/functions": "^1.3.4",
  "@cloudbase/realtime": "^1.1.4-alpha.0",
  "@cloudbase/storage": "^1.3.4",
  "@cloudbase/types": "^1.1.3-alpha.0",
  "@cloudbase/utilities": "^1.3.4"
};
const devDependencies = {
  "@babel/core": "^7.9.0",
  "@babel/plugin-proposal-class-properties": "^7.8.3",
  "@babel/plugin-transform-runtime": "^7.9.0",
  "@babel/preset-env": "^7.9.5",
  "@babel/preset-typescript": "^7.9.0",
  "@typescript-eslint/eslint-plugin": "^3.8.0",
  "@typescript-eslint/parser": "^3.8.0",
  "awesome-typescript-loader": "^5.2.1",
  "babel-loader": "^8.1.0",
  eslint: "^7.6.0",
  "eslint-config-alloy": "^3.7.4",
  gulp: "^4.0.2",
  "gulp-clean": "^0.4.0",
  "gulp-rename": "^2.0.0",
  "gulp-sourcemaps": "^2.6.5",
  "gulp-typescript": "^6.0.0-alpha.1",
  "json-loader": "^0.5.7",
  "merge-stream": "^2.0.0",
  "package-json-cleanup-loader": "^1.0.3",
  typescript: "^3.8.3",
  webpack: "4.41.3",
  "webpack-cli": "^3.3.11",
  "webpack-node-externals": "^1.7.2",
  "webpack-stream": "^5.2.1",
  "webpack-visualizer-plugin": "^0.1.11"
};
const browserslist = [
  "last 2 version",
  "> 1%",
  "not dead",
  "chrome 53"
];
const gitHead = "29ca0bf24318daa1fbb230910edf0b1545e17e7f";
var pkg = {
  name: name$7,
  version: version$2,
  description,
  main,
  module: module$1,
  miniprogram,
  typings,
  scripts,
  publishConfig,
  repository,
  keywords,
  files,
  components,
  author,
  license,
  dependencies,
  devDependencies,
  browserslist,
  gitHead
};
var version$1 = pkg.version;
cloudbase$1.registerVersion(version$1);
try {
  registerAuth(cloudbase$1);
  registerFunctions(cloudbase$1);
  registerStorage(cloudbase$1);
  registerDatabase(cloudbase$1);
  registerRealtime(cloudbase$1);
  registerAnalytics(cloudbase$1);
} catch (e) {
}
try {
  window.cloudbase = cloudbase$1;
} catch (e) {
}
var timJs = { exports: {} };
(function(module2, exports) {
  !function(e, t) {
    module2.exports = t();
  }(commonjsGlobal, function() {
    function e(e2, t2) {
      var n2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e2);
        t2 && (o2 = o2.filter(function(t3) {
          return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
        })), n2.push.apply(n2, o2);
      }
      return n2;
    }
    function t(t2) {
      for (var n2 = 1; n2 < arguments.length; n2++) {
        var o2 = null != arguments[n2] ? arguments[n2] : {};
        n2 % 2 ? e(Object(o2), true).forEach(function(e2) {
          s(t2, e2, o2[e2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(o2)) : e(Object(o2)).forEach(function(e2) {
          Object.defineProperty(t2, e2, Object.getOwnPropertyDescriptor(o2, e2));
        });
      }
      return t2;
    }
    function n(e2) {
      return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
        return typeof e3;
      } : function(e3) {
        return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
      })(e2);
    }
    function o(e2, t2) {
      if (!(e2 instanceof t2))
        throw new TypeError("Cannot call a class as a function");
    }
    function r(e2, t2) {
      for (var n2 = 0; n2 < t2.length; n2++) {
        var o2 = t2[n2];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, o2.key, o2);
      }
    }
    function a(e2, t2, n2) {
      return t2 && r(e2.prototype, t2), n2 && r(e2, n2), Object.defineProperty(e2, "prototype", { writable: false }), e2;
    }
    function s(e2, t2, n2) {
      return t2 in e2 ? Object.defineProperty(e2, t2, { value: n2, enumerable: true, configurable: true, writable: true }) : e2[t2] = n2, e2;
    }
    function i(e2, t2) {
      if ("function" != typeof t2 && null !== t2)
        throw new TypeError("Super expression must either be null or a function");
      e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, writable: true, configurable: true } }), Object.defineProperty(e2, "prototype", { writable: false }), t2 && u(e2, t2);
    }
    function c(e2) {
      return (c = Object.setPrototypeOf ? Object.getPrototypeOf : function(e3) {
        return e3.__proto__ || Object.getPrototypeOf(e3);
      })(e2);
    }
    function u(e2, t2) {
      return (u = Object.setPrototypeOf || function(e3, t3) {
        return e3.__proto__ = t3, e3;
      })(e2, t2);
    }
    function l() {
      if ("undefined" == typeof Reflect || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if ("function" == typeof Proxy)
        return true;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        })), true;
      } catch (e2) {
        return false;
      }
    }
    function d(e2, t2, n2) {
      return (d = l() ? Reflect.construct : function(e3, t3, n3) {
        var o2 = [null];
        o2.push.apply(o2, t3);
        var r2 = new (Function.bind.apply(e3, o2))();
        return n3 && u(r2, n3.prototype), r2;
      }).apply(null, arguments);
    }
    function p2(e2) {
      var t2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
      return (p2 = function(e3) {
        if (null === e3 || (n2 = e3, -1 === Function.toString.call(n2).indexOf("[native code]")))
          return e3;
        var n2;
        if ("function" != typeof e3)
          throw new TypeError("Super expression must either be null or a function");
        if (void 0 !== t2) {
          if (t2.has(e3))
            return t2.get(e3);
          t2.set(e3, o2);
        }
        function o2() {
          return d(e3, arguments, c(this).constructor);
        }
        return o2.prototype = Object.create(e3.prototype, { constructor: { value: o2, enumerable: false, writable: true, configurable: true } }), u(o2, e3);
      })(e2);
    }
    function g(e2, t2) {
      if (null == e2)
        return {};
      var n2, o2, r2 = function(e3, t3) {
        if (null == e3)
          return {};
        var n3, o3, r3 = {}, a3 = Object.keys(e3);
        for (o3 = 0; o3 < a3.length; o3++)
          n3 = a3[o3], t3.indexOf(n3) >= 0 || (r3[n3] = e3[n3]);
        return r3;
      }(e2, t2);
      if (Object.getOwnPropertySymbols) {
        var a2 = Object.getOwnPropertySymbols(e2);
        for (o2 = 0; o2 < a2.length; o2++)
          n2 = a2[o2], t2.indexOf(n2) >= 0 || Object.prototype.propertyIsEnumerable.call(e2, n2) && (r2[n2] = e2[n2]);
      }
      return r2;
    }
    function _(e2) {
      if (void 0 === e2)
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e2;
    }
    function h2(e2, t2) {
      if (t2 && ("object" == typeof t2 || "function" == typeof t2))
        return t2;
      if (void 0 !== t2)
        throw new TypeError("Derived constructors may only return object or undefined");
      return _(e2);
    }
    function f(e2) {
      var t2 = l();
      return function() {
        var n2, o2 = c(e2);
        if (t2) {
          var r2 = c(this).constructor;
          n2 = Reflect.construct(o2, arguments, r2);
        } else
          n2 = o2.apply(this, arguments);
        return h2(this, n2);
      };
    }
    function m(e2, t2) {
      return v(e2) || function(e3, t3) {
        var n2 = null == e3 ? null : "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
        if (null == n2)
          return;
        var o2, r2, a2 = [], s2 = true, i2 = false;
        try {
          for (n2 = n2.call(e3); !(s2 = (o2 = n2.next()).done) && (a2.push(o2.value), !t3 || a2.length !== t3); s2 = true)
            ;
        } catch (c2) {
          i2 = true, r2 = c2;
        } finally {
          try {
            s2 || null == n2.return || n2.return();
          } finally {
            if (i2)
              throw r2;
          }
        }
        return a2;
      }(e2, t2) || I(e2, t2) || T();
    }
    function M(e2) {
      return function(e3) {
        if (Array.isArray(e3))
          return E(e3);
      }(e2) || y(e2) || I(e2) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }();
    }
    function v(e2) {
      if (Array.isArray(e2))
        return e2;
    }
    function y(e2) {
      if ("undefined" != typeof Symbol && null != e2[Symbol.iterator] || null != e2["@@iterator"])
        return Array.from(e2);
    }
    function I(e2, t2) {
      if (e2) {
        if ("string" == typeof e2)
          return E(e2, t2);
        var n2 = Object.prototype.toString.call(e2).slice(8, -1);
        return "Object" === n2 && e2.constructor && (n2 = e2.constructor.name), "Map" === n2 || "Set" === n2 ? Array.from(e2) : "Arguments" === n2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2) ? E(e2, t2) : void 0;
      }
    }
    function E(e2, t2) {
      (null == t2 || t2 > e2.length) && (t2 = e2.length);
      for (var n2 = 0, o2 = new Array(t2); n2 < t2; n2++)
        o2[n2] = e2[n2];
      return o2;
    }
    function T() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function S(e2, t2) {
      var n2 = "undefined" != typeof Symbol && e2[Symbol.iterator] || e2["@@iterator"];
      if (!n2) {
        if (Array.isArray(e2) || (n2 = I(e2)) || t2 && e2 && "number" == typeof e2.length) {
          n2 && (e2 = n2);
          var o2 = 0, r2 = function() {
          };
          return { s: r2, n: function() {
            return o2 >= e2.length ? { done: true } : { done: false, value: e2[o2++] };
          }, e: function(e3) {
            throw e3;
          }, f: r2 };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var a2, s2 = true, i2 = false;
      return { s: function() {
        n2 = n2.call(e2);
      }, n: function() {
        var e3 = n2.next();
        return s2 = e3.done, e3;
      }, e: function(e3) {
        i2 = true, a2 = e3;
      }, f: function() {
        try {
          s2 || null == n2.return || n2.return();
        } finally {
          if (i2)
            throw a2;
        }
      } };
    }
    var C = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : {};
    function A(e2, t2) {
      return e2(t2 = { exports: {} }, t2.exports), t2.exports;
    }
    var D, N, O = function(e2) {
      return e2 && e2.Math == Math && e2;
    }, R = O("object" == typeof globalThis && globalThis) || O("object" == typeof window && window) || O("object" == typeof self && self) || O("object" == typeof C && C) || function() {
      return this;
    }() || Function("return this")(), L = function(e2) {
      try {
        return !!e2();
      } catch (t2) {
        return true;
      }
    }, k = !L(function() {
      return 7 != Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1];
    }), G = !L(function() {
      var e2 = function() {
      }.bind();
      return "function" != typeof e2 || e2.hasOwnProperty("prototype");
    }), P = Function.prototype.call, U = G ? P.bind(P) : function() {
      return P.apply(P, arguments);
    }, b = {}.propertyIsEnumerable, w = Object.getOwnPropertyDescriptor, F = { f: w && !b.call({ 1: 2 }, 1) ? function(e2) {
      var t2 = w(this, e2);
      return !!t2 && t2.enumerable;
    } : b }, q = function(e2, t2) {
      return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
    }, V = Function.prototype, x = V.bind, B = V.call, K = G && x.bind(B, B), H = G ? function(e2) {
      return e2 && K(e2);
    } : function(e2) {
      return e2 && function() {
        return B.apply(e2, arguments);
      };
    }, j = H({}.toString), W = H("".slice), Y = function(e2) {
      return W(j(e2), 8, -1);
    }, $ = R.Object, z = H("".split), J = L(function() {
      return !$("z").propertyIsEnumerable(0);
    }) ? function(e2) {
      return "String" == Y(e2) ? z(e2, "") : $(e2);
    } : $, X = R.TypeError, Q = function(e2) {
      if (null == e2)
        throw X("Can't call method on " + e2);
      return e2;
    }, Z = function(e2) {
      return J(Q(e2));
    }, ee = function(e2) {
      return "function" == typeof e2;
    }, te = function(e2) {
      return "object" == typeof e2 ? null !== e2 : ee(e2);
    }, ne = function(e2) {
      return ee(e2) ? e2 : void 0;
    }, oe = function(e2, t2) {
      return arguments.length < 2 ? ne(R[e2]) : R[e2] && R[e2][t2];
    }, re = H({}.isPrototypeOf), ae = oe("navigator", "userAgent") || "", se = R.process, ie = R.Deno, ce = se && se.versions || ie && ie.version, ue = ce && ce.v8;
    ue && (N = (D = ue.split("."))[0] > 0 && D[0] < 4 ? 1 : +(D[0] + D[1])), !N && ae && (!(D = ae.match(/Edge\/(\d+)/)) || D[1] >= 74) && (D = ae.match(/Chrome\/(\d+)/)) && (N = +D[1]);
    var le = N, de = !!Object.getOwnPropertySymbols && !L(function() {
      var e2 = Symbol();
      return !String(e2) || !(Object(e2) instanceof Symbol) || !Symbol.sham && le && le < 41;
    }), pe = de && !Symbol.sham && "symbol" == typeof Symbol.iterator, ge = R.Object, _e = pe ? function(e2) {
      return "symbol" == typeof e2;
    } : function(e2) {
      var t2 = oe("Symbol");
      return ee(t2) && re(t2.prototype, ge(e2));
    }, he = R.String, fe = function(e2) {
      try {
        return he(e2);
      } catch (t2) {
        return "Object";
      }
    }, me = R.TypeError, Me = function(e2) {
      if (ee(e2))
        return e2;
      throw me(fe(e2) + " is not a function");
    }, ve = function(e2, t2) {
      var n2 = e2[t2];
      return null == n2 ? void 0 : Me(n2);
    }, ye = R.TypeError, Ie = Object.defineProperty, Ee = function(e2, t2) {
      try {
        Ie(R, e2, { value: t2, configurable: true, writable: true });
      } catch (n2) {
        R[e2] = t2;
      }
      return t2;
    }, Te = R["__core-js_shared__"] || Ee("__core-js_shared__", {}), Se = A(function(e2) {
      (e2.exports = function(e3, t2) {
        return Te[e3] || (Te[e3] = void 0 !== t2 ? t2 : {});
      })("versions", []).push({ version: "3.21.0", mode: "global", copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.21.0/LICENSE", source: "https://github.com/zloirock/core-js" });
    }), Ce = R.Object, Ae = function(e2) {
      return Ce(Q(e2));
    }, De = H({}.hasOwnProperty), Ne = Object.hasOwn || function(e2, t2) {
      return De(Ae(e2), t2);
    }, Oe = 0, Re = Math.random(), Le = H(1 .toString), ke = function(e2) {
      return "Symbol(" + (void 0 === e2 ? "" : e2) + ")_" + Le(++Oe + Re, 36);
    }, Ge = Se("wks"), Pe = R.Symbol, Ue = Pe && Pe.for, be = pe ? Pe : Pe && Pe.withoutSetter || ke, we = function(e2) {
      if (!Ne(Ge, e2) || !de && "string" != typeof Ge[e2]) {
        var t2 = "Symbol." + e2;
        de && Ne(Pe, e2) ? Ge[e2] = Pe[e2] : Ge[e2] = pe && Ue ? Ue(t2) : be(t2);
      }
      return Ge[e2];
    }, Fe = R.TypeError, qe = we("toPrimitive"), Ve = function(e2, t2) {
      if (!te(e2) || _e(e2))
        return e2;
      var n2, o2 = ve(e2, qe);
      if (o2) {
        if (void 0 === t2 && (t2 = "default"), n2 = U(o2, e2, t2), !te(n2) || _e(n2))
          return n2;
        throw Fe("Can't convert object to primitive value");
      }
      return void 0 === t2 && (t2 = "number"), function(e3, t3) {
        var n3, o3;
        if ("string" === t3 && ee(n3 = e3.toString) && !te(o3 = U(n3, e3)))
          return o3;
        if (ee(n3 = e3.valueOf) && !te(o3 = U(n3, e3)))
          return o3;
        if ("string" !== t3 && ee(n3 = e3.toString) && !te(o3 = U(n3, e3)))
          return o3;
        throw ye("Can't convert object to primitive value");
      }(e2, t2);
    }, xe = function(e2) {
      var t2 = Ve(e2, "string");
      return _e(t2) ? t2 : t2 + "";
    }, Be = R.document, Ke = te(Be) && te(Be.createElement), He = function(e2) {
      return Ke ? Be.createElement(e2) : {};
    }, je = !k && !L(function() {
      return 7 != Object.defineProperty(He("div"), "a", { get: function() {
        return 7;
      } }).a;
    }), We = Object.getOwnPropertyDescriptor, Ye = { f: k ? We : function(e2, t2) {
      if (e2 = Z(e2), t2 = xe(t2), je)
        try {
          return We(e2, t2);
        } catch (n2) {
        }
      if (Ne(e2, t2))
        return q(!U(F.f, e2, t2), e2[t2]);
    } }, $e = k && L(function() {
      return 42 != Object.defineProperty(function() {
      }, "prototype", { value: 42, writable: false }).prototype;
    }), ze = R.String, Je = R.TypeError, Xe = function(e2) {
      if (te(e2))
        return e2;
      throw Je(ze(e2) + " is not an object");
    }, Qe = R.TypeError, Ze = Object.defineProperty, et = Object.getOwnPropertyDescriptor, nt = { f: k ? $e ? function(e2, t2, n2) {
      if (Xe(e2), t2 = xe(t2), Xe(n2), "function" == typeof e2 && "prototype" === t2 && "value" in n2 && "writable" in n2 && !n2.writable) {
        var o2 = et(e2, t2);
        o2 && o2.writable && (e2[t2] = n2.value, n2 = { configurable: "configurable" in n2 ? n2.configurable : o2.configurable, enumerable: "enumerable" in n2 ? n2.enumerable : o2.enumerable, writable: false });
      }
      return Ze(e2, t2, n2);
    } : Ze : function(e2, t2, n2) {
      if (Xe(e2), t2 = xe(t2), Xe(n2), je)
        try {
          return Ze(e2, t2, n2);
        } catch (o2) {
        }
      if ("get" in n2 || "set" in n2)
        throw Qe("Accessors not supported");
      return "value" in n2 && (e2[t2] = n2.value), e2;
    } }, ot = k ? function(e2, t2, n2) {
      return nt.f(e2, t2, q(1, n2));
    } : function(e2, t2, n2) {
      return e2[t2] = n2, e2;
    }, rt = H(Function.toString);
    ee(Te.inspectSource) || (Te.inspectSource = function(e2) {
      return rt(e2);
    });
    var at, st, it, ct = Te.inspectSource, ut = R.WeakMap, lt = ee(ut) && /native code/.test(ct(ut)), dt = Se("keys"), pt = function(e2) {
      return dt[e2] || (dt[e2] = ke(e2));
    }, gt = {}, _t = R.TypeError, ht = R.WeakMap;
    if (lt || Te.state) {
      var ft = Te.state || (Te.state = new ht()), mt = H(ft.get), Mt = H(ft.has), vt = H(ft.set);
      at = function(e2, t2) {
        if (Mt(ft, e2))
          throw new _t("Object already initialized");
        return t2.facade = e2, vt(ft, e2, t2), t2;
      }, st = function(e2) {
        return mt(ft, e2) || {};
      }, it = function(e2) {
        return Mt(ft, e2);
      };
    } else {
      var yt = pt("state");
      gt[yt] = true, at = function(e2, t2) {
        if (Ne(e2, yt))
          throw new _t("Object already initialized");
        return t2.facade = e2, ot(e2, yt, t2), t2;
      }, st = function(e2) {
        return Ne(e2, yt) ? e2[yt] : {};
      }, it = function(e2) {
        return Ne(e2, yt);
      };
    }
    var It = { set: at, get: st, has: it, enforce: function(e2) {
      return it(e2) ? st(e2) : at(e2, {});
    }, getterFor: function(e2) {
      return function(t2) {
        var n2;
        if (!te(t2) || (n2 = st(t2)).type !== e2)
          throw _t("Incompatible receiver, " + e2 + " required");
        return n2;
      };
    } }, Et = Function.prototype, Tt = k && Object.getOwnPropertyDescriptor, St = Ne(Et, "name"), Ct = { EXISTS: St, PROPER: St && "something" === function() {
    }.name, CONFIGURABLE: St && (!k || k && Tt(Et, "name").configurable) }, At = A(function(e2) {
      var t2 = Ct.CONFIGURABLE, n2 = It.get, o2 = It.enforce, r2 = String(String).split("String");
      (e2.exports = function(e3, n3, a2, s2) {
        var i2, c2 = !!s2 && !!s2.unsafe, u2 = !!s2 && !!s2.enumerable, l2 = !!s2 && !!s2.noTargetGet, d2 = s2 && void 0 !== s2.name ? s2.name : n3;
        ee(a2) && ("Symbol(" === String(d2).slice(0, 7) && (d2 = "[" + String(d2).replace(/^Symbol\(([^)]*)\)/, "$1") + "]"), (!Ne(a2, "name") || t2 && a2.name !== d2) && ot(a2, "name", d2), (i2 = o2(a2)).source || (i2.source = r2.join("string" == typeof d2 ? d2 : ""))), e3 !== R ? (c2 ? !l2 && e3[n3] && (u2 = true) : delete e3[n3], u2 ? e3[n3] = a2 : ot(e3, n3, a2)) : u2 ? e3[n3] = a2 : Ee(n3, a2);
      })(Function.prototype, "toString", function() {
        return ee(this) && n2(this).source || ct(this);
      });
    }), Dt = Math.ceil, Nt = Math.floor, Ot = function(e2) {
      var t2 = +e2;
      return t2 != t2 || 0 === t2 ? 0 : (t2 > 0 ? Nt : Dt)(t2);
    }, Rt = Math.max, Lt = Math.min, kt = function(e2, t2) {
      var n2 = Ot(e2);
      return n2 < 0 ? Rt(n2 + t2, 0) : Lt(n2, t2);
    }, Gt = Math.min, Pt = function(e2) {
      return e2 > 0 ? Gt(Ot(e2), 9007199254740991) : 0;
    }, Ut = function(e2) {
      return Pt(e2.length);
    }, bt = function(e2) {
      return function(t2, n2, o2) {
        var r2, a2 = Z(t2), s2 = Ut(a2), i2 = kt(o2, s2);
        if (e2 && n2 != n2) {
          for (; s2 > i2; )
            if ((r2 = a2[i2++]) != r2)
              return true;
        } else
          for (; s2 > i2; i2++)
            if ((e2 || i2 in a2) && a2[i2] === n2)
              return e2 || i2 || 0;
        return !e2 && -1;
      };
    }, wt = { includes: bt(true), indexOf: bt(false) }, Ft = wt.indexOf, qt = H([].push), Vt = function(e2, t2) {
      var n2, o2 = Z(e2), r2 = 0, a2 = [];
      for (n2 in o2)
        !Ne(gt, n2) && Ne(o2, n2) && qt(a2, n2);
      for (; t2.length > r2; )
        Ne(o2, n2 = t2[r2++]) && (~Ft(a2, n2) || qt(a2, n2));
      return a2;
    }, xt = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"], Bt = xt.concat("length", "prototype"), Kt = { f: Object.getOwnPropertyNames || function(e2) {
      return Vt(e2, Bt);
    } }, Ht = { f: Object.getOwnPropertySymbols }, jt = H([].concat), Wt = oe("Reflect", "ownKeys") || function(e2) {
      var t2 = Kt.f(Xe(e2)), n2 = Ht.f;
      return n2 ? jt(t2, n2(e2)) : t2;
    }, Yt = function(e2, t2, n2) {
      for (var o2 = Wt(t2), r2 = nt.f, a2 = Ye.f, s2 = 0; s2 < o2.length; s2++) {
        var i2 = o2[s2];
        Ne(e2, i2) || n2 && Ne(n2, i2) || r2(e2, i2, a2(t2, i2));
      }
    }, $t = /#|\.prototype\./, zt = function(e2, t2) {
      var n2 = Xt[Jt(e2)];
      return n2 == Zt || n2 != Qt && (ee(t2) ? L(t2) : !!t2);
    }, Jt = zt.normalize = function(e2) {
      return String(e2).replace($t, ".").toLowerCase();
    }, Xt = zt.data = {}, Qt = zt.NATIVE = "N", Zt = zt.POLYFILL = "P", en = zt, tn = Ye.f, nn = function(e2, t2) {
      var n2, o2, r2, a2, s2, i2 = e2.target, c2 = e2.global, u2 = e2.stat;
      if (n2 = c2 ? R : u2 ? R[i2] || Ee(i2, {}) : (R[i2] || {}).prototype)
        for (o2 in t2) {
          if (a2 = t2[o2], r2 = e2.noTargetGet ? (s2 = tn(n2, o2)) && s2.value : n2[o2], !en(c2 ? o2 : i2 + (u2 ? "." : "#") + o2, e2.forced) && void 0 !== r2) {
            if (typeof a2 == typeof r2)
              continue;
            Yt(a2, r2);
          }
          (e2.sham || r2 && r2.sham) && ot(a2, "sham", true), At(n2, o2, a2, e2);
        }
    }, on = {};
    on[we("toStringTag")] = "z";
    var rn = "[object z]" === String(on), an = we("toStringTag"), sn = R.Object, cn = "Arguments" == Y(function() {
      return arguments;
    }()), un = rn ? Y : function(e2) {
      var t2, n2, o2;
      return void 0 === e2 ? "Undefined" : null === e2 ? "Null" : "string" == typeof (n2 = function(e3, t3) {
        try {
          return e3[t3];
        } catch (n3) {
        }
      }(t2 = sn(e2), an)) ? n2 : cn ? Y(t2) : "Object" == (o2 = Y(t2)) && ee(t2.callee) ? "Arguments" : o2;
    }, ln = R.String, dn = function(e2) {
      if ("Symbol" === un(e2))
        throw TypeError("Cannot convert a Symbol value to a string");
      return ln(e2);
    }, pn = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF", gn = H("".replace), _n = "[" + pn + "]", hn = RegExp("^" + _n + _n + "*"), fn = RegExp(_n + _n + "*$"), mn = function(e2) {
      return function(t2) {
        var n2 = dn(Q(t2));
        return 1 & e2 && (n2 = gn(n2, hn, "")), 2 & e2 && (n2 = gn(n2, fn, "")), n2;
      };
    }, Mn = { start: mn(1), end: mn(2), trim: mn(3) }, vn = Mn.trim, yn = R.parseInt, In = R.Symbol, En = In && In.iterator, Tn = /^[+-]?0x/i, Sn = H(Tn.exec), Cn = 8 !== yn(pn + "08") || 22 !== yn(pn + "0x16") || En && !L(function() {
      yn(Object(En));
    }) ? function(e2, t2) {
      var n2 = vn(dn(e2));
      return yn(n2, t2 >>> 0 || (Sn(Tn, n2) ? 16 : 10));
    } : yn;
    nn({ global: true, forced: parseInt != Cn }, { parseInt: Cn });
    var An, Dn = Object.keys || function(e2) {
      return Vt(e2, xt);
    }, Nn = { f: k && !$e ? Object.defineProperties : function(e2, t2) {
      Xe(e2);
      for (var n2, o2 = Z(t2), r2 = Dn(t2), a2 = r2.length, s2 = 0; a2 > s2; )
        nt.f(e2, n2 = r2[s2++], o2[n2]);
      return e2;
    } }, On = oe("document", "documentElement"), Rn = pt("IE_PROTO"), Ln = function() {
    }, kn = function(e2) {
      return "<script>" + e2 + "<\/script>";
    }, Gn = function(e2) {
      e2.write(kn("")), e2.close();
      var t2 = e2.parentWindow.Object;
      return e2 = null, t2;
    }, Pn = function() {
      try {
        An = new ActiveXObject("htmlfile");
      } catch (o2) {
      }
      var e2, t2;
      Pn = "undefined" != typeof document ? document.domain && An ? Gn(An) : ((t2 = He("iframe")).style.display = "none", On.appendChild(t2), t2.src = String("javascript:"), (e2 = t2.contentWindow.document).open(), e2.write(kn("document.F=Object")), e2.close(), e2.F) : Gn(An);
      for (var n2 = xt.length; n2--; )
        delete Pn.prototype[xt[n2]];
      return Pn();
    };
    gt[Rn] = true;
    var Un = Object.create || function(e2, t2) {
      var n2;
      return null !== e2 ? (Ln.prototype = Xe(e2), n2 = new Ln(), Ln.prototype = null, n2[Rn] = e2) : n2 = Pn(), void 0 === t2 ? n2 : Nn.f(n2, t2);
    };
    nn({ target: "Object", stat: true, sham: !k }, { create: Un });
    var bn = H(H.bind), wn = function(e2, t2) {
      return Me(e2), void 0 === t2 ? e2 : G ? bn(e2, t2) : function() {
        return e2.apply(t2, arguments);
      };
    }, Fn = Array.isArray || function(e2) {
      return "Array" == Y(e2);
    }, qn = function() {
    }, Vn = [], xn = oe("Reflect", "construct"), Bn = /^\s*(?:class|function)\b/, Kn = H(Bn.exec), Hn = !Bn.exec(qn), jn = function(e2) {
      if (!ee(e2))
        return false;
      try {
        return xn(qn, Vn, e2), true;
      } catch (t2) {
        return false;
      }
    }, Wn = function(e2) {
      if (!ee(e2))
        return false;
      switch (un(e2)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return false;
      }
      try {
        return Hn || !!Kn(Bn, ct(e2));
      } catch (t2) {
        return true;
      }
    };
    Wn.sham = true;
    var Yn = !xn || L(function() {
      var e2;
      return jn(jn.call) || !jn(Object) || !jn(function() {
        e2 = true;
      }) || e2;
    }) ? Wn : jn, $n = we("species"), zn = R.Array, Jn = function(e2, t2) {
      return new (function(e3) {
        var t3;
        return Fn(e3) && (t3 = e3.constructor, (Yn(t3) && (t3 === zn || Fn(t3.prototype)) || te(t3) && null === (t3 = t3[$n])) && (t3 = void 0)), void 0 === t3 ? zn : t3;
      }(e2))(0 === t2 ? 0 : t2);
    }, Xn = H([].push), Qn = function(e2) {
      var t2 = 1 == e2, n2 = 2 == e2, o2 = 3 == e2, r2 = 4 == e2, a2 = 6 == e2, s2 = 7 == e2, i2 = 5 == e2 || a2;
      return function(c2, u2, l2, d2) {
        for (var p3, g2, _2 = Ae(c2), h3 = J(_2), f2 = wn(u2, l2), m2 = Ut(h3), M2 = 0, v2 = d2 || Jn, y2 = t2 ? v2(c2, m2) : n2 || s2 ? v2(c2, 0) : void 0; m2 > M2; M2++)
          if ((i2 || M2 in h3) && (g2 = f2(p3 = h3[M2], M2, _2), e2))
            if (t2)
              y2[M2] = g2;
            else if (g2)
              switch (e2) {
                case 3:
                  return true;
                case 5:
                  return p3;
                case 6:
                  return M2;
                case 2:
                  Xn(y2, p3);
              }
            else
              switch (e2) {
                case 4:
                  return false;
                case 7:
                  Xn(y2, p3);
              }
        return a2 ? -1 : o2 || r2 ? r2 : y2;
      };
    }, Zn = { forEach: Qn(0), map: Qn(1), filter: Qn(2), some: Qn(3), every: Qn(4), find: Qn(5), findIndex: Qn(6), filterReject: Qn(7) }, eo = function(e2, t2) {
      var n2 = [][e2];
      return !!n2 && L(function() {
        n2.call(null, t2 || function() {
          throw 1;
        }, 1);
      });
    }, to2 = Zn.forEach, no = eo("forEach") ? [].forEach : function(e2) {
      return to2(this, e2, arguments.length > 1 ? arguments[1] : void 0);
    };
    nn({ target: "Array", proto: true, forced: [].forEach != no }, { forEach: no });
    var oo = rn ? {}.toString : function() {
      return "[object " + un(this) + "]";
    };
    rn || At(Object.prototype, "toString", oo, { unsafe: true });
    var ro = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 }, ao = He("span").classList, so = ao && ao.constructor && ao.constructor.prototype, io = so === Object.prototype ? void 0 : so, co = function(e2) {
      if (e2 && e2.forEach !== no)
        try {
          ot(e2, "forEach", no);
        } catch (t2) {
          e2.forEach = no;
        }
    };
    for (var uo in ro)
      ro[uo] && co(R[uo] && R[uo].prototype);
    co(io);
    var lo = L(function() {
      Dn(1);
    });
    nn({ target: "Object", stat: true, forced: lo }, { keys: function(e2) {
      return Dn(Ae(e2));
    } });
    var po = function(e2, t2, n2) {
      var o2, r2;
      Xe(e2);
      try {
        if (!(o2 = ve(e2, "return"))) {
          if ("throw" === t2)
            throw n2;
          return n2;
        }
        o2 = U(o2, e2);
      } catch (a2) {
        r2 = true, o2 = a2;
      }
      if ("throw" === t2)
        throw n2;
      if (r2)
        throw o2;
      return Xe(o2), n2;
    }, go = function(e2, t2, n2, o2) {
      try {
        return o2 ? t2(Xe(n2)[0], n2[1]) : t2(n2);
      } catch (r2) {
        po(e2, "throw", r2);
      }
    }, _o = {}, ho = we("iterator"), fo = Array.prototype, mo = function(e2) {
      return void 0 !== e2 && (_o.Array === e2 || fo[ho] === e2);
    }, Mo = function(e2, t2, n2) {
      var o2 = xe(t2);
      o2 in e2 ? nt.f(e2, o2, q(0, n2)) : e2[o2] = n2;
    }, vo = we("iterator"), yo = function(e2) {
      if (null != e2)
        return ve(e2, vo) || ve(e2, "@@iterator") || _o[un(e2)];
    }, Io = R.TypeError, Eo = function(e2, t2) {
      var n2 = arguments.length < 2 ? yo(e2) : t2;
      if (Me(n2))
        return Xe(U(n2, e2));
      throw Io(fe(e2) + " is not iterable");
    }, To = R.Array, So = function(e2) {
      var t2 = Ae(e2), n2 = Yn(this), o2 = arguments.length, r2 = o2 > 1 ? arguments[1] : void 0, a2 = void 0 !== r2;
      a2 && (r2 = wn(r2, o2 > 2 ? arguments[2] : void 0));
      var s2, i2, c2, u2, l2, d2, p3 = yo(t2), g2 = 0;
      if (!p3 || this == To && mo(p3))
        for (s2 = Ut(t2), i2 = n2 ? new this(s2) : To(s2); s2 > g2; g2++)
          d2 = a2 ? r2(t2[g2], g2) : t2[g2], Mo(i2, g2, d2);
      else
        for (l2 = (u2 = Eo(t2, p3)).next, i2 = n2 ? new this() : []; !(c2 = U(l2, u2)).done; g2++)
          d2 = a2 ? go(u2, r2, [c2.value, g2], true) : c2.value, Mo(i2, g2, d2);
      return i2.length = g2, i2;
    }, Co = we("iterator"), Ao = false;
    try {
      var Do = 0, No = { next: function() {
        return { done: !!Do++ };
      }, return: function() {
        Ao = true;
      } };
      No[Co] = function() {
        return this;
      }, Array.from(No, function() {
        throw 2;
      });
    } catch (fS) {
    }
    var Oo = function(e2, t2) {
      if (!t2 && !Ao)
        return false;
      var n2 = false;
      try {
        var o2 = {};
        o2[Co] = function() {
          return { next: function() {
            return { done: n2 = true };
          } };
        }, e2(o2);
      } catch (fS) {
      }
      return n2;
    }, Ro = !Oo(function(e2) {
      Array.from(e2);
    });
    nn({ target: "Array", stat: true, forced: Ro }, { from: So });
    var Lo, ko, Go, Po = H("".charAt), Uo = H("".charCodeAt), bo = H("".slice), wo = function(e2) {
      return function(t2, n2) {
        var o2, r2, a2 = dn(Q(t2)), s2 = Ot(n2), i2 = a2.length;
        return s2 < 0 || s2 >= i2 ? e2 ? "" : void 0 : (o2 = Uo(a2, s2)) < 55296 || o2 > 56319 || s2 + 1 === i2 || (r2 = Uo(a2, s2 + 1)) < 56320 || r2 > 57343 ? e2 ? Po(a2, s2) : o2 : e2 ? bo(a2, s2, s2 + 2) : r2 - 56320 + (o2 - 55296 << 10) + 65536;
      };
    }, Fo = { codeAt: wo(false), charAt: wo(true) }, qo = !L(function() {
      function e2() {
      }
      return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
    }), Vo = pt("IE_PROTO"), xo = R.Object, Bo = xo.prototype, Ko = qo ? xo.getPrototypeOf : function(e2) {
      var t2 = Ae(e2);
      if (Ne(t2, Vo))
        return t2[Vo];
      var n2 = t2.constructor;
      return ee(n2) && t2 instanceof n2 ? n2.prototype : t2 instanceof xo ? Bo : null;
    }, Ho = we("iterator"), jo = false;
    [].keys && ("next" in (Go = [].keys()) ? (ko = Ko(Ko(Go))) !== Object.prototype && (Lo = ko) : jo = true), (null == Lo || L(function() {
      var e2 = {};
      return Lo[Ho].call(e2) !== e2;
    })) && (Lo = {}), ee(Lo[Ho]) || At(Lo, Ho, function() {
      return this;
    });
    var Wo = { IteratorPrototype: Lo, BUGGY_SAFARI_ITERATORS: jo }, Yo = nt.f, $o = we("toStringTag"), zo = function(e2, t2, n2) {
      e2 && !n2 && (e2 = e2.prototype), e2 && !Ne(e2, $o) && Yo(e2, $o, { configurable: true, value: t2 });
    }, Jo = Wo.IteratorPrototype, Xo = function() {
      return this;
    }, Qo = function(e2, t2, n2, o2) {
      var r2 = t2 + " Iterator";
      return e2.prototype = Un(Jo, { next: q(+!o2, n2) }), zo(e2, r2, false), _o[r2] = Xo, e2;
    }, Zo = R.String, er = R.TypeError, tr = Object.setPrototypeOf || ("__proto__" in {} ? function() {
      var e2, t2 = false, n2 = {};
      try {
        (e2 = H(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set))(n2, []), t2 = n2 instanceof Array;
      } catch (fS) {
      }
      return function(n3, o2) {
        return Xe(n3), function(e3) {
          if ("object" == typeof e3 || ee(e3))
            return e3;
          throw er("Can't set " + Zo(e3) + " as a prototype");
        }(o2), t2 ? e2(n3, o2) : n3.__proto__ = o2, n3;
      };
    }() : void 0), nr = Ct.PROPER, or = Ct.CONFIGURABLE, rr = Wo.IteratorPrototype, ar = Wo.BUGGY_SAFARI_ITERATORS, sr = we("iterator"), ir = function() {
      return this;
    }, cr = function(e2, t2, n2, o2, r2, a2, s2) {
      Qo(n2, t2, o2);
      var i2, c2, u2, l2 = function(e3) {
        if (e3 === r2 && h3)
          return h3;
        if (!ar && e3 in g2)
          return g2[e3];
        switch (e3) {
          case "keys":
          case "values":
          case "entries":
            return function() {
              return new n2(this, e3);
            };
        }
        return function() {
          return new n2(this);
        };
      }, d2 = t2 + " Iterator", p3 = false, g2 = e2.prototype, _2 = g2[sr] || g2["@@iterator"] || r2 && g2[r2], h3 = !ar && _2 || l2(r2), f2 = "Array" == t2 && g2.entries || _2;
      if (f2 && (i2 = Ko(f2.call(new e2()))) !== Object.prototype && i2.next && (Ko(i2) !== rr && (tr ? tr(i2, rr) : ee(i2[sr]) || At(i2, sr, ir)), zo(i2, d2, true)), nr && "values" == r2 && _2 && "values" !== _2.name && (or ? ot(g2, "name", "values") : (p3 = true, h3 = function() {
        return U(_2, this);
      })), r2)
        if (c2 = { values: l2("values"), keys: a2 ? h3 : l2("keys"), entries: l2("entries") }, s2)
          for (u2 in c2)
            (ar || p3 || !(u2 in g2)) && At(g2, u2, c2[u2]);
        else
          nn({ target: t2, proto: true, forced: ar || p3 }, c2);
      return g2[sr] !== h3 && At(g2, sr, h3, { name: r2 }), _o[t2] = h3, c2;
    }, ur = Fo.charAt, lr = It.set, dr = It.getterFor("String Iterator");
    cr(String, "String", function(e2) {
      lr(this, { type: "String Iterator", string: dn(e2), index: 0 });
    }, function() {
      var e2, t2 = dr(this), n2 = t2.string, o2 = t2.index;
      return o2 >= n2.length ? { value: void 0, done: true } : (e2 = ur(n2, o2), t2.index += e2.length, { value: e2, done: false });
    });
    var pr = { SDK_READY: "sdkStateReady", SDK_NOT_READY: "sdkStateNotReady", SDK_DESTROY: "sdkDestroy", MESSAGE_RECEIVED: "onMessageReceived", MESSAGE_MODIFIED: "onMessageModified", MESSAGE_REVOKED: "onMessageRevoked", MESSAGE_READ_BY_PEER: "onMessageReadByPeer", MESSAGE_READ_RECEIPT_RECEIVED: "onMessageReadReceiptReceived", CONVERSATION_LIST_UPDATED: "onConversationListUpdated", GROUP_LIST_UPDATED: "onGroupListUpdated", GROUP_SYSTEM_NOTICE_RECEIVED: "receiveGroupSystemNotice", GROUP_ATTRIBUTES_UPDATED: "groupAttributesUpdated", TOPIC_CREATED: "onTopicCreated", TOPIC_DELETED: "onTopicDeleted", TOPIC_UPDATED: "onTopicUpdated", PROFILE_UPDATED: "onProfileUpdated", USER_STATUS_UPDATED: "onUserStatusUpdated", BLACKLIST_UPDATED: "blacklistUpdated", FRIEND_LIST_UPDATED: "onFriendListUpdated", FRIEND_GROUP_LIST_UPDATED: "onFriendGroupListUpdated", FRIEND_APPLICATION_LIST_UPDATED: "onFriendApplicationListUpdated", KICKED_OUT: "kickedOut", ERROR: "error", NET_STATE_CHANGE: "netStateChange", SDK_RELOAD: "sdkReload" }, gr = { MSG_TEXT: "TIMTextElem", MSG_IMAGE: "TIMImageElem", MSG_SOUND: "TIMSoundElem", MSG_AUDIO: "TIMSoundElem", MSG_FILE: "TIMFileElem", MSG_FACE: "TIMFaceElem", MSG_VIDEO: "TIMVideoFileElem", MSG_GEO: "TIMLocationElem", MSG_LOCATION: "TIMLocationElem", MSG_GRP_TIP: "TIMGroupTipElem", MSG_GRP_SYS_NOTICE: "TIMGroupSystemNoticeElem", MSG_CUSTOM: "TIMCustomElem", MSG_MERGER: "TIMRelayElem", MSG_PRIORITY_HIGH: "High", MSG_PRIORITY_NORMAL: "Normal", MSG_PRIORITY_LOW: "Low", MSG_PRIORITY_LOWEST: "Lowest", CONV_C2C: "C2C", CONV_GROUP: "GROUP", CONV_TOPIC: "TOPIC", CONV_SYSTEM: "@TIM#SYSTEM", CONV_AT_ME: 1, CONV_AT_ALL: 2, CONV_AT_ALL_AT_ME: 3, GRP_PRIVATE: "Private", GRP_WORK: "Private", GRP_PUBLIC: "Public", GRP_CHATROOM: "ChatRoom", GRP_MEETING: "ChatRoom", GRP_AVCHATROOM: "AVChatRoom", GRP_COMMUNITY: "Community", GRP_MBR_ROLE_OWNER: "Owner", GRP_MBR_ROLE_ADMIN: "Admin", GRP_MBR_ROLE_MEMBER: "Member", GRP_MBR_ROLE_CUSTOM: "Custom", GRP_TIP_MBR_JOIN: 1, GRP_TIP_MBR_QUIT: 2, GRP_TIP_MBR_KICKED_OUT: 3, GRP_TIP_MBR_SET_ADMIN: 4, GRP_TIP_MBR_CANCELED_ADMIN: 5, GRP_TIP_GRP_PROFILE_UPDATED: 6, GRP_TIP_MBR_PROFILE_UPDATED: 7, MSG_REMIND_ACPT_AND_NOTE: "AcceptAndNotify", MSG_REMIND_ACPT_NOT_NOTE: "AcceptNotNotify", MSG_REMIND_DISCARD: "Discard", GENDER_UNKNOWN: "Gender_Type_Unknown", GENDER_FEMALE: "Gender_Type_Female", GENDER_MALE: "Gender_Type_Male", KICKED_OUT_MULT_ACCOUNT: "multipleAccount", KICKED_OUT_MULT_DEVICE: "multipleDevice", KICKED_OUT_USERSIG_EXPIRED: "userSigExpired", KICKED_OUT_REST_API: "REST_API_Kick", ALLOW_TYPE_ALLOW_ANY: "AllowType_Type_AllowAny", ALLOW_TYPE_NEED_CONFIRM: "AllowType_Type_NeedConfirm", ALLOW_TYPE_DENY_ANY: "AllowType_Type_DenyAny", FORBID_TYPE_NONE: "AdminForbid_Type_None", FORBID_TYPE_SEND_OUT: "AdminForbid_Type_SendOut", JOIN_OPTIONS_FREE_ACCESS: "FreeAccess", JOIN_OPTIONS_NEED_PERMISSION: "NeedPermission", JOIN_OPTIONS_DISABLE_APPLY: "DisableApply", JOIN_STATUS_SUCCESS: "JoinedSuccess", JOIN_STATUS_ALREADY_IN_GROUP: "AlreadyInGroup", JOIN_STATUS_WAIT_APPROVAL: "WaitAdminApproval", GRP_PROFILE_OWNER_ID: "ownerID", GRP_PROFILE_CREATE_TIME: "createTime", GRP_PROFILE_LAST_INFO_TIME: "lastInfoTime", GRP_PROFILE_MEMBER_NUM: "memberNum", GRP_PROFILE_MAX_MEMBER_NUM: "maxMemberNum", GRP_PROFILE_JOIN_OPTION: "joinOption", GRP_PROFILE_INTRODUCTION: "introduction", GRP_PROFILE_NOTIFICATION: "notification", GRP_PROFILE_MUTE_ALL_MBRS: "muteAllMembers", SNS_ADD_TYPE_SINGLE: "Add_Type_Single", SNS_ADD_TYPE_BOTH: "Add_Type_Both", SNS_DELETE_TYPE_SINGLE: "Delete_Type_Single", SNS_DELETE_TYPE_BOTH: "Delete_Type_Both", SNS_APPLICATION_TYPE_BOTH: "Pendency_Type_Both", SNS_APPLICATION_SENT_TO_ME: "Pendency_Type_ComeIn", SNS_APPLICATION_SENT_BY_ME: "Pendency_Type_SendOut", SNS_APPLICATION_AGREE: "Response_Action_Agree", SNS_APPLICATION_AGREE_AND_ADD: "Response_Action_AgreeAndAdd", SNS_CHECK_TYPE_BOTH: "CheckResult_Type_Both", SNS_CHECK_TYPE_SINGLE: "CheckResult_Type_Single", SNS_TYPE_NO_RELATION: "CheckResult_Type_NoRelation", SNS_TYPE_A_WITH_B: "CheckResult_Type_AWithB", SNS_TYPE_B_WITH_A: "CheckResult_Type_BWithA", SNS_TYPE_BOTH_WAY: "CheckResult_Type_BothWay", NET_STATE_CONNECTED: "connected", NET_STATE_CONNECTING: "connecting", NET_STATE_DISCONNECTED: "disconnected", MSG_AT_ALL: "__kImSDK_MesssageAtALL__", READ_ALL_C2C_MSG: "readAllC2CMessage", READ_ALL_GROUP_MSG: "readAllGroupMessage", READ_ALL_MSG: "readAllMessage", USER_STATUS_UNKNOWN: 0, USER_STATUS_ONLINE: 1, USER_STATUS_OFFLINE: 2, USER_STATUS_UNLOGINED: 3 }, _r = H([].slice), hr = R.Function, fr = H([].concat), mr = H([].join), Mr = {}, vr = function(e2, t2, n2) {
      if (!Ne(Mr, t2)) {
        for (var o2 = [], r2 = 0; r2 < t2; r2++)
          o2[r2] = "a[" + r2 + "]";
        Mr[t2] = hr("C,a", "return new C(" + mr(o2, ",") + ")");
      }
      return Mr[t2](e2, n2);
    }, yr = G ? hr.bind : function(e2) {
      var t2 = Me(this), n2 = t2.prototype, o2 = _r(arguments, 1), r2 = function() {
        var n3 = fr(o2, _r(arguments));
        return this instanceof r2 ? vr(t2, n3.length, n3) : t2.apply(e2, n3);
      };
      return te(n2) && (r2.prototype = n2), r2;
    };
    nn({ target: "Function", proto: true, forced: Function.bind !== yr }, { bind: yr });
    var Ir = we("species"), Er = function(e2) {
      return le >= 51 || !L(function() {
        var t2 = [];
        return (t2.constructor = {})[Ir] = function() {
          return { foo: 1 };
        }, 1 !== t2[e2](Boolean).foo;
      });
    }, Tr = Zn.map, Sr = Er("map");
    nn({ target: "Array", proto: true, forced: !Sr }, { map: function(e2) {
      return Tr(this, e2, arguments.length > 1 ? arguments[1] : void 0);
    } });
    var Cr = function() {
      function e2() {
        o(this, e2), this.cache = [], this.options = null;
      }
      return a(e2, [{ key: "use", value: function(e3) {
        if ("function" != typeof e3)
          throw "middleware must be a function";
        return this.cache.push(e3), this;
      } }, { key: "next", value: function(e3) {
        if (this.middlewares && this.middlewares.length > 0)
          return this.middlewares.shift().call(this, this.options, this.next.bind(this));
      } }, { key: "run", value: function(e3) {
        return this.middlewares = this.cache.map(function(e4) {
          return e4;
        }), this.options = e3, this.next();
      } }]), e2;
    }(), Ar = Ct.EXISTS, Dr = nt.f, Nr = Function.prototype, Or = H(Nr.toString), Rr = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/, Lr = H(Rr.exec);
    k && !Ar && Dr(Nr, "name", { configurable: true, get: function() {
      try {
        return Lr(Rr, Or(this))[1];
      } catch (fS) {
        return "";
      }
    } });
    var kr = we("isConcatSpreadable"), Gr = R.TypeError, Pr = le >= 51 || !L(function() {
      var e2 = [];
      return e2[kr] = false, e2.concat()[0] !== e2;
    }), Ur = Er("concat"), br = function(e2) {
      if (!te(e2))
        return false;
      var t2 = e2[kr];
      return void 0 !== t2 ? !!t2 : Fn(e2);
    };
    nn({ target: "Array", proto: true, forced: !Pr || !Ur }, { concat: function(e2) {
      var t2, n2, o2, r2, a2, s2 = Ae(this), i2 = Jn(s2, 0), c2 = 0;
      for (t2 = -1, o2 = arguments.length; t2 < o2; t2++)
        if (br(a2 = -1 === t2 ? s2 : arguments[t2])) {
          if (c2 + (r2 = Ut(a2)) > 9007199254740991)
            throw Gr("Maximum allowed index exceeded");
          for (n2 = 0; n2 < r2; n2++, c2++)
            n2 in a2 && Mo(i2, c2, a2[n2]);
        } else {
          if (c2 >= 9007199254740991)
            throw Gr("Maximum allowed index exceeded");
          Mo(i2, c2++, a2);
        }
      return i2.length = c2, i2;
    } });
    var wr = A(function(e2, t2) {
      var n2, o2, r2, a2, s2, i2, c2, u2, l2, d2, p3, g2, _2, h3, f2, m2, M2, v2;
      e2.exports = (n2 = "function" == typeof Promise, o2 = "object" == typeof self ? self : C, r2 = "undefined" != typeof Symbol, a2 = "undefined" != typeof Map, s2 = "undefined" != typeof Set, i2 = "undefined" != typeof WeakMap, c2 = "undefined" != typeof WeakSet, u2 = "undefined" != typeof DataView, l2 = r2 && void 0 !== Symbol.iterator, d2 = r2 && void 0 !== Symbol.toStringTag, p3 = s2 && "function" == typeof Set.prototype.entries, g2 = a2 && "function" == typeof Map.prototype.entries, _2 = p3 && Object.getPrototypeOf((/* @__PURE__ */ new Set()).entries()), h3 = g2 && Object.getPrototypeOf((/* @__PURE__ */ new Map()).entries()), f2 = l2 && "function" == typeof Array.prototype[Symbol.iterator], m2 = f2 && Object.getPrototypeOf([][Symbol.iterator]()), M2 = l2 && "function" == typeof String.prototype[Symbol.iterator], v2 = M2 && Object.getPrototypeOf(""[Symbol.iterator]()), function(e3) {
        var t3 = typeof e3;
        if ("object" !== t3)
          return t3;
        if (null === e3)
          return "null";
        if (e3 === o2)
          return "global";
        if (Array.isArray(e3) && (false === d2 || !(Symbol.toStringTag in e3)))
          return "Array";
        if ("object" == typeof window && null !== window) {
          if ("object" == typeof window.location && e3 === window.location)
            return "Location";
          if ("object" == typeof window.document && e3 === window.document)
            return "Document";
          if ("object" == typeof window.navigator) {
            if ("object" == typeof window.navigator.mimeTypes && e3 === window.navigator.mimeTypes)
              return "MimeTypeArray";
            if ("object" == typeof window.navigator.plugins && e3 === window.navigator.plugins)
              return "PluginArray";
          }
          if (("function" == typeof window.HTMLElement || "object" == typeof window.HTMLElement) && e3 instanceof window.HTMLElement) {
            if ("BLOCKQUOTE" === e3.tagName)
              return "HTMLQuoteElement";
            if ("TD" === e3.tagName)
              return "HTMLTableDataCellElement";
            if ("TH" === e3.tagName)
              return "HTMLTableHeaderCellElement";
          }
        }
        var r3 = d2 && e3[Symbol.toStringTag];
        if ("string" == typeof r3)
          return r3;
        var l3 = Object.getPrototypeOf(e3);
        return l3 === RegExp.prototype ? "RegExp" : l3 === Date.prototype ? "Date" : n2 && l3 === Promise.prototype ? "Promise" : s2 && l3 === Set.prototype ? "Set" : a2 && l3 === Map.prototype ? "Map" : c2 && l3 === WeakSet.prototype ? "WeakSet" : i2 && l3 === WeakMap.prototype ? "WeakMap" : u2 && l3 === DataView.prototype ? "DataView" : a2 && l3 === h3 ? "Map Iterator" : s2 && l3 === _2 ? "Set Iterator" : f2 && l3 === m2 ? "Array Iterator" : M2 && l3 === v2 ? "String Iterator" : null === l3 ? "Object" : Object.prototype.toString.call(e3).slice(8, -1);
      });
    });
    nn({ target: "Array", stat: true }, { isArray: Fn });
    var Fr = function(e2, t2, n2) {
      var o2, r2;
      return tr && ee(o2 = t2.constructor) && o2 !== n2 && te(r2 = o2.prototype) && r2 !== n2.prototype && tr(e2, r2), e2;
    }, qr = H(1 .valueOf), Vr = Kt.f, xr = Ye.f, Br = nt.f, Kr = Mn.trim, Hr = R.Number, jr = Hr.prototype, Wr = R.TypeError, Yr = H("".slice), $r = H("".charCodeAt), zr = function(e2) {
      var t2 = Ve(e2, "number");
      return "bigint" == typeof t2 ? t2 : Jr(t2);
    }, Jr = function(e2) {
      var t2, n2, o2, r2, a2, s2, i2, c2, u2 = Ve(e2, "number");
      if (_e(u2))
        throw Wr("Cannot convert a Symbol value to a number");
      if ("string" == typeof u2 && u2.length > 2) {
        if (u2 = Kr(u2), 43 === (t2 = $r(u2, 0)) || 45 === t2) {
          if (88 === (n2 = $r(u2, 2)) || 120 === n2)
            return NaN;
        } else if (48 === t2) {
          switch ($r(u2, 1)) {
            case 66:
            case 98:
              o2 = 2, r2 = 49;
              break;
            case 79:
            case 111:
              o2 = 8, r2 = 55;
              break;
            default:
              return +u2;
          }
          for (s2 = (a2 = Yr(u2, 2)).length, i2 = 0; i2 < s2; i2++)
            if ((c2 = $r(a2, i2)) < 48 || c2 > r2)
              return NaN;
          return parseInt(a2, o2);
        }
      }
      return +u2;
    };
    if (en("Number", !Hr(" 0o1") || !Hr("0b1") || Hr("+0x1"))) {
      for (var Xr, Qr = function(e2) {
        var t2 = arguments.length < 1 ? 0 : Hr(zr(e2)), n2 = this;
        return re(jr, n2) && L(function() {
          qr(n2);
        }) ? Fr(Object(t2), n2, Qr) : t2;
      }, Zr = k ? Vr(Hr) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","), ea = 0; Zr.length > ea; ea++)
        Ne(Hr, Xr = Zr[ea]) && !Ne(Qr, Xr) && Br(Qr, Xr, xr(Hr, Xr));
      Qr.prototype = jr, jr.constructor = Qr, At(R, "Number", Qr);
    }
    var ta = L(function() {
      Ko(1);
    });
    nn({ target: "Object", stat: true, forced: ta, sham: !qo }, { getPrototypeOf: function(e2) {
      return Ko(Ae(e2));
    } });
    var na, oa, ra = function() {
      var e2 = Xe(this), t2 = "";
      return e2.global && (t2 += "g"), e2.ignoreCase && (t2 += "i"), e2.multiline && (t2 += "m"), e2.dotAll && (t2 += "s"), e2.unicode && (t2 += "u"), e2.sticky && (t2 += "y"), t2;
    }, aa = R.RegExp, sa = L(function() {
      var e2 = aa("a", "y");
      return e2.lastIndex = 2, null != e2.exec("abcd");
    }), ia = sa || L(function() {
      return !aa("a", "y").sticky;
    }), ca = { BROKEN_CARET: sa || L(function() {
      var e2 = aa("^r", "gy");
      return e2.lastIndex = 2, null != e2.exec("str");
    }), MISSED_STICKY: ia, UNSUPPORTED_Y: sa }, ua = R.RegExp, la = L(function() {
      var e2 = ua(".", "s");
      return !(e2.dotAll && e2.exec("\n") && "s" === e2.flags);
    }), da = R.RegExp, pa = L(function() {
      var e2 = da("(?<a>b)", "g");
      return "b" !== e2.exec("b").groups.a || "bc" !== "b".replace(e2, "$<a>c");
    }), ga = It.get, _a2 = Se("native-string-replace", String.prototype.replace), ha = RegExp.prototype.exec, fa = ha, ma = H("".charAt), Ma = H("".indexOf), va = H("".replace), ya = H("".slice), Ia = (oa = /b*/g, U(ha, na = /a/, "a"), U(ha, oa, "a"), 0 !== na.lastIndex || 0 !== oa.lastIndex), Ea = ca.BROKEN_CARET, Ta = void 0 !== /()??/.exec("")[1];
    (Ia || Ta || Ea || la || pa) && (fa = function(e2) {
      var t2, n2, o2, r2, a2, s2, i2, c2 = this, u2 = ga(c2), l2 = dn(e2), d2 = u2.raw;
      if (d2)
        return d2.lastIndex = c2.lastIndex, t2 = U(fa, d2, l2), c2.lastIndex = d2.lastIndex, t2;
      var p3 = u2.groups, g2 = Ea && c2.sticky, _2 = U(ra, c2), h3 = c2.source, f2 = 0, m2 = l2;
      if (g2 && (_2 = va(_2, "y", ""), -1 === Ma(_2, "g") && (_2 += "g"), m2 = ya(l2, c2.lastIndex), c2.lastIndex > 0 && (!c2.multiline || c2.multiline && "\n" !== ma(l2, c2.lastIndex - 1)) && (h3 = "(?: " + h3 + ")", m2 = " " + m2, f2++), n2 = new RegExp("^(?:" + h3 + ")", _2)), Ta && (n2 = new RegExp("^" + h3 + "$(?!\\s)", _2)), Ia && (o2 = c2.lastIndex), r2 = U(ha, g2 ? n2 : c2, m2), g2 ? r2 ? (r2.input = ya(r2.input, f2), r2[0] = ya(r2[0], f2), r2.index = c2.lastIndex, c2.lastIndex += r2[0].length) : c2.lastIndex = 0 : Ia && r2 && (c2.lastIndex = c2.global ? r2.index + r2[0].length : o2), Ta && r2 && r2.length > 1 && U(_a2, r2[0], n2, function() {
        for (a2 = 1; a2 < arguments.length - 2; a2++)
          void 0 === arguments[a2] && (r2[a2] = void 0);
      }), r2 && p3)
        for (r2.groups = s2 = Un(null), a2 = 0; a2 < p3.length; a2++)
          s2[(i2 = p3[a2])[0]] = r2[i2[1]];
      return r2;
    });
    var Sa = fa;
    nn({ target: "RegExp", proto: true, forced: /./.exec !== Sa }, { exec: Sa });
    var Ca = Date.prototype, Aa = H(Ca.toString), Da = H(Ca.getTime);
    "Invalid Date" != String(new Date(NaN)) && At(Ca, "toString", function() {
      var e2 = Da(this);
      return e2 == e2 ? Aa(this) : "Invalid Date";
    });
    var Na = Ct.PROPER, Oa = RegExp.prototype, Ra = Oa.toString, La = H(ra), ka = L(function() {
      return "/a/b" != Ra.call({ source: "a", flags: "b" });
    }), Ga = Na && "toString" != Ra.name;
    (ka || Ga) && At(RegExp.prototype, "toString", function() {
      var e2 = Xe(this), t2 = dn(e2.source), n2 = e2.flags;
      return "/" + t2 + "/" + dn(void 0 === n2 && re(Oa, e2) && !("flags" in Oa) ? La(e2) : n2);
    }, { unsafe: true });
    var Pa = we("species"), Ua = RegExp.prototype, ba = function(e2, t2, n2, o2) {
      var r2 = we(e2), a2 = !L(function() {
        var t3 = {};
        return t3[r2] = function() {
          return 7;
        }, 7 != ""[e2](t3);
      }), s2 = a2 && !L(function() {
        var t3 = false, n3 = /a/;
        return "split" === e2 && ((n3 = {}).constructor = {}, n3.constructor[Pa] = function() {
          return n3;
        }, n3.flags = "", n3[r2] = /./[r2]), n3.exec = function() {
          return t3 = true, null;
        }, n3[r2](""), !t3;
      });
      if (!a2 || !s2 || n2) {
        var i2 = H(/./[r2]), c2 = t2(r2, ""[e2], function(e3, t3, n3, o3, r3) {
          var s3 = H(e3), c3 = t3.exec;
          return c3 === Sa || c3 === Ua.exec ? a2 && !r3 ? { done: true, value: i2(t3, n3, o3) } : { done: true, value: s3(n3, t3, o3) } : { done: false };
        });
        At(String.prototype, e2, c2[0]), At(Ua, r2, c2[1]);
      }
      o2 && ot(Ua[r2], "sham", true);
    }, wa = Fo.charAt, Fa = function(e2, t2, n2) {
      return t2 + (n2 ? wa(e2, t2).length : 1);
    }, qa = R.TypeError, Va = function(e2, t2) {
      var n2 = e2.exec;
      if (ee(n2)) {
        var o2 = U(n2, e2, t2);
        return null !== o2 && Xe(o2), o2;
      }
      if ("RegExp" === Y(e2))
        return U(Sa, e2, t2);
      throw qa("RegExp#exec called on incompatible receiver");
    };
    ba("match", function(e2, t2, n2) {
      return [function(t3) {
        var n3 = Q(this), o2 = null == t3 ? void 0 : ve(t3, e2);
        return o2 ? U(o2, t3, n3) : new RegExp(t3)[e2](dn(n3));
      }, function(e3) {
        var o2 = Xe(this), r2 = dn(e3), a2 = n2(t2, o2, r2);
        if (a2.done)
          return a2.value;
        if (!o2.global)
          return Va(o2, r2);
        var s2 = o2.unicode;
        o2.lastIndex = 0;
        for (var i2, c2 = [], u2 = 0; null !== (i2 = Va(o2, r2)); ) {
          var l2 = dn(i2[0]);
          c2[u2] = l2, "" === l2 && (o2.lastIndex = Fa(r2, Pt(o2.lastIndex), s2)), u2++;
        }
        return 0 === u2 ? null : c2;
      }];
    });
    var xa = R.Date, Ba = H(xa.prototype.getTime);
    nn({ target: "Date", stat: true }, { now: function() {
      return Ba(new xa());
    } });
    var Ka = we("unscopables"), Ha = Array.prototype;
    null == Ha[Ka] && nt.f(Ha, Ka, { configurable: true, value: Un(null) });
    var ja = function(e2) {
      Ha[Ka][e2] = true;
    }, Wa = wt.includes;
    nn({ target: "Array", proto: true }, { includes: function(e2) {
      return Wa(this, e2, arguments.length > 1 ? arguments[1] : void 0);
    } }), ja("includes");
    var Ya = we("match"), $a = function(e2) {
      var t2;
      return te(e2) && (void 0 !== (t2 = e2[Ya]) ? !!t2 : "RegExp" == Y(e2));
    }, za = R.TypeError, Ja = function(e2) {
      if ($a(e2))
        throw za("The method doesn't accept regular expressions");
      return e2;
    }, Xa = we("match"), Qa = function(e2) {
      var t2 = /./;
      try {
        "/./"[e2](t2);
      } catch (n2) {
        try {
          return t2[Xa] = false, "/./"[e2](t2);
        } catch (o2) {
        }
      }
      return false;
    }, Za = H("".indexOf);
    nn({ target: "String", proto: true, forced: !Qa("includes") }, { includes: function(e2) {
      return !!~Za(dn(Q(this)), dn(Ja(e2)), arguments.length > 1 ? arguments[1] : void 0);
    } });
    var es = R.RangeError, ts = H(function(e2) {
      var t2 = dn(Q(this)), n2 = "", o2 = Ot(e2);
      if (o2 < 0 || Infinity == o2)
        throw es("Wrong number of repetitions");
      for (; o2 > 0; (o2 >>>= 1) && (t2 += t2))
        1 & o2 && (n2 += t2);
      return n2;
    }), ns = H("".slice), os = Math.ceil, rs = function(e2) {
      return function(t2, n2, o2) {
        var r2, a2, s2 = dn(Q(t2)), i2 = Pt(n2), c2 = s2.length, u2 = void 0 === o2 ? " " : dn(o2);
        return i2 <= c2 || "" == u2 ? s2 : ((a2 = ts(u2, os((r2 = i2 - c2) / u2.length))).length > r2 && (a2 = ns(a2, 0, r2)), e2 ? s2 + a2 : a2 + s2);
      };
    }, as2 = { start: rs(false), end: rs(true) }.start, ss = R.RangeError, is = Math.abs, cs = Date.prototype, us = cs.toISOString, ls = H(cs.getTime), ds = H(cs.getUTCDate), ps = H(cs.getUTCFullYear), gs = H(cs.getUTCHours), _s = H(cs.getUTCMilliseconds), hs = H(cs.getUTCMinutes), fs = H(cs.getUTCMonth), ms = H(cs.getUTCSeconds), Ms = L(function() {
      return "0385-07-25T07:06:39.999Z" != us.call(new Date(-50000000000001));
    }) || !L(function() {
      us.call(new Date(NaN));
    }) ? function() {
      if (!isFinite(ls(this)))
        throw ss("Invalid time value");
      var e2 = ps(this), t2 = _s(this), n2 = e2 < 0 ? "-" : e2 > 9999 ? "+" : "";
      return n2 + as2(is(e2), n2 ? 6 : 4, 0) + "-" + as2(fs(this) + 1, 2, 0) + "-" + as2(ds(this), 2, 0) + "T" + as2(gs(this), 2, 0) + ":" + as2(hs(this), 2, 0) + ":" + as2(ms(this), 2, 0) + "." + as2(t2, 3, 0) + "Z";
    } : us;
    nn({ target: "Date", proto: true, forced: Date.prototype.toISOString !== Ms }, { toISOString: Ms });
    var vs = Function.prototype, ys = vs.apply, Is = vs.call, Es = "object" == typeof Reflect && Reflect.apply || (G ? Is.bind(ys) : function() {
      return Is.apply(ys, arguments);
    }), Ts = Math.floor, Ss = H("".charAt), Cs = H("".replace), As = H("".slice), Ds = /\$([$&'`]|\d{1,2}|<[^>]*>)/g, Ns = /\$([$&'`]|\d{1,2})/g, Os = function(e2, t2, n2, o2, r2, a2) {
      var s2 = n2 + e2.length, i2 = o2.length, c2 = Ns;
      return void 0 !== r2 && (r2 = Ae(r2), c2 = Ds), Cs(a2, c2, function(a3, c3) {
        var u2;
        switch (Ss(c3, 0)) {
          case "$":
            return "$";
          case "&":
            return e2;
          case "`":
            return As(t2, 0, n2);
          case "'":
            return As(t2, s2);
          case "<":
            u2 = r2[As(c3, 1, -1)];
            break;
          default:
            var l2 = +c3;
            if (0 === l2)
              return a3;
            if (l2 > i2) {
              var d2 = Ts(l2 / 10);
              return 0 === d2 ? a3 : d2 <= i2 ? void 0 === o2[d2 - 1] ? Ss(c3, 1) : o2[d2 - 1] + Ss(c3, 1) : a3;
            }
            u2 = o2[l2 - 1];
        }
        return void 0 === u2 ? "" : u2;
      });
    }, Rs = we("replace"), Ls = Math.max, ks = Math.min, Gs = H([].concat), Ps = H([].push), Us = H("".indexOf), bs = H("".slice), ws = "$0" === "a".replace(/./, "$0"), Fs = !!/./[Rs] && "" === /./[Rs]("a", "$0");
    ba("replace", function(e2, t2, n2) {
      var o2 = Fs ? "$" : "$0";
      return [function(e3, n3) {
        var o3 = Q(this), r2 = null == e3 ? void 0 : ve(e3, Rs);
        return r2 ? U(r2, e3, o3, n3) : U(t2, dn(o3), e3, n3);
      }, function(e3, r2) {
        var a2 = Xe(this), s2 = dn(e3);
        if ("string" == typeof r2 && -1 === Us(r2, o2) && -1 === Us(r2, "$<")) {
          var i2 = n2(t2, a2, s2, r2);
          if (i2.done)
            return i2.value;
        }
        var c2 = ee(r2);
        c2 || (r2 = dn(r2));
        var u2 = a2.global;
        if (u2) {
          var l2 = a2.unicode;
          a2.lastIndex = 0;
        }
        for (var d2 = []; ; ) {
          var p3 = Va(a2, s2);
          if (null === p3)
            break;
          if (Ps(d2, p3), !u2)
            break;
          "" === dn(p3[0]) && (a2.lastIndex = Fa(s2, Pt(a2.lastIndex), l2));
        }
        for (var g2, _2 = "", h3 = 0, f2 = 0; f2 < d2.length; f2++) {
          for (var m2 = dn((p3 = d2[f2])[0]), M2 = Ls(ks(Ot(p3.index), s2.length), 0), v2 = [], y2 = 1; y2 < p3.length; y2++)
            Ps(v2, void 0 === (g2 = p3[y2]) ? g2 : String(g2));
          var I2 = p3.groups;
          if (c2) {
            var E2 = Gs([m2], v2, M2, s2);
            void 0 !== I2 && Ps(E2, I2);
            var T2 = dn(Es(r2, void 0, E2));
          } else
            T2 = Os(m2, s2, M2, v2, I2, r2);
          M2 >= h3 && (_2 += bs(s2, h3, M2) + T2, h3 = M2 + m2.length);
        }
        return _2 + bs(s2, h3);
      }];
    }, !!L(function() {
      var e2 = /./;
      return e2.exec = function() {
        var e3 = [];
        return e3.groups = { a: "7" }, e3;
      }, "7" !== "".replace(e2, "$<a>");
    }) || !ws || Fs);
    var qs = nt.f, Vs = It.set, xs = It.getterFor("Array Iterator"), Bs = cr(Array, "Array", function(e2, t2) {
      Vs(this, { type: "Array Iterator", target: Z(e2), index: 0, kind: t2 });
    }, function() {
      var e2 = xs(this), t2 = e2.target, n2 = e2.kind, o2 = e2.index++;
      return !t2 || o2 >= t2.length ? (e2.target = void 0, { value: void 0, done: true }) : "keys" == n2 ? { value: o2, done: false } : "values" == n2 ? { value: t2[o2], done: false } : { value: [o2, t2[o2]], done: false };
    }, "values"), Ks = _o.Arguments = _o.Array;
    if (ja("keys"), ja("values"), ja("entries"), k && "values" !== Ks.name)
      try {
        qs(Ks, "name", { value: "values" });
      } catch (fS) {
      }
    var Hs = we("iterator"), js = we("toStringTag"), Ws = Bs.values, Ys = function(e2, t2) {
      if (e2) {
        if (e2[Hs] !== Ws)
          try {
            ot(e2, Hs, Ws);
          } catch (fS) {
            e2[Hs] = Ws;
          }
        if (e2[js] || ot(e2, js, t2), ro[t2]) {
          for (var n2 in Bs)
            if (e2[n2] !== Bs[n2])
              try {
                ot(e2, n2, Bs[n2]);
              } catch (fS) {
                e2[n2] = Bs[n2];
              }
        }
      }
    };
    for (var $s in ro)
      Ys(R[$s] && R[$s].prototype, $s);
    Ys(io, "DOMTokenList");
    var zs = Er("slice"), Js = we("species"), Xs = R.Array, Qs = Math.max;
    nn({ target: "Array", proto: true, forced: !zs }, { slice: function(e2, t2) {
      var n2, o2, r2, a2 = Z(this), s2 = Ut(a2), i2 = kt(e2, s2), c2 = kt(void 0 === t2 ? s2 : t2, s2);
      if (Fn(a2) && (n2 = a2.constructor, (Yn(n2) && (n2 === Xs || Fn(n2.prototype)) || te(n2) && null === (n2 = n2[Js])) && (n2 = void 0), n2 === Xs || void 0 === n2))
        return _r(a2, i2, c2);
      for (o2 = new (void 0 === n2 ? Xs : n2)(Qs(c2 - i2, 0)), r2 = 0; i2 < c2; i2++, r2++)
        i2 in a2 && Mo(o2, r2, a2[i2]);
      return o2.length = r2, o2;
    } });
    var Zs = H([].join), ei = J != Object, ti = eo("join", ",");
    nn({ target: "Array", proto: true, forced: ei || !ti }, { join: function(e2) {
      return Zs(Z(this), void 0 === e2 ? "," : e2);
    } });
    var ni = wt.indexOf, oi = H([].indexOf), ri = !!oi && 1 / oi([1], 1, -0) < 0, ai = eo("indexOf");
    nn({ target: "Array", proto: true, forced: ri || !ai }, { indexOf: function(e2) {
      var t2 = arguments.length > 1 ? arguments[1] : void 0;
      return ri ? oi(this, e2, t2) || 0 : ni(this, e2, t2);
    } });
    var si = R.Array, ii = Math.max, ci = function(e2, t2, n2) {
      for (var o2 = Ut(e2), r2 = kt(t2, o2), a2 = kt(void 0 === n2 ? o2 : n2, o2), s2 = si(ii(a2 - r2, 0)), i2 = 0; r2 < a2; r2++, i2++)
        Mo(s2, i2, e2[r2]);
      return s2.length = i2, s2;
    }, ui = Kt.f, li = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [], di = { f: function(e2) {
      return li && "Window" == Y(e2) ? function(e3) {
        try {
          return ui(e3);
        } catch (fS) {
          return ci(li);
        }
      }(e2) : ui(Z(e2));
    } }, pi = di.f, gi = L(function() {
      return !Object.getOwnPropertyNames(1);
    });
    nn({ target: "Object", stat: true, forced: gi }, { getOwnPropertyNames: pi });
    var _i = Zn.find, hi = true;
    "find" in [] && Array(1).find(function() {
      hi = false;
    }), nn({ target: "Array", proto: true, forced: hi }, { find: function(e2) {
      return _i(this, e2, arguments.length > 1 ? arguments[1] : void 0);
    } }), ja("find");
    var fi, mi = Ye.f, Mi = H("".startsWith), vi = H("".slice), yi = Math.min, Ii = Qa("startsWith"), Ei = !(Ii || (fi = mi(String.prototype, "startsWith"), !fi || fi.writable));
    nn({ target: "String", proto: true, forced: !Ei && !Ii }, { startsWith: function(e2) {
      var t2 = dn(Q(this));
      Ja(e2);
      var n2 = Pt(yi(arguments.length > 1 ? arguments[1] : void 0, t2.length)), o2 = dn(e2);
      return Mi ? Mi(t2, o2, n2) : vi(t2, n2, n2 + o2.length) === o2;
    } });
    var Ti, Si, Ci, Ai, Di = R.Promise, Ni = function(e2, t2, n2) {
      for (var o2 in t2)
        At(e2, o2, t2[o2], n2);
      return e2;
    }, Oi = we("species"), Ri = function(e2) {
      var t2 = oe(e2), n2 = nt.f;
      k && t2 && !t2[Oi] && n2(t2, Oi, { configurable: true, get: function() {
        return this;
      } });
    }, Li = R.TypeError, ki = function(e2, t2) {
      if (re(t2, e2))
        return e2;
      throw Li("Incorrect invocation");
    }, Gi = R.TypeError, Pi = function(e2, t2) {
      this.stopped = e2, this.result = t2;
    }, Ui = Pi.prototype, bi = function(e2, t2, n2) {
      var o2, r2, a2, s2, i2, c2, u2, l2 = n2 && n2.that, d2 = !(!n2 || !n2.AS_ENTRIES), p3 = !(!n2 || !n2.IS_ITERATOR), g2 = !(!n2 || !n2.INTERRUPTED), _2 = wn(t2, l2), h3 = function(e3) {
        return o2 && po(o2, "normal", e3), new Pi(true, e3);
      }, f2 = function(e3) {
        return d2 ? (Xe(e3), g2 ? _2(e3[0], e3[1], h3) : _2(e3[0], e3[1])) : g2 ? _2(e3, h3) : _2(e3);
      };
      if (p3)
        o2 = e2;
      else {
        if (!(r2 = yo(e2)))
          throw Gi(fe(e2) + " is not iterable");
        if (mo(r2)) {
          for (a2 = 0, s2 = Ut(e2); s2 > a2; a2++)
            if ((i2 = f2(e2[a2])) && re(Ui, i2))
              return i2;
          return new Pi(false);
        }
        o2 = Eo(e2, r2);
      }
      for (c2 = o2.next; !(u2 = U(c2, o2)).done; ) {
        try {
          i2 = f2(u2.value);
        } catch (fS) {
          po(o2, "throw", fS);
        }
        if ("object" == typeof i2 && i2 && re(Ui, i2))
          return i2;
      }
      return new Pi(false);
    }, wi = R.TypeError, Fi = function(e2) {
      if (Yn(e2))
        return e2;
      throw wi(fe(e2) + " is not a constructor");
    }, qi = we("species"), Vi = function(e2, t2) {
      var n2, o2 = Xe(e2).constructor;
      return void 0 === o2 || null == (n2 = Xe(o2)[qi]) ? t2 : Fi(n2);
    }, xi = R.TypeError, Bi = function(e2, t2) {
      if (e2 < t2)
        throw xi("Not enough arguments");
      return e2;
    }, Ki = /(?:ipad|iphone|ipod).*applewebkit/i.test(ae), Hi = "process" == Y(R.process), ji = R.setImmediate, Wi = R.clearImmediate, Yi = R.process, $i = R.Dispatch, zi = R.Function, Ji = R.MessageChannel, Xi = R.String, Qi = 0, Zi = {};
    try {
      Ti = R.location;
    } catch (fS) {
    }
    var ec = function(e2) {
      if (Ne(Zi, e2)) {
        var t2 = Zi[e2];
        delete Zi[e2], t2();
      }
    }, tc = function(e2) {
      return function() {
        ec(e2);
      };
    }, nc = function(e2) {
      ec(e2.data);
    }, oc = function(e2) {
      R.postMessage(Xi(e2), Ti.protocol + "//" + Ti.host);
    };
    ji && Wi || (ji = function(e2) {
      Bi(arguments.length, 1);
      var t2 = ee(e2) ? e2 : zi(e2), n2 = _r(arguments, 1);
      return Zi[++Qi] = function() {
        Es(t2, void 0, n2);
      }, Si(Qi), Qi;
    }, Wi = function(e2) {
      delete Zi[e2];
    }, Hi ? Si = function(e2) {
      Yi.nextTick(tc(e2));
    } : $i && $i.now ? Si = function(e2) {
      $i.now(tc(e2));
    } : Ji && !Ki ? (Ai = (Ci = new Ji()).port2, Ci.port1.onmessage = nc, Si = wn(Ai.postMessage, Ai)) : R.addEventListener && ee(R.postMessage) && !R.importScripts && Ti && "file:" !== Ti.protocol && !L(oc) ? (Si = oc, R.addEventListener("message", nc, false)) : Si = "onreadystatechange" in He("script") ? function(e2) {
      On.appendChild(He("script")).onreadystatechange = function() {
        On.removeChild(this), ec(e2);
      };
    } : function(e2) {
      setTimeout(tc(e2), 0);
    });
    var rc, ac, sc, ic, cc, uc, lc, dc, pc = { set: ji, clear: Wi }, gc = /ipad|iphone|ipod/i.test(ae) && void 0 !== R.Pebble, _c = /web0s(?!.*chrome)/i.test(ae), hc = Ye.f, fc = pc.set, mc = R.MutationObserver || R.WebKitMutationObserver, Mc = R.document, vc = R.process, yc = R.Promise, Ic = hc(R, "queueMicrotask"), Ec = Ic && Ic.value;
    Ec || (rc = function() {
      var e2, t2;
      for (Hi && (e2 = vc.domain) && e2.exit(); ac; ) {
        t2 = ac.fn, ac = ac.next;
        try {
          t2();
        } catch (fS) {
          throw ac ? ic() : sc = void 0, fS;
        }
      }
      sc = void 0, e2 && e2.enter();
    }, Ki || Hi || _c || !mc || !Mc ? !gc && yc && yc.resolve ? ((lc = yc.resolve(void 0)).constructor = yc, dc = wn(lc.then, lc), ic = function() {
      dc(rc);
    }) : Hi ? ic = function() {
      vc.nextTick(rc);
    } : (fc = wn(fc, R), ic = function() {
      fc(rc);
    }) : (cc = true, uc = Mc.createTextNode(""), new mc(rc).observe(uc, { characterData: true }), ic = function() {
      uc.data = cc = !cc;
    }));
    var Tc = Ec || function(e2) {
      var t2 = { fn: e2, next: void 0 };
      sc && (sc.next = t2), ac || (ac = t2, ic()), sc = t2;
    }, Sc = function(e2) {
      var t2, n2;
      this.promise = new e2(function(e3, o2) {
        if (void 0 !== t2 || void 0 !== n2)
          throw TypeError("Bad Promise constructor");
        t2 = e3, n2 = o2;
      }), this.resolve = Me(t2), this.reject = Me(n2);
    }, Cc = { f: function(e2) {
      return new Sc(e2);
    } }, Ac = function(e2, t2) {
      if (Xe(e2), te(t2) && t2.constructor === e2)
        return t2;
      var n2 = Cc.f(e2);
      return (0, n2.resolve)(t2), n2.promise;
    }, Dc = function(e2) {
      try {
        return { error: false, value: e2() };
      } catch (fS) {
        return { error: true, value: fS };
      }
    }, Nc = function() {
      this.head = null, this.tail = null;
    };
    Nc.prototype = { add: function(e2) {
      var t2 = { item: e2, next: null };
      this.head ? this.tail.next = t2 : this.head = t2, this.tail = t2;
    }, get: function() {
      var e2 = this.head;
      if (e2)
        return this.head = e2.next, this.tail === e2 && (this.tail = null), e2.item;
    } };
    var Oc, Rc, Lc, kc, Gc = Nc, Pc = "object" == typeof window, Uc = pc.set, bc = we("species"), wc = "Promise", Fc = It.getterFor(wc), qc = It.set, Vc = It.getterFor(wc), xc = Di && Di.prototype, Bc = Di, Kc = xc, Hc = R.TypeError, jc = R.document, Wc = R.process, Yc = Cc.f, $c = Yc, zc = !!(jc && jc.createEvent && R.dispatchEvent), Jc = ee(R.PromiseRejectionEvent), Xc = false, Qc = en(wc, function() {
      var e2 = ct(Bc), t2 = e2 !== String(Bc);
      if (!t2 && 66 === le)
        return true;
      if (le >= 51 && /native code/.test(e2))
        return false;
      var n2 = new Bc(function(e3) {
        e3(1);
      }), o2 = function(e3) {
        e3(function() {
        }, function() {
        });
      };
      return (n2.constructor = {})[bc] = o2, !(Xc = n2.then(function() {
      }) instanceof o2) || !t2 && Pc && !Jc;
    }), Zc = Qc || !Oo(function(e2) {
      Bc.all(e2).catch(function() {
      });
    }), eu = function(e2) {
      var t2;
      return !(!te(e2) || !ee(t2 = e2.then)) && t2;
    }, tu = function(e2, t2) {
      var n2, o2, r2, a2 = t2.value, s2 = 1 == t2.state, i2 = s2 ? e2.ok : e2.fail, c2 = e2.resolve, u2 = e2.reject, l2 = e2.domain;
      try {
        i2 ? (s2 || (2 === t2.rejection && su(t2), t2.rejection = 1), true === i2 ? n2 = a2 : (l2 && l2.enter(), n2 = i2(a2), l2 && (l2.exit(), r2 = true)), n2 === e2.promise ? u2(Hc("Promise-chain cycle")) : (o2 = eu(n2)) ? U(o2, n2, c2, u2) : c2(n2)) : u2(a2);
      } catch (fS) {
        l2 && !r2 && l2.exit(), u2(fS);
      }
    }, nu = function(e2, t2) {
      e2.notified || (e2.notified = true, Tc(function() {
        for (var n2, o2 = e2.reactions; n2 = o2.get(); )
          tu(n2, e2);
        e2.notified = false, t2 && !e2.rejection && ru(e2);
      }));
    }, ou = function(e2, t2, n2) {
      var o2, r2;
      zc ? ((o2 = jc.createEvent("Event")).promise = t2, o2.reason = n2, o2.initEvent(e2, false, true), R.dispatchEvent(o2)) : o2 = { promise: t2, reason: n2 }, !Jc && (r2 = R["on" + e2]) ? r2(o2) : "unhandledrejection" === e2 && function(e3, t3) {
        var n3 = R.console;
        n3 && n3.error && (1 == arguments.length ? n3.error(e3) : n3.error(e3, t3));
      }("Unhandled promise rejection", n2);
    }, ru = function(e2) {
      U(Uc, R, function() {
        var t2, n2 = e2.facade, o2 = e2.value;
        if (au(e2) && (t2 = Dc(function() {
          Hi ? Wc.emit("unhandledRejection", o2, n2) : ou("unhandledrejection", n2, o2);
        }), e2.rejection = Hi || au(e2) ? 2 : 1, t2.error))
          throw t2.value;
      });
    }, au = function(e2) {
      return 1 !== e2.rejection && !e2.parent;
    }, su = function(e2) {
      U(Uc, R, function() {
        var t2 = e2.facade;
        Hi ? Wc.emit("rejectionHandled", t2) : ou("rejectionhandled", t2, e2.value);
      });
    }, iu = function(e2, t2, n2) {
      return function(o2) {
        e2(t2, o2, n2);
      };
    }, cu = function(e2, t2, n2) {
      e2.done || (e2.done = true, n2 && (e2 = n2), e2.value = t2, e2.state = 2, nu(e2, true));
    }, uu = function(e2, t2, n2) {
      if (!e2.done) {
        e2.done = true, n2 && (e2 = n2);
        try {
          if (e2.facade === t2)
            throw Hc("Promise can't be resolved itself");
          var o2 = eu(t2);
          o2 ? Tc(function() {
            var n3 = { done: false };
            try {
              U(o2, t2, iu(uu, n3, e2), iu(cu, n3, e2));
            } catch (fS) {
              cu(n3, fS, e2);
            }
          }) : (e2.value = t2, e2.state = 1, nu(e2, false));
        } catch (fS) {
          cu({ done: false }, fS, e2);
        }
      }
    };
    if (Qc && (Kc = (Bc = function(e2) {
      ki(this, Kc), Me(e2), U(Oc, this);
      var t2 = Fc(this);
      try {
        e2(iu(uu, t2), iu(cu, t2));
      } catch (fS) {
        cu(t2, fS);
      }
    }).prototype, (Oc = function(e2) {
      qc(this, { type: wc, done: false, notified: false, parent: false, reactions: new Gc(), rejection: false, state: 0, value: void 0 });
    }).prototype = Ni(Kc, { then: function(e2, t2) {
      var n2 = Vc(this), o2 = Yc(Vi(this, Bc));
      return n2.parent = true, o2.ok = !ee(e2) || e2, o2.fail = ee(t2) && t2, o2.domain = Hi ? Wc.domain : void 0, 0 == n2.state ? n2.reactions.add(o2) : Tc(function() {
        tu(o2, n2);
      }), o2.promise;
    }, catch: function(e2) {
      return this.then(void 0, e2);
    } }), Rc = function() {
      var e2 = new Oc(), t2 = Fc(e2);
      this.promise = e2, this.resolve = iu(uu, t2), this.reject = iu(cu, t2);
    }, Cc.f = Yc = function(e2) {
      return e2 === Bc || e2 === Lc ? new Rc(e2) : $c(e2);
    }, ee(Di) && xc !== Object.prototype)) {
      kc = xc.then, Xc || (At(xc, "then", function(e2, t2) {
        var n2 = this;
        return new Bc(function(e3, t3) {
          U(kc, n2, e3, t3);
        }).then(e2, t2);
      }, { unsafe: true }), At(xc, "catch", Kc.catch, { unsafe: true }));
      try {
        delete xc.constructor;
      } catch (fS) {
      }
      tr && tr(xc, Kc);
    }
    nn({ global: true, wrap: true, forced: Qc }, { Promise: Bc }), zo(Bc, wc, false), Ri(wc), Lc = oe(wc), nn({ target: wc, stat: true, forced: Qc }, { reject: function(e2) {
      var t2 = Yc(this);
      return U(t2.reject, void 0, e2), t2.promise;
    } }), nn({ target: wc, stat: true, forced: Qc }, { resolve: function(e2) {
      return Ac(this, e2);
    } }), nn({ target: wc, stat: true, forced: Zc }, { all: function(e2) {
      var t2 = this, n2 = Yc(t2), o2 = n2.resolve, r2 = n2.reject, a2 = Dc(function() {
        var n3 = Me(t2.resolve), a3 = [], s2 = 0, i2 = 1;
        bi(e2, function(e3) {
          var c2 = s2++, u2 = false;
          i2++, U(n3, t2, e3).then(function(e4) {
            u2 || (u2 = true, a3[c2] = e4, --i2 || o2(a3));
          }, r2);
        }), --i2 || o2(a3);
      });
      return a2.error && r2(a2.value), n2.promise;
    }, race: function(e2) {
      var t2 = this, n2 = Yc(t2), o2 = n2.reject, r2 = Dc(function() {
        var r3 = Me(t2.resolve);
        bi(e2, function(e3) {
          U(r3, t2, e3).then(n2.resolve, o2);
        });
      });
      return r2.error && o2(r2.value), n2.promise;
    } });
    var lu = ca.UNSUPPORTED_Y, du = Math.min, pu = [].push, gu = H(/./.exec), _u = H(pu), hu = H("".slice);
    ba("split", function(e2, t2, n2) {
      var o2;
      return o2 = "c" == "abbc".split(/(b)*/)[1] || 4 != "test".split(/(?:)/, -1).length || 2 != "ab".split(/(?:ab)*/).length || 4 != ".".split(/(.?)(.?)/).length || ".".split(/()()/).length > 1 || "".split(/.?/).length ? function(e3, n3) {
        var o3 = dn(Q(this)), r2 = void 0 === n3 ? 4294967295 : n3 >>> 0;
        if (0 === r2)
          return [];
        if (void 0 === e3)
          return [o3];
        if (!$a(e3))
          return U(t2, o3, e3, r2);
        for (var a2, s2, i2, c2 = [], u2 = (e3.ignoreCase ? "i" : "") + (e3.multiline ? "m" : "") + (e3.unicode ? "u" : "") + (e3.sticky ? "y" : ""), l2 = 0, d2 = new RegExp(e3.source, u2 + "g"); (a2 = U(Sa, d2, o3)) && !((s2 = d2.lastIndex) > l2 && (_u(c2, hu(o3, l2, a2.index)), a2.length > 1 && a2.index < o3.length && Es(pu, c2, ci(a2, 1)), i2 = a2[0].length, l2 = s2, c2.length >= r2)); )
          d2.lastIndex === a2.index && d2.lastIndex++;
        return l2 === o3.length ? !i2 && gu(d2, "") || _u(c2, "") : _u(c2, hu(o3, l2)), c2.length > r2 ? ci(c2, 0, r2) : c2;
      } : "0".split(void 0, 0).length ? function(e3, n3) {
        return void 0 === e3 && 0 === n3 ? [] : U(t2, this, e3, n3);
      } : t2, [function(t3, n3) {
        var r2 = Q(this), a2 = null == t3 ? void 0 : ve(t3, e2);
        return a2 ? U(a2, t3, r2, n3) : U(o2, dn(r2), t3, n3);
      }, function(e3, r2) {
        var a2 = Xe(this), s2 = dn(e3), i2 = n2(o2, a2, s2, r2, o2 !== t2);
        if (i2.done)
          return i2.value;
        var c2 = Vi(a2, RegExp), u2 = a2.unicode, l2 = (a2.ignoreCase ? "i" : "") + (a2.multiline ? "m" : "") + (a2.unicode ? "u" : "") + (lu ? "g" : "y"), d2 = new c2(lu ? "^(?:" + a2.source + ")" : a2, l2), p3 = void 0 === r2 ? 4294967295 : r2 >>> 0;
        if (0 === p3)
          return [];
        if (0 === s2.length)
          return null === Va(d2, s2) ? [s2] : [];
        for (var g2 = 0, _2 = 0, h3 = []; _2 < s2.length; ) {
          d2.lastIndex = lu ? 0 : _2;
          var f2, m2 = Va(d2, lu ? hu(s2, _2) : s2);
          if (null === m2 || (f2 = du(Pt(d2.lastIndex + (lu ? _2 : 0)), s2.length)) === g2)
            _2 = Fa(s2, _2, u2);
          else {
            if (_u(h3, hu(s2, g2, _2)), h3.length === p3)
              return h3;
            for (var M2 = 1; M2 <= m2.length - 1; M2++)
              if (_u(h3, m2[M2]), h3.length === p3)
                return h3;
            _2 = g2 = f2;
          }
        }
        return _u(h3, hu(s2, g2)), h3;
      }];
    }, !!L(function() {
      var e2 = /(?:)/, t2 = e2.exec;
      e2.exec = function() {
        return t2.apply(this, arguments);
      };
      var n2 = "ab".split(e2);
      return 2 !== n2.length || "a" !== n2[0] || "b" !== n2[1];
    }), lu);
    var fu = Fo.codeAt;
    nn({ target: "String", proto: true }, { codePointAt: function(e2) {
      return fu(this, e2);
    } });
    var mu = Mn.trim, Mu = H("".charAt), vu = R.parseFloat, yu = R.Symbol, Iu = yu && yu.iterator, Eu = 1 / vu(pn + "-0") != -Infinity || Iu && !L(function() {
      vu(Object(Iu));
    }) ? function(e2) {
      var t2 = mu(dn(e2)), n2 = vu(t2);
      return 0 === n2 && "-" == Mu(t2, 0) ? -0 : n2;
    } : vu;
    nn({ global: true, forced: parseFloat != Eu }, { parseFloat: Eu });
    var Tu = function() {
      function e2() {
        var t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        o(this, e2), this.high = t2, this.low = n2;
      }
      return a(e2, [{ key: "equal", value: function(e3) {
        return null !== e3 && (this.low === e3.low && this.high === e3.high);
      } }, { key: "toString", value: function() {
        var e3 = Number(this.high).toString(16), t2 = Number(this.low).toString(16);
        if (t2.length < 8)
          for (var n2 = 8 - t2.length; n2; )
            t2 = "0" + t2, n2--;
        return e3 + t2;
      } }]), e2;
    }(), Su = { TEST: { CHINA: { DEFAULT: "wss://wss-dev.tim.qq.com" }, OVERSEA: { DEFAULT: "wss://wss-dev.tim.qq.com" }, SINGAPORE: { DEFAULT: "wss://wsssgp-dev.im.qcloud.com" }, KOREA: { DEFAULT: "wss://wsskr-dev.im.qcloud.com" }, GERMANY: { DEFAULT: "wss://wssger-dev.im.qcloud.com" }, IND: { DEFAULT: "wss://wssind-dev.im.qcloud.com" } }, PRODUCTION: { CHINA: { DEFAULT: "wss://wss.im.qcloud.com", BACKUP: "wss://wss.tim.qq.com", STAT: "https://api.im.qcloud.com" }, OVERSEA: { DEFAULT: "wss://wss.im.qcloud.com", BACKUP: "wss://wss.my-imcloud.com", STAT: "https://api.my-imcloud.com" }, SINGAPORE: { DEFAULT: "wss://wsssgp.im.qcloud.com", BACKUP: "wss://wsssgp.my-imcloud.com", STAT: "https://apisgp.my-imcloud.com" }, KOREA: { DEFAULT: "wss://wsskr.im.qcloud.com", BACKUP: "wss://wsskr.my-imcloud.com", STAT: "https://apikr.my-imcloud.com" }, GERMANY: { DEFAULT: "wss://wssger.im.qcloud.com", BACKUP: "wss://wssger.my-imcloud.com", STAT: "https://apiger.my-imcloud.com" }, IND: { DEFAULT: "wss://wssind.im.qcloud.com", BACKUP: "wss://wssind.my-imcloud.com", STAT: "https://apiind.my-imcloud.com" } } }, Cu = { WEB: 7, WX_MP: 8, QQ_MP: 9, TT_MP: 10, BAIDU_MP: 11, ALI_MP: 12, UNI_NATIVE_APP: 15 }, Au = "1.7.3", Du = 537048168, Nu = "CHINA", Ou = "OVERSEA", Ru = "SINGAPORE", Lu = "KOREA", ku = "GERMANY", Gu = "IND", Pu = { HOST: { CURRENT: { DEFAULT: "wss://wss.im.qcloud.com", STAT: "https://api.im.qcloud.com" }, setCurrent: function() {
      var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : Nu;
      this.CURRENT = Su.PRODUCTION[e2];
    } }, NAME: { OPEN_IM: "openim", GROUP: "group_open_http_svc", GROUP_COMMUNITY: "million_group_open_http_svc", GROUP_ATTR: "group_open_attr_http_svc", FRIEND: "sns", PROFILE: "profile", RECENT_CONTACT: "recentcontact", PIC: "openpic", BIG_GROUP_NO_AUTH: "group_open_http_noauth_svc", BIG_GROUP_LONG_POLLING: "group_open_long_polling_http_svc", BIG_GROUP_LONG_POLLING_NO_AUTH: "group_open_long_polling_http_noauth_svc", IM_OPEN_STAT: "imopenstat", WEB_IM: "webim", IM_COS_SIGN: "im_cos_sign_svr", CUSTOM_UPLOAD: "im_cos_msg", HEARTBEAT: "heartbeat", IM_OPEN_PUSH: "im_open_push", IM_OPEN_STATUS: "im_open_status", IM_LONG_MESSAGE: "im_long_msg", IM_CONFIG_MANAGER: "im_sdk_config_mgr", STAT_SERVICE: "StatSvc", OVERLOAD_PUSH: "OverLoadPush" }, CMD: { ACCESS_LAYER: "accesslayer", LOGIN: "wslogin", LOGOUT_LONG_POLL: "longpollinglogout", LOGOUT: "wslogout", HELLO: "wshello", PORTRAIT_GET: "portrait_get_all", PORTRAIT_SET: "portrait_set", GET_LONG_POLL_ID: "getlongpollingid", LONG_POLL: "longpolling", AVCHATROOM_LONG_POLL: "get_msg", ADD_FRIEND: "friend_add", UPDATE_FRIEND: "friend_update", GET_FRIEND_LIST: "friend_get", GET_FRIEND_PROFILE: "friend_get_list", DELETE_FRIEND: "friend_delete", CHECK_FRIEND: "friend_check", GET_FRIEND_GROUP_LIST: "group_get", RESPOND_FRIEND_APPLICATION: "friend_response", GET_FRIEND_APPLICATION_LIST: "pendency_get", DELETE_FRIEND_APPLICATION: "pendency_delete", REPORT_FRIEND_APPLICATION: "pendency_report", GET_GROUP_APPLICATION: "get_pendency", CREATE_FRIEND_GROUP: "group_add", DELETE_FRIEND_GROUP: "group_delete", UPDATE_FRIEND_GROUP: "group_update", GET_BLACKLIST: "black_list_get", ADD_BLACKLIST: "black_list_add", DELETE_BLACKLIST: "black_list_delete", CREATE_GROUP: "create_group", GET_JOINED_GROUPS: "get_joined_group_list", SET_GROUP_ATTRIBUTES: "set_group_attr", MODIFY_GROUP_ATTRIBUTES: "modify_group_attr", DELETE_GROUP_ATTRIBUTES: "delete_group_attr", CLEAR_GROUP_ATTRIBUTES: "clear_group_attr", GET_GROUP_ATTRIBUTES: "get_group_attr", SEND_MESSAGE: "sendmsg", REVOKE_C2C_MESSAGE: "msgwithdraw", DELETE_C2C_MESSAGE: "delete_c2c_msg_ramble", MODIFY_C2C_MESSAGE: "modify_c2c_msg", SEND_GROUP_MESSAGE: "send_group_msg", REVOKE_GROUP_MESSAGE: "group_msg_recall", DELETE_GROUP_MESSAGE: "delete_group_ramble_msg_by_seq", MODIFY_GROUP_MESSAGE: "modify_group_msg", GET_GROUP_INFO: "get_group_self_member_info", GET_GROUP_MEMBER_INFO: "get_specified_group_member_info", GET_GROUP_MEMBER_LIST: "get_group_member_info", QUIT_GROUP: "quit_group", CHANGE_GROUP_OWNER: "change_group_owner", DESTROY_GROUP: "destroy_group", ADD_GROUP_MEMBER: "add_group_member", DELETE_GROUP_MEMBER: "delete_group_member", SEARCH_GROUP_BY_ID: "get_group_public_info", APPLY_JOIN_GROUP: "apply_join_group", HANDLE_APPLY_JOIN_GROUP: "handle_apply_join_group", HANDLE_GROUP_INVITATION: "handle_invite_join_group", MODIFY_GROUP_INFO: "modify_group_base_info", MODIFY_GROUP_MEMBER_INFO: "modify_group_member_info", DELETE_GROUP_SYSTEM_MESSAGE: "deletemsg", DELETE_GROUP_AT_TIPS: "deletemsg", GET_CONVERSATION_LIST: "get", PAGING_GET_CONVERSATION_LIST: "page_get", DELETE_CONVERSATION: "delete", PIN_CONVERSATION: "top", GET_MESSAGES: "getmsg", GET_C2C_ROAM_MESSAGES: "getroammsg", SET_C2C_PEER_MUTE_NOTIFICATIONS: "set_c2c_peer_mute_notifications", GET_C2C_PEER_MUTE_NOTIFICATIONS: "get_c2c_peer_mute_notifications", GET_GROUP_ROAM_MESSAGES: "group_msg_get", GET_READ_RECEIPT: "get_group_msg_receipt", GET_READ_RECEIPT_DETAIL: "get_group_msg_receipt_detail", SEND_READ_RECEIPT: "group_msg_receipt", SEND_C2C_READ_RECEIPT: "c2c_msg_read_receipt", SET_C2C_MESSAGE_READ: "msgreaded", GET_PEER_READ_TIME: "get_peer_read_time", SET_GROUP_MESSAGE_READ: "msg_read_report", FILE_READ_AND_WRITE_AUTHKEY: "authkey", FILE_UPLOAD: "pic_up", COS_SIGN: "cos", COS_PRE_SIG: "pre_sig", VIDEO_COVER: "video_cover", TIM_WEB_REPORT_V2: "tim_web_report_v2", BIG_DATA_HALLWAY_AUTH_KEY: "authkey", GET_ONLINE_MEMBER_NUM: "get_online_member_num", ALIVE: "alive", MESSAGE_PUSH: "msg_push", MULTI_MESSAGE_PUSH: "multi_msg_push_ws", MESSAGE_PUSH_ACK: "ws_msg_push_ack", STATUS_FORCE_OFFLINE: "stat_forceoffline", DOWNLOAD_MERGER_MESSAGE: "get_relay_json_msg", UPLOAD_MERGER_MESSAGE: "save_relay_json_msg", FETCH_CLOUD_CONTROL_CONFIG: "fetch_config", PUSHED_CLOUD_CONTROL_CONFIG: "push_configv2", FETCH_COMMERCIAL_CONFIG: "fetch_imsdk_purchase_bitsv2", PUSHED_COMMERCIAL_CONFIG: "push_imsdk_purchase_bitsv2", KICK_OTHER: "KickOther", OVERLOAD_NOTIFY: "notify2", SET_ALL_MESSAGE_READ: "read_all_unread_msg", CREATE_TOPIC: "create_topic", DELETE_TOPIC: "destroy_topic", UPDATE_TOPIC_PROFILE: "modify_topic", GET_TOPIC_LIST: "get_topic", SET_SELF_STATUS: "ws_set_custom_status", GET_USER_STATUS: "ws_get_user_status", SUBSCRIBE_USER_STATUS: "ws_status_subscribe", UNSUBSCRIBE_USER_STATUS: "ws_status_unsubscribe" }, CHANNEL: { SOCKET: 1, XHR: 2, AUTO: 0 }, NAME_VERSION: { openim: "v4", group_open_http_svc: "v4", sns: "v4", profile: "v4", recentcontact: "v4", openpic: "v4", group_open_http_noauth_svc: "v4", group_open_long_polling_http_svc: "v4", group_open_long_polling_http_noauth_svc: "v4", imopenstat: "v4", im_cos_sign_svr: "v4", im_cos_msg: "v4", webim: "v4", im_open_push: "v4", im_open_status: "v4" } }, Uu = { SEARCH_MSG: new Tu(0, Math.pow(2, 0)).toString(), SEARCH_GRP_SNS: new Tu(0, Math.pow(2, 1)).toString(), AVCHATROOM_HISTORY_MSG: new Tu(0, Math.pow(2, 2)).toString(), GRP_COMMUNITY: new Tu(0, Math.pow(2, 3)).toString(), MSG_TO_SPECIFIED_GRP_MBR: new Tu(0, Math.pow(2, 4)).toString(), USER_STATUS: new Tu(0, Math.pow(2, 7)).toString() };
    Pu.HOST.setCurrent(Nu);
    var bu, wu = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), Fu = "undefined" != typeof qq && "function" == typeof qq.getSystemInfoSync && Boolean(qq.getSystemInfoSync().fontSizeSetting), qu = "undefined" != typeof tt && "function" == typeof tt.getSystemInfoSync && Boolean(tt.getSystemInfoSync().fontSizeSetting), Vu = "undefined" != typeof swan && "function" == typeof swan.getSystemInfoSync && Boolean(swan.getSystemInfoSync().fontSizeSetting), xu = "undefined" != typeof my && "function" == typeof my.getSystemInfoSync && Boolean(my.getSystemInfoSync().fontSizeSetting), Bu = "undefined" != typeof uni && "undefined" == typeof window, Ku = "undefined" != typeof uni, Hu = wu || Fu || qu || Vu || xu || Bu, ju = ("undefined" != typeof uni || "undefined" != typeof window) && !Hu, Wu = Fu ? qq : qu ? tt : Vu ? swan : xu ? my : wu ? wx : Bu ? uni : {}, Yu = (bu = "WEB", cl ? bu = "WEB" : Fu ? bu = "QQ_MP" : qu ? bu = "TT_MP" : Vu ? bu = "BAIDU_MP" : xu ? bu = "ALI_MP" : wu ? bu = "WX_MP" : Bu && (bu = "UNI_NATIVE_APP"), Cu[bu]), $u = ju && window && window.navigator && window.navigator.userAgent || "", zu = /AppleWebKit\/([\d.]+)/i.exec($u), Ju = (zu && parseFloat(zu.pop()), /iPad/i.test($u)), Xu = /iPhone/i.test($u) && !Ju, Qu = /iPod/i.test($u), Zu = Xu || Ju || Qu, el = function() {
      var e2 = $u.match(/OS (\d+)_/i);
      return e2 && e2[1] ? e2[1] : null;
    }(), tl = /Android/i.test($u), nl = function() {
      var e2 = $u.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
      if (!e2)
        return null;
      var t2 = e2[1] && parseFloat(e2[1]), n2 = e2[2] && parseFloat(e2[2]);
      return t2 && n2 ? parseFloat(e2[1] + "." + e2[2]) : t2 || null;
    }(), ol = (tl && /webkit/i.test($u), /Firefox/i.test($u), /Edge/i.test($u));
    !ol && /Chrome/i.test($u);
    var al = (function() {
      var e2 = $u.match(/Chrome\/(\d+)/);
      e2 && e2[1] && parseFloat(e2[1]);
    }(), /MSIE/.test($u) || $u.indexOf("Trident") > -1 && $u.indexOf("rv:11.0") > -1), sl = (/MSIE\s8\.0/.test($u), function() {
      var e2 = /MSIE\s(\d+)\.\d/.exec($u), t2 = e2 && parseFloat(e2[1]);
      return !t2 && /Trident\/7.0/i.test($u) && /rv:11.0/.test($u) && (t2 = 11), t2;
    }()), il = (/Safari/i.test($u), /TBS\/\d+/i.test($u)), cl = (function() {
      var e2 = $u.match(/TBS\/(\d+)/i);
      if (e2 && e2[1])
        e2[1];
    }(), !il && /MQQBrowser\/\d+/i.test($u), !il && / QQBrowser\/\d+/i.test($u), /(micromessenger|webbrowser)/i.test($u)), ul = /Windows/i.test($u), ll = /MAC OS X/i.test($u), dl = (/MicroMessenger/i.test($u), ju && "undefined" != typeof Worker && !al), pl = tl || Zu, gl = L(function() {
      if ("function" == typeof ArrayBuffer) {
        var e2 = new ArrayBuffer(8);
        Object.isExtensible(e2) && Object.defineProperty(e2, "a", { value: 8 });
      }
    }), _l = Object.isExtensible, hl = L(function() {
      _l(1);
    }) || gl ? function(e2) {
      return !!te(e2) && ((!gl || "ArrayBuffer" != Y(e2)) && (!_l || _l(e2)));
    } : _l, fl = !L(function() {
      return Object.isExtensible(Object.preventExtensions({}));
    }), ml = A(function(e2) {
      var t2 = nt.f, n2 = false, o2 = ke("meta"), r2 = 0, a2 = function(e3) {
        t2(e3, o2, { value: { objectID: "O" + r2++, weakData: {} } });
      }, s2 = e2.exports = { enable: function() {
        s2.enable = function() {
        }, n2 = true;
        var e3 = Kt.f, t3 = H([].splice), r3 = {};
        r3[o2] = 1, e3(r3).length && (Kt.f = function(n3) {
          for (var r4 = e3(n3), a3 = 0, s3 = r4.length; a3 < s3; a3++)
            if (r4[a3] === o2) {
              t3(r4, a3, 1);
              break;
            }
          return r4;
        }, nn({ target: "Object", stat: true, forced: true }, { getOwnPropertyNames: di.f }));
      }, fastKey: function(e3, t3) {
        if (!te(e3))
          return "symbol" == typeof e3 ? e3 : ("string" == typeof e3 ? "S" : "P") + e3;
        if (!Ne(e3, o2)) {
          if (!hl(e3))
            return "F";
          if (!t3)
            return "E";
          a2(e3);
        }
        return e3[o2].objectID;
      }, getWeakData: function(e3, t3) {
        if (!Ne(e3, o2)) {
          if (!hl(e3))
            return true;
          if (!t3)
            return false;
          a2(e3);
        }
        return e3[o2].weakData;
      }, onFreeze: function(e3) {
        return fl && n2 && hl(e3) && !Ne(e3, o2) && a2(e3), e3;
      } };
      gt[o2] = true;
    }), Ml = (ml.enable, ml.fastKey, ml.getWeakData, ml.onFreeze, nt.f), vl = ml.fastKey, yl = It.set, Il = It.getterFor;
    !function(e2, t2, n2) {
      var o2 = -1 !== e2.indexOf("Map"), r2 = -1 !== e2.indexOf("Weak"), a2 = o2 ? "set" : "add", s2 = R[e2], i2 = s2 && s2.prototype, c2 = s2, u2 = {}, l2 = function(e3) {
        var t3 = H(i2[e3]);
        At(i2, e3, "add" == e3 ? function(e4) {
          return t3(this, 0 === e4 ? 0 : e4), this;
        } : "delete" == e3 ? function(e4) {
          return !(r2 && !te(e4)) && t3(this, 0 === e4 ? 0 : e4);
        } : "get" == e3 ? function(e4) {
          return r2 && !te(e4) ? void 0 : t3(this, 0 === e4 ? 0 : e4);
        } : "has" == e3 ? function(e4) {
          return !(r2 && !te(e4)) && t3(this, 0 === e4 ? 0 : e4);
        } : function(e4, n3) {
          return t3(this, 0 === e4 ? 0 : e4, n3), this;
        });
      };
      if (en(e2, !ee(s2) || !(r2 || i2.forEach && !L(function() {
        new s2().entries().next();
      }))))
        c2 = n2.getConstructor(t2, e2, o2, a2), ml.enable();
      else if (en(e2, true)) {
        var d2 = new c2(), p3 = d2[a2](r2 ? {} : -0, 1) != d2, g2 = L(function() {
          d2.has(1);
        }), _2 = Oo(function(e3) {
          new s2(e3);
        }), h3 = !r2 && L(function() {
          for (var e3 = new s2(), t3 = 5; t3--; )
            e3[a2](t3, t3);
          return !e3.has(-0);
        });
        _2 || ((c2 = t2(function(e3, t3) {
          ki(e3, i2);
          var n3 = Fr(new s2(), e3, c2);
          return null != t3 && bi(t3, n3[a2], { that: n3, AS_ENTRIES: o2 }), n3;
        })).prototype = i2, i2.constructor = c2), (g2 || h3) && (l2("delete"), l2("has"), o2 && l2("get")), (h3 || p3) && l2(a2), r2 && i2.clear && delete i2.clear;
      }
      u2[e2] = c2, nn({ global: true, forced: c2 != s2 }, u2), zo(c2, e2), r2 || n2.setStrong(c2, e2, o2);
    }("Map", function(e2) {
      return function() {
        return e2(this, arguments.length ? arguments[0] : void 0);
      };
    }, { getConstructor: function(e2, t2, n2, o2) {
      var r2 = e2(function(e3, r3) {
        ki(e3, a2), yl(e3, { type: t2, index: Un(null), first: void 0, last: void 0, size: 0 }), k || (e3.size = 0), null != r3 && bi(r3, e3[o2], { that: e3, AS_ENTRIES: n2 });
      }), a2 = r2.prototype, s2 = Il(t2), i2 = function(e3, t3, n3) {
        var o3, r3, a3 = s2(e3), i3 = c2(e3, t3);
        return i3 ? i3.value = n3 : (a3.last = i3 = { index: r3 = vl(t3, true), key: t3, value: n3, previous: o3 = a3.last, next: void 0, removed: false }, a3.first || (a3.first = i3), o3 && (o3.next = i3), k ? a3.size++ : e3.size++, "F" !== r3 && (a3.index[r3] = i3)), e3;
      }, c2 = function(e3, t3) {
        var n3, o3 = s2(e3), r3 = vl(t3);
        if ("F" !== r3)
          return o3.index[r3];
        for (n3 = o3.first; n3; n3 = n3.next)
          if (n3.key == t3)
            return n3;
      };
      return Ni(a2, { clear: function() {
        for (var e3 = s2(this), t3 = e3.index, n3 = e3.first; n3; )
          n3.removed = true, n3.previous && (n3.previous = n3.previous.next = void 0), delete t3[n3.index], n3 = n3.next;
        e3.first = e3.last = void 0, k ? e3.size = 0 : this.size = 0;
      }, delete: function(e3) {
        var t3 = s2(this), n3 = c2(this, e3);
        if (n3) {
          var o3 = n3.next, r3 = n3.previous;
          delete t3.index[n3.index], n3.removed = true, r3 && (r3.next = o3), o3 && (o3.previous = r3), t3.first == n3 && (t3.first = o3), t3.last == n3 && (t3.last = r3), k ? t3.size-- : this.size--;
        }
        return !!n3;
      }, forEach: function(e3) {
        for (var t3, n3 = s2(this), o3 = wn(e3, arguments.length > 1 ? arguments[1] : void 0); t3 = t3 ? t3.next : n3.first; )
          for (o3(t3.value, t3.key, this); t3 && t3.removed; )
            t3 = t3.previous;
      }, has: function(e3) {
        return !!c2(this, e3);
      } }), Ni(a2, n2 ? { get: function(e3) {
        var t3 = c2(this, e3);
        return t3 && t3.value;
      }, set: function(e3, t3) {
        return i2(this, 0 === e3 ? 0 : e3, t3);
      } } : { add: function(e3) {
        return i2(this, e3 = 0 === e3 ? 0 : e3, e3);
      } }), k && Ml(a2, "size", { get: function() {
        return s2(this).size;
      } }), r2;
    }, setStrong: function(e2, t2, n2) {
      var o2 = t2 + " Iterator", r2 = Il(t2), a2 = Il(o2);
      cr(e2, t2, function(e3, t3) {
        yl(this, { type: o2, target: e3, state: r2(e3), kind: t3, last: void 0 });
      }, function() {
        for (var e3 = a2(this), t3 = e3.kind, n3 = e3.last; n3 && n3.removed; )
          n3 = n3.previous;
        return e3.target && (e3.last = n3 = n3 ? n3.next : e3.state.first) ? "keys" == t3 ? { value: n3.key, done: false } : "values" == t3 ? { value: n3.value, done: false } : { value: [n3.key, n3.value], done: false } : (e3.target = void 0, { value: void 0, done: true });
      }, n2 ? "entries" : "values", !n2, true), Ri(t2);
    } });
    var El, Tl, Sl = "undefined" != typeof commonjsGlobal ? commonjsGlobal : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {};
    El = "undefined" != typeof console ? console : void 0 !== Sl && Sl.console ? Sl.console : "undefined" != typeof window && window.console ? window.console : {};
    for (var Cl = function() {
    }, Al = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn"], Dl = Al.length; Dl--; )
      Tl = Al[Dl], console[Tl] || (El[Tl] = Cl);
    var Nl = El, Ol = 0, Rl = function() {
      return new Date().getTime() + Ol;
    }, Ll = function() {
      Ol = 0;
    }, kl = function() {
      return Math.floor(Rl() / 1e3);
    }, Gl = 0, Pl = /* @__PURE__ */ new Map();
    function Ul() {
      var e2, t2 = ((e2 = new Date()).setTime(Rl()), e2);
      return "TIM " + t2.toLocaleTimeString("en-US", { hour12: false }) + "." + function(e3) {
        var t3;
        switch (e3.toString().length) {
          case 1:
            t3 = "00" + e3;
            break;
          case 2:
            t3 = "0" + e3;
            break;
          default:
            t3 = e3;
        }
        return t3;
      }(t2.getMilliseconds()) + ":";
    }
    var bl = { arguments2String: function(e2) {
      var t2;
      if (1 === e2.length)
        t2 = Ul() + e2[0];
      else {
        t2 = Ul();
        for (var n2 = 0, o2 = e2.length; n2 < o2; n2++)
          ed(e2[n2]) ? nd(e2[n2]) ? t2 += cd(e2[n2]) : t2 += JSON.stringify(e2[n2]) : t2 += e2[n2], t2 += " ";
      }
      return t2;
    }, debug: function() {
      if (Gl <= -1) {
        var e2 = this.arguments2String(arguments);
        Nl.debug(e2);
      }
    }, log: function() {
      if (Gl <= 0) {
        var e2 = this.arguments2String(arguments);
        Nl.log(e2);
      }
    }, info: function() {
      if (Gl <= 1) {
        var e2 = this.arguments2String(arguments);
        Nl.info(e2);
      }
    }, warn: function() {
      if (Gl <= 2) {
        var e2 = this.arguments2String(arguments);
        Nl.warn(e2);
      }
    }, error: function() {
      if (Gl <= 3) {
        var e2 = this.arguments2String(arguments);
        Nl.error(e2);
      }
    }, time: function(e2) {
      Pl.set(e2, sd.now());
    }, timeEnd: function(e2) {
      if (Pl.has(e2)) {
        var t2 = sd.now() - Pl.get(e2);
        return Pl.delete(e2), t2;
      }
      return Nl.warn("\u672A\u627E\u5230\u5BF9\u5E94label: ".concat(e2, ", \u8BF7\u5728\u8C03\u7528 logger.timeEnd \u524D\uFF0C\u8C03\u7528 logger.time")), 0;
    }, setLevel: function(e2) {
      e2 < 4 && Nl.log(Ul() + "set level from " + Gl + " to " + e2), Gl = e2;
    }, getLevel: function() {
      return Gl;
    } }, wl = { JPG: 1, JPEG: 1, GIF: 2, PNG: 3, BMP: 4, UNKNOWN: 255 }, Fl = { NICK: "Tag_Profile_IM_Nick", GENDER: "Tag_Profile_IM_Gender", BIRTHDAY: "Tag_Profile_IM_BirthDay", LOCATION: "Tag_Profile_IM_Location", SELFSIGNATURE: "Tag_Profile_IM_SelfSignature", ALLOWTYPE: "Tag_Profile_IM_AllowType", LANGUAGE: "Tag_Profile_IM_Language", AVATAR: "Tag_Profile_IM_Image", MESSAGESETTINGS: "Tag_Profile_IM_MsgSettings", ADMINFORBIDTYPE: "Tag_Profile_IM_AdminForbidType", LEVEL: "Tag_Profile_IM_Level", ROLE: "Tag_Profile_IM_Role" }, ql = { UNKNOWN: "Gender_Type_Unknown", FEMALE: "Gender_Type_Female", MALE: "Gender_Type_Male" }, Vl = { NONE: "AdminForbid_Type_None", SEND_OUT: "AdminForbid_Type_SendOut" }, xl = { NEED_CONFIRM: "AllowType_Type_NeedConfirm", ALLOW_ANY: "AllowType_Type_AllowAny", DENY_ANY: "AllowType_Type_DenyAny" }, Bl = "JoinedSuccess", Kl = "WaitAdminApproval", Hl = "@TGS#_", jl = "@TOPIC#_", Wl = ["url"], Yl = function(e2) {
      return "file" === od(e2);
    }, $l = function(e2) {
      return null !== e2 && ("number" == typeof e2 && !isNaN(e2 - 0) || "object" === n(e2) && e2.constructor === Number);
    }, zl = function(e2) {
      return "string" == typeof e2;
    }, Jl = function(e2) {
      return null !== e2 && "object" === n(e2);
    }, Xl = function(e2) {
      if ("object" !== n(e2) || null === e2)
        return false;
      var t2 = Object.getPrototypeOf(e2);
      if (null === t2)
        return true;
      for (var o2 = t2; null !== Object.getPrototypeOf(o2); )
        o2 = Object.getPrototypeOf(o2);
      return t2 === o2;
    }, Ql = function(e2) {
      return "function" == typeof Array.isArray ? Array.isArray(e2) : "array" === od(e2);
    }, Zl = function(e2) {
      return void 0 === e2;
    }, ed = function(e2) {
      return Ql(e2) || Jl(e2);
    }, td = function(e2) {
      return "function" == typeof e2;
    }, nd = function(e2) {
      return e2 instanceof Error;
    }, od = function(e2) {
      return Object.prototype.toString.call(e2).match(/^\[object (.*)\]$/)[1].toLowerCase();
    }, rd = function(e2) {
      if ("string" != typeof e2)
        return false;
      var t2 = e2[0];
      return !/[^a-zA-Z0-9]/.test(t2);
    }, ad = 0;
    Date.now || (Date.now = function() {
      return new Date().getTime();
    });
    var sd = { now: function() {
      0 === ad && (ad = Date.now() - 1);
      var e2 = Date.now() - ad;
      return e2 > 4294967295 ? (ad += 4294967295, Date.now() - ad) : e2;
    }, utc: function() {
      return Math.round(Date.now() / 1e3);
    } }, id = function e2(t2, n2, o2, r2) {
      if (!ed(t2) || !ed(n2))
        return 0;
      for (var a2, s2 = 0, i2 = Object.keys(n2), c2 = 0, u2 = i2.length; c2 < u2; c2++)
        if (a2 = i2[c2], !(Zl(n2[a2]) || o2 && o2.includes(a2)))
          if (ed(t2[a2]) && ed(n2[a2]))
            s2 += e2(t2[a2], n2[a2], o2, r2);
          else {
            if (r2 && r2.includes(n2[a2]))
              continue;
            t2[a2] !== n2[a2] && (t2[a2] = n2[a2], s2 += 1);
          }
      return s2;
    }, cd = function(e2) {
      return JSON.stringify(e2, ["message", "code"]);
    }, ud = function(e2) {
      if (0 === e2.length)
        return 0;
      for (var t2 = 0, n2 = 0, o2 = "undefined" != typeof document && void 0 !== document.characterSet ? document.characterSet : "UTF-8"; void 0 !== e2[t2]; )
        n2 += e2[t2++].charCodeAt[t2] <= 255 ? 1 : false === o2 ? 3 : 2;
      return n2;
    }, ld = function(e2) {
      var t2 = e2 || 99999999;
      return Math.round(Math.random() * t2);
    }, dd = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", pd = dd.length, gd = function(e2, t2) {
      for (var n2 in e2)
        if (e2[n2] === t2)
          return true;
      return false;
    }, _d = {}, hd = function() {
      if (Hu)
        return "https:";
      if (ju && "undefined" == typeof window)
        return "https:";
      var e2 = window.location.protocol;
      return ["http:", "https:"].indexOf(e2) < 0 && (e2 = "http:"), e2;
    }, fd = function(e2) {
      return -1 === e2.indexOf("http://") || -1 === e2.indexOf("https://") ? "https://" + e2 : e2.replace(/https|http/, "https");
    }, md = function e2(t2) {
      if (0 === Object.getOwnPropertyNames(t2).length)
        return /* @__PURE__ */ Object.create(null);
      var o2 = Array.isArray(t2) ? [] : /* @__PURE__ */ Object.create(null), r2 = "";
      for (var a2 in t2)
        null !== t2[a2] ? void 0 !== t2[a2] ? (r2 = n(t2[a2]), ["string", "number", "function", "boolean"].indexOf(r2) >= 0 ? o2[a2] = t2[a2] : o2[a2] = e2(t2[a2])) : o2[a2] = void 0 : o2[a2] = null;
      return o2;
    };
    function Md(e2, t2) {
      Ql(e2) && Ql(t2) ? t2.forEach(function(t3) {
        var n2 = t3.key, o2 = t3.value, r2 = e2.find(function(e3) {
          return e3.key === n2;
        });
        r2 ? r2.value = o2 : e2.push({ key: n2, value: o2 });
      }) : bl.warn("updateCustomField target \u6216 source \u4E0D\u662F\u6570\u7EC4\uFF0C\u5FFD\u7565\u6B64\u6B21\u66F4\u65B0\u3002");
    }
    var vd = function(e2) {
      return e2 === gr.GRP_PUBLIC;
    }, yd = function(e2) {
      return e2 === gr.GRP_AVCHATROOM;
    }, Id = function(e2) {
      var t2 = e2.type, n2 = e2.groupID;
      return t2 === gr.GRP_COMMUNITY || "".concat(n2).startsWith(Hl) && !"".concat(n2).includes(jl);
    }, Ed = function(e2) {
      return "".concat(e2).startsWith(Hl) && "".concat(e2).includes(jl);
    }, Td = function(e2) {
      return zl(e2) && e2.slice(0, 3) === gr.CONV_C2C;
    }, Sd = function(e2) {
      return zl(e2) && e2.slice(0, 5) === gr.CONV_GROUP;
    }, Cd = function(e2) {
      return zl(e2) && e2 === gr.CONV_SYSTEM;
    };
    function Ad(e2, t2) {
      var n2 = {};
      return Object.keys(e2).forEach(function(o2) {
        n2[o2] = t2(e2[o2], o2);
      }), n2;
    }
    function Dd(e2) {
      return Hu ? new Promise(function(t2, n2) {
        Wu.getImageInfo({ src: e2, success: function(e3) {
          t2({ width: e3.width, height: e3.height });
        }, fail: function() {
          t2({ width: 0, height: 0 });
        } });
      }) : al && 9 === sl ? Promise.resolve({ width: 0, height: 0 }) : new Promise(function(t2, n2) {
        var o2 = new Image();
        o2.onload = function() {
          t2({ width: this.width, height: this.height }), o2 = null;
        }, o2.onerror = function() {
          t2({ width: 0, height: 0 }), o2 = null;
        }, o2.src = e2;
      });
    }
    function Nd() {
      function e2() {
        return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
      }
      return "".concat(e2() + e2()).concat(e2()).concat(e2()).concat(e2()).concat(e2()).concat(e2()).concat(e2());
    }
    function Od() {
      var e2 = "unknown";
      if (ll && (e2 = "mac"), ul && (e2 = "windows"), Zu && (e2 = "ios"), tl && (e2 = "android"), Hu)
        try {
          var t2 = Wu.getSystemInfoSync().platform;
          void 0 !== t2 && (e2 = t2);
        } catch (fS) {
        }
      return e2;
    }
    function Rd(e2, t2) {
      e2 = e2.split("."), t2 = t2.split(".");
      for (var n2 = Math.max(e2.length, t2.length); e2.length < n2; )
        e2.push("0");
      for (; t2.length < n2; )
        t2.push("0");
      for (var o2 = 0; o2 < n2; o2++) {
        var r2 = parseInt(e2[o2]), a2 = parseInt(t2[o2]);
        if (r2 > a2)
          return 1;
        if (r2 < a2)
          return -1;
      }
      return 0;
    }
    function Ld(e2) {
      var t2 = e2.originUrl, n2 = void 0 === t2 ? void 0 : t2, o2 = e2.originWidth, r2 = e2.originHeight, a2 = e2.min, s2 = void 0 === a2 ? 198 : a2, i2 = parseInt(o2), c2 = parseInt(r2), u2 = { url: void 0, width: 0, height: 0 };
      if ((i2 <= c2 ? i2 : c2) <= s2)
        u2.url = n2, u2.width = i2, u2.height = c2;
      else {
        c2 <= i2 ? (u2.width = Math.ceil(i2 * s2 / c2), u2.height = s2) : (u2.width = s2, u2.height = Math.ceil(c2 * s2 / i2));
        var l2 = n2 && n2.indexOf("?") > -1 ? "".concat(n2, "&") : "".concat(n2, "?");
        u2.url = "".concat(l2, 198 === s2 ? "imageView2/3/w/198/h/198" : "imageView2/3/w/720/h/720");
      }
      return Zl(n2) ? g(u2, Wl) : u2;
    }
    function kd(e2) {
      var t2 = e2[2];
      e2[2] = e2[1], e2[1] = t2;
      for (var n2 = 0; n2 < e2.length; n2++)
        e2[n2].setType(n2);
    }
    function Gd(e2) {
      var t2 = e2.servcmd;
      return t2.slice(t2.indexOf(".") + 1);
    }
    function Pd(e2, t2) {
      return Math.round(Number(e2) * Math.pow(10, t2)) / Math.pow(10, t2);
    }
    function Ud(e2, t2) {
      return e2.includes(t2);
    }
    function bd(e2, t2) {
      return e2.includes(t2);
    }
    function wd(e2) {
      return e2.split(jl)[0];
    }
    var Fd = function(e2, t2) {
      if (Zl(t2))
        return "";
      switch (e2) {
        case gr.MSG_TEXT:
          return t2.text;
        case gr.MSG_IMAGE:
          return "[\u56FE\u7247]";
        case gr.MSG_LOCATION:
          return "[\u4F4D\u7F6E]";
        case gr.MSG_AUDIO:
          return "[\u8BED\u97F3]";
        case gr.MSG_VIDEO:
          return "[\u89C6\u9891]";
        case gr.MSG_FILE:
          return "[\u6587\u4EF6]";
        case gr.MSG_CUSTOM:
          return "[\u81EA\u5B9A\u4E49\u6D88\u606F]";
        case gr.MSG_GRP_TIP:
          return "[\u7FA4\u63D0\u793A\u6D88\u606F]";
        case gr.MSG_GRP_SYS_NOTICE:
          return "[\u7FA4\u7CFB\u7EDF\u901A\u77E5]";
        case gr.MSG_FACE:
          return "[\u52A8\u753B\u8868\u60C5]";
        case gr.MSG_MERGER:
          return "[\u804A\u5929\u8BB0\u5F55]";
        default:
          return "";
      }
    };
    function qd(e2) {
      return e2 === gr.MSG_TEXT || e2 === gr.MSG_CUSTOM || e2 === gr.MSG_LOCATION || e2 === gr.MSG_FACE;
    }
    var Vd = Object.prototype.hasOwnProperty;
    function xd(e2) {
      if (null == e2)
        return true;
      if ("boolean" == typeof e2)
        return false;
      if ("number" == typeof e2)
        return 0 === e2;
      if ("string" == typeof e2)
        return 0 === e2.length;
      if ("function" == typeof e2)
        return 0 === e2.length;
      if (Array.isArray(e2))
        return 0 === e2.length;
      if (e2 instanceof Error)
        return "" === e2.message;
      if (Xl(e2)) {
        for (var t2 in e2)
          if (Vd.call(e2, t2))
            return false;
        return true;
      }
      return !("map" !== od(e2) && !function(e3) {
        return "set" === od(e3);
      }(e2) && !Yl(e2)) && 0 === e2.size;
    }
    function Bd(e2, t2, n2) {
      if (void 0 === t2)
        return true;
      var o2 = true;
      if ("object" === wr(t2).toLowerCase())
        Object.keys(t2).forEach(function(r3) {
          var a2 = 1 === e2.length ? e2[0][r3] : void 0;
          o2 = !!Kd(a2, t2[r3], n2, r3) && o2;
        });
      else if ("array" === wr(t2).toLowerCase())
        for (var r2 = 0; r2 < t2.length; r2++)
          o2 = !!Kd(e2[r2], t2[r2], n2, t2[r2].name) && o2;
      if (o2)
        return o2;
      throw new Error("Params validate failed.");
    }
    function Kd(e2, t2, n2, o2) {
      if (void 0 === t2)
        return true;
      var r2 = true;
      return t2.required && xd(e2) && (Nl.error("TIM [".concat(n2, '] Missing required params: "').concat(o2, '".')), r2 = false), xd(e2) || wr(e2).toLowerCase() === t2.type.toLowerCase() || (Nl.error("TIM [".concat(n2, '] Invalid params: type check failed for "').concat(o2, '".Expected ').concat(t2.type, ".")), r2 = false), t2.validator && !t2.validator(e2) && (Nl.error("TIM [".concat(n2, "] Invalid params: custom validator check failed for params.")), r2 = false), r2;
    }
    var Hd = { f: we }, jd = R, Wd = nt.f, Yd = Zn.forEach, $d = pt("hidden"), zd = we("toPrimitive"), Jd = It.set, Xd = It.getterFor("Symbol"), Qd = Object.prototype, Zd = R.Symbol, ep = Zd && Zd.prototype, tp = R.TypeError, np = R.QObject, op = oe("JSON", "stringify"), rp = Ye.f, ap = nt.f, sp = di.f, ip = F.f, cp = H([].push), up = Se("symbols"), lp = Se("op-symbols"), dp = Se("string-to-symbol-registry"), pp = Se("symbol-to-string-registry"), gp = Se("wks"), _p = !np || !np.prototype || !np.prototype.findChild, hp = k && L(function() {
      return 7 != Un(ap({}, "a", { get: function() {
        return ap(this, "a", { value: 7 }).a;
      } })).a;
    }) ? function(e2, t2, n2) {
      var o2 = rp(Qd, t2);
      o2 && delete Qd[t2], ap(e2, t2, n2), o2 && e2 !== Qd && ap(Qd, t2, o2);
    } : ap, fp = function(e2, t2) {
      var n2 = up[e2] = Un(ep);
      return Jd(n2, { type: "Symbol", tag: e2, description: t2 }), k || (n2.description = t2), n2;
    }, mp = function(e2, t2, n2) {
      e2 === Qd && mp(lp, t2, n2), Xe(e2);
      var o2 = xe(t2);
      return Xe(n2), Ne(up, o2) ? (n2.enumerable ? (Ne(e2, $d) && e2[$d][o2] && (e2[$d][o2] = false), n2 = Un(n2, { enumerable: q(0, false) })) : (Ne(e2, $d) || ap(e2, $d, q(1, {})), e2[$d][o2] = true), hp(e2, o2, n2)) : ap(e2, o2, n2);
    }, Mp = function(e2, t2) {
      Xe(e2);
      var n2 = Z(t2), o2 = Dn(n2).concat(Ep(n2));
      return Yd(o2, function(t3) {
        k && !U(vp, n2, t3) || mp(e2, t3, n2[t3]);
      }), e2;
    }, vp = function(e2) {
      var t2 = xe(e2), n2 = U(ip, this, t2);
      return !(this === Qd && Ne(up, t2) && !Ne(lp, t2)) && (!(n2 || !Ne(this, t2) || !Ne(up, t2) || Ne(this, $d) && this[$d][t2]) || n2);
    }, yp = function(e2, t2) {
      var n2 = Z(e2), o2 = xe(t2);
      if (n2 !== Qd || !Ne(up, o2) || Ne(lp, o2)) {
        var r2 = rp(n2, o2);
        return !r2 || !Ne(up, o2) || Ne(n2, $d) && n2[$d][o2] || (r2.enumerable = true), r2;
      }
    }, Ip = function(e2) {
      var t2 = sp(Z(e2)), n2 = [];
      return Yd(t2, function(e3) {
        Ne(up, e3) || Ne(gt, e3) || cp(n2, e3);
      }), n2;
    }, Ep = function(e2) {
      var t2 = e2 === Qd, n2 = sp(t2 ? lp : Z(e2)), o2 = [];
      return Yd(n2, function(e3) {
        !Ne(up, e3) || t2 && !Ne(Qd, e3) || cp(o2, up[e3]);
      }), o2;
    };
    if (de || (ep = (Zd = function() {
      if (re(ep, this))
        throw tp("Symbol is not a constructor");
      var e2 = arguments.length && void 0 !== arguments[0] ? dn(arguments[0]) : void 0, t2 = ke(e2), n2 = function(e3) {
        this === Qd && U(n2, lp, e3), Ne(this, $d) && Ne(this[$d], t2) && (this[$d][t2] = false), hp(this, t2, q(1, e3));
      };
      return k && _p && hp(Qd, t2, { configurable: true, set: n2 }), fp(t2, e2);
    }).prototype, At(ep, "toString", function() {
      return Xd(this).tag;
    }), At(Zd, "withoutSetter", function(e2) {
      return fp(ke(e2), e2);
    }), F.f = vp, nt.f = mp, Nn.f = Mp, Ye.f = yp, Kt.f = di.f = Ip, Ht.f = Ep, Hd.f = function(e2) {
      return fp(we(e2), e2);
    }, k && (ap(ep, "description", { configurable: true, get: function() {
      return Xd(this).description;
    } }), At(Qd, "propertyIsEnumerable", vp, { unsafe: true }))), nn({ global: true, wrap: true, forced: !de, sham: !de }, { Symbol: Zd }), Yd(Dn(gp), function(e2) {
      !function(e3) {
        var t2 = jd.Symbol || (jd.Symbol = {});
        Ne(t2, e3) || Wd(t2, e3, { value: Hd.f(e3) });
      }(e2);
    }), nn({ target: "Symbol", stat: true, forced: !de }, { for: function(e2) {
      var t2 = dn(e2);
      if (Ne(dp, t2))
        return dp[t2];
      var n2 = Zd(t2);
      return dp[t2] = n2, pp[n2] = t2, n2;
    }, keyFor: function(e2) {
      if (!_e(e2))
        throw tp(e2 + " is not a symbol");
      if (Ne(pp, e2))
        return pp[e2];
    }, useSetter: function() {
      _p = true;
    }, useSimple: function() {
      _p = false;
    } }), nn({ target: "Object", stat: true, forced: !de, sham: !k }, { create: function(e2, t2) {
      return void 0 === t2 ? Un(e2) : Mp(Un(e2), t2);
    }, defineProperty: mp, defineProperties: Mp, getOwnPropertyDescriptor: yp }), nn({ target: "Object", stat: true, forced: !de }, { getOwnPropertyNames: Ip, getOwnPropertySymbols: Ep }), nn({ target: "Object", stat: true, forced: L(function() {
      Ht.f(1);
    }) }, { getOwnPropertySymbols: function(e2) {
      return Ht.f(Ae(e2));
    } }), op) {
      var Tp = !de || L(function() {
        var e2 = Zd();
        return "[null]" != op([e2]) || "{}" != op({ a: e2 }) || "{}" != op(Object(e2));
      });
      nn({ target: "JSON", stat: true, forced: Tp }, { stringify: function(e2, t2, n2) {
        var o2 = _r(arguments), r2 = t2;
        if ((te(t2) || void 0 !== e2) && !_e(e2))
          return Fn(t2) || (t2 = function(e3, t3) {
            if (ee(r2) && (t3 = U(r2, this, e3, t3)), !_e(t3))
              return t3;
          }), o2[1] = t2, Es(op, null, o2);
      } });
    }
    if (!ep[zd]) {
      var Sp = ep.valueOf;
      At(ep, zd, function(e2) {
        return U(Sp, this);
      });
    }
    zo(Zd, "Symbol"), gt[$d] = true;
    var Cp = nt.f, Ap = R.Symbol, Dp = Ap && Ap.prototype;
    if (k && ee(Ap) && (!("description" in Dp) || void 0 !== Ap().description)) {
      var Np = {}, Op = function() {
        var e2 = arguments.length < 1 || void 0 === arguments[0] ? void 0 : dn(arguments[0]), t2 = re(Dp, this) ? new Ap(e2) : void 0 === e2 ? Ap() : Ap(e2);
        return "" === e2 && (Np[t2] = true), t2;
      };
      Yt(Op, Ap), Op.prototype = Dp, Dp.constructor = Op;
      var Rp = "Symbol(test)" == String(Ap("test")), Lp = H(Dp.toString), kp = H(Dp.valueOf), Gp = /^Symbol\((.*)\)[^)]+$/, Pp = H("".replace), Up = H("".slice);
      Cp(Dp, "description", { configurable: true, get: function() {
        var e2 = kp(this), t2 = Lp(e2);
        if (Ne(Np, e2))
          return "";
        var n2 = Rp ? Up(t2, 7, -1) : Pp(t2, Gp, "$1");
        return "" === n2 ? void 0 : n2;
      } }), nn({ global: true, forced: true }, { Symbol: Op });
    }
    var bp = { UNSEND: "unSend", SUCCESS: "success", FAIL: "fail" }, wp = { NOT_START: "notStart", PENDING: "pengding", RESOLVED: "resolved", REJECTED: "rejected" }, Fp = function(e2) {
      return !!e2 && (!!(Td(e2) || Sd(e2) || Cd(e2)) || (console.warn("\u975E\u6CD5\u7684\u4F1A\u8BDD ID:".concat(e2, "\u3002\u4F1A\u8BDD ID \u7EC4\u6210\u65B9\u5F0F\uFF1AC2C + userID\uFF08\u5355\u804A\uFF09GROUP + groupID\uFF08\u7FA4\u804A\uFF09@TIM#SYSTEM\uFF08\u7CFB\u7EDF\u901A\u77E5\u4F1A\u8BDD\uFF09")), false));
    }, qp = "\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#", Vp = function(e2) {
      return e2.param ? "".concat(e2.api, " ").concat(e2.param, " ").concat(e2.desc, "\u3002").concat(qp).concat(e2.api) : "".concat(e2.api, " ").concat(e2.desc, "\u3002").concat(qp).concat(e2.api);
    }, xp = { type: "String", required: true }, Bp = { type: "Array", required: true }, Kp = { type: "Object", required: true }, Hp = { login: { userID: xp, userSig: xp }, addToBlacklist: { userIDList: Bp }, on: [{ name: "eventName", type: "String", validator: function(e2) {
      return "string" == typeof e2 && 0 !== e2.length || (console.warn(Vp({ api: "on", param: "eventName", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String\uFF0C\u4E14\u4E0D\u80FD\u4E3A\u7A7A" })), false);
    } }, { name: "handler", type: "Function", validator: function(e2) {
      return "function" != typeof e2 ? (console.warn(Vp({ api: "on", param: "handler", desc: "\u53C2\u6570\u5FC5\u987B\u4E3A Function" })), false) : ("" === e2.name && console.warn("on \u63A5\u53E3\u7684 handler \u53C2\u6570\u63A8\u8350\u4F7F\u7528\u5177\u540D\u51FD\u6570\u3002\u5177\u540D\u51FD\u6570\u53EF\u4EE5\u4F7F\u7528 off \u63A5\u53E3\u53D6\u6D88\u8BA2\u9605\uFF0C\u533F\u540D\u51FD\u6570\u65E0\u6CD5\u53D6\u6D88\u8BA2\u9605\u3002"), true);
    } }], once: [{ name: "eventName", type: "String", validator: function(e2) {
      return "string" == typeof e2 && 0 !== e2.length || (console.warn(Vp({ api: "once", param: "eventName", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String\uFF0C\u4E14\u4E0D\u80FD\u4E3A\u7A7A" })), false);
    } }, { name: "handler", type: "Function", validator: function(e2) {
      return "function" != typeof e2 ? (console.warn(Vp({ api: "once", param: "handler", desc: "\u53C2\u6570\u5FC5\u987B\u4E3A Function" })), false) : ("" === e2.name && console.warn("once \u63A5\u53E3\u7684 handler \u53C2\u6570\u63A8\u8350\u4F7F\u7528\u5177\u540D\u51FD\u6570\u3002"), true);
    } }], off: [{ name: "eventName", type: "String", validator: function(e2) {
      return "string" == typeof e2 && 0 !== e2.length || (console.warn(Vp({ api: "off", param: "eventName", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String\uFF0C\u4E14\u4E0D\u80FD\u4E3A\u7A7A" })), false);
    } }, { name: "handler", type: "Function", validator: function(e2) {
      return "function" != typeof e2 ? (console.warn(Vp({ api: "off", param: "handler", desc: "\u53C2\u6570\u5FC5\u987B\u4E3A Function" })), false) : ("" === e2.name && console.warn("off \u63A5\u53E3\u65E0\u6CD5\u4E3A\u533F\u540D\u51FD\u6570\u53D6\u6D88\u76D1\u542C\u4E8B\u4EF6\u3002"), true);
    } }], sendMessage: [t({ name: "message" }, Kp)], getMessageList: { conversationID: t(t({}, xp), {}, { validator: function(e2) {
      return Fp(e2);
    } }), nextReqMessageID: { type: "String" }, count: { type: "Number", validator: function(e2) {
      return !(!Zl(e2) && !/^[1-9][0-9]*$/.test(e2)) || (console.warn(Vp({ api: "getMessageList", param: "count", desc: "\u5FC5\u987B\u4E3A\u6B63\u6574\u6570" })), false);
    } } }, getMessageListHopping: { conversationID: t(t({}, xp), {}, { validator: function(e2) {
      return Fp(e2);
    } }), sequence: { type: "Number" }, time: { type: "Number" }, direction: { type: "Number", validator: function(e2) {
      return !(!Zl(e2) && 0 !== e2 && 1 !== e2) || (console.warn(Vp({ api: "getMessageListHopping", param: "direction", desc: "\u5FC5\u987B\u4F20 0 \u6216 1" })), false);
    } }, count: { type: "Number", validator: function(e2) {
      return !(!Zl(e2) && !/^[1-9][0-9]*$/.test(e2)) || (console.warn(Vp({ api: "getMessageListHopping", param: "count", desc: "\u5FC5\u987B\u4E3A\u6B63\u6574\u6570" })), false);
    } } }, setMessageRead: { conversationID: t(t({}, xp), {}, { validator: function(e2) {
      return Fp(e2);
    } }) }, setAllMessageRead: { scope: { type: "String", required: false, validator: function(e2) {
      return !e2 || -1 !== [gr.READ_ALL_C2C_MSG, gr.READ_ALL_GROUP_MSG, gr.READ_ALL_MSG].indexOf(e2) || (console.warn(Vp({ api: "setAllMessageRead", param: "scope", desc: "\u53D6\u503C\u5FC5\u987B\u4E3A TIM.TYPES.READ_ALL_C2C_MSG, TIM.TYPES.READ_ALL_GROUP_MSG \u6216 TIM.TYPES.READ_ALL_MSG" })), false);
    } } }, getConversationProfile: [t(t({ name: "conversationID" }, xp), {}, { validator: function(e2) {
      return Fp(e2);
    } })], deleteConversation: [t(t({ name: "conversationID" }, xp), {}, { validator: function(e2) {
      return Fp(e2);
    } })], pinConversation: { conversationID: t(t({}, xp), {}, { validator: function(e2) {
      return Fp(e2);
    } }), isPinned: t({}, { type: "Boolean", required: true }) }, getConversationList: [{ name: "options", type: "Array", validator: function(e2) {
      return !!Zl(e2) || (0 !== e2.length || (console.warn(Vp({ api: "getConversationList", desc: "\u83B7\u53D6\u6307\u5B9A\u4F1A\u8BDD\u65F6\u4E0D\u80FD\u4F20\u5165\u7A7A\u6570\u7EC4" })), false));
    } }], getGroupList: { groupProfileFilter: { type: "Array" } }, getGroupProfile: { groupID: xp, groupCustomFieldFilter: { type: "Array" }, memberCustomFieldFilter: { type: "Array" } }, getGroupProfileAdvance: { groupIDList: Bp }, createGroup: { name: xp }, joinGroup: { groupID: xp, type: { type: "String" }, applyMessage: { type: "String" } }, quitGroup: [t({ name: "groupID" }, xp)], handleApplication: { message: Kp, handleAction: xp, handleMessage: { type: "String" } }, changeGroupOwner: { groupID: xp, newOwnerID: xp }, updateGroupProfile: { groupID: xp, muteAllMembers: { type: "Boolean" } }, dismissGroup: [t({ name: "groupID" }, xp)], searchGroupByID: [t({ name: "groupID" }, xp)], initGroupAttributes: { groupID: xp, groupAttributes: t(t({}, Kp), {}, { validator: function(e2) {
      var t2 = true;
      return Object.keys(e2).forEach(function(n2) {
        if (!zl(e2[n2]))
          return console.warn(Vp({ api: "initGroupAttributes", desc: "\u7FA4\u5C5E\u6027 value \u5FC5\u987B\u662F\u5B57\u7B26\u4E32" })), t2 = false;
      }), t2;
    } }) }, setGroupAttributes: { groupID: xp, groupAttributes: t(t({}, Kp), {}, { validator: function(e2) {
      var t2 = true;
      return Object.keys(e2).forEach(function(n2) {
        if (!zl(e2[n2]))
          return console.warn(Vp({ api: "setGroupAttributes", desc: "\u7FA4\u5C5E\u6027 value \u5FC5\u987B\u662F\u5B57\u7B26\u4E32" })), t2 = false;
      }), t2;
    } }) }, deleteGroupAttributes: { groupID: xp, keyList: { type: "Array", validator: function(e2) {
      if (Zl(e2))
        return console.warn(Vp({ api: "deleteGroupAttributes", desc: "\u7F3A\u5C11\u5FC5\u586B\u53C2\u6570\uFF1AkeyList" })), false;
      if (!Ql(e2))
        return false;
      if (!xd(e2)) {
        var t2 = true;
        return e2.forEach(function(e3) {
          if (!zl(e3))
            return console.warn(Vp({ api: "deleteGroupAttributes", desc: "\u7FA4\u5C5E\u6027 key \u5FC5\u987B\u662F\u5B57\u7B26\u4E32" })), t2 = false;
        }), t2;
      }
      return true;
    } } }, getGroupAttributes: { groupID: xp, keyList: { type: "Array", validator: function(e2) {
      if (Zl(e2))
        return console.warn(Vp({ api: "getGroupAttributes", desc: "\u7F3A\u5C11\u5FC5\u586B\u53C2\u6570\uFF1AkeyList" })), false;
      if (!Ql(e2))
        return false;
      if (!xd(e2)) {
        var t2 = true;
        return e2.forEach(function(e3) {
          if (!zl(e3))
            return console.warn(Vp({ api: "getGroupAttributes", desc: "\u7FA4\u5C5E\u6027 key \u5FC5\u987B\u662F\u5B57\u7B26\u4E32" })), t2 = false;
        }), t2;
      }
      return true;
    } } }, getGroupMemberList: { groupID: xp, count: { type: "Number" } }, getGroupMemberProfile: { groupID: xp, userIDList: Bp, memberCustomFieldFilter: { type: "Array" } }, addGroupMember: { groupID: xp, userIDList: Bp }, setGroupMemberRole: { groupID: xp, userID: xp, role: xp }, setGroupMemberMuteTime: { groupID: xp, userID: xp, muteTime: { type: "Number", validator: function(e2) {
      return e2 >= 0;
    } } }, setGroupMemberNameCard: { groupID: xp, userID: { type: "String" }, nameCard: { type: "String", validator: function(e2) {
      return zl(e2) ? (e2.length, true) : (console.warn(Vp({ api: "setGroupMemberNameCard", param: "nameCard", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false);
    } } }, setGroupMemberCustomField: { groupID: xp, userID: { type: "String" }, memberCustomField: Bp }, deleteGroupMember: { groupID: xp }, createTextMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      return Xl(e2) ? zl(e2.text) ? 0 !== e2.text.length || (console.warn(Vp({ api: "createTextMessage", desc: "\u6D88\u606F\u5185\u5BB9\u4E0D\u80FD\u4E3A\u7A7A" })), false) : (console.warn(Vp({ api: "createTextMessage", param: "payload.text", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false) : (console.warn(Vp({ api: "createTextMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false);
    } }) }, createTextAtMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      return Xl(e2) ? zl(e2.text) ? 0 === e2.text.length ? (console.warn(Vp({ api: "createTextAtMessage", desc: "\u6D88\u606F\u5185\u5BB9\u4E0D\u80FD\u4E3A\u7A7A" })), false) : !(e2.atUserList && !Ql(e2.atUserList)) || (console.warn(Vp({ api: "createTextAtMessage", desc: "payload.atUserList \u7C7B\u578B\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false) : (console.warn(Vp({ api: "createTextAtMessage", param: "payload.text", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false) : (console.warn(Vp({ api: "createTextAtMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false);
    } }) }, createCustomMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      return Xl(e2) ? e2.data && !zl(e2.data) ? (console.warn(Vp({ api: "createCustomMessage", param: "payload.data", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false) : e2.description && !zl(e2.description) ? (console.warn(Vp({ api: "createCustomMessage", param: "payload.description", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false) : !(e2.extension && !zl(e2.extension)) || (console.warn(Vp({ api: "createCustomMessage", param: "payload.extension", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false) : (console.warn(Vp({ api: "createCustomMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false);
    } }) }, createImageMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      if (!Xl(e2))
        return console.warn(Vp({ api: "createImageMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false;
      if (Zl(e2.file))
        return console.warn(Vp({ api: "createImageMessage", param: "payload.file", desc: "\u4E0D\u80FD\u4E3A undefined" })), false;
      if (ju) {
        if (!(e2.file instanceof HTMLInputElement || Yl(e2.file)))
          return Xl(e2.file) && "undefined" != typeof uni ? 0 !== e2.file.tempFilePaths.length && 0 !== e2.file.tempFiles.length || (console.warn(Vp({ api: "createImageMessage", param: "payload.file", desc: "\u60A8\u6CA1\u6709\u9009\u62E9\u6587\u4EF6\uFF0C\u65E0\u6CD5\u53D1\u9001" })), false) : (console.warn(Vp({ api: "createImageMessage", param: "payload.file", desc: "\u7C7B\u578B\u5FC5\u987B\u662F HTMLInputElement \u6216 File" })), false);
        if (e2.file instanceof HTMLInputElement && 0 === e2.file.files.length)
          return console.warn(Vp({ api: "createImageMessage", param: "payload.file", desc: "\u60A8\u6CA1\u6709\u9009\u62E9\u6587\u4EF6\uFF0C\u65E0\u6CD5\u53D1\u9001" })), false;
      }
      return true;
    }, onProgress: { type: "Function", required: false, validator: function(e2) {
      return Zl(e2) && console.warn(Vp({ api: "createImageMessage", desc: "\u6CA1\u6709 onProgress \u56DE\u8C03\uFF0C\u60A8\u5C06\u65E0\u6CD5\u83B7\u53D6\u4E0A\u4F20\u8FDB\u5EA6" })), true;
    } } }) }, createAudioMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      return !!Xl(e2) || (console.warn(Vp({ api: "createAudioMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false);
    } }), onProgress: { type: "Function", required: false, validator: function(e2) {
      return Zl(e2) && console.warn(Vp({ api: "createAudioMessage", desc: "\u6CA1\u6709 onProgress \u56DE\u8C03\uFF0C\u60A8\u5C06\u65E0\u6CD5\u83B7\u53D6\u4E0A\u4F20\u8FDB\u5EA6" })), true;
    } } }, createVideoMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      if (!Xl(e2))
        return console.warn(Vp({ api: "createVideoMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false;
      if (Zl(e2.file))
        return console.warn(Vp({ api: "createVideoMessage", param: "payload.file", desc: "\u4E0D\u80FD\u4E3A undefined" })), false;
      if (ju) {
        if (!(e2.file instanceof HTMLInputElement || Yl(e2.file)))
          return Xl(e2.file) && "undefined" != typeof uni ? !!Yl(e2.file.tempFile) || (console.warn(Vp({ api: "createVideoMessage", param: "payload.file", desc: "\u60A8\u6CA1\u6709\u9009\u62E9\u6587\u4EF6\uFF0C\u65E0\u6CD5\u53D1\u9001" })), false) : (console.warn(Vp({ api: "createVideoMessage", param: "payload.file", desc: "\u7C7B\u578B\u5FC5\u987B\u662F HTMLInputElement \u6216 File" })), false);
        if (e2.file instanceof HTMLInputElement && 0 === e2.file.files.length)
          return console.warn(Vp({ api: "createVideoMessage", param: "payload.file", desc: "\u60A8\u6CA1\u6709\u9009\u62E9\u6587\u4EF6\uFF0C\u65E0\u6CD5\u53D1\u9001" })), false;
      }
      return true;
    } }), onProgress: { type: "Function", required: false, validator: function(e2) {
      return Zl(e2) && console.warn(Vp({ api: "createVideoMessage", desc: "\u6CA1\u6709 onProgress \u56DE\u8C03\uFF0C\u60A8\u5C06\u65E0\u6CD5\u83B7\u53D6\u4E0A\u4F20\u8FDB\u5EA6" })), true;
    } } }, createFaceMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      return Xl(e2) ? $l(e2.index) ? !!zl(e2.data) || (console.warn(Vp({ api: "createFaceMessage", param: "payload.data", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false) : (console.warn(Vp({ api: "createFaceMessage", param: "payload.index", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A Number" })), false) : (console.warn(Vp({ api: "createFaceMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false);
    } }) }, createFileMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      if (!Xl(e2))
        return console.warn(Vp({ api: "createFileMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false;
      if (Zl(e2.file))
        return console.warn(Vp({ api: "createFileMessage", param: "payload.file", desc: "\u4E0D\u80FD\u4E3A undefined" })), false;
      if (ju) {
        if (!(e2.file instanceof HTMLInputElement || Yl(e2.file)))
          return Xl(e2.file) && "undefined" != typeof uni ? 0 !== e2.file.tempFilePaths.length && 0 !== e2.file.tempFiles.length || (console.warn(Vp({ api: "createFileMessage", param: "payload.file", desc: "\u60A8\u6CA1\u6709\u9009\u62E9\u6587\u4EF6\uFF0C\u65E0\u6CD5\u53D1\u9001" })), false) : (console.warn(Vp({ api: "createFileMessage", param: "payload.file", desc: "\u7C7B\u578B\u5FC5\u987B\u662F HTMLInputElement \u6216 File" })), false);
        if (e2.file instanceof HTMLInputElement && 0 === e2.file.files.length)
          return console.warn(Vp({ api: "createFileMessage", desc: "\u60A8\u6CA1\u6709\u9009\u62E9\u6587\u4EF6\uFF0C\u65E0\u6CD5\u53D1\u9001" })), false;
      }
      return true;
    } }), onProgress: { type: "Function", required: false, validator: function(e2) {
      return Zl(e2) && console.warn(Vp({ api: "createFileMessage", desc: "\u6CA1\u6709 onProgress \u56DE\u8C03\uFF0C\u60A8\u5C06\u65E0\u6CD5\u83B7\u53D6\u4E0A\u4F20\u8FDB\u5EA6" })), true;
    } } }, createLocationMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      return Xl(e2) ? zl(e2.description) ? $l(e2.longitude) ? !!$l(e2.latitude) || (console.warn(Vp({ api: "createLocationMessage", param: "payload.latitude", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A Number" })), false) : (console.warn(Vp({ api: "createLocationMessage", param: "payload.longitude", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A Number" })), false) : (console.warn(Vp({ api: "createLocationMessage", param: "payload.description", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), false) : (console.warn(Vp({ api: "createLocationMessage", param: "payload", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A plain object" })), false);
    } }) }, createMergerMessage: { to: xp, conversationType: xp, payload: t(t({}, Kp), {}, { validator: function(e2) {
      if (xd(e2.messageList))
        return console.warn(Vp({ api: "createMergerMessage", desc: "\u4E0D\u80FD\u4E3A\u7A7A\u6570\u7EC4" })), false;
      if (xd(e2.compatibleText))
        return console.warn(Vp({ api: "createMergerMessage", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String\uFF0C\u4E14\u4E0D\u80FD\u4E3A\u7A7A" })), false;
      var t2 = false;
      return e2.messageList.forEach(function(e3) {
        e3.status === bp.FAIL && (t2 = true);
      }), !t2 || (console.warn(Vp({ api: "createMergerMessage", desc: "\u4E0D\u652F\u6301\u5408\u5E76\u5DF2\u53D1\u9001\u5931\u8D25\u7684\u6D88\u606F" })), false);
    } }) }, revokeMessage: [t(t({ name: "message" }, Kp), {}, { validator: function(e2) {
      return xd(e2) ? (console.warn(Vp({ api: "revokeMessage", desc: "\u8BF7\u4F20\u5165\u6D88\u606F\uFF08Message\uFF09\u5B9E\u4F8B" })), false) : e2.conversationType === gr.CONV_SYSTEM ? (console.warn(Vp({ api: "revokeMessage", desc: "\u4E0D\u80FD\u64A4\u56DE\u7CFB\u7EDF\u4F1A\u8BDD\u6D88\u606F\uFF0C\u53EA\u80FD\u64A4\u56DE\u5355\u804A\u6D88\u606F\u6216\u7FA4\u6D88\u606F" })), false) : true !== e2.isRevoked || (console.warn(Vp({ api: "revokeMessage", desc: "\u6D88\u606F\u5DF2\u7ECF\u88AB\u64A4\u56DE\uFF0C\u8BF7\u52FF\u91CD\u590D\u64CD\u4F5C" })), false);
    } })], deleteMessage: [t(t({ name: "messageList" }, Bp), {}, { validator: function(e2) {
      return !xd(e2) || (console.warn(Vp({ api: "deleteMessage", param: "messageList", desc: "\u4E0D\u80FD\u4E3A\u7A7A\u6570\u7EC4" })), false);
    } })], modifyMessage: [t(t({ name: "message" }, Kp), {}, { validator: function(e2) {
      return xd(e2) ? (console.warn(Vp({ api: "modifyMessage", desc: "\u8BF7\u4F20\u5165\u6D88\u606F\uFF08Message\uFF09\u5B9E\u4F8B" })), false) : e2.conversationType === gr.CONV_SYSTEM ? (console.warn(Vp({ api: "modifyMessage", desc: "\u4E0D\u652F\u6301\u4FEE\u6539\u7CFB\u7EDF\u4F1A\u8BDD\u6D88\u606F\uFF0C\u53EA\u80FD\u4FEE\u6539\u5355\u804A\u6D88\u606F\u6216\u7FA4\u6D88\u606F" })), false) : true !== e2._onlineOnlyFlag || (console.warn(Vp({ api: "modifyMessage", desc: "\u4E0D\u652F\u6301\u4FEE\u6539\u5728\u7EBF\u6D88\u606F" })), false);
    } })], getUserProfile: { userIDList: { type: "Array", validator: function(e2) {
      return Ql(e2) ? (0 === e2.length && console.warn(Vp({ api: "getUserProfile", param: "userIDList", desc: "\u4E0D\u80FD\u4E3A\u7A7A\u6570\u7EC4" })), true) : (console.warn(Vp({ api: "getUserProfile", param: "userIDList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false);
    } } }, updateMyProfile: { profileCustomField: { type: "Array", validator: function(e2) {
      return !!Zl(e2) || (!!Ql(e2) || (console.warn(Vp({ api: "updateMyProfile", param: "profileCustomField", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false));
    } } }, setSelfStatus: { customStatus: { type: "String", validator: function(e2) {
      return !!zl(e2) || (console.warn(Vp({ api: "setSelfStatus", param: "customStatus", desc: xp })), false);
    } } }, getUserStatus: { userIDList: { type: "Array", validator: function(e2) {
      return Ql(e2) ? 0 !== e2.length || (console.warn(Vp({ api: "getUserStatus", param: "userIDList", desc: "\u4E0D\u80FD\u4E3A\u7A7A\u6570\u7EC4" })), false) : (console.warn(Vp({ api: "getUserStatus", param: "userIDList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false);
    } } }, subscribeUserStatus: { userIDList: { type: "Array", validator: function(e2) {
      return Ql(e2) ? 0 !== e2.length || (console.warn(Vp({ api: "subscribeUserStatus", param: "userIDList", desc: "\u4E0D\u80FD\u4E3A\u7A7A\u6570\u7EC4" })), false) : (console.warn(Vp({ api: "subscribeUserStatus", param: "userIDList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false);
    } } }, unsubscribeUserStatus: { userIDList: { type: "Array", validator: function(e2) {
      return !e2 || (!!Ql(e2) || (console.warn(Vp({ api: "subscribeUserStatus", param: "userIDList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false));
    } } }, addFriend: { to: xp, source: { type: "String", required: true, validator: function(e2) {
      return !!e2 && (e2.startsWith("AddSource_Type_") ? !(e2.replace("AddSource_Type_", "").length > 8) || (console.warn(Vp({ api: "addFriend", desc: "\u52A0\u597D\u53CB\u6765\u6E90\u5B57\u6BB5\u7684\u5173\u952E\u5B57\u957F\u5EA6\u4E0D\u5F97\u8D85\u8FC78\u5B57\u8282" })), false) : (console.warn(Vp({ api: "addFriend", desc: "\u52A0\u597D\u53CB\u6765\u6E90\u5B57\u6BB5\u7684\u524D\u7F00\u5FC5\u987B\u662F\uFF1AAddSource_Type_" })), false));
    } }, remark: { type: "String", required: false, validator: function(e2) {
      return !(zl(e2) && e2.length > 96) || (console.warn(Vp({ api: "updateFriend", desc: " \u5907\u6CE8\u957F\u5EA6\u6700\u957F\u4E0D\u5F97\u8D85\u8FC7 96 \u4E2A\u5B57\u8282" })), false);
    } } }, deleteFriend: { userIDList: Bp }, checkFriend: { userIDList: Bp }, getFriendProfile: { userIDList: Bp }, updateFriend: { userID: xp, remark: { type: "String", required: false, validator: function(e2) {
      return !(zl(e2) && e2.length > 96) || (console.warn(Vp({ api: "updateFriend", desc: " \u5907\u6CE8\u957F\u5EA6\u6700\u957F\u4E0D\u5F97\u8D85\u8FC7 96 \u4E2A\u5B57\u8282" })), false);
    } }, friendCustomField: { type: "Array", required: false, validator: function(e2) {
      if (e2) {
        if (!Ql(e2))
          return console.warn(Vp({ api: "updateFriend", param: "friendCustomField", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false;
        var t2 = true;
        return e2.forEach(function(e3) {
          return zl(e3.key) && -1 !== e3.key.indexOf("Tag_SNS_Custom") ? zl(e3.value) ? e3.value.length > 8 ? (console.warn(Vp({ api: "updateFriend", desc: "\u597D\u53CB\u81EA\u5B9A\u4E49\u5B57\u6BB5\u7684\u5173\u952E\u5B57\u957F\u5EA6\u4E0D\u5F97\u8D85\u8FC78\u5B57\u8282" })), t2 = false) : void 0 : (console.warn(Vp({ api: "updateFriend", desc: "\u7C7B\u578B\u5FC5\u987B\u4E3A String" })), t2 = false) : (console.warn(Vp({ api: "updateFriend", desc: "\u597D\u53CB\u81EA\u5B9A\u4E49\u5B57\u6BB5\u7684\u524D\u7F00\u5FC5\u987B\u662F Tag_SNS_Custom" })), t2 = false);
        }), t2;
      }
      return true;
    } } }, acceptFriendApplication: { userID: xp }, refuseFriendApplication: { userID: xp }, deleteFriendApplication: { userID: xp }, createFriendGroup: { name: xp }, deleteFriendGroup: { name: xp }, addToFriendGroup: { name: xp, userIDList: Bp }, removeFromFriendGroup: { name: xp, userIDList: Bp }, renameFriendGroup: { oldName: xp, newName: xp }, sendMessageReadReceipt: [{ name: "messageList", type: "Array", validator: function(e2) {
      return Ql(e2) ? 0 !== e2.length || (console.warn(Vp({ api: "sendMessageReadReceipt", param: "messageList", desc: "\u4E0D\u80FD\u4E3A\u7A7A\u6570\u7EC4" })), false) : (console.warn(Vp({ api: "sendMessageReadReceipt", param: "messageList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false);
    } }], getMessageReadReceiptList: [{ name: "messageList", type: "Array", validator: function(e2) {
      return Ql(e2) ? 0 !== e2.length || (console.warn(Vp({ api: "getMessageReadReceiptList", param: "messageList", desc: "\u4E0D\u80FD\u4E3A\u7A7A\u6570\u7EC4" })), false) : (console.warn(Vp({ api: "getMessageReadReceiptList", param: "messageList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false);
    } }], createTopicInCommunity: { groupID: xp, topicName: xp }, deleteTopicFromCommunity: { groupID: xp, topicIDList: { type: "Array", validator: function(e2) {
      return !e2 || (!!Ql(e2) || (console.warn(Vp({ api: "deleteTopicFromCommunity", param: "topicIDList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false));
    } } }, updateTopicProfile: { groupID: xp, topicID: xp }, getTopicList: { groupID: xp, topicIDList: { type: "Array", validator: function(e2) {
      return !e2 || (!!Ql(e2) || (console.warn(Vp({ api: "getTopicList", param: "topicIDList", desc: "\u5FC5\u987B\u4E3A\u6570\u7EC4" })), false));
    } } } }, jp = { login: "login", logout: "logout", on: "on", once: "once", off: "off", setLogLevel: "setLogLevel", registerPlugin: "registerPlugin", destroy: "destroy", createTextMessage: "createTextMessage", createTextAtMessage: "createTextAtMessage", createImageMessage: "createImageMessage", createAudioMessage: "createAudioMessage", createVideoMessage: "createVideoMessage", createCustomMessage: "createCustomMessage", createFaceMessage: "createFaceMessage", createFileMessage: "createFileMessage", createLocationMessage: "createLocationMessage", createMergerMessage: "createMergerMessage", downloadMergerMessage: "downloadMergerMessage", createForwardMessage: "createForwardMessage", sendMessage: "sendMessage", resendMessage: "resendMessage", revokeMessage: "revokeMessage", deleteMessage: "deleteMessage", modifyMessage: "modifyMessage", sendMessageReadReceipt: "sendMessageReadReceipt", getGroupMessageReadMemberList: "getGroupMessageReadMemberList", getMessageReadReceiptList: "getMessageReadReceiptList", getMessageList: "getMessageList", findMessage: "findMessage", getMessageListHopping: "getMessageListHopping", setMessageRead: "setMessageRead", setAllMessageRead: "setAllMessageRead", getConversationList: "getConversationList", getConversationProfile: "getConversationProfile", deleteConversation: "deleteConversation", pinConversation: "pinConversation", getGroupList: "getGroupList", getGroupProfile: "getGroupProfile", createGroup: "createGroup", joinGroup: "joinGroup", updateGroupProfile: "updateGroupProfile", quitGroup: "quitGroup", dismissGroup: "dismissGroup", changeGroupOwner: "changeGroupOwner", searchGroupByID: "searchGroupByID", setMessageRemindType: "setMessageRemindType", handleGroupApplication: "handleGroupApplication", initGroupAttributes: "initGroupAttributes", setGroupAttributes: "setGroupAttributes", deleteGroupAttributes: "deleteGroupAttributes", getGroupAttributes: "getGroupAttributes", getJoinedCommunityList: "getJoinedCommunityList", createTopicInCommunity: "createTopicInCommunity", deleteTopicFromCommunity: "deleteTopicFromCommunity", updateTopicProfile: "updateTopicProfile", getTopicList: "getTopicList", getGroupMemberProfile: "getGroupMemberProfile", getGroupMemberList: "getGroupMemberList", addGroupMember: "addGroupMember", deleteGroupMember: "deleteGroupMember", setGroupMemberNameCard: "setGroupMemberNameCard", setGroupMemberMuteTime: "setGroupMemberMuteTime", setGroupMemberRole: "setGroupMemberRole", setGroupMemberCustomField: "setGroupMemberCustomField", getGroupOnlineMemberCount: "getGroupOnlineMemberCount", getMyProfile: "getMyProfile", getUserProfile: "getUserProfile", updateMyProfile: "updateMyProfile", setSelfStatus: "setSelfStatus", getUserStatus: "getUserStatus", subscribeUserStatus: "subscribeUserStatus", unsubscribeUserStatus: "unsubscribeUserStatus", getBlacklist: "getBlacklist", addToBlacklist: "addToBlacklist", removeFromBlacklist: "removeFromBlacklist", getFriendList: "getFriendList", addFriend: "addFriend", deleteFriend: "deleteFriend", checkFriend: "checkFriend", updateFriend: "updateFriend", getFriendProfile: "getFriendProfile", getFriendApplicationList: "getFriendApplicationList", refuseFriendApplication: "refuseFriendApplication", deleteFriendApplication: "deleteFriendApplication", acceptFriendApplication: "acceptFriendApplication", setFriendApplicationRead: "setFriendApplicationRead", getFriendGroupList: "getFriendGroupList", createFriendGroup: "createFriendGroup", renameFriendGroup: "renameFriendGroup", deleteFriendGroup: "deleteFriendGroup", addToFriendGroup: "addToFriendGroup", removeFromFriendGroup: "removeFromFriendGroup", callExperimentalAPI: "callExperimentalAPI" }, Wp = !!Di && L(function() {
      Di.prototype.finally.call({ then: function() {
      } }, function() {
      });
    });
    if (nn({ target: "Promise", proto: true, real: true, forced: Wp }, { finally: function(e2) {
      var t2 = Vi(this, oe("Promise")), n2 = ee(e2);
      return this.then(n2 ? function(n3) {
        return Ac(t2, e2()).then(function() {
          return n3;
        });
      } : e2, n2 ? function(n3) {
        return Ac(t2, e2()).then(function() {
          throw n3;
        });
      } : e2);
    } }), ee(Di)) {
      var Yp = oe("Promise").prototype.finally;
      Di.prototype.finally !== Yp && At(Di.prototype, "finally", Yp, { unsafe: true });
    }
    var $p = /MSIE .\./.test(ae), zp = R.Function, Jp = function(e2) {
      return function(t2, n2) {
        var o2 = Bi(arguments.length, 1) > 2, r2 = ee(t2) ? t2 : zp(t2), a2 = o2 ? _r(arguments, 2) : void 0;
        return e2(o2 ? function() {
          Es(r2, this, a2);
        } : r2, n2);
      };
    };
    nn({ global: true, bind: true, forced: $p }, { setTimeout: Jp(R.setTimeout), setInterval: Jp(R.setInterval) });
    var Xp = Zn.filter, Qp = Er("filter");
    nn({ target: "Array", proto: true, forced: !Qp }, { filter: function(e2) {
      return Xp(this, e2, arguments.length > 1 ? arguments[1] : void 0);
    } });
    var Zp, eg = "sign", tg = "message", ng = "user", og = "c2c", rg = "group", ag = "sns", sg = "groupMember", ig = "Topic", cg = "conversation", ug = "context", lg = "storage", dg = "eventStat", pg = "netMonitor", gg = "bigDataChannel", _g = "upload", hg = "plugin", fg = "syncUnreadMessage", mg = "session", Mg = "channel", vg = "message_loss_detection", yg = "cloudControl", Ig = "workerTimer", Eg = "pullGroupMessage", Tg = "qualityStat", Sg = "commercialConfig", Cg = function() {
      function e2(t2) {
        o(this, e2), this._moduleManager = t2, this._className = "";
      }
      return a(e2, [{ key: "isLoggedIn", value: function() {
        return this._moduleManager.getModule(ug).isLoggedIn();
      } }, { key: "isOversea", value: function() {
        return this._moduleManager.getModule(ug).isOversea();
      } }, { key: "isPrivateNetWork", value: function() {
        return this._moduleManager.getModule(ug).isPrivateNetWork();
      } }, { key: "getMyUserID", value: function() {
        return this._moduleManager.getModule(ug).getUserID();
      } }, { key: "getMyTinyID", value: function() {
        return this._moduleManager.getModule(ug).getTinyID();
      } }, { key: "getModule", value: function(e3) {
        return this._moduleManager.getModule(e3);
      } }, { key: "getPlatform", value: function() {
        return Yu;
      } }, { key: "getNetworkType", value: function() {
        return this._moduleManager.getModule(pg).getNetworkType();
      } }, { key: "probeNetwork", value: function(e3) {
        return this.isPrivateNetWork() ? Promise.resolve([true, this.getNetworkType()]) : this._moduleManager.getModule(pg).probe(e3);
      } }, { key: "getCloudConfig", value: function(e3) {
        return this._moduleManager.getModule(yg).getCloudConfig(e3);
      } }, { key: "emitOuterEvent", value: function(e3, t2) {
        this._moduleManager.getOuterEmitterInstance().emit(e3, t2);
      } }, { key: "emitInnerEvent", value: function(e3, t2) {
        this._moduleManager.getInnerEmitterInstance().emit(e3, t2);
      } }, { key: "getInnerEmitterInstance", value: function() {
        return this._moduleManager.getInnerEmitterInstance();
      } }, { key: "generateTjgID", value: function(e3) {
        return this._moduleManager.getModule(ug).getTinyID() + "-" + e3.random;
      } }, { key: "filterModifiedMessage", value: function(e3) {
        if (!xd(e3)) {
          var t2 = e3.filter(function(e4) {
            return true === e4.isModified;
          });
          t2.length > 0 && this.emitOuterEvent(pr.MESSAGE_MODIFIED, t2);
        }
      } }, { key: "filterUnmodifiedMessage", value: function(e3) {
        return xd(e3) ? [] : e3.filter(function(e4) {
          return false === e4.isModified;
        });
      } }, { key: "request", value: function(e3) {
        return this._moduleManager.getModule(mg).request(e3);
      } }, { key: "canIUse", value: function(e3) {
        return this._moduleManager.getModule(Sg).hasPurchasedFeature(e3);
      } }]), e2;
    }(), Ag = "wslogin", Dg = "wslogout", Ng = "wshello", Og = "KickOther", Rg = "getmsg", Lg = "authkey", kg = "sendmsg", Gg = "send_group_msg", Pg = "portrait_get_all", Ug = "portrait_set", bg = "black_list_get", wg = "black_list_add", Fg = "black_list_delete", qg = "msgwithdraw", Vg = "msgreaded", xg = "set_c2c_peer_mute_notifications", Bg = "get_c2c_peer_mute_notifications", Kg = "getroammsg", Hg = "get_peer_read_time", jg = "delete_c2c_msg_ramble", Wg = "modify_c2c_msg", Yg = "page_get", $g = "get", zg = "delete", Jg = "top", Xg = "deletemsg", Qg = "get_joined_group_list", Zg = "get_group_self_member_info", e_ = "create_group", t_ = "destroy_group", n_ = "modify_group_base_info", o_ = "apply_join_group", r_ = "apply_join_group_noauth", a_ = "quit_group", s_ = "get_group_public_info", i_ = "change_group_owner", c_ = "handle_apply_join_group", u_ = "handle_invite_join_group", l_ = "group_msg_recall", d_ = "msg_read_report", p_ = "read_all_unread_msg", g_ = "group_msg_get", __ = "get_group_msg_receipt", h_ = "group_msg_receipt", f_ = "c2c_msg_read_receipt", m_ = "get_group_msg_receipt_detail", M_ = "get_pendency", v_ = "deletemsg", y_ = "get_msg", I_ = "get_msg_noauth", E_ = "get_online_member_num", T_ = "delete_group_ramble_msg_by_seq", S_ = "modify_group_msg", C_ = "set_group_attr", A_ = "modify_group_attr", D_ = "delete_group_attr", N_ = "clear_group_attr", O_ = "get_group_attr", R_ = "get_group_member_info", L_ = "get_specified_group_member_info", k_ = "add_group_member", G_ = "delete_group_member", P_ = "modify_group_member_info", U_ = "cos", b_ = "pre_sig", w_ = "video_cover", F_ = "tim_web_report_v2", q_ = "alive", V_ = "msg_push", x_ = "multi_msg_push_ws", B_ = "ws_msg_push_ack", K_ = "stat_forceoffline", H_ = "save_relay_json_msg", j_ = "get_relay_json_msg", W_ = "fetch_config", Y_ = "push_configv2", $_ = "fetch_imsdk_purchase_bitsv2", z_ = "push_imsdk_purchase_bitsv2", J_ = "notify2", X_ = "create_topic", Q_ = "destroy_topic", Z_ = "modify_topic", eh = "get_topic", th = "ws_set_custom_status", nh = "ws_get_user_status", oh = "ws_status_subscribe", rh = "ws_status_unsubscribe", ah = { NO_SDKAPPID: 2e3, NO_ACCOUNT_TYPE: 2001, NO_IDENTIFIER: 2002, NO_USERSIG: 2003, NO_TINYID: 2022, NO_A2KEY: 2023, USER_NOT_LOGGED_IN: 2024, REPEAT_LOGIN: 2025, COS_UNDETECTED: 2040, COS_GET_SIG_FAIL: 2041, MESSAGE_SEND_FAIL: 2100, MESSAGE_LIST_CONSTRUCTOR_NEED_OPTIONS: 2103, MESSAGE_SEND_NEED_MESSAGE_INSTANCE: 2105, MESSAGE_SEND_INVALID_CONVERSATION_TYPE: 2106, MESSAGE_FILE_IS_EMPTY: 2108, MESSAGE_ONPROGRESS_FUNCTION_ERROR: 2109, MESSAGE_REVOKE_FAIL: 2110, MESSAGE_DELETE_FAIL: 2111, MESSAGE_UNREAD_ALL_FAIL: 2112, MESSAGE_CONTROL_INFO_FAIL: 2113, READ_RECEIPT_MESSAGE_LIST_EMPTY: 2114, MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL: 2115, CANNOT_DELETE_GROUP_SYSTEM_NOTICE: 2116, MESSAGE_IMAGE_SELECT_FILE_FIRST: 2251, MESSAGE_IMAGE_TYPES_LIMIT: 2252, MESSAGE_IMAGE_SIZE_LIMIT: 2253, MESSAGE_AUDIO_UPLOAD_FAIL: 2300, MESSAGE_AUDIO_SIZE_LIMIT: 2301, MESSAGE_VIDEO_UPLOAD_FAIL: 2350, MESSAGE_VIDEO_SIZE_LIMIT: 2351, MESSAGE_VIDEO_TYPES_LIMIT: 2352, MESSAGE_FILE_UPLOAD_FAIL: 2400, MESSAGE_FILE_SELECT_FILE_FIRST: 2401, MESSAGE_FILE_SIZE_LIMIT: 2402, MESSAGE_FILE_URL_IS_EMPTY: 2403, MESSAGE_MERGER_TYPE_INVALID: 2450, MESSAGE_MERGER_KEY_INVALID: 2451, MESSAGE_MERGER_DOWNLOAD_FAIL: 2452, MESSAGE_FORWARD_TYPE_INVALID: 2453, MESSAGE_MODIFY_CONFLICT: 2480, MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM: 2481, CONVERSATION_NOT_FOUND: 2500, USER_OR_GROUP_NOT_FOUND: 2501, CONVERSATION_UN_RECORDED_TYPE: 2502, ILLEGAL_GROUP_TYPE: 2600, CANNOT_JOIN_WORK: 2601, ILLEGAL_GROUP_ID: 2602, CANNOT_CHANGE_OWNER_IN_AVCHATROOM: 2620, CANNOT_CHANGE_OWNER_TO_SELF: 2621, CANNOT_DISMISS_Work: 2622, MEMBER_NOT_IN_GROUP: 2623, CANNOT_USE_GRP_ATTR_NOT_AVCHATROOM: 2641, CANNOT_USE_GRP_ATTR_AVCHATROOM_UNJOIN: 2642, JOIN_GROUP_FAIL: 2660, CANNOT_ADD_MEMBER_IN_AVCHATROOM: 2661, CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN: 2662, CANNOT_KICK_MEMBER_IN_AVCHATROOM: 2680, NOT_OWNER: 2681, CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM: 2682, INVALID_MEMBER_ROLE: 2683, CANNOT_SET_SELF_MEMBER_ROLE: 2684, CANNOT_MUTE_SELF: 2685, NOT_MY_FRIEND: 2700, ALREADY_MY_FRIEND: 2701, FRIEND_GROUP_EXISTED: 2710, FRIEND_GROUP_NOT_EXIST: 2711, FRIEND_APPLICATION_NOT_EXIST: 2716, UPDATE_PROFILE_INVALID_PARAM: 2721, UPDATE_PROFILE_NO_KEY: 2722, ADD_BLACKLIST_INVALID_PARAM: 2740, DEL_BLACKLIST_INVALID_PARAM: 2741, CANNOT_ADD_SELF_TO_BLACKLIST: 2742, ADD_FRIEND_INVALID_PARAM: 2760, NETWORK_ERROR: 2800, NETWORK_TIMEOUT: 2801, NETWORK_BASE_OPTIONS_NO_URL: 2802, NETWORK_UNDEFINED_SERVER_NAME: 2803, NETWORK_PACKAGE_UNDEFINED: 2804, NO_NETWORK: 2805, CONVERTOR_IRREGULAR_PARAMS: 2900, NOTICE_RUNLOOP_UNEXPECTED_CONDITION: 2901, NOTICE_RUNLOOP_OFFSET_LOST: 2902, UNCAUGHT_ERROR: 2903, GET_LONGPOLL_ID_FAILED: 2904, INVALID_OPERATION: 2905, OVER_FREQUENCY_LIMIT: 2996, CANNOT_FIND_PROTOCOL: 2997, CANNOT_FIND_MODULE: 2998, SDK_IS_NOT_READY: 2999, LOGGING_IN: 3e3, LOGIN_FAILED: 3001, KICKED_OUT_MULT_DEVICE: 3002, KICKED_OUT_MULT_ACCOUNT: 3003, KICKED_OUT_USERSIG_EXPIRED: 3004, LOGGED_OUT: 3005, KICKED_OUT_REST_API: 3006, ILLEGAL_TOPIC_ID: 3021, CANNOT_USE_COMMERCIAL_ABILITY: 3122, LONG_POLL_KICK_OUT: 91101, MESSAGE_A2KEY_EXPIRED: 20002, ACCOUNT_A2KEY_EXPIRED: 70001, LONG_POLL_API_PARAM_ERROR: 90001, HELLO_ANSWER_KICKED_OUT: 1002, OPEN_SERVICE_OVERLOAD_ERROR: 60022 }, sh = { NO_SDKAPPID: "\u65E0 SDKAppID", NO_ACCOUNT_TYPE: "\u65E0 accountType", NO_IDENTIFIER: "\u65E0 userID", NO_USERSIG: "\u65E0 userSig", NO_TINYID: "\u65E0 tinyID", NO_A2KEY: "\u65E0 a2key", USER_NOT_LOGGED_IN: "\u7528\u6237\u672A\u767B\u5F55", REPEAT_LOGIN: "\u91CD\u590D\u767B\u5F55", COS_UNDETECTED: "\u672A\u68C0\u6D4B\u5230 COS \u4E0A\u4F20\u63D2\u4EF6", COS_GET_SIG_FAIL: "\u83B7\u53D6 COS \u9884\u7B7E\u540D URL \u5931\u8D25", MESSAGE_SEND_FAIL: "\u6D88\u606F\u53D1\u9001\u5931\u8D25", MESSAGE_LIST_CONSTRUCTOR_NEED_OPTIONS: "MessageController.constructor() \u9700\u8981\u53C2\u6570 options", MESSAGE_SEND_NEED_MESSAGE_INSTANCE: "\u9700\u8981 Message \u7684\u5B9E\u4F8B", MESSAGE_SEND_INVALID_CONVERSATION_TYPE: 'Message.conversationType \u53EA\u80FD\u4E3A "C2C" \u6216 "GROUP"', MESSAGE_FILE_IS_EMPTY: "\u65E0\u6CD5\u53D1\u9001\u7A7A\u6587\u4EF6", MESSAGE_ONPROGRESS_FUNCTION_ERROR: "\u56DE\u8C03\u51FD\u6570\u8FD0\u884C\u65F6\u9047\u5230\u9519\u8BEF\uFF0C\u8BF7\u68C0\u67E5\u63A5\u5165\u4FA7\u4EE3\u7801", MESSAGE_REVOKE_FAIL: "\u6D88\u606F\u64A4\u56DE\u5931\u8D25", MESSAGE_DELETE_FAIL: "\u6D88\u606F\u5220\u9664\u5931\u8D25", MESSAGE_UNREAD_ALL_FAIL: "\u8BBE\u7F6E\u6240\u6709\u672A\u8BFB\u6D88\u606F\u4E3A\u5DF2\u8BFB\u5904\u7406\u5931\u8D25", MESSAGE_CONTROL_INFO_FAIL: "\u793E\u7FA4\u4E0D\u652F\u6301\u6D88\u606F\u53D1\u9001\u63A7\u5236\u9009\u9879", READ_RECEIPT_MESSAGE_LIST_EMPTY: "\u6D88\u606F\u5217\u8868\u4E2D\u6CA1\u6709\u9700\u8981\u53D1\u9001\u5DF2\u8BFB\u56DE\u6267\u7684\u6D88\u606F", MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL: "\u4E0D\u80FD\u5728\u652F\u6301\u8BDD\u9898\u7684\u7FA4\u7EC4\u4E2D\u53D1\u6D88\u606F\uFF0C\u8BF7\u68C0\u67E5\u7FA4\u7EC4 isSupportTopic \u5C5E\u6027", CANNOT_DELETE_GROUP_SYSTEM_NOTICE: "\u4E0D\u652F\u6301\u5220\u9664\u7FA4\u7CFB\u7EDF\u901A\u77E5", MESSAGE_IMAGE_SELECT_FILE_FIRST: "\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u56FE\u7247", MESSAGE_IMAGE_TYPES_LIMIT: "\u53EA\u5141\u8BB8\u4E0A\u4F20 jpg png jpeg gif bmp image webp \u683C\u5F0F\u7684\u56FE\u7247", MESSAGE_IMAGE_SIZE_LIMIT: "\u56FE\u7247\u5927\u5C0F\u8D85\u8FC720M\uFF0C\u65E0\u6CD5\u53D1\u9001", MESSAGE_AUDIO_UPLOAD_FAIL: "\u8BED\u97F3\u4E0A\u4F20\u5931\u8D25", MESSAGE_AUDIO_SIZE_LIMIT: "\u8BED\u97F3\u5927\u5C0F\u5927\u4E8E20M\uFF0C\u65E0\u6CD5\u53D1\u9001", MESSAGE_VIDEO_UPLOAD_FAIL: "\u89C6\u9891\u4E0A\u4F20\u5931\u8D25", MESSAGE_VIDEO_SIZE_LIMIT: "\u89C6\u9891\u5927\u5C0F\u8D85\u8FC7100M\uFF0C\u65E0\u6CD5\u53D1\u9001", MESSAGE_VIDEO_TYPES_LIMIT: "\u53EA\u5141\u8BB8\u4E0A\u4F20 mp4 \u683C\u5F0F\u7684\u89C6\u9891", MESSAGE_FILE_UPLOAD_FAIL: "\u6587\u4EF6\u4E0A\u4F20\u5931\u8D25", MESSAGE_FILE_SELECT_FILE_FIRST: "\u8BF7\u5148\u9009\u62E9\u4E00\u4E2A\u6587\u4EF6", MESSAGE_FILE_SIZE_LIMIT: "\u6587\u4EF6\u5927\u5C0F\u8D85\u8FC7100M\uFF0C\u65E0\u6CD5\u53D1\u9001 ", MESSAGE_FILE_URL_IS_EMPTY: "\u7F3A\u5C11\u5FC5\u8981\u7684\u53C2\u6570\u6587\u4EF6 URL", MESSAGE_MERGER_TYPE_INVALID: "\u975E\u5408\u5E76\u6D88\u606F", MESSAGE_MERGER_KEY_INVALID: "\u5408\u5E76\u6D88\u606F\u7684 messageKey \u65E0\u6548", MESSAGE_MERGER_DOWNLOAD_FAIL: "\u4E0B\u8F7D\u5408\u5E76\u6D88\u606F\u5931\u8D25", MESSAGE_FORWARD_TYPE_INVALID: "\u9009\u62E9\u7684\u6D88\u606F\u7C7B\u578B\uFF08\u5982\u7FA4\u63D0\u793A\u6D88\u606F\uFF09\u4E0D\u53EF\u4EE5\u8F6C\u53D1", MESSAGE_MODIFY_CONFLICT: "\u4FEE\u6539\u6D88\u606F\u65F6\u53D1\u751F\u51B2\u7A81", MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM: "\u76F4\u64AD\u7FA4\u4E0D\u652F\u6301\u4FEE\u6539\u6D88\u606F", CONVERSATION_NOT_FOUND: "\u6CA1\u6709\u627E\u5230\u76F8\u5E94\u7684\u4F1A\u8BDD\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u53C2\u6570", USER_OR_GROUP_NOT_FOUND: "\u6CA1\u6709\u627E\u5230\u76F8\u5E94\u7684\u7528\u6237\u6216\u7FA4\u7EC4\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u53C2\u6570", CONVERSATION_UN_RECORDED_TYPE: "\u672A\u8BB0\u5F55\u7684\u4F1A\u8BDD\u7C7B\u578B", ILLEGAL_GROUP_TYPE: "\u975E\u6CD5\u7684\u7FA4\u7C7B\u578B\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u53C2\u6570", CANNOT_JOIN_WORK: "\u4E0D\u80FD\u52A0\u5165 Work \u7C7B\u578B\u7684\u7FA4\u7EC4", ILLEGAL_GROUP_ID: "\u7FA4\u7EC4 ID \u975E\u6CD5\uFF0C\u975E Community \u7C7B\u578B\u7FA4\u7EC4\u4E0D\u80FD\u4EE5 @TGS#_ \u4E3A\u524D\u7F00\uFF0CCommunity \u7C7B\u578B\u7FA4\u7EC4\u5FC5\u987B\u4EE5 @TGS#_ \u4E3A\u524D\u7F00\u4E14\u4E0D\u80FD\u5305\u542B @TOPIC#_ \u5B57\u7B26\u4E32", CANNOT_CHANGE_OWNER_IN_AVCHATROOM: "AVChatRoom \u7C7B\u578B\u7684\u7FA4\u7EC4\u4E0D\u80FD\u8F6C\u8BA9\u7FA4\u4E3B", CANNOT_CHANGE_OWNER_TO_SELF: "\u4E0D\u80FD\u628A\u7FA4\u4E3B\u8F6C\u8BA9\u7ED9\u81EA\u5DF1", CANNOT_DISMISS_WORK: "\u4E0D\u80FD\u89E3\u6563 Work \u7C7B\u578B\u7684\u7FA4\u7EC4", MEMBER_NOT_IN_GROUP: "\u7528\u6237\u4E0D\u5728\u8BE5\u7FA4\u7EC4\u5185", JOIN_GROUP_FAIL: "\u52A0\u7FA4\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u53C2\u6570\u6216\u91CD\u8BD5", CANNOT_ADD_MEMBER_IN_AVCHATROOM: "AVChatRoom \u7C7B\u578B\u7684\u7FA4\u4E0D\u652F\u6301\u9080\u8BF7\u7FA4\u6210\u5458", CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN: "\u975E AVChatRoom \u7C7B\u578B\u7684\u7FA4\u7EC4\u4E0D\u5141\u8BB8\u533F\u540D\u52A0\u7FA4\uFF0C\u8BF7\u5148\u767B\u5F55\u540E\u518D\u52A0\u7FA4", CANNOT_KICK_MEMBER_IN_AVCHATROOM: "\u4E0D\u80FD\u5728 AVChatRoom \u7C7B\u578B\u7684\u7FA4\u7EC4\u8E22\u4EBA", NOT_OWNER: "\u4F60\u4E0D\u662F\u7FA4\u4E3B\uFF0C\u53EA\u6709\u7FA4\u4E3B\u624D\u6709\u6743\u9650\u64CD\u4F5C", CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM: "\u4E0D\u80FD\u5728 Work / AVChatRoom \u7C7B\u578B\u7684\u7FA4\u4E2D\u8BBE\u7F6E\u7FA4\u6210\u5458\u8EAB\u4EFD", INVALID_MEMBER_ROLE: "\u4E0D\u5408\u6CD5\u7684\u7FA4\u6210\u5458\u8EAB\u4EFD\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u53C2\u6570", CANNOT_SET_SELF_MEMBER_ROLE: "\u4E0D\u80FD\u8BBE\u7F6E\u81EA\u5DF1\u7684\u7FA4\u6210\u5458\u8EAB\u4EFD\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u53C2\u6570", CANNOT_MUTE_SELF: "\u4E0D\u80FD\u5C06\u81EA\u5DF1\u7981\u8A00\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u53C2\u6570", NOT_MY_FRIEND: "\u975E\u597D\u53CB\u5173\u7CFB", ALREADY_MY_FRIEND: "\u5DF2\u7ECF\u662F\u597D\u53CB\u5173\u7CFB", FRIEND_GROUP_EXISTED: "\u597D\u53CB\u5206\u7EC4\u5DF2\u5B58\u5728", FRIEND_GROUP_NOT_EXIST: "\u597D\u53CB\u5206\u7EC4\u4E0D\u5B58\u5728", FRIEND_APPLICATION_NOT_EXIST: "\u597D\u53CB\u7533\u8BF7\u4E0D\u5B58\u5728", UPDATE_PROFILE_INVALID_PARAM: "\u4F20\u5165 updateMyProfile \u63A5\u53E3\u7684\u53C2\u6570\u65E0\u6548", UPDATE_PROFILE_NO_KEY: "updateMyProfile \u65E0\u6807\u914D\u8D44\u6599\u5B57\u6BB5\u6216\u81EA\u5B9A\u4E49\u8D44\u6599\u5B57\u6BB5", ADD_BLACKLIST_INVALID_PARAM: "\u4F20\u5165 addToBlacklist \u63A5\u53E3\u7684\u53C2\u6570\u65E0\u6548", DEL_BLACKLIST_INVALID_PARAM: "\u4F20\u5165 removeFromBlacklist \u63A5\u53E3\u7684\u53C2\u6570\u65E0\u6548", CANNOT_ADD_SELF_TO_BLACKLIST: "\u4E0D\u80FD\u62C9\u9ED1\u81EA\u5DF1", ADD_FRIEND_INVALID_PARAM: "\u4F20\u5165 addFriend \u63A5\u53E3\u7684\u53C2\u6570\u65E0\u6548", NETWORK_ERROR: "\u7F51\u7EDC\u9519\u8BEF", NETWORK_TIMEOUT: "\u8BF7\u6C42\u8D85\u65F6", NETWORK_BASE_OPTIONS_NO_URL: "\u7F51\u7EDC\u5C42\u521D\u59CB\u5316\u9519\u8BEF\uFF0C\u7F3A\u5C11 URL \u53C2\u6570", NETWORK_UNDEFINED_SERVER_NAME: "\u6253\u5305\u9519\u8BEF\uFF0C\u672A\u5B9A\u4E49\u7684 serverName", NETWORK_PACKAGE_UNDEFINED: "\u672A\u5B9A\u4E49\u7684 packageConfig", NO_NETWORK: "\u672A\u8FDE\u63A5\u5230\u7F51\u7EDC", CONVERTOR_IRREGULAR_PARAMS: "\u4E0D\u89C4\u8303\u7684\u53C2\u6570\u540D\u79F0", NOTICE_RUNLOOP_UNEXPECTED_CONDITION: "\u610F\u6599\u5916\u7684\u901A\u77E5\u6761\u4EF6", NOTICE_RUNLOOP_OFFSET_LOST: "_syncOffset \u4E22\u5931", GET_LONGPOLL_ID_FAILED: "\u83B7\u53D6 longpolling id \u5931\u8D25", UNCAUGHT_ERROR: "\u672A\u7ECF\u660E\u786E\u5B9A\u4E49\u7684\u9519\u8BEF", INVALID_OPERATION: "\u65E0\u6548\u64CD\u4F5C\uFF0C\u5982\u8C03\u7528\u4E86\u672A\u5B9A\u4E49\u6216\u8005\u672A\u5B9E\u73B0\u7684\u65B9\u6CD5\u7B49", CANNOT_FIND_PROTOCOL: "\u65E0\u6CD5\u627E\u5230\u534F\u8BAE", CANNOT_FIND_MODULE: "\u65E0\u6CD5\u627E\u5230\u6A21\u5757\uFF0C\u8BF7\u53C2\u8003\uFF1Ahttps://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-03-sns.html", SDK_IS_NOT_READY: "\u63A5\u53E3\u9700\u8981 SDK \u5904\u4E8E ready \u72B6\u6001\u540E\u624D\u80FD\u8C03\u7528", LOGGING_IN: "\u7528\u6237\u6B63\u5728\u767B\u5F55\u4E2D", LOGIN_FAILED: "\u7528\u6237\u767B\u5F55\u5931\u8D25", KICKED_OUT_MULT_DEVICE: "\u7528\u6237\u591A\u7EC8\u7AEF\u767B\u5F55\u88AB\u8E22\u51FA", KICKED_OUT_MULT_ACCOUNT: "\u7528\u6237\u591A\u5B9E\u4F8B\u767B\u5F55\u88AB\u8E22\u51FA", KICKED_OUT_USERSIG_EXPIRED: "\u7528\u6237 userSig \u8FC7\u671F\u88AB\u8E22\u51FA", LOGGED_OUT: "\u7528\u6237\u5DF2\u767B\u51FA", KICKED_OUT_REST_API: "\u7528\u6237\u88AB REST API - kick \u63A5\u53E3: https://cloud.tencent.com/document/product/269/3853 \u8E22\u51FA", OVER_FREQUENCY_LIMIT: "\u8D85\u51FA SDK \u9891\u7387\u63A7\u5236", LONG_POLL_KICK_OUT: "\u68C0\u6D4B\u5230\u591A\u4E2A web \u5B9E\u4F8B\u767B\u5F55\uFF0C\u6D88\u606F\u901A\u9053\u4E0B\u7EBF", OPEN_SERVICE_OVERLOAD_ERROR: "\u540E\u53F0\u670D\u52A1\u6B63\u5FD9\uFF0C\u8BF7\u7A0D\u540E\u518D\u8BD5", MESSAGE_A2KEY_EXPIRED: "\u6D88\u606F\u9519\u8BEF\u7801\uFF1AUserSig \u6216 A2 \u5931\u6548\u3002", ACCOUNT_A2KEY_EXPIRED: "\u5E10\u53F7\u9519\u8BEF\u7801\uFF1AUserSig \u5DF2\u8FC7\u671F\uFF0C\u8BF7\u91CD\u65B0\u751F\u6210\u3002\u5EFA\u8BAE UserSig \u6709\u6548\u671F\u8BBE\u7F6E\u4E0D\u5C0F\u4E8E24\u5C0F\u65F6\u3002", LONG_POLL_API_PARAM_ERROR: "longPoll API parameters error", ILLEGAL_TOPIC_ID: "topicID \u975E\u6CD5", CANNOT_USE_COMMERCIAL_ABILITY: "\u5957\u9910\u5305\u4E0D\u652F\u6301\u8BE5\u63A5\u53E3\u7684\u4F7F\u7528\uFF0C\u8BF7\u5347\u7EA7\u5230\u65D7\u8230\u7248\u5957\u9910" }, ih = "networkRTT", ch = "messageE2EDelay", uh = "sendMessageC2C", lh = "sendMessageGroup", dh = "sendMessageGroupAV", ph = "sendMessageRichMedia", gh = "cosUpload", _h = "messageReceivedGroup", hh = "messageReceivedGroupAVPush", fh = "messageReceivedGroupAVPull", mh = (s(Zp = {}, ih, 2), s(Zp, ch, 3), s(Zp, uh, 4), s(Zp, lh, 5), s(Zp, dh, 6), s(Zp, ph, 7), s(Zp, _h, 8), s(Zp, hh, 9), s(Zp, fh, 10), s(Zp, gh, 11), Zp), Mh = { info: 4, warning: 5, error: 6 }, vh = { wifi: 1, "2g": 2, "3g": 3, "4g": 4, "5g": 5, unknown: 6, none: 7, online: 8 }, yh = { login: 4 }, Ih = function() {
      function e2(t2) {
        o(this, e2), this.eventType = yh[t2] || 0, this.timestamp = 0, this.networkType = 8, this.code = 0, this.message = "", this.moreMessage = "", this.extension = t2, this.costTime = 0, this.duplicate = false, this.level = 4, this.uiPlatform = void 0, this._sentFlag = false, this._startts = Rl();
      }
      return a(e2, [{ key: "updateTimeStamp", value: function() {
        this.timestamp = Rl();
      } }, { key: "start", value: function(e3) {
        return this._startts = e3, this;
      } }, { key: "end", value: function() {
        var e3 = this, t2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        if (!this._sentFlag) {
          var n2 = Rl();
          0 === this.costTime && (this.costTime = n2 - this._startts), this.setMoreMessage("startts:".concat(this._startts, " endts:").concat(n2)), t2 ? (this._sentFlag = true, this._eventStatModule && this._eventStatModule.pushIn(this)) : setTimeout(function() {
            e3._sentFlag = true, e3._eventStatModule && e3._eventStatModule.pushIn(e3);
          }, 0);
        }
      } }, { key: "setError", value: function(e3, t2, n2) {
        return e3 instanceof Error ? (this._sentFlag || (this.setNetworkType(n2), t2 ? (e3.code && this.setCode(e3.code), e3.message && this.setMoreMessage(e3.message)) : (this.setCode(ah.NO_NETWORK), this.setMoreMessage(sh.NO_NETWORK)), this.setLevel("error")), this) : (bl.warn("SSOLogData.setError value not instanceof Error, please check!"), this);
      } }, { key: "setCode", value: function(e3) {
        return Zl(e3) || this._sentFlag || ("ECONNABORTED" === e3 && (this.code = 103), $l(e3) ? this.code = e3 : bl.warn("SSOLogData.setCode value not a number, please check!", e3, n(e3))), this;
      } }, { key: "setMessage", value: function(e3) {
        return Zl(e3) || this._sentFlag || ($l(e3) && (this.message = e3.toString()), zl(e3) && (this.message = e3)), this;
      } }, { key: "setCostTime", value: function(e3) {
        return this.costTime = e3, this;
      } }, { key: "setLevel", value: function(e3) {
        return Zl(e3) || this._sentFlag || (this.level = Mh[e3]), this;
      } }, { key: "setMoreMessage", value: function(e3) {
        return xd(this.moreMessage) ? this.moreMessage = "".concat(e3) : this.moreMessage += " ".concat(e3), this;
      } }, { key: "setNetworkType", value: function(e3) {
        if (Zl(e3))
          bl.warn("SSOLogData.setNetworkType value is undefined, please check!");
        else {
          var t2 = vh[e3.toLowerCase()];
          Zl(t2) || (this.networkType = t2);
        }
        return this;
      } }, { key: "getStartTs", value: function() {
        return this._startts;
      } }, { key: "setUIPlatform", value: function(e3) {
        this.uiPlatform = e3;
      } }], [{ key: "bindEventStatModule", value: function(t2) {
        e2.prototype._eventStatModule = t2;
      } }]), e2;
    }(), Eh = { SDK_CONSTRUCT: "sdkConstruct", SDK_READY: "sdkReady", LOGIN: "login", LOGOUT: "logout", KICKED_OUT: "kickedOut", REGISTER_PLUGIN: "registerPlugin", KICK_OTHER: "kickOther", WS_CONNECT: "wsConnect", WS_ON_OPEN: "wsOnOpen", WS_ON_CLOSE: "wsOnClose", WS_ON_ERROR: "wsOnError", NETWORK_CHANGE: "networkChange", GET_COS_AUTH_KEY: "getCosAuthKey", GET_COS_PRE_SIG_URL: "getCosPreSigUrl", GET_SNAPSHOT_INFO: "getSnapshotInfo", UPLOAD: "upload", SEND_MESSAGE: "sendMessage", SEND_MESSAGE_WITH_RECEIPT: "sendMessageWithReceipt", SEND_COMBO_MESSAGE: "sendComboMessage", GET_C2C_ROAMING_MESSAGES: "getC2CRoamingMessages", GET_GROUP_ROAMING_MESSAGES: "getGroupRoamingMessages", GET_C2C_ROAMING_MESSAGES_HOPPING: "getC2CRoamingMessagesHopping", GET_GROUP_ROAMING_MESSAGES_HOPPING: "getGroupRoamingMessagesHopping", GET_READ_RECEIPT: "getReadReceipt", GET_READ_RECEIPT_DETAIL: "getReadReceiptDetail", SEND_READ_RECEIPT: "sendReadReceipt", SEND_C2C_READ_RECEIPT: "sendC2CReadReceipt", REVOKE_MESSAGE: "revokeMessage", DELETE_MESSAGE: "deleteMessage", EDIT_MESSAGE: "modifyMessage", SET_C2C_MESSAGE_READ: "setC2CMessageRead", SET_GROUP_MESSAGE_READ: "setGroupMessageRead", EMPTY_MESSAGE_BODY: "emptyMessageBody", GET_PEER_READ_TIME: "getPeerReadTime", UPLOAD_MERGER_MESSAGE: "uploadMergerMessage", DOWNLOAD_MERGER_MESSAGE: "downloadMergerMessage", JSON_PARSE_ERROR: "jsonParseError", MESSAGE_E2E_DELAY_EXCEPTION: "messageE2EDelayException", GET_CONVERSATION_LIST: "getConversationList", GET_CONVERSATION_PROFILE: "getConversationProfile", DELETE_CONVERSATION: "deleteConversation", PIN_CONVERSATION: "pinConversation", GET_CONVERSATION_LIST_IN_STORAGE: "getConversationListInStorage", SYNC_CONVERSATION_LIST: "syncConversationList", SET_ALL_MESSAGE_READ: "setAllMessageRead", CREATE_GROUP: "createGroup", APPLY_JOIN_GROUP: "applyJoinGroup", QUIT_GROUP: "quitGroup", SEARCH_GROUP_BY_ID: "searchGroupByID", CHANGE_GROUP_OWNER: "changeGroupOwner", HANDLE_GROUP_APPLICATION: "handleGroupApplication", HANDLE_GROUP_INVITATION: "handleGroupInvitation", SET_MESSAGE_REMIND_TYPE: "setMessageRemindType", DISMISS_GROUP: "dismissGroup", UPDATE_GROUP_PROFILE: "updateGroupProfile", GET_GROUP_LIST: "getGroupList", GET_GROUP_PROFILE: "getGroupProfile", GET_GROUP_LIST_IN_STORAGE: "getGroupListInStorage", GET_GROUP_LAST_SEQUENCE: "getGroupLastSequence", GET_GROUP_MISSING_MESSAGE: "getGroupMissingMessage", PAGING_GET_GROUP_LIST: "pagingGetGroupList", PAGING_GET_GROUP_LIST_WITH_TOPIC: "pagingGetGroupListWithTopic", GET_GROUP_SIMPLIFIED_INFO: "getGroupSimplifiedInfo", JOIN_WITHOUT_AUTH: "joinWithoutAuth", INIT_GROUP_ATTRIBUTES: "initGroupAttributes", SET_GROUP_ATTRIBUTES: "setGroupAttributes", DELETE_GROUP_ATTRIBUTES: "deleteGroupAttributes", GET_GROUP_ATTRIBUTES: "getGroupAttributes", GET_GROUP_MEMBER_LIST: "getGroupMemberList", GET_GROUP_MEMBER_PROFILE: "getGroupMemberProfile", ADD_GROUP_MEMBER: "addGroupMember", DELETE_GROUP_MEMBER: "deleteGroupMember", SET_GROUP_MEMBER_MUTE_TIME: "setGroupMemberMuteTime", SET_GROUP_MEMBER_NAME_CARD: "setGroupMemberNameCard", SET_GROUP_MEMBER_ROLE: "setGroupMemberRole", SET_GROUP_MEMBER_CUSTOM_FIELD: "setGroupMemberCustomField", GET_GROUP_ONLINE_MEMBER_COUNT: "getGroupOnlineMemberCount", SYNC_MESSAGE: "syncMessage", LONG_POLLING_AV_ERROR: "longPollingAVError", MESSAGE_LOSS: "messageLoss", MESSAGE_STACKED: "messageStacked", GET_USER_PROFILE: "getUserProfile", UPDATE_MY_PROFILE: "updateMyProfile", GET_BLACKLIST: "getBlacklist", ADD_TO_BLACKLIST: "addToBlacklist", REMOVE_FROM_BLACKLIST: "removeFromBlacklist", SET_SELF_STATUS: "ws_set_custom_status", GET_USER_STATUS: "ws_get_user_status", SUBSCRIBE_USER_STATUS: "ws_status_subscribe", UNSUBSCRIBE_USER_STATUS: "ws_status_unsubscribe", ADD_FRIEND: "addFriend", CHECK_FRIEND: "checkFriend", DELETE_FRIEND: "removeFromFriendList", GET_FRIEND_PROFILE: "getFriendProfile", GET_FRIEND_LIST: "getFriendList", UPDATE_FRIEND: "updateFriend", GET_FRIEND_APPLICATION_LIST: "getFriendApplicationList", DELETE_FRIEND_APPLICATION: "deleteFriendApplication", ACCEPT_FRIEND_APPLICATION: "acceptFriendApplication", REFUSE_FRIEND_APPLICATION: "refuseFriendApplication", SET_FRIEND_APPLICATION_READ: "setFriendApplicationRead", CREATE_FRIEND_GROUP: "createFriendGroup", DELETE_FRIEND_GROUP: "deleteFriendGroup", RENAME_FRIEND_GROUP: "renameFriendGroup", ADD_TO_FRIEND_GROUP: "addToFriendGroup", REMOVE_FROM_FRIEND_GROUP: "removeFromFriendGroup", GET_FRIEND_GROUP_LIST: "getFriendGroupList", CREATE_TOPIC: "createTopic", DELETE_TOPIC: "deleteTopic", UPDATE_TOPIC_PROFILE: "updateTopicProfile", GET_TOPIC_LIST: "getTopicList", RELAY_GET_TOPIC_LIST: "relayGetTopicList", GET_TOPIC_LAST_SEQUENCE: "getTopicLastSequence", MP_HIDE_TO_SHOW: "mpHideToShow", CALLBACK_FUNCTION_ERROR: "callbackFunctionError", FETCH_CLOUD_CONTROL_CONFIG: "fetchCloudControlConfig", PUSHED_CLOUD_CONTROL_CONFIG: "pushedCloudControlConfig", FETCH_COMMERCIAL_CONFIG: "fetchCommercialConfig", PUSHED_COMMERCIAL_CONFIG: "pushedCommercialConfig", ERROR: "error", LAST_MESSAGE_NOT_EXIST: "lastMessageNotExist" }, Th = F.f, Sh = H(Th), Ch = H([].push), Ah = function(e2) {
      return function(t2) {
        for (var n2, o2 = Z(t2), r2 = Dn(o2), a2 = r2.length, s2 = 0, i2 = []; a2 > s2; )
          n2 = r2[s2++], k && !Sh(o2, n2) || Ch(i2, e2 ? [n2, o2[n2]] : o2[n2]);
        return i2;
      };
    }, Dh = { entries: Ah(true), values: Ah(false) }.values;
    nn({ target: "Object", stat: true }, { values: function(e2) {
      return Dh(e2);
    } });
    var Nh = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_TEXT, this.content = { text: t2.text || "" };
      }
      return a(e2, [{ key: "setText", value: function(e3) {
        this.content.text = e3;
      } }, { key: "sendable", value: function() {
        return 0 !== this.content.text.length;
      } }]), e2;
    }(), Oh = we("iterator"), Rh = !L(function() {
      var e2 = new URL("b?a=1&b=2&c=3", "http://a"), t2 = e2.searchParams, n2 = "";
      return e2.pathname = "c%20d", t2.forEach(function(e3, o2) {
        t2.delete("b"), n2 += o2 + e3;
      }), !t2.sort || "http://a/c%20d?a=1&c=3" !== e2.href || "3" !== t2.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !t2[Oh] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("http://\u0442\u0435\u0441\u0442").host || "#%D0%B1" !== new URL("http://a#\u0431").hash || "a1c3" !== n2 || "x" !== new URL("http://x", void 0).host;
    }), Lh = Object.assign, kh = Object.defineProperty, Gh = H([].concat), Ph = !Lh || L(function() {
      if (k && 1 !== Lh({ b: 1 }, Lh(kh({}, "a", { enumerable: true, get: function() {
        kh(this, "b", { value: 3, enumerable: false });
      } }), { b: 2 })).b)
        return true;
      var e2 = {}, t2 = {}, n2 = Symbol();
      return e2[n2] = 7, "abcdefghijklmnopqrst".split("").forEach(function(e3) {
        t2[e3] = e3;
      }), 7 != Lh({}, e2)[n2] || "abcdefghijklmnopqrst" != Dn(Lh({}, t2)).join("");
    }) ? function(e2, t2) {
      for (var n2 = Ae(e2), o2 = arguments.length, r2 = 1, a2 = Ht.f, s2 = F.f; o2 > r2; )
        for (var i2, c2 = J(arguments[r2++]), u2 = a2 ? Gh(Dn(c2), a2(c2)) : Dn(c2), l2 = u2.length, d2 = 0; l2 > d2; )
          i2 = u2[d2++], k && !U(s2, c2, i2) || (n2[i2] = c2[i2]);
      return n2;
    } : Lh, Uh = /[^\0-\u007E]/, bh = /[.\u3002\uFF0E\uFF61]/g, wh = "Overflow: input needs wider integers to process", Fh = R.RangeError, qh = H(bh.exec), Vh = Math.floor, xh = String.fromCharCode, Bh = H("".charCodeAt), Kh = H([].join), Hh = H([].push), jh = H("".replace), Wh = H("".split), Yh = H("".toLowerCase), $h = function(e2) {
      return e2 + 22 + 75 * (e2 < 26);
    }, zh = function(e2, t2, n2) {
      var o2 = 0;
      for (e2 = n2 ? Vh(e2 / 700) : e2 >> 1, e2 += Vh(e2 / t2); e2 > 455; )
        e2 = Vh(e2 / 35), o2 += 36;
      return Vh(o2 + 36 * e2 / (e2 + 38));
    }, Jh = function(e2) {
      var t2, n2, o2 = [], r2 = (e2 = function(e3) {
        for (var t3 = [], n3 = 0, o3 = e3.length; n3 < o3; ) {
          var r3 = Bh(e3, n3++);
          if (r3 >= 55296 && r3 <= 56319 && n3 < o3) {
            var a3 = Bh(e3, n3++);
            56320 == (64512 & a3) ? Hh(t3, ((1023 & r3) << 10) + (1023 & a3) + 65536) : (Hh(t3, r3), n3--);
          } else
            Hh(t3, r3);
        }
        return t3;
      }(e2)).length, a2 = 128, s2 = 0, i2 = 72;
      for (t2 = 0; t2 < e2.length; t2++)
        (n2 = e2[t2]) < 128 && Hh(o2, xh(n2));
      var c2 = o2.length, u2 = c2;
      for (c2 && Hh(o2, "-"); u2 < r2; ) {
        var l2 = 2147483647;
        for (t2 = 0; t2 < e2.length; t2++)
          (n2 = e2[t2]) >= a2 && n2 < l2 && (l2 = n2);
        var d2 = u2 + 1;
        if (l2 - a2 > Vh((2147483647 - s2) / d2))
          throw Fh(wh);
        for (s2 += (l2 - a2) * d2, a2 = l2, t2 = 0; t2 < e2.length; t2++) {
          if ((n2 = e2[t2]) < a2 && ++s2 > 2147483647)
            throw Fh(wh);
          if (n2 == a2) {
            for (var p3 = s2, g2 = 36; ; ) {
              var _2 = g2 <= i2 ? 1 : g2 >= i2 + 26 ? 26 : g2 - i2;
              if (p3 < _2)
                break;
              var h3 = p3 - _2, f2 = 36 - _2;
              Hh(o2, xh($h(_2 + h3 % f2))), p3 = Vh(h3 / f2), g2 += 36;
            }
            Hh(o2, xh($h(p3))), i2 = zh(s2, d2, u2 == c2), s2 = 0, u2++;
          }
        }
        s2++, a2++;
      }
      return Kh(o2, "");
    }, Xh = Math.floor, Qh = function(e2, t2) {
      var n2 = e2.length, o2 = Xh(n2 / 2);
      return n2 < 8 ? Zh(e2, t2) : ef(e2, Qh(ci(e2, 0, o2), t2), Qh(ci(e2, o2), t2), t2);
    }, Zh = function(e2, t2) {
      for (var n2, o2, r2 = e2.length, a2 = 1; a2 < r2; ) {
        for (o2 = a2, n2 = e2[a2]; o2 && t2(e2[o2 - 1], n2) > 0; )
          e2[o2] = e2[--o2];
        o2 !== a2++ && (e2[o2] = n2);
      }
      return e2;
    }, ef = function(e2, t2, n2, o2) {
      for (var r2 = t2.length, a2 = n2.length, s2 = 0, i2 = 0; s2 < r2 || i2 < a2; )
        e2[s2 + i2] = s2 < r2 && i2 < a2 ? o2(t2[s2], n2[i2]) <= 0 ? t2[s2++] : n2[i2++] : s2 < r2 ? t2[s2++] : n2[i2++];
      return e2;
    }, tf = Qh, nf = we("iterator"), of = It.set, rf = It.getterFor("URLSearchParams"), af = It.getterFor("URLSearchParamsIterator"), sf = oe("fetch"), cf = oe("Request"), uf = oe("Headers"), lf = cf && cf.prototype, df = uf && uf.prototype, pf = R.RegExp, gf = R.TypeError, _f = R.decodeURIComponent, hf = R.encodeURIComponent, ff = H("".charAt), mf = H([].join), Mf = H([].push), vf = H("".replace), yf = H([].shift), If = H([].splice), Ef = H("".split), Tf = H("".slice), Sf = /\+/g, Cf = Array(4), Af = function(e2) {
      return Cf[e2 - 1] || (Cf[e2 - 1] = pf("((?:%[\\da-f]{2}){" + e2 + "})", "gi"));
    }, Df = function(e2) {
      try {
        return _f(e2);
      } catch (fS) {
        return e2;
      }
    }, Nf = function(e2) {
      var t2 = vf(e2, Sf, " "), n2 = 4;
      try {
        return _f(t2);
      } catch (fS) {
        for (; n2; )
          t2 = vf(t2, Af(n2--), Df);
        return t2;
      }
    }, Of = /[!'()~]|%20/g, Rf = { "!": "%21", "'": "%27", "(": "%28", ")": "%29", "~": "%7E", "%20": "+" }, Lf = function(e2) {
      return Rf[e2];
    }, kf = function(e2) {
      return vf(hf(e2), Of, Lf);
    }, Gf = Qo(function(e2, t2) {
      of(this, { type: "URLSearchParamsIterator", iterator: Eo(rf(e2).entries), kind: t2 });
    }, "Iterator", function() {
      var e2 = af(this), t2 = e2.kind, n2 = e2.iterator.next(), o2 = n2.value;
      return n2.done || (n2.value = "keys" === t2 ? o2.key : "values" === t2 ? o2.value : [o2.key, o2.value]), n2;
    }, true), Pf = function(e2) {
      this.entries = [], this.url = null, void 0 !== e2 && (te(e2) ? this.parseObject(e2) : this.parseQuery("string" == typeof e2 ? "?" === ff(e2, 0) ? Tf(e2, 1) : e2 : dn(e2)));
    };
    Pf.prototype = { type: "URLSearchParams", bindURL: function(e2) {
      this.url = e2, this.update();
    }, parseObject: function(e2) {
      var t2, n2, o2, r2, a2, s2, i2, c2 = yo(e2);
      if (c2)
        for (n2 = (t2 = Eo(e2, c2)).next; !(o2 = U(n2, t2)).done; ) {
          if (a2 = (r2 = Eo(Xe(o2.value))).next, (s2 = U(a2, r2)).done || (i2 = U(a2, r2)).done || !U(a2, r2).done)
            throw gf("Expected sequence with length 2");
          Mf(this.entries, { key: dn(s2.value), value: dn(i2.value) });
        }
      else
        for (var u2 in e2)
          Ne(e2, u2) && Mf(this.entries, { key: u2, value: dn(e2[u2]) });
    }, parseQuery: function(e2) {
      if (e2)
        for (var t2, n2, o2 = Ef(e2, "&"), r2 = 0; r2 < o2.length; )
          (t2 = o2[r2++]).length && (n2 = Ef(t2, "="), Mf(this.entries, { key: Nf(yf(n2)), value: Nf(mf(n2, "=")) }));
    }, serialize: function() {
      for (var e2, t2 = this.entries, n2 = [], o2 = 0; o2 < t2.length; )
        e2 = t2[o2++], Mf(n2, kf(e2.key) + "=" + kf(e2.value));
      return mf(n2, "&");
    }, update: function() {
      this.entries.length = 0, this.parseQuery(this.url.query);
    }, updateURL: function() {
      this.url && this.url.update();
    } };
    var Uf = function() {
      ki(this, bf);
      var e2 = arguments.length > 0 ? arguments[0] : void 0;
      of(this, new Pf(e2));
    }, bf = Uf.prototype;
    if (Ni(bf, { append: function(e2, t2) {
      Bi(arguments.length, 2);
      var n2 = rf(this);
      Mf(n2.entries, { key: dn(e2), value: dn(t2) }), n2.updateURL();
    }, delete: function(e2) {
      Bi(arguments.length, 1);
      for (var t2 = rf(this), n2 = t2.entries, o2 = dn(e2), r2 = 0; r2 < n2.length; )
        n2[r2].key === o2 ? If(n2, r2, 1) : r2++;
      t2.updateURL();
    }, get: function(e2) {
      Bi(arguments.length, 1);
      for (var t2 = rf(this).entries, n2 = dn(e2), o2 = 0; o2 < t2.length; o2++)
        if (t2[o2].key === n2)
          return t2[o2].value;
      return null;
    }, getAll: function(e2) {
      Bi(arguments.length, 1);
      for (var t2 = rf(this).entries, n2 = dn(e2), o2 = [], r2 = 0; r2 < t2.length; r2++)
        t2[r2].key === n2 && Mf(o2, t2[r2].value);
      return o2;
    }, has: function(e2) {
      Bi(arguments.length, 1);
      for (var t2 = rf(this).entries, n2 = dn(e2), o2 = 0; o2 < t2.length; )
        if (t2[o2++].key === n2)
          return true;
      return false;
    }, set: function(e2, t2) {
      Bi(arguments.length, 1);
      for (var n2, o2 = rf(this), r2 = o2.entries, a2 = false, s2 = dn(e2), i2 = dn(t2), c2 = 0; c2 < r2.length; c2++)
        (n2 = r2[c2]).key === s2 && (a2 ? If(r2, c2--, 1) : (a2 = true, n2.value = i2));
      a2 || Mf(r2, { key: s2, value: i2 }), o2.updateURL();
    }, sort: function() {
      var e2 = rf(this);
      tf(e2.entries, function(e3, t2) {
        return e3.key > t2.key ? 1 : -1;
      }), e2.updateURL();
    }, forEach: function(e2) {
      for (var t2, n2 = rf(this).entries, o2 = wn(e2, arguments.length > 1 ? arguments[1] : void 0), r2 = 0; r2 < n2.length; )
        o2((t2 = n2[r2++]).value, t2.key, this);
    }, keys: function() {
      return new Gf(this, "keys");
    }, values: function() {
      return new Gf(this, "values");
    }, entries: function() {
      return new Gf(this, "entries");
    } }, { enumerable: true }), At(bf, nf, bf.entries, { name: "entries" }), At(bf, "toString", function() {
      return rf(this).serialize();
    }, { enumerable: true }), zo(Uf, "URLSearchParams"), nn({ global: true, forced: !Rh }, { URLSearchParams: Uf }), !Rh && ee(uf)) {
      var wf = H(df.has), Ff = H(df.set), qf = function(e2) {
        if (te(e2)) {
          var t2, n2 = e2.body;
          if ("URLSearchParams" === un(n2))
            return t2 = e2.headers ? new uf(e2.headers) : new uf(), wf(t2, "content-type") || Ff(t2, "content-type", "application/x-www-form-urlencoded;charset=UTF-8"), Un(e2, { body: q(0, dn(n2)), headers: q(0, t2) });
        }
        return e2;
      };
      if (ee(sf) && nn({ global: true, enumerable: true, forced: true }, { fetch: function(e2) {
        return sf(e2, arguments.length > 1 ? qf(arguments[1]) : {});
      } }), ee(cf)) {
        var Vf = function(e2) {
          return ki(this, lf), new cf(e2, arguments.length > 1 ? qf(arguments[1]) : {});
        };
        lf.constructor = Vf, Vf.prototype = lf, nn({ global: true, forced: true }, { Request: Vf });
      }
    }
    var xf, Bf = { URLSearchParams: Uf, getState: rf }, Kf = Nn.f, Hf = Fo.codeAt, jf = It.set, Wf = It.getterFor("URL"), Yf = Bf.URLSearchParams, $f = Bf.getState, zf = R.URL, Jf = R.TypeError, Xf = R.parseInt, Qf = Math.floor, Zf = Math.pow, em = H("".charAt), tm = H(/./.exec), nm = H([].join), om = H(1 .toString), rm = H([].pop), am = H([].push), sm = H("".replace), im = H([].shift), cm = H("".split), um = H("".slice), lm = H("".toLowerCase), dm = H([].unshift), pm = /[a-z]/i, gm = /[\d+-.a-z]/i, _m = /\d/, hm = /^0x/i, fm = /^[0-7]+$/, mm = /^\d+$/, Mm = /^[\da-f]+$/i, vm = /[\0\t\n\r #%/:<>?@[\\\]^|]/, ym = /[\0\t\n\r #/:<>?@[\\\]^|]/, Im = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g, Em = /[\t\n\r]/g, Tm = function(e2) {
      var t2, n2, o2, r2;
      if ("number" == typeof e2) {
        for (t2 = [], n2 = 0; n2 < 4; n2++)
          dm(t2, e2 % 256), e2 = Qf(e2 / 256);
        return nm(t2, ".");
      }
      if ("object" == typeof e2) {
        for (t2 = "", o2 = function(e3) {
          for (var t3 = null, n3 = 1, o3 = null, r3 = 0, a2 = 0; a2 < 8; a2++)
            0 !== e3[a2] ? (r3 > n3 && (t3 = o3, n3 = r3), o3 = null, r3 = 0) : (null === o3 && (o3 = a2), ++r3);
          return r3 > n3 && (t3 = o3, n3 = r3), t3;
        }(e2), n2 = 0; n2 < 8; n2++)
          r2 && 0 === e2[n2] || (r2 && (r2 = false), o2 === n2 ? (t2 += n2 ? ":" : "::", r2 = true) : (t2 += om(e2[n2], 16), n2 < 7 && (t2 += ":")));
        return "[" + t2 + "]";
      }
      return e2;
    }, Sm = {}, Cm = Ph({}, Sm, { " ": 1, '"': 1, "<": 1, ">": 1, "`": 1 }), Am = Ph({}, Cm, { "#": 1, "?": 1, "{": 1, "}": 1 }), Dm = Ph({}, Am, { "/": 1, ":": 1, ";": 1, "=": 1, "@": 1, "[": 1, "\\": 1, "]": 1, "^": 1, "|": 1 }), Nm = function(e2, t2) {
      var n2 = Hf(e2, 0);
      return n2 > 32 && n2 < 127 && !Ne(t2, e2) ? e2 : encodeURIComponent(e2);
    }, Om = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, Rm = function(e2, t2) {
      var n2;
      return 2 == e2.length && tm(pm, em(e2, 0)) && (":" == (n2 = em(e2, 1)) || !t2 && "|" == n2);
    }, Lm = function(e2) {
      var t2;
      return e2.length > 1 && Rm(um(e2, 0, 2)) && (2 == e2.length || "/" === (t2 = em(e2, 2)) || "\\" === t2 || "?" === t2 || "#" === t2);
    }, km = function(e2) {
      return "." === e2 || "%2e" === lm(e2);
    }, Gm = {}, Pm = {}, Um = {}, bm = {}, wm = {}, Fm = {}, qm = {}, Vm = {}, xm = {}, Bm = {}, Km = {}, Hm = {}, jm = {}, Wm = {}, Ym = {}, $m = {}, zm = {}, Jm = {}, Xm = {}, Qm = {}, Zm = {}, eM = function(e2, t2, n2) {
      var o2, r2, a2, s2 = dn(e2);
      if (t2) {
        if (r2 = this.parse(s2))
          throw Jf(r2);
        this.searchParams = null;
      } else {
        if (void 0 !== n2 && (o2 = new eM(n2, true)), r2 = this.parse(s2, null, o2))
          throw Jf(r2);
        (a2 = $f(new Yf())).bindURL(this), this.searchParams = a2;
      }
    };
    eM.prototype = { type: "URL", parse: function(e2, t2, n2) {
      var o2, r2, a2, s2, i2, c2 = this, u2 = t2 || Gm, l2 = 0, d2 = "", p3 = false, g2 = false, _2 = false;
      for (e2 = dn(e2), t2 || (c2.scheme = "", c2.username = "", c2.password = "", c2.host = null, c2.port = null, c2.path = [], c2.query = null, c2.fragment = null, c2.cannotBeABaseURL = false, e2 = sm(e2, Im, "")), e2 = sm(e2, Em, ""), o2 = So(e2); l2 <= o2.length; ) {
        switch (r2 = o2[l2], u2) {
          case Gm:
            if (!r2 || !tm(pm, r2)) {
              if (t2)
                return "Invalid scheme";
              u2 = Um;
              continue;
            }
            d2 += lm(r2), u2 = Pm;
            break;
          case Pm:
            if (r2 && (tm(gm, r2) || "+" == r2 || "-" == r2 || "." == r2))
              d2 += lm(r2);
            else {
              if (":" != r2) {
                if (t2)
                  return "Invalid scheme";
                d2 = "", u2 = Um, l2 = 0;
                continue;
              }
              if (t2 && (c2.isSpecial() != Ne(Om, d2) || "file" == d2 && (c2.includesCredentials() || null !== c2.port) || "file" == c2.scheme && !c2.host))
                return;
              if (c2.scheme = d2, t2)
                return void (c2.isSpecial() && Om[c2.scheme] == c2.port && (c2.port = null));
              d2 = "", "file" == c2.scheme ? u2 = Wm : c2.isSpecial() && n2 && n2.scheme == c2.scheme ? u2 = bm : c2.isSpecial() ? u2 = Vm : "/" == o2[l2 + 1] ? (u2 = wm, l2++) : (c2.cannotBeABaseURL = true, am(c2.path, ""), u2 = Xm);
            }
            break;
          case Um:
            if (!n2 || n2.cannotBeABaseURL && "#" != r2)
              return "Invalid scheme";
            if (n2.cannotBeABaseURL && "#" == r2) {
              c2.scheme = n2.scheme, c2.path = ci(n2.path), c2.query = n2.query, c2.fragment = "", c2.cannotBeABaseURL = true, u2 = Zm;
              break;
            }
            u2 = "file" == n2.scheme ? Wm : Fm;
            continue;
          case bm:
            if ("/" != r2 || "/" != o2[l2 + 1]) {
              u2 = Fm;
              continue;
            }
            u2 = xm, l2++;
            break;
          case wm:
            if ("/" == r2) {
              u2 = Bm;
              break;
            }
            u2 = Jm;
            continue;
          case Fm:
            if (c2.scheme = n2.scheme, r2 == xf)
              c2.username = n2.username, c2.password = n2.password, c2.host = n2.host, c2.port = n2.port, c2.path = ci(n2.path), c2.query = n2.query;
            else if ("/" == r2 || "\\" == r2 && c2.isSpecial())
              u2 = qm;
            else if ("?" == r2)
              c2.username = n2.username, c2.password = n2.password, c2.host = n2.host, c2.port = n2.port, c2.path = ci(n2.path), c2.query = "", u2 = Qm;
            else {
              if ("#" != r2) {
                c2.username = n2.username, c2.password = n2.password, c2.host = n2.host, c2.port = n2.port, c2.path = ci(n2.path), c2.path.length--, u2 = Jm;
                continue;
              }
              c2.username = n2.username, c2.password = n2.password, c2.host = n2.host, c2.port = n2.port, c2.path = ci(n2.path), c2.query = n2.query, c2.fragment = "", u2 = Zm;
            }
            break;
          case qm:
            if (!c2.isSpecial() || "/" != r2 && "\\" != r2) {
              if ("/" != r2) {
                c2.username = n2.username, c2.password = n2.password, c2.host = n2.host, c2.port = n2.port, u2 = Jm;
                continue;
              }
              u2 = Bm;
            } else
              u2 = xm;
            break;
          case Vm:
            if (u2 = xm, "/" != r2 || "/" != em(d2, l2 + 1))
              continue;
            l2++;
            break;
          case xm:
            if ("/" != r2 && "\\" != r2) {
              u2 = Bm;
              continue;
            }
            break;
          case Bm:
            if ("@" == r2) {
              p3 && (d2 = "%40" + d2), p3 = true, a2 = So(d2);
              for (var h3 = 0; h3 < a2.length; h3++) {
                var f2 = a2[h3];
                if (":" != f2 || _2) {
                  var m2 = Nm(f2, Dm);
                  _2 ? c2.password += m2 : c2.username += m2;
                } else
                  _2 = true;
              }
              d2 = "";
            } else if (r2 == xf || "/" == r2 || "?" == r2 || "#" == r2 || "\\" == r2 && c2.isSpecial()) {
              if (p3 && "" == d2)
                return "Invalid authority";
              l2 -= So(d2).length + 1, d2 = "", u2 = Km;
            } else
              d2 += r2;
            break;
          case Km:
          case Hm:
            if (t2 && "file" == c2.scheme) {
              u2 = $m;
              continue;
            }
            if (":" != r2 || g2) {
              if (r2 == xf || "/" == r2 || "?" == r2 || "#" == r2 || "\\" == r2 && c2.isSpecial()) {
                if (c2.isSpecial() && "" == d2)
                  return "Invalid host";
                if (t2 && "" == d2 && (c2.includesCredentials() || null !== c2.port))
                  return;
                if (s2 = c2.parseHost(d2))
                  return s2;
                if (d2 = "", u2 = zm, t2)
                  return;
                continue;
              }
              "[" == r2 ? g2 = true : "]" == r2 && (g2 = false), d2 += r2;
            } else {
              if ("" == d2)
                return "Invalid host";
              if (s2 = c2.parseHost(d2))
                return s2;
              if (d2 = "", u2 = jm, t2 == Hm)
                return;
            }
            break;
          case jm:
            if (!tm(_m, r2)) {
              if (r2 == xf || "/" == r2 || "?" == r2 || "#" == r2 || "\\" == r2 && c2.isSpecial() || t2) {
                if ("" != d2) {
                  var M2 = Xf(d2, 10);
                  if (M2 > 65535)
                    return "Invalid port";
                  c2.port = c2.isSpecial() && M2 === Om[c2.scheme] ? null : M2, d2 = "";
                }
                if (t2)
                  return;
                u2 = zm;
                continue;
              }
              return "Invalid port";
            }
            d2 += r2;
            break;
          case Wm:
            if (c2.scheme = "file", "/" == r2 || "\\" == r2)
              u2 = Ym;
            else {
              if (!n2 || "file" != n2.scheme) {
                u2 = Jm;
                continue;
              }
              if (r2 == xf)
                c2.host = n2.host, c2.path = ci(n2.path), c2.query = n2.query;
              else if ("?" == r2)
                c2.host = n2.host, c2.path = ci(n2.path), c2.query = "", u2 = Qm;
              else {
                if ("#" != r2) {
                  Lm(nm(ci(o2, l2), "")) || (c2.host = n2.host, c2.path = ci(n2.path), c2.shortenPath()), u2 = Jm;
                  continue;
                }
                c2.host = n2.host, c2.path = ci(n2.path), c2.query = n2.query, c2.fragment = "", u2 = Zm;
              }
            }
            break;
          case Ym:
            if ("/" == r2 || "\\" == r2) {
              u2 = $m;
              break;
            }
            n2 && "file" == n2.scheme && !Lm(nm(ci(o2, l2), "")) && (Rm(n2.path[0], true) ? am(c2.path, n2.path[0]) : c2.host = n2.host), u2 = Jm;
            continue;
          case $m:
            if (r2 == xf || "/" == r2 || "\\" == r2 || "?" == r2 || "#" == r2) {
              if (!t2 && Rm(d2))
                u2 = Jm;
              else if ("" == d2) {
                if (c2.host = "", t2)
                  return;
                u2 = zm;
              } else {
                if (s2 = c2.parseHost(d2))
                  return s2;
                if ("localhost" == c2.host && (c2.host = ""), t2)
                  return;
                d2 = "", u2 = zm;
              }
              continue;
            }
            d2 += r2;
            break;
          case zm:
            if (c2.isSpecial()) {
              if (u2 = Jm, "/" != r2 && "\\" != r2)
                continue;
            } else if (t2 || "?" != r2)
              if (t2 || "#" != r2) {
                if (r2 != xf && (u2 = Jm, "/" != r2))
                  continue;
              } else
                c2.fragment = "", u2 = Zm;
            else
              c2.query = "", u2 = Qm;
            break;
          case Jm:
            if (r2 == xf || "/" == r2 || "\\" == r2 && c2.isSpecial() || !t2 && ("?" == r2 || "#" == r2)) {
              if (".." === (i2 = lm(i2 = d2)) || "%2e." === i2 || ".%2e" === i2 || "%2e%2e" === i2 ? (c2.shortenPath(), "/" == r2 || "\\" == r2 && c2.isSpecial() || am(c2.path, "")) : km(d2) ? "/" == r2 || "\\" == r2 && c2.isSpecial() || am(c2.path, "") : ("file" == c2.scheme && !c2.path.length && Rm(d2) && (c2.host && (c2.host = ""), d2 = em(d2, 0) + ":"), am(c2.path, d2)), d2 = "", "file" == c2.scheme && (r2 == xf || "?" == r2 || "#" == r2))
                for (; c2.path.length > 1 && "" === c2.path[0]; )
                  im(c2.path);
              "?" == r2 ? (c2.query = "", u2 = Qm) : "#" == r2 && (c2.fragment = "", u2 = Zm);
            } else
              d2 += Nm(r2, Am);
            break;
          case Xm:
            "?" == r2 ? (c2.query = "", u2 = Qm) : "#" == r2 ? (c2.fragment = "", u2 = Zm) : r2 != xf && (c2.path[0] += Nm(r2, Sm));
            break;
          case Qm:
            t2 || "#" != r2 ? r2 != xf && ("'" == r2 && c2.isSpecial() ? c2.query += "%27" : c2.query += "#" == r2 ? "%23" : Nm(r2, Sm)) : (c2.fragment = "", u2 = Zm);
            break;
          case Zm:
            r2 != xf && (c2.fragment += Nm(r2, Cm));
        }
        l2++;
      }
    }, parseHost: function(e2) {
      var t2, n2, o2;
      if ("[" == em(e2, 0)) {
        if ("]" != em(e2, e2.length - 1))
          return "Invalid host";
        if (!(t2 = function(e3) {
          var t3, n3, o3, r2, a2, s2, i2, c2 = [0, 0, 0, 0, 0, 0, 0, 0], u2 = 0, l2 = null, d2 = 0, p3 = function() {
            return em(e3, d2);
          };
          if (":" == p3()) {
            if (":" != em(e3, 1))
              return;
            d2 += 2, l2 = ++u2;
          }
          for (; p3(); ) {
            if (8 == u2)
              return;
            if (":" != p3()) {
              for (t3 = n3 = 0; n3 < 4 && tm(Mm, p3()); )
                t3 = 16 * t3 + Xf(p3(), 16), d2++, n3++;
              if ("." == p3()) {
                if (0 == n3)
                  return;
                if (d2 -= n3, u2 > 6)
                  return;
                for (o3 = 0; p3(); ) {
                  if (r2 = null, o3 > 0) {
                    if (!("." == p3() && o3 < 4))
                      return;
                    d2++;
                  }
                  if (!tm(_m, p3()))
                    return;
                  for (; tm(_m, p3()); ) {
                    if (a2 = Xf(p3(), 10), null === r2)
                      r2 = a2;
                    else {
                      if (0 == r2)
                        return;
                      r2 = 10 * r2 + a2;
                    }
                    if (r2 > 255)
                      return;
                    d2++;
                  }
                  c2[u2] = 256 * c2[u2] + r2, 2 != ++o3 && 4 != o3 || u2++;
                }
                if (4 != o3)
                  return;
                break;
              }
              if (":" == p3()) {
                if (d2++, !p3())
                  return;
              } else if (p3())
                return;
              c2[u2++] = t3;
            } else {
              if (null !== l2)
                return;
              d2++, l2 = ++u2;
            }
          }
          if (null !== l2)
            for (s2 = u2 - l2, u2 = 7; 0 != u2 && s2 > 0; )
              i2 = c2[u2], c2[u2--] = c2[l2 + s2 - 1], c2[l2 + --s2] = i2;
          else if (8 != u2)
            return;
          return c2;
        }(um(e2, 1, -1))))
          return "Invalid host";
        this.host = t2;
      } else if (this.isSpecial()) {
        if (e2 = function(e3) {
          var t3, n3, o3 = [], r2 = Wh(jh(Yh(e3), bh, "."), ".");
          for (t3 = 0; t3 < r2.length; t3++)
            n3 = r2[t3], Hh(o3, qh(Uh, n3) ? "xn--" + Jh(n3) : n3);
          return Kh(o3, ".");
        }(e2), tm(vm, e2))
          return "Invalid host";
        if (null === (t2 = function(e3) {
          var t3, n3, o3, r2, a2, s2, i2, c2 = cm(e3, ".");
          if (c2.length && "" == c2[c2.length - 1] && c2.length--, (t3 = c2.length) > 4)
            return e3;
          for (n3 = [], o3 = 0; o3 < t3; o3++) {
            if ("" == (r2 = c2[o3]))
              return e3;
            if (a2 = 10, r2.length > 1 && "0" == em(r2, 0) && (a2 = tm(hm, r2) ? 16 : 8, r2 = um(r2, 8 == a2 ? 1 : 2)), "" === r2)
              s2 = 0;
            else {
              if (!tm(10 == a2 ? mm : 8 == a2 ? fm : Mm, r2))
                return e3;
              s2 = Xf(r2, a2);
            }
            am(n3, s2);
          }
          for (o3 = 0; o3 < t3; o3++)
            if (s2 = n3[o3], o3 == t3 - 1) {
              if (s2 >= Zf(256, 5 - t3))
                return null;
            } else if (s2 > 255)
              return null;
          for (i2 = rm(n3), o3 = 0; o3 < n3.length; o3++)
            i2 += n3[o3] * Zf(256, 3 - o3);
          return i2;
        }(e2)))
          return "Invalid host";
        this.host = t2;
      } else {
        if (tm(ym, e2))
          return "Invalid host";
        for (t2 = "", n2 = So(e2), o2 = 0; o2 < n2.length; o2++)
          t2 += Nm(n2[o2], Sm);
        this.host = t2;
      }
    }, cannotHaveUsernamePasswordPort: function() {
      return !this.host || this.cannotBeABaseURL || "file" == this.scheme;
    }, includesCredentials: function() {
      return "" != this.username || "" != this.password;
    }, isSpecial: function() {
      return Ne(Om, this.scheme);
    }, shortenPath: function() {
      var e2 = this.path, t2 = e2.length;
      !t2 || "file" == this.scheme && 1 == t2 && Rm(e2[0], true) || e2.length--;
    }, serialize: function() {
      var e2 = this, t2 = e2.scheme, n2 = e2.username, o2 = e2.password, r2 = e2.host, a2 = e2.port, s2 = e2.path, i2 = e2.query, c2 = e2.fragment, u2 = t2 + ":";
      return null !== r2 ? (u2 += "//", e2.includesCredentials() && (u2 += n2 + (o2 ? ":" + o2 : "") + "@"), u2 += Tm(r2), null !== a2 && (u2 += ":" + a2)) : "file" == t2 && (u2 += "//"), u2 += e2.cannotBeABaseURL ? s2[0] : s2.length ? "/" + nm(s2, "/") : "", null !== i2 && (u2 += "?" + i2), null !== c2 && (u2 += "#" + c2), u2;
    }, setHref: function(e2) {
      var t2 = this.parse(e2);
      if (t2)
        throw Jf(t2);
      this.searchParams.update();
    }, getOrigin: function() {
      var e2 = this.scheme, t2 = this.port;
      if ("blob" == e2)
        try {
          return new tM(e2.path[0]).origin;
        } catch (fS) {
          return "null";
        }
      return "file" != e2 && this.isSpecial() ? e2 + "://" + Tm(this.host) + (null !== t2 ? ":" + t2 : "") : "null";
    }, getProtocol: function() {
      return this.scheme + ":";
    }, setProtocol: function(e2) {
      this.parse(dn(e2) + ":", Gm);
    }, getUsername: function() {
      return this.username;
    }, setUsername: function(e2) {
      var t2 = So(dn(e2));
      if (!this.cannotHaveUsernamePasswordPort()) {
        this.username = "";
        for (var n2 = 0; n2 < t2.length; n2++)
          this.username += Nm(t2[n2], Dm);
      }
    }, getPassword: function() {
      return this.password;
    }, setPassword: function(e2) {
      var t2 = So(dn(e2));
      if (!this.cannotHaveUsernamePasswordPort()) {
        this.password = "";
        for (var n2 = 0; n2 < t2.length; n2++)
          this.password += Nm(t2[n2], Dm);
      }
    }, getHost: function() {
      var e2 = this.host, t2 = this.port;
      return null === e2 ? "" : null === t2 ? Tm(e2) : Tm(e2) + ":" + t2;
    }, setHost: function(e2) {
      this.cannotBeABaseURL || this.parse(e2, Km);
    }, getHostname: function() {
      var e2 = this.host;
      return null === e2 ? "" : Tm(e2);
    }, setHostname: function(e2) {
      this.cannotBeABaseURL || this.parse(e2, Hm);
    }, getPort: function() {
      var e2 = this.port;
      return null === e2 ? "" : dn(e2);
    }, setPort: function(e2) {
      this.cannotHaveUsernamePasswordPort() || ("" == (e2 = dn(e2)) ? this.port = null : this.parse(e2, jm));
    }, getPathname: function() {
      var e2 = this.path;
      return this.cannotBeABaseURL ? e2[0] : e2.length ? "/" + nm(e2, "/") : "";
    }, setPathname: function(e2) {
      this.cannotBeABaseURL || (this.path = [], this.parse(e2, zm));
    }, getSearch: function() {
      var e2 = this.query;
      return e2 ? "?" + e2 : "";
    }, setSearch: function(e2) {
      "" == (e2 = dn(e2)) ? this.query = null : ("?" == em(e2, 0) && (e2 = um(e2, 1)), this.query = "", this.parse(e2, Qm)), this.searchParams.update();
    }, getSearchParams: function() {
      return this.searchParams.facade;
    }, getHash: function() {
      var e2 = this.fragment;
      return e2 ? "#" + e2 : "";
    }, setHash: function(e2) {
      "" != (e2 = dn(e2)) ? ("#" == em(e2, 0) && (e2 = um(e2, 1)), this.fragment = "", this.parse(e2, Zm)) : this.fragment = null;
    }, update: function() {
      this.query = this.searchParams.serialize() || null;
    } };
    var tM = function(e2) {
      var t2 = ki(this, nM), n2 = Bi(arguments.length, 1) > 1 ? arguments[1] : void 0, o2 = jf(t2, new eM(e2, false, n2));
      k || (t2.href = o2.serialize(), t2.origin = o2.getOrigin(), t2.protocol = o2.getProtocol(), t2.username = o2.getUsername(), t2.password = o2.getPassword(), t2.host = o2.getHost(), t2.hostname = o2.getHostname(), t2.port = o2.getPort(), t2.pathname = o2.getPathname(), t2.search = o2.getSearch(), t2.searchParams = o2.getSearchParams(), t2.hash = o2.getHash());
    }, nM = tM.prototype, oM = function(e2, t2) {
      return { get: function() {
        return Wf(this)[e2]();
      }, set: t2 && function(e3) {
        return Wf(this)[t2](e3);
      }, configurable: true, enumerable: true };
    };
    if (k && Kf(nM, { href: oM("serialize", "setHref"), origin: oM("getOrigin"), protocol: oM("getProtocol", "setProtocol"), username: oM("getUsername", "setUsername"), password: oM("getPassword", "setPassword"), host: oM("getHost", "setHost"), hostname: oM("getHostname", "setHostname"), port: oM("getPort", "setPort"), pathname: oM("getPathname", "setPathname"), search: oM("getSearch", "setSearch"), searchParams: oM("getSearchParams"), hash: oM("getHash", "setHash") }), At(nM, "toJSON", function() {
      return Wf(this).serialize();
    }, { enumerable: true }), At(nM, "toString", function() {
      return Wf(this).serialize();
    }, { enumerable: true }), zf) {
      var rM = zf.createObjectURL, aM = zf.revokeObjectURL;
      rM && At(tM, "createObjectURL", wn(rM, zf)), aM && At(tM, "revokeObjectURL", wn(aM, zf));
    }
    zo(tM, "URL"), nn({ global: true, forced: !Rh, sham: !k }, { URL: tM }), nn({ target: "Object", stat: true, forced: Object.assign !== Ph }, { assign: Ph });
    var sM = function() {
      function e2(t2) {
        o(this, e2), this._imageMemoryURL = "", Hu ? this.createImageDataASURLInWXMiniApp(t2.file) : this.createImageDataASURLInWeb(t2.file), this._initImageInfoModel(), this.type = gr.MSG_IMAGE, this._percent = 0, this.content = { imageFormat: t2.imageFormat || wl.UNKNOWN, uuid: t2.uuid, imageInfoArray: [] }, this.initImageInfoArray(t2.imageInfoArray), this._defaultImage = "http://imgcache.qq.com/open/qcloud/video/act/webim-images/default.jpg", this._autoFixUrl();
      }
      return a(e2, [{ key: "_initImageInfoModel", value: function() {
        var e3 = this;
        this._ImageInfoModel = function(t2) {
          this.instanceID = ld(9999999), this.sizeType = t2.type || 0, this.type = 0, this.size = t2.size || 0, this.width = t2.width || 0, this.height = t2.height || 0, this.imageUrl = t2.url || "", this.url = t2.url || e3._imageMemoryURL || e3._defaultImage;
        }, this._ImageInfoModel.prototype = { setSizeType: function(e4) {
          this.sizeType = e4;
        }, setType: function(e4) {
          this.type = e4;
        }, setImageUrl: function(e4) {
          e4 && (this.imageUrl = e4);
        }, getImageUrl: function() {
          return this.imageUrl;
        } };
      } }, { key: "initImageInfoArray", value: function(e3) {
        for (var t2 = 0, n2 = null, o2 = null; t2 <= 2; )
          o2 = Zl(e3) || Zl(e3[t2]) ? { type: 0, size: 0, width: 0, height: 0, url: "" } : e3[t2], (n2 = new this._ImageInfoModel(o2)).setSizeType(t2 + 1), n2.setType(t2), this.addImageInfo(n2), t2++;
        this.updateAccessSideImageInfoArray();
      } }, { key: "updateImageInfoArray", value: function(e3) {
        for (var t2, n2 = this.content.imageInfoArray.length, o2 = 0; o2 < n2; o2++)
          t2 = this.content.imageInfoArray[o2], e3[o2].size && (t2.size = e3[o2].size), e3[o2].url && t2.setImageUrl(e3[o2].url), e3[o2].width && (t2.width = e3[o2].width), e3[o2].height && (t2.height = e3[o2].height);
      } }, { key: "_autoFixUrl", value: function() {
        for (var e3 = this.content.imageInfoArray.length, t2 = "", n2 = "", o2 = ["http", "https"], r2 = null, a2 = 0; a2 < e3; a2++)
          this.content.imageInfoArray[a2].url && "" !== (r2 = this.content.imageInfoArray[a2]).imageUrl && (n2 = r2.imageUrl.slice(0, r2.imageUrl.indexOf("://") + 1), t2 = r2.imageUrl.slice(r2.imageUrl.indexOf("://") + 1), o2.indexOf(n2) < 0 && (n2 = "https:"), this.content.imageInfoArray[a2].setImageUrl([n2, t2].join("")));
      } }, { key: "updatePercent", value: function(e3) {
        this._percent = e3, this._percent > 1 && (this._percent = 1);
      } }, { key: "updateImageFormat", value: function(e3) {
        this.content.imageFormat = wl[e3.toUpperCase()] || wl.UNKNOWN;
      } }, { key: "createImageDataASURLInWeb", value: function(e3) {
        void 0 !== e3 && e3.files.length > 0 && (this._imageMemoryURL = window.URL.createObjectURL(e3.files[0]));
      } }, { key: "createImageDataASURLInWXMiniApp", value: function(e3) {
        e3 && e3.url && (this._imageMemoryURL = e3.url);
      } }, { key: "replaceImageInfo", value: function(e3, t2) {
        this.content.imageInfoArray[t2] instanceof this._ImageInfoModel || (this.content.imageInfoArray[t2] = e3);
      } }, { key: "addImageInfo", value: function(e3) {
        this.content.imageInfoArray.length >= 3 || this.content.imageInfoArray.push(e3);
      } }, { key: "updateAccessSideImageInfoArray", value: function() {
        var e3 = this.content.imageInfoArray, t2 = e3[0], n2 = t2.width, o2 = void 0 === n2 ? 0 : n2, r2 = t2.height, a2 = void 0 === r2 ? 0 : r2;
        0 !== o2 && 0 !== a2 && (kd(e3), Object.assign(e3[2], Ld({ originWidth: o2, originHeight: a2, min: 720 })));
      } }, { key: "sendable", value: function() {
        return 0 !== this.content.imageInfoArray.length && ("" !== this.content.imageInfoArray[0].imageUrl && 0 !== this.content.imageInfoArray[0].size);
      } }]), e2;
    }(), iM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_FACE, this.content = t2 || null;
      }
      return a(e2, [{ key: "sendable", value: function() {
        return null !== this.content;
      } }]), e2;
    }(), cM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_AUDIO, this._percent = 0, this.content = { downloadFlag: 2, second: t2.second, size: t2.size, url: t2.url, remoteAudioUrl: t2.url || "", uuid: t2.uuid };
      }
      return a(e2, [{ key: "updatePercent", value: function(e3) {
        this._percent = e3, this._percent > 1 && (this._percent = 1);
      } }, { key: "updateAudioUrl", value: function(e3) {
        this.content.remoteAudioUrl = e3;
      } }, { key: "sendable", value: function() {
        return "" !== this.content.remoteAudioUrl;
      } }]), e2;
    }(), uM = { from: true, groupID: true, groupName: true, to: true }, lM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_GRP_TIP, this.content = {}, this._initContent(t2);
      }
      return a(e2, [{ key: "_initContent", value: function(e3) {
        var t2 = this;
        Object.keys(e3).forEach(function(n2) {
          switch (n2) {
            case "remarkInfo":
              break;
            case "groupProfile":
              t2.content.groupProfile = {}, t2._initGroupProfile(e3[n2]);
              break;
            case "operatorInfo":
              break;
            case "memberInfoList":
            case "msgMemberInfo":
              t2._updateMemberList(e3[n2]);
              break;
            case "onlineMemberInfo":
              break;
            case "memberNum":
              t2.content[n2] = e3[n2], t2.content.memberCount = e3[n2];
              break;
            case "newGroupProfile":
              t2.content.newGroupProfile = {}, t2._initNewGroupProfile(e3[n2]);
              break;
            default:
              t2.content[n2] = e3[n2];
          }
        }), this.content.userIDList || (this.content.userIDList = [this.content.operatorID]);
      } }, { key: "_initGroupProfile", value: function(e3) {
        for (var t2 = Object.keys(e3), n2 = 0; n2 < t2.length; n2++) {
          var o2 = t2[n2];
          uM[o2] && (this.content.groupProfile[o2] = e3[o2]);
        }
      } }, { key: "_updateMemberList", value: function(e3) {
        xd(this.content.memberList) ? this.content.memberList = e3 : this.content.memberList.forEach(function(t2) {
          e3.forEach(function(e4) {
            t2.userID === e4.userID && Object.assign(t2, e4);
          });
        });
      } }, { key: "_initNewGroupProfile", value: function(e3) {
        for (var t2 = Object.keys(e3), n2 = 0; n2 < t2.length; n2++) {
          var o2 = t2[n2];
          "muteAllMembers" !== o2 ? this.content.newGroupProfile[o2] = e3[o2] : this.content.newGroupProfile[o2] = 1 === e3[o2];
        }
      } }]), e2;
    }(), dM = { from: true, groupID: true, groupName: true, to: true }, pM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_GRP_SYS_NOTICE, this.content = {}, this._initContent(t2);
      }
      return a(e2, [{ key: "_initContent", value: function(e3) {
        var t2 = this;
        Object.keys(e3).forEach(function(n2) {
          switch (n2) {
            case "memberInfoList":
              break;
            case "remarkInfo":
              t2.content.handleMessage = e3[n2];
              break;
            case "groupProfile":
              t2.content.groupProfile = {}, t2._initGroupProfile(e3[n2]);
              break;
            default:
              t2.content[n2] = e3[n2];
          }
        });
      } }, { key: "_initGroupProfile", value: function(e3) {
        for (var t2 = Object.keys(e3), n2 = 0; n2 < t2.length; n2++) {
          var o2 = t2[n2];
          dM[o2] && ("groupName" === o2 ? this.content.groupProfile.name = e3[o2] : this.content.groupProfile[o2] = e3[o2]);
        }
      } }]), e2;
    }(), gM = Math.min, _M = [].lastIndexOf, hM = !!_M && 1 / [1].lastIndexOf(1, -0) < 0, fM = eo("lastIndexOf"), mM = hM || !fM ? function(e2) {
      if (hM)
        return Es(_M, this, arguments) || 0;
      var t2 = Z(this), n2 = Ut(t2), o2 = n2 - 1;
      for (arguments.length > 1 && (o2 = gM(o2, Ot(arguments[1]))), o2 < 0 && (o2 = n2 + o2); o2 >= 0; o2--)
        if (o2 in t2 && t2[o2] === e2)
          return o2 || 0;
      return -1;
    } : _M;
    nn({ target: "Array", proto: true, forced: mM !== [].lastIndexOf }, { lastIndexOf: mM });
    var MM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_FILE, this._percent = 0;
        var n2 = this._getFileInfo(t2);
        this.content = { downloadFlag: 2, fileUrl: t2.url || "", uuid: t2.uuid, fileName: n2.name || "", fileSize: n2.size || 0 };
      }
      return a(e2, [{ key: "_getFileInfo", value: function(e3) {
        if (!Zl(e3.fileName) && !Zl(e3.fileSize))
          return { size: e3.fileSize, name: e3.fileName };
        var t2 = e3.file.files[0];
        if (Bu) {
          if (t2.path && -1 !== t2.path.indexOf(".")) {
            var n2 = t2.path.slice(t2.path.lastIndexOf(".") + 1).toLowerCase();
            t2.type = n2, t2.name || (t2.name = "".concat(ld(999999), ".").concat(n2));
          }
          t2.name || (t2.type = "", t2.name = t2.path.slice(t2.path.lastIndexOf("/") + 1).toLowerCase()), t2.suffix && (t2.type = t2.suffix), t2.url || (t2.url = t2.path);
        }
        return { size: t2.size, name: t2.name };
      } }, { key: "updatePercent", value: function(e3) {
        this._percent = e3, this._percent > 1 && (this._percent = 1);
      } }, { key: "updateFileUrl", value: function(e3) {
        this.content.fileUrl = e3;
      } }, { key: "sendable", value: function() {
        return "" !== this.content.fileUrl && ("" !== this.content.fileName && 0 !== this.content.fileSize);
      } }]), e2;
    }(), vM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_CUSTOM, this.content = { data: t2.data || "", description: t2.description || "", extension: t2.extension || "" };
      }
      return a(e2, [{ key: "setData", value: function(e3) {
        return this.content.data = e3, this;
      } }, { key: "setDescription", value: function(e3) {
        return this.content.description = e3, this;
      } }, { key: "setExtension", value: function(e3) {
        return this.content.extension = e3, this;
      } }, { key: "sendable", value: function() {
        return 0 !== this.content.data.length || 0 !== this.content.description.length || 0 !== this.content.extension.length;
      } }]), e2;
    }(), yM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_VIDEO, this._percent = 0, this.content = { remoteVideoUrl: t2.remoteVideoUrl || t2.videoUrl || "", videoFormat: t2.videoFormat, videoSecond: parseInt(t2.videoSecond, 10), videoSize: t2.videoSize, videoUrl: t2.videoUrl, videoDownloadFlag: 2, videoUUID: t2.videoUUID, thumbUUID: t2.thumbUUID, thumbFormat: t2.thumbFormat, thumbWidth: t2.thumbWidth, snapshotWidth: t2.thumbWidth, thumbHeight: t2.thumbHeight, snapshotHeight: t2.thumbHeight, thumbSize: t2.thumbSize, snapshotSize: t2.thumbSize, thumbDownloadFlag: 2, thumbUrl: t2.thumbUrl, snapshotUrl: t2.thumbUrl };
      }
      return a(e2, [{ key: "updatePercent", value: function(e3) {
        this._percent = e3, this._percent > 1 && (this._percent = 1);
      } }, { key: "updateVideoUrl", value: function(e3) {
        e3 && (this.content.remoteVideoUrl = e3);
      } }, { key: "updateSnapshotInfo", value: function(e3) {
        var t2 = e3.snapshotUrl, n2 = e3.snapshotWidth, o2 = e3.snapshotHeight;
        xd(t2) || (this.content.thumbUrl = this.content.snapshotUrl = t2), xd(n2) || (this.content.thumbWidth = this.content.snapshotWidth = Number(n2)), xd(o2) || (this.content.thumbHeight = this.content.snapshotHeight = Number(o2));
      } }, { key: "sendable", value: function() {
        return "" !== this.content.remoteVideoUrl;
      } }]), e2;
    }(), IM = function() {
      function e2(t2) {
        o(this, e2), this.type = gr.MSG_LOCATION;
        var n2 = t2.description, r2 = t2.longitude, a2 = t2.latitude;
        this.content = { description: n2, longitude: r2, latitude: a2 };
      }
      return a(e2, [{ key: "sendable", value: function() {
        return true;
      } }]), e2;
    }(), EM = function() {
      function e2(t2) {
        if (o(this, e2), this.from = t2.from, this.messageSender = t2.from, this.time = t2.time, this.messageSequence = t2.sequence, this.clientSequence = t2.clientSequence || t2.sequence, this.messageRandom = t2.random, this.cloudCustomData = t2.cloudCustomData || "", t2.ID)
          this.nick = t2.nick || "", this.avatar = t2.avatar || "", this.messageBody = [{ type: t2.type, payload: t2.payload }], t2.conversationType.startsWith(gr.CONV_C2C) ? this.receiverUserID = t2.to : t2.conversationType.startsWith(gr.CONV_GROUP) && (this.receiverGroupID = t2.to), this.messageReceiver = t2.to;
        else {
          this.nick = t2.nick || "", this.avatar = t2.avatar || "", this.messageBody = [];
          var n2 = t2.elements[0].type, r2 = t2.elements[0].content;
          this._patchRichMediaPayload(n2, r2), n2 === gr.MSG_MERGER ? this.messageBody.push({ type: n2, payload: new TM(r2).content }) : this.messageBody.push({ type: n2, payload: r2 }), t2.groupID && (this.receiverGroupID = t2.groupID, this.messageReceiver = t2.groupID), t2.to && (this.receiverUserID = t2.to, this.messageReceiver = t2.to);
        }
      }
      return a(e2, [{ key: "_patchRichMediaPayload", value: function(e3, t2) {
        e3 === gr.MSG_IMAGE ? t2.imageInfoArray.forEach(function(e4) {
          !e4.imageUrl && e4.url && (e4.imageUrl = e4.url, e4.sizeType = e4.type, 1 === e4.type ? e4.type = 0 : 3 === e4.type && (e4.type = 1));
        }) : e3 === gr.MSG_VIDEO ? !t2.remoteVideoUrl && t2.videoUrl && (t2.remoteVideoUrl = t2.videoUrl) : e3 === gr.MSG_AUDIO ? !t2.remoteAudioUrl && t2.url && (t2.remoteAudioUrl = t2.url) : e3 === gr.MSG_FILE && !t2.fileUrl && t2.url && (t2.fileUrl = t2.url, t2.url = void 0);
      } }]), e2;
    }(), TM = function() {
      function e2(t2) {
        if (o(this, e2), this.type = gr.MSG_MERGER, this.content = { downloadKey: "", pbDownloadKey: "", messageList: [], title: "", abstractList: [], compatibleText: "", version: 0, layersOverLimit: false }, t2.downloadKey) {
          var n2 = t2.downloadKey, r2 = t2.pbDownloadKey, a2 = t2.title, s2 = t2.abstractList, i2 = t2.compatibleText, c2 = t2.version;
          this.content.downloadKey = n2, this.content.pbDownloadKey = r2, this.content.title = a2, this.content.abstractList = s2, this.content.compatibleText = i2, this.content.version = c2 || 0;
        } else if (xd(t2.messageList))
          1 === t2.layersOverLimit && (this.content.layersOverLimit = true);
        else {
          var u2 = t2.messageList, l2 = t2.title, d2 = t2.abstractList, p3 = t2.compatibleText, g2 = t2.version, _2 = [];
          u2.forEach(function(e3) {
            if (!xd(e3)) {
              var t3 = new EM(e3);
              _2.push(t3);
            }
          }), this.content.messageList = _2, this.content.title = l2, this.content.abstractList = d2, this.content.compatibleText = p3, this.content.version = g2 || 0;
        }
        bl.debug("MergerElement.content:", this.content);
      }
      return a(e2, [{ key: "sendable", value: function() {
        return !xd(this.content.messageList) || !xd(this.content.downloadKey);
      } }]), e2;
    }(), SM = { 1: gr.MSG_PRIORITY_HIGH, 2: gr.MSG_PRIORITY_NORMAL, 3: gr.MSG_PRIORITY_LOW, 4: gr.MSG_PRIORITY_LOWEST }, CM = function() {
      function e2(t2) {
        o(this, e2), this.ID = "", this.conversationID = t2.conversationID || null, this.conversationType = t2.conversationType || gr.CONV_C2C, this.conversationSubType = t2.conversationSubType, this.time = t2.time || Math.ceil(Date.now() / 1e3), this.sequence = t2.sequence || 0, this.clientSequence = t2.clientSequence || t2.sequence || 0, this.random = t2.random || 0 === t2.random ? t2.random : ld(), this.priority = this._computePriority(t2.priority), this.nick = t2.nick || "", this.avatar = t2.avatar || "", this.isPeerRead = 1 === t2.isPeerRead || false, this.nameCard = "", this._elements = [], this.isPlaceMessage = t2.isPlaceMessage || 0, this.isRevoked = 2 === t2.isPlaceMessage || 8 === t2.msgFlagBits, this.from = t2.from || null, this.to = t2.to || null, this.flow = "", this.isSystemMessage = t2.isSystemMessage || false, this.protocol = t2.protocol || "JSON", this.isResend = false, this.isRead = false, this.status = t2.status || bp.SUCCESS, this._onlineOnlyFlag = false, this._groupAtInfoList = [], this._relayFlag = false, this.atUserList = [], this.cloudCustomData = t2.cloudCustomData || "", this.isDeleted = false, this.isModified = false, this._isExcludedFromUnreadCount = !(!t2.messageControlInfo || 1 !== t2.messageControlInfo.excludedFromUnreadCount), this._isExcludedFromLastMessage = !(!t2.messageControlInfo || 1 !== t2.messageControlInfo.excludedFromLastMessage), this.clientTime = t2.clientTime || kl() || 0, this.senderTinyID = t2.senderTinyID || t2.tinyID || "", this.readReceiptInfo = t2.readReceiptInfo || { readCount: void 0, unreadCount: void 0 }, this.needReadReceipt = true === t2.needReadReceipt || 1 === t2.needReadReceipt, this.version = t2.messageVersion || 0, this.isBroadcastMessage = t2.isBroadcastMessage || false, this.reInitialize(t2.currentUser), this.extractGroupInfo(t2.groupProfile || null), this.handleGroupAtInfo(t2);
      }
      return a(e2, [{ key: "elements", get: function() {
        return bl.warn("\uFF01\uFF01\uFF01Message \u5B9E\u4F8B\u7684 elements \u5C5E\u6027\u5373\u5C06\u5E9F\u5F03\uFF0C\u8BF7\u5C3D\u5FEB\u4FEE\u6539\u3002\u4F7F\u7528 type \u548C payload \u5C5E\u6027\u5904\u7406\u5355\u6761\u6D88\u606F\uFF0C\u517C\u5BB9\u7EC4\u5408\u6D88\u606F\u4F7F\u7528 _elements \u5C5E\u6027\uFF01\uFF01\uFF01"), this._elements;
      } }, { key: "getElements", value: function() {
        return this._elements;
      } }, { key: "extractGroupInfo", value: function(e3) {
        if (null !== e3) {
          zl(e3.nick) && (this.nick = e3.nick), zl(e3.avatar) && (this.avatar = e3.avatar);
          var t2 = e3.messageFromAccountExtraInformation;
          Xl(t2) && zl(t2.nameCard) && (this.nameCard = t2.nameCard);
        }
      } }, { key: "handleGroupAtInfo", value: function(e3) {
        var t2 = this;
        e3.payload && e3.payload.atUserList && e3.payload.atUserList.forEach(function(e4) {
          e4 !== gr.MSG_AT_ALL ? (t2._groupAtInfoList.push({ groupAtAllFlag: 0, groupAtUserID: e4 }), t2.atUserList.push(e4)) : (t2._groupAtInfoList.push({ groupAtAllFlag: 1 }), t2.atUserList.push(gr.MSG_AT_ALL));
        }), Ql(e3.groupAtInfo) && e3.groupAtInfo.forEach(function(e4) {
          0 === e4.groupAtAllFlag ? t2.atUserList.push(e4.groupAtUserID) : 1 === e4.groupAtAllFlag && t2.atUserList.push(gr.MSG_AT_ALL);
        });
      } }, { key: "getGroupAtInfoList", value: function() {
        return this._groupAtInfoList;
      } }, { key: "_initProxy", value: function() {
        this._elements[0] && (this.payload = this._elements[0].content, this.type = this._elements[0].type);
      } }, { key: "reInitialize", value: function(e3) {
        e3 && (this.status = this.from ? bp.SUCCESS : bp.UNSEND, !this.from && (this.from = e3)), this._initFlow(e3), this._initSequence(e3), this._concatConversationID(e3), this.generateMessageID();
      } }, { key: "isSendable", value: function() {
        return 0 !== this._elements.length && ("function" != typeof this._elements[0].sendable ? (bl.warn("".concat(this._elements[0].type, ' need "boolean : sendable()" method')), false) : this._elements[0].sendable());
      } }, { key: "_initTo", value: function(e3) {
        this.conversationType === gr.CONV_GROUP && (this.to = e3.groupID);
      } }, { key: "_initSequence", value: function(e3) {
        0 === this.clientSequence && e3 && (this.clientSequence = function(e4) {
          if (!e4)
            return bl.error("autoIncrementIndex(string: key) need key parameter"), false;
          if (void 0 === _d[e4]) {
            var t2 = new Date(), n2 = "3".concat(t2.getHours()).slice(-2), o2 = "0".concat(t2.getMinutes()).slice(-2), r2 = "0".concat(t2.getSeconds()).slice(-2);
            _d[e4] = parseInt([n2, o2, r2, "0001"].join("")), n2 = null, o2 = null, r2 = null, bl.log("autoIncrementIndex start index:".concat(_d[e4]));
          }
          return _d[e4]++;
        }(e3)), 0 === this.sequence && this.conversationType === gr.CONV_C2C && (this.sequence = this.clientSequence);
      } }, { key: "generateMessageID", value: function() {
        this.from === gr.CONV_SYSTEM && (this.senderTinyID = "144115198244471703"), this.ID = "".concat(this.senderTinyID, "-").concat(this.clientTime, "-").concat(this.random);
      } }, { key: "_initFlow", value: function(e3) {
        "" !== e3 && (e3 === this.from ? (this.flow = "out", this.isRead = true) : this.flow = "in");
      } }, { key: "_concatConversationID", value: function(e3) {
        var t2 = this.to, n2 = "", o2 = this.conversationType;
        o2 !== gr.CONV_SYSTEM ? (n2 = o2 === gr.CONV_C2C ? e3 === this.from ? t2 : this.from : this.to, this.conversationID = "".concat(o2).concat(n2)) : this.conversationID = gr.CONV_SYSTEM;
      } }, { key: "isElement", value: function(e3) {
        return e3 instanceof Nh || e3 instanceof sM || e3 instanceof iM || e3 instanceof cM || e3 instanceof MM || e3 instanceof yM || e3 instanceof lM || e3 instanceof pM || e3 instanceof vM || e3 instanceof IM || e3 instanceof TM;
      } }, { key: "setElement", value: function(e3) {
        var t2 = this;
        if (this.isElement(e3))
          return this._elements = [e3], void this._initProxy();
        var n2 = function(e4) {
          if (e4.type && e4.content)
            switch (e4.type) {
              case gr.MSG_TEXT:
                t2.setTextElement(e4.content);
                break;
              case gr.MSG_IMAGE:
                t2.setImageElement(e4.content);
                break;
              case gr.MSG_AUDIO:
                t2.setAudioElement(e4.content);
                break;
              case gr.MSG_FILE:
                t2.setFileElement(e4.content);
                break;
              case gr.MSG_VIDEO:
                t2.setVideoElement(e4.content);
                break;
              case gr.MSG_CUSTOM:
                t2.setCustomElement(e4.content);
                break;
              case gr.MSG_LOCATION:
                t2.setLocationElement(e4.content);
                break;
              case gr.MSG_GRP_TIP:
                t2.setGroupTipElement(e4.content);
                break;
              case gr.MSG_GRP_SYS_NOTICE:
                t2.setGroupSystemNoticeElement(e4.content);
                break;
              case gr.MSG_FACE:
                t2.setFaceElement(e4.content);
                break;
              case gr.MSG_MERGER:
                t2.setMergerElement(e4.content);
                break;
              default:
                bl.warn(e4.type, e4.content, "no operation......");
            }
        };
        if (Ql(e3))
          for (var o2 = 0; o2 < e3.length; o2++)
            n2(e3[o2]);
        else
          n2(e3);
        this._initProxy();
      } }, { key: "clearElement", value: function() {
        this._elements.length = 0;
      } }, { key: "setTextElement", value: function(e3) {
        var t2 = "string" == typeof e3 ? e3 : e3.text, n2 = new Nh({ text: t2 });
        this._elements.push(n2);
      } }, { key: "setImageElement", value: function(e3) {
        var t2 = new sM(e3);
        this._elements.push(t2);
      } }, { key: "setAudioElement", value: function(e3) {
        var t2 = new cM(e3);
        this._elements.push(t2);
      } }, { key: "setFileElement", value: function(e3) {
        var t2 = new MM(e3);
        this._elements.push(t2);
      } }, { key: "setVideoElement", value: function(e3) {
        var t2 = new yM(e3);
        this._elements.push(t2);
      } }, { key: "setLocationElement", value: function(e3) {
        var t2 = new IM(e3);
        this._elements.push(t2);
      } }, { key: "setCustomElement", value: function(e3) {
        var t2 = new vM(e3);
        this._elements.push(t2);
      } }, { key: "setGroupTipElement", value: function(e3) {
        var t2 = {}, n2 = e3.operationType;
        xd(e3.memberInfoList) ? e3.operatorInfo && (t2 = e3.operatorInfo) : n2 !== gr.GRP_TIP_MBR_JOIN && n2 !== gr.GRP_TIP_MBR_KICKED_OUT && n2 !== gr.GRP_TIP_MBR_SET_ADMIN && n2 !== gr.GRP_TIP_MBR_CANCELED_ADMIN || (t2 = e3.memberInfoList[0]);
        var o2 = t2, r2 = o2.nick, a2 = o2.avatar;
        zl(r2) && (this.nick = r2), zl(a2) && (this.avatar = a2);
        var s2 = new lM(e3);
        this._elements.push(s2);
      } }, { key: "setGroupSystemNoticeElement", value: function(e3) {
        var t2 = new pM(e3);
        this._elements.push(t2);
      } }, { key: "setFaceElement", value: function(e3) {
        var t2 = new iM(e3);
        this._elements.push(t2);
      } }, { key: "setMergerElement", value: function(e3) {
        var t2 = new TM(e3);
        this._elements.push(t2);
      } }, { key: "setIsRead", value: function(e3) {
        this.isRead = e3;
      } }, { key: "setRelayFlag", value: function(e3) {
        this._relayFlag = e3;
      } }, { key: "getRelayFlag", value: function() {
        return this._relayFlag;
      } }, { key: "_computePriority", value: function(e3) {
        if (Zl(e3))
          return gr.MSG_PRIORITY_NORMAL;
        if (zl(e3) && -1 !== Object.values(SM).indexOf(e3))
          return e3;
        if ($l(e3)) {
          var t2 = "" + e3;
          if (-1 !== Object.keys(SM).indexOf(t2))
            return SM[t2];
        }
        return gr.MSG_PRIORITY_NORMAL;
      } }, { key: "setNickAndAvatar", value: function(e3) {
        var t2 = e3.nick, n2 = e3.avatar;
        zl(t2) && (this.nick = t2), zl(n2) && (this.avatar = n2);
      } }, { key: "setNameCard", value: function(e3) {
        zl(e3) && (this.nameCard = e3);
      } }]), e2;
    }(), AM = function(e2) {
      return { code: 0, data: e2 || {} };
    }, DM = "https://cloud.tencent.com/document/product/", NM = "\u60A8\u53EF\u4EE5\u5728\u5373\u65F6\u901A\u4FE1 IM \u63A7\u5236\u53F0\u7684\u3010\u5F00\u53D1\u8F85\u52A9\u5DE5\u5177(https://console.cloud.tencent.com/im-detail/tool-usersig)\u3011 \u9875\u9762\u6821\u9A8C UserSig\u3002", OM = "UserSig \u975E\u6CD5\uFF0C\u8BF7\u4F7F\u7528\u5B98\u7F51\u63D0\u4F9B\u7684 API \u91CD\u65B0\u751F\u6210 UserSig(".concat(DM, "269/32688)\u3002"), RM = "#.E6.B6.88.E6.81.AF.E5.85.83.E7.B4.A0-timmsgelement", LM = { 70001: "UserSig \u5DF2\u8FC7\u671F\uFF0C\u8BF7\u91CD\u65B0\u751F\u6210\u3002\u5EFA\u8BAE UserSig \u6709\u6548\u671F\u8BBE\u7F6E\u4E0D\u5C0F\u4E8E24\u5C0F\u65F6\u3002", 70002: "UserSig \u957F\u5EA6\u4E3A0\uFF0C\u8BF7\u68C0\u67E5\u4F20\u5165\u7684 UserSig \u662F\u5426\u6B63\u786E\u3002", 70003: OM, 70005: OM, 70009: "UserSig \u9A8C\u8BC1\u5931\u8D25\uFF0C\u53EF\u80FD\u56E0\u4E3A\u751F\u6210 UserSig \u65F6\u6DF7\u7528\u4E86\u5176\u4ED6 SDKAppID \u7684\u79C1\u94A5\u6216\u5BC6\u94A5\u5BFC\u81F4\uFF0C\u8BF7\u4F7F\u7528\u5BF9\u5E94 SDKAppID \u4E0B\u7684\u79C1\u94A5\u6216\u5BC6\u94A5\u91CD\u65B0\u751F\u6210 UserSig(".concat(DM, "269/32688)\u3002"), 70013: "\u8BF7\u6C42\u4E2D\u7684 UserID \u4E0E\u751F\u6210 UserSig \u65F6\u4F7F\u7528\u7684 UserID \u4E0D\u5339\u914D\u3002".concat(NM), 70014: "\u8BF7\u6C42\u4E2D\u7684 SDKAppID \u4E0E\u751F\u6210 UserSig \u65F6\u4F7F\u7528\u7684 SDKAppID \u4E0D\u5339\u914D\u3002".concat(NM), 70016: "\u5BC6\u94A5\u4E0D\u5B58\u5728\uFF0CUserSig \u9A8C\u8BC1\u5931\u8D25\uFF0C\u8BF7\u5728\u5373\u65F6\u901A\u4FE1 IM \u63A7\u5236\u53F0\u83B7\u53D6\u5BC6\u94A5(".concat(DM, "269/32578#.E8.8E.B7.E5.8F.96.E5.AF.86.E9.92.A5)\u3002"), 70020: "SDKAppID \u672A\u627E\u5230\uFF0C\u8BF7\u5728\u5373\u65F6\u901A\u4FE1 IM \u63A7\u5236\u53F0\u786E\u8BA4\u5E94\u7528\u4FE1\u606F\u3002", 70050: "UserSig \u9A8C\u8BC1\u6B21\u6570\u8FC7\u4E8E\u9891\u7E41\u3002\u8BF7\u68C0\u67E5 UserSig \u662F\u5426\u6B63\u786E\uFF0C\u5E76\u4E8E1\u5206\u949F\u540E\u91CD\u65B0\u9A8C\u8BC1\u3002".concat(NM), 70051: "\u5E10\u53F7\u88AB\u62C9\u5165\u9ED1\u540D\u5355\u3002", 70052: "UserSig \u5DF2\u7ECF\u5931\u6548\uFF0C\u8BF7\u91CD\u65B0\u751F\u6210\uFF0C\u518D\u6B21\u5C1D\u8BD5\u3002", 70107: "\u56E0\u5B89\u5168\u539F\u56E0\u88AB\u9650\u5236\u767B\u5F55\uFF0C\u8BF7\u4E0D\u8981\u9891\u7E41\u767B\u5F55\u3002", 70169: "\u8BF7\u6C42\u7684\u7528\u6237\u5E10\u53F7\u4E0D\u5B58\u5728\u3002", 70114: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u8D85\u65F6\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5\u3002"), 70202: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u8D85\u65F6\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5\u3002"), 70206: "\u8BF7\u6C42\u4E2D\u6279\u91CF\u6570\u91CF\u4E0D\u5408\u6CD5\u3002", 70402: "\u53C2\u6570\u975E\u6CD5\uFF0C\u8BF7\u68C0\u67E5\u5FC5\u586B\u5B57\u6BB5\u662F\u5426\u586B\u5145\uFF0C\u6216\u8005\u5B57\u6BB5\u7684\u586B\u5145\u662F\u5426\u6EE1\u8DB3\u534F\u8BAE\u8981\u6C42\u3002", 70403: "\u8BF7\u6C42\u5931\u8D25\uFF0C\u9700\u8981 App \u7BA1\u7406\u5458\u6743\u9650\u3002", 70398: "\u5E10\u53F7\u6570\u8D85\u9650\u3002\u5982\u9700\u521B\u5EFA\u591A\u4E8E100\u4E2A\u5E10\u53F7\uFF0C\u8BF7\u5C06\u5E94\u7528\u5347\u7EA7\u4E3A\u4E13\u4E1A\u7248\uFF0C\u5177\u4F53\u64CD\u4F5C\u6307\u5F15\u8BF7\u53C2\u89C1\u8D2D\u4E70\u6307\u5F15(".concat(DM, "269/32458)\u3002"), 70500: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002"), 71e3: "\u5220\u9664\u5E10\u53F7\u5931\u8D25\u3002\u4EC5\u652F\u6301\u5220\u9664\u4F53\u9A8C\u7248\u5E10\u53F7\uFF0C\u60A8\u5F53\u524D\u5E94\u7528\u4E3A\u4E13\u4E1A\u7248\uFF0C\u6682\u4E0D\u652F\u6301\u5E10\u53F7\u5220\u9664\u3002", 20001: "\u8BF7\u6C42\u5305\u975E\u6CD5\u3002", 20002: "UserSig \u6216 A2 \u5931\u6548\u3002", 20003: "\u6D88\u606F\u53D1\u9001\u65B9\u6216\u63A5\u6536\u65B9 UserID \u65E0\u6548\u6216\u4E0D\u5B58\u5728\uFF0C\u8BF7\u68C0\u67E5 UserID \u662F\u5426\u5DF2\u5BFC\u5165\u5373\u65F6\u901A\u4FE1 IM\u3002", 20004: "\u7F51\u7EDC\u5F02\u5E38\uFF0C\u8BF7\u91CD\u8BD5\u3002", 20005: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002"), 20006: "\u89E6\u53D1\u53D1\u9001".concat("\u5355\u804A\u6D88\u606F", "\u4E4B\u524D\u56DE\u8C03\uFF0CApp \u540E\u53F0\u8FD4\u56DE\u7981\u6B62\u4E0B\u53D1\u8BE5\u6D88\u606F\u3002"), 20007: "\u53D1\u9001".concat("\u5355\u804A\u6D88\u606F", "\uFF0C\u88AB\u5BF9\u65B9\u62C9\u9ED1\uFF0C\u7981\u6B62\u53D1\u9001\u3002\u6D88\u606F\u53D1\u9001\u72B6\u6001\u9ED8\u8BA4\u5C55\u793A\u4E3A\u5931\u8D25\uFF0C\u60A8\u53EF\u4EE5\u767B\u5F55\u63A7\u5236\u53F0\u4FEE\u6539\u8BE5\u573A\u666F\u4E0B\u7684\u6D88\u606F\u53D1\u9001\u72B6\u6001\u5C55\u793A\u7ED3\u679C\uFF0C\u5177\u4F53\u64CD\u4F5C\u8BF7\u53C2\u89C1\u6D88\u606F\u4FDD\u7559\u8BBE\u7F6E(").concat(DM, "269/38656)\u3002"), 20009: "\u6D88\u606F\u53D1\u9001\u53CC\u65B9\u4E92\u76F8\u4E0D\u662F\u597D\u53CB\uFF0C\u7981\u6B62\u53D1\u9001\uFF08\u914D\u7F6E".concat("\u5355\u804A\u6D88\u606F", "\u6821\u9A8C\u597D\u53CB\u5173\u7CFB\u624D\u4F1A\u51FA\u73B0\uFF09\u3002"), 20010: "\u53D1\u9001".concat("\u5355\u804A\u6D88\u606F", "\uFF0C\u81EA\u5DF1\u4E0D\u662F\u5BF9\u65B9\u7684\u597D\u53CB\uFF08\u5355\u5411\u5173\u7CFB\uFF09\uFF0C\u7981\u6B62\u53D1\u9001\u3002"), 20011: "\u53D1\u9001".concat("\u5355\u804A\u6D88\u606F", "\uFF0C\u5BF9\u65B9\u4E0D\u662F\u81EA\u5DF1\u7684\u597D\u53CB\uFF08\u5355\u5411\u5173\u7CFB\uFF09\uFF0C\u7981\u6B62\u53D1\u9001\u3002"), 20012: "\u53D1\u9001\u65B9\u88AB\u7981\u8A00\uFF0C\u8BE5\u6761\u6D88\u606F\u88AB\u7981\u6B62\u53D1\u9001\u3002", 20016: "\u6D88\u606F\u64A4\u56DE\u8D85\u8FC7\u4E86\u65F6\u95F4\u9650\u5236\uFF08\u9ED8\u8BA42\u5206\u949F\uFF09\u3002", 20018: "\u5220\u9664\u6F2B\u6E38\u5185\u90E8\u9519\u8BEF\u3002", 90001: "JSON \u683C\u5F0F\u89E3\u6790\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u8BF7\u6C42\u5305\u662F\u5426\u7B26\u5408 JSON \u89C4\u8303\u3002", 90002: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D MsgBody \u4E0D\u7B26\u5408\u6D88\u606F\u683C\u5F0F\u63CF\u8FF0\uFF0C\u6216\u8005 MsgBody \u4E0D\u662F Array \u7C7B\u578B\uFF0C\u8BF7\u53C2\u8003 TIMMsgElement \u5BF9\u8C61\u7684\u5B9A\u4E49(").concat(DM, "269/2720").concat(RM, ")\u3002"), 90003: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D\u7F3A\u5C11 To_Account \u5B57\u6BB5\u6216\u8005 To_Account \u5E10\u53F7\u4E0D\u5B58\u5728\u3002"), 90005: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D\u7F3A\u5C11 MsgRandom \u5B57\u6BB5\u6216\u8005 MsgRandom \u5B57\u6BB5\u4E0D\u662F Integer \u7C7B\u578B\u3002"), 90006: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D\u7F3A\u5C11 MsgTimeStamp \u5B57\u6BB5\u6216\u8005 MsgTimeStamp \u5B57\u6BB5\u4E0D\u662F Integer \u7C7B\u578B\u3002"), 90007: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D MsgBody \u7C7B\u578B\u4E0D\u662F Array \u7C7B\u578B\uFF0C\u8BF7\u5C06\u5176\u4FEE\u6539\u4E3A Array \u7C7B\u578B\u3002"), 90008: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D\u7F3A\u5C11 From_Account \u5B57\u6BB5\u6216\u8005 From_Account \u5E10\u53F7\u4E0D\u5B58\u5728\u3002"), 90009: "\u8BF7\u6C42\u9700\u8981 App \u7BA1\u7406\u5458\u6743\u9650\u3002", 90010: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E0D\u7B26\u5408\u6D88\u606F\u683C\u5F0F\u63CF\u8FF0\uFF0C\u8BF7\u53C2\u8003 TIMMsgElement \u5BF9\u8C61\u7684\u5B9A\u4E49(").concat(DM, "269/2720").concat(RM, ")\u3002"), 90011: "\u6279\u91CF\u53D1\u6D88\u606F\u76EE\u6807\u5E10\u53F7\u8D85\u8FC7500\uFF0C\u8BF7\u51CF\u5C11 To_Account \u4E2D\u76EE\u6807\u5E10\u53F7\u6570\u91CF\u3002", 90012: "To_Account \u6CA1\u6709\u6CE8\u518C\u6216\u4E0D\u5B58\u5728\uFF0C\u8BF7\u786E\u8BA4 To_Account \u662F\u5426\u5BFC\u5165\u5373\u65F6\u901A\u4FE1 IM \u6216\u8005\u662F\u5426\u62FC\u5199\u9519\u8BEF\u3002", 90026: "\u6D88\u606F\u79BB\u7EBF\u5B58\u50A8\u65F6\u95F4\u9519\u8BEF\uFF08\u6700\u591A\u4E0D\u80FD\u8D85\u8FC77\u5929\uFF09\u3002", 90031: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D SyncOtherMachine \u5B57\u6BB5\u4E0D\u662F Integer \u7C7B\u578B\u3002"), 90044: "".concat("JSON \u683C\u5F0F\u8BF7\u6C42\u5305\u4F53", "\u4E2D MsgLifeTime \u5B57\u6BB5\u4E0D\u662F Integer \u7C7B\u578B\u3002"), 90048: "\u8BF7\u6C42\u7684\u7528\u6237\u5E10\u53F7\u4E0D\u5B58\u5728\u3002", 90054: "\u64A4\u56DE\u8BF7\u6C42\u4E2D\u7684 MsgKey \u4E0D\u5408\u6CD5\u3002", 90994: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002"), 90995: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002"), 91e3: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002"), 90992: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002", "\u5982\u679C\u6240\u6709\u8BF7\u6C42\u90FD\u8FD4\u56DE\u8BE5\u9519\u8BEF\u7801\uFF0C\u4E14 App \u914D\u7F6E\u4E86\u7B2C\u4E09\u65B9\u56DE\u8C03\uFF0C\u8BF7\u68C0\u67E5 App \u670D\u52A1\u7AEF\u662F\u5426\u6B63\u5E38\u5411\u5373\u65F6\u901A\u4FE1 IM \u540E\u53F0\u670D\u52A1\u7AEF\u8FD4\u56DE\u56DE\u8C03\u7ED3\u679C\u3002"), 93e3: "JSON \u6570\u636E\u5305\u8D85\u957F\uFF0C\u6D88\u606F\u5305\u4F53\u8BF7\u4E0D\u8981\u8D85\u8FC78k\u3002", 91101: "Web \u7AEF\u957F\u8F6E\u8BE2\u88AB\u8E22\uFF08Web \u7AEF\u540C\u65F6\u5728\u7EBF\u5B9E\u4F8B\u4E2A\u6570\u8D85\u51FA\u9650\u5236\uFF09\u3002", 10002: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002"), 10003: "\u8BF7\u6C42\u4E2D\u7684\u63A5\u53E3\u540D\u79F0\u9519\u8BEF\uFF0C\u8BF7\u6838\u5BF9\u63A5\u53E3\u540D\u79F0\u5E76\u91CD\u8BD5\u3002", 10004: "\u53C2\u6570\u975E\u6CD5\uFF0C\u8BF7\u6839\u636E\u9519\u8BEF\u63CF\u8FF0\u68C0\u67E5\u8BF7\u6C42\u662F\u5426\u6B63\u786E\u3002", 10005: "\u8BF7\u6C42\u5305\u4F53\u4E2D\u643A\u5E26\u7684\u5E10\u53F7\u6570\u91CF\u8FC7\u591A\u3002", 10006: "\u64CD\u4F5C\u9891\u7387\u9650\u5236\uFF0C\u8BF7\u5C1D\u8BD5\u964D\u4F4E\u8C03\u7528\u7684\u9891\u7387\u3002", 10007: "\u64CD\u4F5C\u6743\u9650\u4E0D\u8DB3\uFF0C\u4F8B\u5982 Work ".concat("\u7FA4\u7EC4", "\u4E2D\u666E\u901A\u6210\u5458\u5C1D\u8BD5\u6267\u884C\u8E22\u4EBA\u64CD\u4F5C\uFF0C\u4F46\u53EA\u6709 App \u7BA1\u7406\u5458\u624D\u6709\u6743\u9650\u3002"), 10008: "\u8BF7\u6C42\u975E\u6CD5\uFF0C\u53EF\u80FD\u662F\u8BF7\u6C42\u4E2D\u643A\u5E26\u7684\u7B7E\u540D\u4FE1\u606F\u9A8C\u8BC1\u4E0D\u6B63\u786E\uFF0C\u8BF7\u518D\u6B21\u5C1D\u8BD5\u3002", 10009: "\u8BE5\u7FA4\u4E0D\u5141\u8BB8\u7FA4\u4E3B\u4E3B\u52A8\u9000\u51FA\u3002", 10010: "".concat("\u7FA4\u7EC4", "\u4E0D\u5B58\u5728\uFF0C\u6216\u8005\u66FE\u7ECF\u5B58\u5728\u8FC7\uFF0C\u4F46\u662F\u76EE\u524D\u5DF2\u7ECF\u88AB\u89E3\u6563\u3002"), 10011: "\u89E3\u6790 JSON \u5305\u4F53\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u5305\u4F53\u7684\u683C\u5F0F\u662F\u5426\u7B26\u5408 JSON \u683C\u5F0F\u3002", 10012: "\u53D1\u8D77\u64CD\u4F5C\u7684 UserID \u975E\u6CD5\uFF0C\u8BF7\u68C0\u67E5\u53D1\u8D77\u64CD\u4F5C\u7684\u7528\u6237 UserID \u662F\u5426\u586B\u5199\u6B63\u786E\u3002", 10013: "\u88AB\u9080\u8BF7\u52A0\u5165\u7684\u7528\u6237\u5DF2\u7ECF\u662F\u7FA4\u6210\u5458\u3002", 10014: "\u7FA4\u5DF2\u6EE1\u5458\uFF0C\u65E0\u6CD5\u5C06\u8BF7\u6C42\u4E2D\u7684\u7528\u6237\u52A0\u5165".concat("\u7FA4\u7EC4", "\uFF0C\u5982\u679C\u662F\u6279\u91CF\u52A0\u4EBA\uFF0C\u53EF\u4EE5\u5C1D\u8BD5\u51CF\u5C11\u52A0\u5165\u7528\u6237\u7684\u6570\u91CF\u3002"), 10015: "\u627E\u4E0D\u5230\u6307\u5B9A ID \u7684".concat("\u7FA4\u7EC4", "\u3002"), 10016: "App \u540E\u53F0\u901A\u8FC7\u7B2C\u4E09\u65B9\u56DE\u8C03\u62D2\u7EDD\u672C\u6B21\u64CD\u4F5C\u3002", 10017: "\u56E0\u88AB\u7981\u8A00\u800C\u4E0D\u80FD\u53D1\u9001\u6D88\u606F\uFF0C\u8BF7\u68C0\u67E5\u53D1\u9001\u8005\u662F\u5426\u88AB\u8BBE\u7F6E\u7981\u8A00\u3002", 10018: "\u5E94\u7B54\u5305\u957F\u5EA6\u8D85\u8FC7\u6700\u5927\u5305\u957F\uFF081MB\uFF09\uFF0C\u8BF7\u6C42\u7684\u5185\u5BB9\u8FC7\u591A\uFF0C\u8BF7\u5C1D\u8BD5\u51CF\u5C11\u5355\u6B21\u8BF7\u6C42\u7684\u6570\u636E\u91CF\u3002", 10019: "\u8BF7\u6C42\u7684\u7528\u6237\u5E10\u53F7\u4E0D\u5B58\u5728\u3002", 10021: "".concat("\u7FA4\u7EC4", " ID \u5DF2\u88AB\u4F7F\u7528\uFF0C\u8BF7\u9009\u62E9\u5176\u4ED6\u7684").concat("\u7FA4\u7EC4", " ID\u3002"), 10023: "\u53D1\u6D88\u606F\u7684\u9891\u7387\u8D85\u9650\uFF0C\u8BF7\u5EF6\u957F\u4E24\u6B21\u53D1\u6D88\u606F\u65F6\u95F4\u7684\u95F4\u9694\u3002", 10024: "\u6B64\u9080\u8BF7\u6216\u8005\u7533\u8BF7\u8BF7\u6C42\u5DF2\u7ECF\u88AB\u5904\u7406\u3002", 10025: "".concat("\u7FA4\u7EC4", " ID \u5DF2\u88AB\u4F7F\u7528\uFF0C\u5E76\u4E14\u64CD\u4F5C\u8005\u4E3A\u7FA4\u4E3B\uFF0C\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\u3002"), 10026: "\u8BE5 SDKAppID \u8BF7\u6C42\u7684\u547D\u4EE4\u5B57\u5DF2\u88AB\u7981\u7528\u3002", 10030: "\u8BF7\u6C42\u64A4\u56DE\u7684\u6D88\u606F\u4E0D\u5B58\u5728\u3002", 10031: "\u6D88\u606F\u64A4\u56DE\u8D85\u8FC7\u4E86\u65F6\u95F4\u9650\u5236\uFF08\u9ED8\u8BA42\u5206\u949F\uFF09\u3002", 10032: "\u8BF7\u6C42\u64A4\u56DE\u7684\u6D88\u606F\u4E0D\u652F\u6301\u64A4\u56DE\u64CD\u4F5C\u3002", 10033: "".concat("\u7FA4\u7EC4", "\u7C7B\u578B\u4E0D\u652F\u6301\u6D88\u606F\u64A4\u56DE\u64CD\u4F5C\u3002"), 10034: "\u8BE5\u6D88\u606F\u7C7B\u578B\u4E0D\u652F\u6301\u5220\u9664\u64CD\u4F5C\u3002", 10035: "\u76F4\u64AD\u7FA4\u548C\u5728\u7EBF\u6210\u5458\u5E7F\u64AD\u5927\u7FA4\u4E0D\u652F\u6301\u5220\u9664\u6D88\u606F\u3002", 10036: "\u76F4\u64AD\u7FA4\u521B\u5EFA\u6570\u91CF\u8D85\u8FC7\u4E86\u9650\u5236\uFF0C\u8BF7\u53C2\u8003\u4EF7\u683C\u8BF4\u660E(".concat(DM, "269/11673)\u8D2D\u4E70\u9884\u4ED8\u8D39\u5957\u9910\u201CIM\u76F4\u64AD\u7FA4\u201D\u3002"), 10037: "\u5355\u4E2A\u7528\u6237\u53EF\u521B\u5EFA\u548C\u52A0\u5165\u7684".concat("\u7FA4\u7EC4", "\u6570\u91CF\u8D85\u8FC7\u4E86\u9650\u5236\uFF0C\u8BF7\u53C2\u8003\u4EF7\u683C\u8BF4\u660E(").concat(DM, "269/11673)\u8D2D\u4E70\u6216\u5347\u7EA7\u9884\u4ED8\u8D39\u5957\u9910\u201C\u5355\u4EBA\u53EF\u521B\u5EFA\u4E0E\u52A0\u5165").concat("\u7FA4\u7EC4", "\u6570\u201D\u3002"), 10038: "\u7FA4\u6210\u5458\u6570\u91CF\u8D85\u8FC7\u9650\u5236\uFF0C\u8BF7\u53C2\u8003\u4EF7\u683C\u8BF4\u660E(".concat(DM, "269/11673)\u8D2D\u4E70\u6216\u5347\u7EA7\u9884\u4ED8\u8D39\u5957\u9910\u201C\u6269\u5C55\u7FA4\u4EBA\u6570\u4E0A\u9650\u201D\u3002"), 10041: "\u8BE5\u5E94\u7528\uFF08SDKAppID\uFF09\u5DF2\u914D\u7F6E\u4E0D\u652F\u6301\u7FA4\u6D88\u606F\u64A4\u56DE\u3002", 10050: "\u7FA4\u5C5E\u6027 key \u4E0D\u5B58\u5728", 10056: "\u8BF7\u5728\u5199\u5165\u7FA4\u5C5E\u6027\u524D\u5148\u4F7F\u7528 getGroupAttributes \u63A5\u53E3\u66F4\u65B0\u672C\u5730\u7FA4\u5C5E\u6027\uFF0C\u907F\u514D\u51B2\u7A81\u3002", 10059: "\u975E\u65D7\u8230\u7248", 10060: "\u7FA4\u4EBA\u6570\u8D85\u8FC7\u5DF2\u8BFB\u56DE\u6267\u4EBA\u6570\u4E0A\u9650", 10061: "\u5728\u7EBF\u6D88\u606F\u4E0D\u652F\u6301\u5DF2\u8BFB\u56DE\u6267", 10062: "\u627E\u4E0D\u5230\u7FA4\u6D88\u606F\u7684\u5DF2\u8BFB\u56DE\u6267\u4FE1\u606F", 20026: "\u6D88\u606F\u4E0D\u5B58\u5728", 20029: "\u8BE5\u7FA4\u7C7B\u578B\u4E0D\u652F\u6301\u4FEE\u6539\u6D88\u606F\u3002", 30001: "\u8BF7\u6C42\u53C2\u6570\u9519\u8BEF\uFF0C\u8BF7\u6839\u636E\u9519\u8BEF\u63CF\u8FF0\u68C0\u67E5\u8BF7\u6C42\u53C2\u6570", 30002: "SDKAppID \u4E0D\u5339\u914D", 30003: "\u8BF7\u6C42\u7684\u7528\u6237\u5E10\u53F7\u4E0D\u5B58\u5728", 30004: "\u8BF7\u6C42\u9700\u8981 App \u7BA1\u7406\u5458\u6743\u9650", 30005: "\u5173\u7CFB\u94FE\u5B57\u6BB5\u4E2D\u5305\u542B\u654F\u611F\u8BCD", 30006: "".concat("\u670D\u52A1\u7AEF\u5185\u90E8\u9519\u8BEF\uFF0C\u8BF7\u91CD\u8BD5\u3002"), 30007: "".concat("\u7F51\u7EDC\u8D85\u65F6\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5. "), 30008: "\u5E76\u53D1\u5199\u5BFC\u81F4\u5199\u51B2\u7A81\uFF0C\u5EFA\u8BAE\u4F7F\u7528\u6279\u91CF\u65B9\u5F0F", 30009: "\u540E\u53F0\u7981\u6B62\u8BE5\u7528\u6237\u53D1\u8D77\u52A0\u597D\u53CB\u8BF7\u6C42", 30010: "\u81EA\u5DF1\u7684\u597D\u53CB\u6570\u5DF2\u8FBE\u7CFB\u7EDF\u4E0A\u9650", 30011: "\u5206\u7EC4\u5DF2\u8FBE\u7CFB\u7EDF\u4E0A\u9650", 30012: "\u672A\u51B3\u6570\u5DF2\u8FBE\u7CFB\u7EDF\u4E0A\u9650", 30014: "\u5BF9\u65B9\u7684\u597D\u53CB\u6570\u5DF2\u8FBE\u7CFB\u7EDF\u4E0A\u9650", 30515: "\u8BF7\u6C42\u6DFB\u52A0\u597D\u53CB\u65F6\uFF0C\u5BF9\u65B9\u5728\u81EA\u5DF1\u7684\u9ED1\u540D\u5355\u4E2D\uFF0C\u4E0D\u5141\u8BB8\u52A0\u597D\u53CB", 30516: "\u8BF7\u6C42\u6DFB\u52A0\u597D\u53CB\u65F6\uFF0C\u5BF9\u65B9\u7684\u52A0\u597D\u53CB\u9A8C\u8BC1\u65B9\u5F0F\u662F\u4E0D\u5141\u8BB8\u4EFB\u4F55\u4EBA\u6DFB\u52A0\u81EA\u5DF1\u4E3A\u597D\u53CB", 30525: "\u8BF7\u6C42\u6DFB\u52A0\u597D\u53CB\u65F6\uFF0C\u81EA\u5DF1\u5728\u5BF9\u65B9\u7684\u9ED1\u540D\u5355\u4E2D\uFF0C\u4E0D\u5141\u8BB8\u52A0\u597D\u53CB", 30539: "\u7B49\u5F85\u5BF9\u65B9\u540C\u610F", 30540: "\u6DFB\u52A0\u597D\u53CB\u8BF7\u6C42\u88AB\u5B89\u5168\u7B56\u7565\u6253\u51FB\uFF0C\u8BF7\u52FF\u9891\u7E41\u53D1\u8D77\u6DFB\u52A0\u597D\u53CB\u8BF7\u6C42", 31704: "\u4E0E\u8BF7\u6C42\u5220\u9664\u7684\u5E10\u53F7\u4E4B\u95F4\u4E0D\u5B58\u5728\u597D\u53CB\u5173\u7CFB", 31707: "\u5220\u9664\u597D\u53CB\u8BF7\u6C42\u88AB\u5B89\u5168\u7B56\u7565\u6253\u51FB\uFF0C\u8BF7\u52FF\u9891\u7E41\u53D1\u8D77\u5220\u9664\u597D\u53CB\u8BF7\u6C42" }, kM = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this)).code = e3.code, r2.message = LM[e3.code] || e3.message, r2.data = e3.data || {}, r2;
      }
      return a(n2);
    }(p2(Error)), GM = null, PM = function(e2) {
      GM = e2;
    }, UM = function(e2) {
      return Promise.resolve(AM(e2));
    }, bM = function(e2) {
      var t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      if (e2 instanceof kM)
        return t2 && null !== GM && GM.emit(pr.ERROR, e2), Promise.reject(e2);
      if (e2 instanceof Error) {
        var n2 = new kM({ code: ah.UNCAUGHT_ERROR, message: e2.message });
        return t2 && null !== GM && GM.emit(pr.ERROR, n2), Promise.reject(n2);
      }
      if (Zl(e2) || Zl(e2.code) || Zl(e2.message))
        bl.error("IMPromise.reject \u5FC5\u987B\u6307\u5B9Acode(\u9519\u8BEF\u7801)\u548Cmessage(\u9519\u8BEF\u4FE1\u606F)!!!");
      else {
        if ($l(e2.code) && zl(e2.message)) {
          var o2 = new kM(e2);
          return t2 && null !== GM && GM.emit(pr.ERROR, o2), Promise.reject(o2);
        }
        bl.error("IMPromise.reject code(\u9519\u8BEF\u7801)\u5FC5\u987B\u4E3A\u6570\u5B57\uFF0Cmessage(\u9519\u8BEF\u4FE1\u606F)\u5FC5\u987B\u4E3A\u5B57\u7B26\u4E32!!!");
      }
    }, wM = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        return o(this, r2), (t2 = n2.call(this, e3))._className = "C2CModule", t2._messageFromUnreadDBMap = /* @__PURE__ */ new Map(), t2;
      }
      return a(r2, [{ key: "onNewC2CMessage", value: function(e3) {
        var t2 = e3.dataList, n3 = e3.isInstantMessage, o2 = e3.C2CRemainingUnreadList, r3 = e3.C2CPairUnreadList;
        bl.debug("".concat(this._className, ".onNewC2CMessage count:").concat(t2.length, " isInstantMessage:").concat(n3));
        var a2 = this._newC2CMessageStoredAndSummary({ dataList: t2, C2CRemainingUnreadList: o2, C2CPairUnreadList: r3, isInstantMessage: n3 }), s2 = a2.conversationOptionsList, i2 = a2.messageList, c2 = a2.isUnreadC2CMessage;
        (this.filterModifiedMessage(i2), s2.length > 0) && this.getModule(cg).onNewMessage({ conversationOptionsList: s2, isInstantMessage: n3, isUnreadC2CMessage: c2 });
        var u2 = this.filterUnmodifiedMessage(i2);
        n3 && u2.length > 0 && this.emitOuterEvent(pr.MESSAGE_RECEIVED, u2), i2.length = 0;
      } }, { key: "_newC2CMessageStoredAndSummary", value: function(e3) {
        for (var t2 = e3.dataList, n3 = e3.C2CRemainingUnreadList, o2 = e3.C2CPairUnreadList, r3 = e3.isInstantMessage, a2 = null, s2 = [], i2 = [], c2 = {}, u2 = this.getModule(gg), l2 = this.getModule(Tg), d2 = false, p3 = this.getModule(cg), g2 = 0, _2 = t2.length; g2 < _2; g2++) {
          var h3 = t2[g2];
          h3.currentUser = this.getMyUserID(), h3.conversationType = gr.CONV_C2C, h3.isSystemMessage = !!h3.isSystemMessage, (Zl(h3.nick) || Zl(h3.avatar)) && (d2 = true, bl.debug("".concat(this._className, "._newC2CMessageStoredAndSummary nick or avatar missing!"))), a2 = new CM(h3), h3.elements = u2.parseElements(h3.elements, h3.from), a2.setElement(h3.elements), a2.setNickAndAvatar({ nick: h3.nick, avatar: h3.avatar });
          var f2 = a2.conversationID;
          if (r3) {
            if (1 === this._messageFromUnreadDBMap.get(a2.ID))
              continue;
            var m2 = false;
            if (a2.from !== this.getMyUserID()) {
              var M2 = p3.getLatestMessageSentByPeer(f2);
              if (M2) {
                var v2 = M2.nick, y2 = M2.avatar;
                d2 ? a2.setNickAndAvatar({ nick: v2, avatar: y2 }) : v2 === a2.nick && y2 === a2.avatar || (m2 = true);
              }
            } else {
              var I2 = p3.getLatestMessageSentByMe(f2);
              if (I2) {
                var E2 = I2.nick, T2 = I2.avatar;
                E2 === a2.nick && T2 === a2.avatar || p3.modifyMessageSentByMe({ conversationID: f2, latestNick: a2.nick, latestAvatar: a2.avatar });
              }
            }
            var S2 = 1 === t2[g2].isModified;
            if (p3.isMessageSentByCurrentInstance(a2) ? a2.isModified = S2 : S2 = false, 0 === h3.msgLifeTime)
              a2._onlineOnlyFlag = true, p3.isMessageSentByCurrentInstance(a2) || i2.push(a2);
            else {
              if (!p3.pushIntoMessageList(i2, a2, S2))
                continue;
              m2 && (p3.modifyMessageSentByPeer({ conversationID: f2, latestNick: a2.nick, latestAvatar: a2.avatar }), p3.updateUserProfileSpecifiedKey({ conversationID: f2, nick: a2.nick, avatar: a2.avatar }));
            }
            r3 && a2.clientTime > 0 && l2.addMessageDelay(a2.clientTime);
          } else
            this._messageFromUnreadDBMap.set(a2.ID, 1);
          if (0 !== h3.msgLifeTime) {
            if (false === a2._onlineOnlyFlag) {
              var C2 = p3.getLastMessageTime(f2);
              if ($l(C2) && a2.time < C2)
                continue;
              if (Zl(c2[f2])) {
                var A2 = 0;
                "in" === a2.flow && (a2._isExcludedFromUnreadCount || (A2 = 1)), c2[f2] = s2.push({ conversationID: f2, unreadCount: A2, type: a2.conversationType, subType: a2.conversationSubType, lastMessage: a2._isExcludedFromLastMessage ? "" : a2 }) - 1;
              } else {
                var D2 = c2[f2];
                s2[D2].type = a2.conversationType, s2[D2].subType = a2.conversationSubType, s2[D2].lastMessage = a2._isExcludedFromLastMessage ? "" : a2, "in" === a2.flow && (a2._isExcludedFromUnreadCount || s2[D2].unreadCount++);
              }
            }
          } else
            a2._onlineOnlyFlag = true;
        }
        var N2 = false;
        if (Ql(o2))
          for (var O2 = function(e4, t3) {
            if (o2[e4].unreadCount > 0) {
              N2 = true;
              var n4 = s2.find(function(t4) {
                return t4.conversationID === "C2C".concat(o2[e4].from);
              });
              n4 ? n4.unreadCount = o2[e4].unreadCount : s2.push({ conversationID: "C2C".concat(o2[e4].from), unreadCount: o2[e4].unreadCount, type: gr.CONV_C2C });
            }
          }, R2 = 0, L2 = o2.length; R2 < L2; R2++)
            O2(R2);
        if (Ql(n3))
          for (var k2 = function(e4, t3) {
            s2.find(function(t4) {
              return t4.conversationID === "C2C".concat(n3[e4].from);
            }) || s2.push({ conversationID: "C2C".concat(n3[e4].from), type: gr.CONV_C2C, lastMsgTime: n3[e4].lastMsgTime });
          }, G2 = 0, P2 = n3.length; G2 < P2; G2++)
            k2(G2);
        return { conversationOptionsList: s2, messageList: i2, isUnreadC2CMessage: N2 };
      } }, { key: "onC2CMessageRevoked", value: function(e3) {
        var t2 = this;
        bl.debug("".concat(this._className, ".onC2CMessageRevoked count:").concat(e3.dataList.length));
        var n3 = this.getModule(cg), o2 = [], r3 = null;
        e3.dataList.forEach(function(e4) {
          if (e4.c2cMessageRevokedNotify) {
            var a2 = e4.c2cMessageRevokedNotify.revokedInfos;
            Zl(a2) || a2.forEach(function(e5) {
              var a3 = t2.getMyUserID() === e5.from ? "".concat(gr.CONV_C2C).concat(e5.to) : "".concat(gr.CONV_C2C).concat(e5.from);
              (r3 = n3.revoke(a3, e5.sequence, e5.random)) && o2.push(r3);
            });
          }
        }), 0 !== o2.length && (n3.onMessageRevoked(o2), this.emitOuterEvent(pr.MESSAGE_REVOKED, o2));
      } }, { key: "onC2CMessageReadReceipt", value: function(e3) {
        var t2 = this;
        e3.dataList.forEach(function(e4) {
          if (!xd(e4.c2cMessageReadReceipt)) {
            var n3 = e4.c2cMessageReadReceipt.to;
            e4.c2cMessageReadReceipt.uinPairReadArray.forEach(function(e5) {
              var o2 = e5.peerReadTime;
              bl.debug("".concat(t2._className, "._onC2CMessageReadReceipt to:").concat(n3, " peerReadTime:").concat(o2));
              var r3 = "".concat(gr.CONV_C2C).concat(n3), a2 = t2.getModule(cg);
              a2.recordPeerReadTime(r3, o2), a2.updateMessageIsPeerReadProperty(r3, o2);
            });
          }
        });
      } }, { key: "onC2CMessageReadNotice", value: function(e3) {
        var t2 = this;
        e3.dataList.forEach(function(e4) {
          if (!xd(e4.c2cMessageReadNotice)) {
            var n3 = t2.getModule(cg);
            e4.c2cMessageReadNotice.uinPairReadArray.forEach(function(e5) {
              var o2 = e5.from, r3 = e5.peerReadTime;
              bl.debug("".concat(t2._className, ".onC2CMessageReadNotice from:").concat(o2, " lastReadTime:").concat(r3));
              var a2 = "".concat(gr.CONV_C2C).concat(o2);
              n3.updateIsReadAfterReadReport({ conversationID: a2, lastMessageTime: r3 }), n3.updateUnreadCount(a2);
            });
          }
        });
      } }, { key: "onC2CMessageModified", value: function(e3) {
        bl.debug("".concat(this._className, ".onC2CMessageModified options:"), JSON.stringify(e3));
        var n3 = this.getModule(cg);
        e3.dataList.forEach(function(e4) {
          n3.onMessageModified(t(t({}, e4), {}, { conversationType: gr.CONV_C2C }));
        });
      } }, { key: "onReadReceiptList", value: function(e3) {
        bl.debug("".concat(this._className, ".onReadReceiptList options:"), JSON.stringify(e3));
        var t2 = e3.dataList, n3 = t2.userID, o2 = t2.readReceiptList;
        this.getModule(cg).updateReadReceiptInfo({ userID: n3, readReceiptList: o2 });
      } }, { key: "sendMessage", value: function(e3, t2) {
        var n3 = this._createC2CMessagePack(e3, t2);
        return this.request(n3);
      } }, { key: "_createC2CMessagePack", value: function(e3, t2) {
        var n3 = null;
        t2 && (t2.offlinePushInfo && (n3 = t2.offlinePushInfo), true === t2.onlineUserOnly && (n3 ? n3.disablePush = true : n3 = { disablePush: true }));
        var o2 = "";
        zl(e3.cloudCustomData) && e3.cloudCustomData.length > 0 && (o2 = e3.cloudCustomData);
        var r3 = [];
        if (Xl(t2) && Xl(t2.messageControlInfo)) {
          var a2 = t2.messageControlInfo, s2 = a2.excludedFromUnreadCount, i2 = a2.excludedFromLastMessage;
          true === s2 && r3.push("NoUnread"), true === i2 && r3.push("NoLastMsg");
        }
        return { protocolName: kg, tjgID: this.generateTjgID(e3), requestData: { fromAccount: this.getMyUserID(), toAccount: e3.to, msgBody: e3.getElements(), cloudCustomData: o2, msgSeq: e3.sequence, msgRandom: e3.random, msgLifeTime: this.isOnlineMessage(e3, t2) ? 0 : void 0, nick: e3.nick, avatar: e3.avatar, offlinePushInfo: n3 ? { pushFlag: true === n3.disablePush ? 1 : 0, title: n3.title || "", desc: n3.description || "", ext: n3.extension || "", apnsInfo: { badgeMode: true === n3.ignoreIOSBadge ? 1 : 0 }, androidInfo: { OPPOChannelID: n3.androidOPPOChannelID || "" } } : void 0, messageControlInfo: r3, clientTime: e3.clientTime, needReadReceipt: true === e3.needReadReceipt ? 1 : 0 } };
      } }, { key: "isOnlineMessage", value: function(e3, t2) {
        return !(!t2 || true !== t2.onlineUserOnly);
      } }, { key: "revokeMessage", value: function(e3) {
        return this.request({ protocolName: qg, requestData: { msgInfo: { fromAccount: e3.from, toAccount: e3.to, msgSeq: e3.sequence, msgRandom: e3.random, msgTimeStamp: e3.time } } });
      } }, { key: "deleteMessage", value: function(e3) {
        var t2 = e3.to, n3 = e3.keyList;
        return bl.log("".concat(this._className, ".deleteMessage toAccount:").concat(t2, " count:").concat(n3.length)), this.request({ protocolName: jg, requestData: { fromAccount: this.getMyUserID(), to: t2, keyList: n3 } });
      } }, { key: "modifyRemoteMessage", value: function(e3) {
        var t2 = e3.from, n3 = e3.to, o2 = e3.version, r3 = void 0 === o2 ? 0 : o2, a2 = e3.sequence, s2 = e3.random, i2 = e3.time, c2 = e3.payload, u2 = e3.type, l2 = e3.cloudCustomData, d2 = void 0;
        return qd(u2) && (d2 = []).push({ type: u2, content: c2 }), this.request({ protocolName: Wg, requestData: { from: t2, to: n3, version: r3, sequence: a2, random: s2, time: i2, elements: d2, cloudCustomData: l2 } });
      } }, { key: "setMessageRead", value: function(e3) {
        var t2 = this, n3 = e3.conversationID, o2 = e3.lastMessageTime, r3 = "".concat(this._className, ".setMessageRead");
        bl.log("".concat(r3, " conversationID:").concat(n3, " lastMessageTime:").concat(o2)), $l(o2) || bl.warn("".concat(r3, " \u8BF7\u52FF\u4FEE\u6539 Conversation.lastMessage.lastTime\uFF0C\u5426\u5219\u53EF\u80FD\u4F1A\u5BFC\u81F4\u5DF2\u8BFB\u4E0A\u62A5\u7ED3\u679C\u4E0D\u51C6\u786E"));
        var a2 = new Ih(Eh.SET_C2C_MESSAGE_READ);
        return a2.setMessage("conversationID:".concat(n3, " lastMessageTime:").concat(o2)), this.request({ protocolName: Vg, requestData: { C2CMsgReaded: { cookie: "", C2CMsgReadedItem: [{ toAccount: n3.replace("C2C", ""), lastMessageTime: o2, receipt: 1 }] } } }).then(function() {
          a2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(r3, " ok"));
          var e4 = t2.getModule(cg);
          return e4.updateIsReadAfterReadReport({ conversationID: n3, lastMessageTime: o2 }), e4.updateUnreadCount(n3), AM();
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            a2.setError(e4, o3, r4).end();
          }), bl.log("".concat(r3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getRoamingMessage", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getRoamingMessage"), o2 = e3.peerAccount, r3 = e3.conversationID, a2 = e3.count, s2 = e3.lastMessageTime, i2 = e3.messageKey, c2 = "peerAccount:".concat(o2, " count:").concat(a2 || 15, " lastMessageTime:").concat(s2 || 0, " messageKey:").concat(i2);
        bl.log("".concat(n3, " ").concat(c2));
        var u2 = new Ih(Eh.GET_C2C_ROAMING_MESSAGES);
        return this.request({ protocolName: Kg, requestData: { peerAccount: o2, count: a2 || 15, lastMessageTime: s2 || 0, messageKey: i2 } }).then(function(e4) {
          var o3 = e4.data, a3 = o3.complete, s3 = o3.messageList, i3 = o3.messageKey, l2 = o3.lastMessageTime;
          Zl(s3) ? bl.log("".concat(n3, " ok. complete:").concat(a3, " but messageList is undefined!")) : bl.log("".concat(n3, " ok. complete:").concat(a3, " count:").concat(s3.length)), u2.setNetworkType(t2.getNetworkType()).setMessage("".concat(c2, " complete:").concat(a3, " length:").concat(s3.length)).end();
          var d2 = t2.getModule(cg);
          1 === a3 && d2.setCompleted(r3);
          var p3 = d2.onRoamingMessage(s3, r3);
          d2.modifyMessageList(r3), d2.updateIsRead(r3), d2.updateRoamingMessageKeyAndTime(r3, i3, l2);
          var g2 = d2.getPeerReadTime(r3);
          if (bl.log("".concat(n3, " update isPeerRead property. conversationID:").concat(r3, " peerReadTime:").concat(g2)), g2)
            d2.updateMessageIsPeerReadProperty(r3, g2);
          else {
            var _2 = r3.replace(gr.CONV_C2C, "");
            t2.getRemotePeerReadTime([_2]).then(function() {
              d2.updateMessageIsPeerReadProperty(r3, d2.getPeerReadTime(r3));
            });
          }
          var h3 = "";
          if (p3.length > 0)
            h3 = p3[0].ID;
          else {
            var f2 = d2.getLocalOldestMessage(r3);
            f2 && (h3 = f2.ID);
          }
          return bl.log("".concat(n3, " nextReqID:").concat(h3, " stored message count:").concat(p3.length)), { nextReqID: h3, storedMessageList: p3 };
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            u2.setMessage(c2).setError(e4, o3, r4).end();
          }), bl.warn("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getRoamingMessagesHopping", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getRoamingMessagesHopping"), o2 = e3.peerAccount, r3 = e3.time, a2 = void 0 === r3 ? 0 : r3, s2 = e3.count, i2 = e3.direction, c2 = "".concat(gr.CONV_C2C).concat(o2), u2 = "peerAccount:".concat(o2, " count:").concat(s2, " time:").concat(a2, " direction:").concat(i2);
        bl.log("".concat(n3, " ").concat(u2));
        var l2 = new Ih(Eh.GET_C2C_ROAMING_MESSAGES_HOPPING);
        return this.request({ protocolName: Kg, requestData: { peerAccount: o2, count: s2 + 1, lastMessageTime: a2, direction: i2 } }).then(function(e4) {
          var o3 = e4.data, r4 = o3.complete, a3 = o3.messageList, s3 = void 0 === a3 ? [] : a3, d2 = o3.lastMessageTime;
          bl.log("".concat(n3, " ok. complete:").concat(r4, " count:").concat(s3.length)), l2.setNetworkType(t2.getNetworkType()).setMessage("".concat(u2, " complete:").concat(r4, " length:").concat(s3.length)).end(), 1 !== r4 && (1 === i2 ? s3.pop() : s3.shift());
          var p3 = t2.getModule(cg).onRoamingMessage(s3, c2, false);
          t2._modifyMessageList(c2, p3);
          var g2 = t2._computeResult({ complete: r4, lastMessageTime: d2, resultList: p3 });
          return AM(g2);
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            l2.setMessage(u2).setError(e4, o3, r4).end();
          }), bl.warn("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "_computeResult", value: function(e3) {
        var t2 = e3.complete, n3 = void 0 === t2 ? 0 : t2, o2 = e3.lastMessageTime, r3 = e3.resultList, a2 = { messageList: M(void 0 === r3 ? [] : r3), isCompleted: false, nextMessageTime: "" };
        return 1 === n3 ? (a2.isCompleted = true, a2) : (a2.nextMessageTime = o2, a2);
      } }, { key: "_modifyMessageList", value: function(e3, t2) {
        var n3 = this.getModule(cg).getLocalConversation(e3);
        if (n3)
          for (var o2 = n3.userProfile.nick, r3 = n3.userProfile.avatar, a2 = this.getModule(ng).getNickAndAvatarByUserID(this.getMyUserID()), s2 = a2.nick, i2 = a2.avatar, c2 = t2.length - 1; c2 >= 0; c2--) {
            var u2 = t2[c2];
            "in" === u2.flow && (u2.nick !== o2 && u2.setNickAndAvatar({ nick: o2 }), u2.avatar !== r3 && u2.setNickAndAvatar({ avatar: r3 })), "out" === u2.flow && (u2.nick !== s2 && u2.setNickAndAvatar({ nick: s2 }), u2.avatar !== i2 && u2.setNickAndAvatar({ avatar: i2 }));
          }
      } }, { key: "getRemotePeerReadTime", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getRemotePeerReadTime");
        if (xd(e3))
          return bl.warn("".concat(n3, " userIDList is empty!")), Promise.resolve();
        var o2 = new Ih(Eh.GET_PEER_READ_TIME);
        return bl.log("".concat(n3, " userIDList:").concat(e3)), this.request({ protocolName: Hg, requestData: { userIDList: e3 } }).then(function(r3) {
          var a2 = r3.data.peerReadTimeList;
          bl.log("".concat(n3, " ok. peerReadTimeList:").concat(a2));
          for (var s2 = "", i2 = t2.getModule(cg), c2 = 0; c2 < e3.length; c2++)
            s2 += "".concat(e3[c2], "-").concat(a2[c2], " "), a2[c2] > 0 && i2.recordPeerReadTime("C2C".concat(e3[c2]), a2[c2]);
          o2.setNetworkType(t2.getNetworkType()).setMessage(s2).end();
        }).catch(function(e4) {
          t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), r3 = n4[0], a2 = n4[1];
            o2.setError(e4, r3, a2).end();
          }), bl.warn("".concat(n3, " failed. error:"), e4);
        });
      } }, { key: "sendReadReceipt", value: function(e3) {
        var t2 = this, n3 = e3[0].conversationID.replace(gr.CONV_C2C, ""), o2 = new Ih(Eh.SEND_C2C_READ_RECEIPT);
        o2.setMessage("peerAccount:".concat(n3));
        var r3 = this.getMyUserID(), a2 = e3.filter(function(e4) {
          return e4.from !== r3 && true === e4.needReadReceipt;
        }).map(function(e4) {
          return { fromAccount: e4.from, toAccount: e4.to, sequence: e4.sequence, random: e4.random, time: e4.time, clientTime: e4.clientTime };
        });
        if (0 === a2.length)
          return bM({ code: ah.READ_RECEIPT_MESSAGE_LIST_EMPTY, message: sh.READ_RECEIPT_MESSAGE_LIST_EMPTY });
        var s2 = "".concat(this._className, ".sendReadReceipt");
        return bl.log("".concat(s2, ". peerAccount:").concat(n3, " messageInfoList length:").concat(a2.length)), this.request({ protocolName: f_, requestData: { peerAccount: n3, messageInfoList: a2 } }).then(function(e4) {
          return o2.end(), bl.log("".concat(s2, " ok")), AM();
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), r4 = n4[0], a3 = n4[1];
            o2.setError(e4, r4, a3).end();
          }), bl.warn("".concat(s2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getReadReceiptList", value: function(e3) {
        var t2 = "".concat(this._className, ".getReadReceiptList"), n3 = this.getMyUserID(), o2 = e3.filter(function(e4) {
          return e4.from === n3 && true === e4.needReadReceipt;
        });
        return bl.log("".concat(t2, " userID:").concat(n3, " messageList length:").concat(o2.length)), UM({ messageList: o2 });
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._messageFromUnreadDBMap.clear();
      } }]), r2;
    }(Cg), FM = ae.match(/firefox\/(\d+)/i), qM = !!FM && +FM[1], VM = /MSIE|Trident/.test(ae), xM = ae.match(/AppleWebKit\/(\d+)\./), BM = !!xM && +xM[1], KM = [], HM = H(KM.sort), jM = H(KM.push), WM = L(function() {
      KM.sort(void 0);
    }), YM = L(function() {
      KM.sort(null);
    }), $M = eo("sort"), zM = !L(function() {
      if (le)
        return le < 70;
      if (!(qM && qM > 3)) {
        if (VM)
          return true;
        if (BM)
          return BM < 603;
        var e2, t2, n2, o2, r2 = "";
        for (e2 = 65; e2 < 76; e2++) {
          switch (t2 = String.fromCharCode(e2), e2) {
            case 66:
            case 69:
            case 70:
            case 72:
              n2 = 3;
              break;
            case 68:
            case 71:
              n2 = 4;
              break;
            default:
              n2 = 2;
          }
          for (o2 = 0; o2 < 47; o2++)
            KM.push({ k: t2 + o2, v: n2 });
        }
        for (KM.sort(function(e3, t3) {
          return t3.v - e3.v;
        }), o2 = 0; o2 < KM.length; o2++)
          t2 = KM[o2].k.charAt(0), r2.charAt(r2.length - 1) !== t2 && (r2 += t2);
        return "DGBEFHACIJK" !== r2;
      }
    });
    nn({ target: "Array", proto: true, forced: WM || !YM || !$M || !zM }, { sort: function(e2) {
      void 0 !== e2 && Me(e2);
      var t2 = Ae(this);
      if (zM)
        return void 0 === e2 ? HM(t2) : HM(t2, e2);
      var n2, o2, r2 = [], a2 = Ut(t2);
      for (o2 = 0; o2 < a2; o2++)
        o2 in t2 && jM(r2, t2[o2]);
      for (tf(r2, function(e3) {
        return function(t3, n3) {
          return void 0 === n3 ? -1 : void 0 === t3 ? 1 : void 0 !== e3 ? +e3(t3, n3) || 0 : dn(t3) > dn(n3) ? 1 : -1;
        };
      }(e2)), n2 = r2.length, o2 = 0; o2 < n2; )
        t2[o2] = r2[o2++];
      for (; o2 < a2; )
        delete t2[o2++];
      return t2;
    } });
    var JM = Zn.findIndex, XM = true;
    "findIndex" in [] && Array(1).findIndex(function() {
      XM = false;
    }), nn({ target: "Array", proto: true, forced: XM }, { findIndex: function(e2) {
      return JM(this, e2, arguments.length > 1 ? arguments[1] : void 0);
    } }), ja("findIndex");
    var QM = function() {
      function e2() {
        o(this, e2), this.list = /* @__PURE__ */ new Map(), this._className = "MessageListHandler", this._latestMessageSentByPeerMap = /* @__PURE__ */ new Map(), this._latestMessageSentByMeMap = /* @__PURE__ */ new Map(), this._groupLocalLastMessageSequenceMap = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "getLocalOldestMessageByConversationID", value: function(e3) {
        if (!e3)
          return null;
        if (!this.list.has(e3))
          return null;
        var t2 = this.list.get(e3).values();
        return t2 ? t2.next().value : null;
      } }, { key: "pushIn", value: function(e3) {
        var t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n2 = e3.conversationID, o2 = true;
        this.list.has(n2) || this.list.set(n2, /* @__PURE__ */ new Map());
        var r2 = this._getUniqueIDOfMessage(e3), a2 = this.list.get(n2).has(r2);
        if (a2) {
          var s2 = this.list.get(n2).get(r2);
          if (!t2 || true === s2.isModified)
            return o2 = false;
        }
        return this.list.get(n2).set(r2, e3), this._setLatestMessageSentByPeer(n2, e3), this._setLatestMessageSentByMe(n2, e3), this._setGroupLocalLastMessageSequence(n2, e3), o2;
      } }, { key: "unshift", value: function(e3, t2) {
        var n2;
        if (Ql(e3)) {
          if (e3.length > 0) {
            n2 = e3[0].conversationID;
            var o2 = e3.length;
            this._unshiftMultipleMessages(e3, t2), this._setGroupLocalLastMessageSequence(n2, e3[o2 - 1]);
          }
        } else
          n2 = e3.conversationID, this._unshiftSingleMessage(e3, t2), this._setGroupLocalLastMessageSequence(n2, e3);
        if (n2 && n2.startsWith(gr.CONV_C2C)) {
          var r2 = Array.from(this.list.get(n2).values()), a2 = r2.length;
          if (0 === a2)
            return;
          for (var s2 = a2 - 1; s2 >= 0; s2--)
            if ("out" === r2[s2].flow) {
              this._setLatestMessageSentByMe(n2, r2[s2]);
              break;
            }
          for (var i2 = a2 - 1; i2 >= 0; i2--)
            if ("in" === r2[i2].flow) {
              this._setLatestMessageSentByPeer(n2, r2[i2]);
              break;
            }
        }
      } }, { key: "_unshiftSingleMessage", value: function(e3, t2) {
        var n2 = e3.conversationID, o2 = this._getUniqueIDOfMessage(e3);
        if (!this.list.has(n2))
          return this.list.set(n2, /* @__PURE__ */ new Map()), this.list.get(n2).set(o2, e3), void t2.push(e3);
        var r2 = this.list.get(n2), a2 = Array.from(r2);
        r2.has(o2) || (a2.unshift([o2, e3]), this.list.set(n2, new Map(a2)), t2.push(e3));
      } }, { key: "_unshiftMultipleMessages", value: function(e3, t2) {
        for (var n2 = e3.length, o2 = [], r2 = e3[0].conversationID, a2 = this.list.get(r2), s2 = this.list.has(r2) ? Array.from(a2) : [], i2 = 0; i2 < n2; i2++) {
          var c2 = this._getUniqueIDOfMessage(e3[i2]);
          a2 && a2.has(c2) || (o2.push([c2, e3[i2]]), t2.push(e3[i2]));
        }
        this.list.set(r2, new Map(o2.concat(s2)));
      } }, { key: "remove", value: function(e3) {
        var t2 = e3.conversationID, n2 = this._getUniqueIDOfMessage(e3);
        this.list.has(t2) && this.list.get(t2).delete(n2);
      } }, { key: "revoke", value: function(e3, t2, n2) {
        if (bl.debug("revoke message", e3, t2, n2), this.list.has(e3)) {
          var o2, r2 = S(this.list.get(e3));
          try {
            for (r2.s(); !(o2 = r2.n()).done; ) {
              var a2 = m(o2.value, 2)[1];
              if (a2.sequence === t2 && !a2.isRevoked && (Zl(n2) || a2.random === n2))
                return a2.isRevoked = true, a2;
            }
          } catch (s2) {
            r2.e(s2);
          } finally {
            r2.f();
          }
        }
        return null;
      } }, { key: "removeByConversationID", value: function(e3) {
        this.list.has(e3) && (this.list.delete(e3), this._latestMessageSentByPeerMap.delete(e3), this._latestMessageSentByMeMap.delete(e3));
      } }, { key: "findMessage", value: function(e3) {
        var t2, n2 = null, o2 = S(this.list);
        try {
          for (o2.s(); !(t2 = o2.n()).done; )
            for (var r2 = M(m(t2.value, 2)[1].values()), a2 = r2.length, s2 = 0; s2 < a2; s2++)
              if (r2[s2].ID === e3) {
                n2 = r2[s2];
                break;
              }
        } catch (i2) {
          o2.e(i2);
        } finally {
          o2.f();
        }
        return n2;
      } }, { key: "updateMessageIsPeerReadProperty", value: function(e3, t2) {
        var n2 = [];
        if (this.list.has(e3)) {
          var o2, r2 = S(this.list.get(e3));
          try {
            for (r2.s(); !(o2 = r2.n()).done; ) {
              var a2 = m(o2.value, 2)[1];
              a2.time <= t2 && !a2.isPeerRead && "out" === a2.flow && (a2.isPeerRead = true, n2.push(a2));
            }
          } catch (s2) {
            r2.e(s2);
          } finally {
            r2.f();
          }
          bl.log("".concat(this._className, ".updateMessageIsPeerReadProperty conversationID:").concat(e3, " peerReadTime:").concat(t2, " count:").concat(n2.length));
        }
        return n2;
      } }, { key: "updateMessageIsModifiedProperty", value: function(e3) {
        var t2 = e3.conversationID;
        if (this.list.has(t2)) {
          var n2 = this._getUniqueIDOfMessage(e3), o2 = this.list.get(t2).get(n2);
          o2 && (o2.isModified = true);
        }
      } }, { key: "hasLocalMessageList", value: function(e3) {
        return this.list.has(e3);
      } }, { key: "getLocalMessageList", value: function(e3) {
        return this.hasLocalMessageList(e3) ? M(this.list.get(e3).values()) : [];
      } }, { key: "hasLocalMessage", value: function(e3, t2) {
        for (var n2 = false, o2 = this.getLocalMessageList(e3), r2 = o2.length, a2 = 0; a2 < r2; a2++)
          o2[a2].ID === t2 && (n2 = true);
        return n2;
      } }, { key: "getLocalMessage", value: function(e3, t2) {
        for (var n2 = null, o2 = this.getLocalMessageList(e3), r2 = o2.length, a2 = 0; a2 < r2; a2++)
          if (o2[a2].ID === t2) {
            n2 = o2[a2];
            break;
          }
        return n2;
      } }, { key: "getLocalLastMessage", value: function(e3) {
        var t2 = this.getLocalMessageList(e3);
        return t2[t2.length - 1];
      } }, { key: "getLocalOldestMessage", value: function(e3) {
        return this.getLocalMessageList(e3)[0];
      } }, { key: "_setLatestMessageSentByPeer", value: function(e3, t2) {
        e3.startsWith(gr.CONV_C2C) && "in" === t2.flow && this._latestMessageSentByPeerMap.set(e3, t2);
      } }, { key: "_setLatestMessageSentByMe", value: function(e3, t2) {
        e3.startsWith(gr.CONV_C2C) && "out" === t2.flow && this._latestMessageSentByMeMap.set(e3, t2);
      } }, { key: "_setGroupLocalLastMessageSequence", value: function(e3, t2) {
        e3.startsWith(gr.CONV_GROUP) && this._groupLocalLastMessageSequenceMap.set(e3, t2.sequence);
      } }, { key: "getLatestMessageSentByPeer", value: function(e3) {
        return this._latestMessageSentByPeerMap.get(e3);
      } }, { key: "getLatestMessageSentByMe", value: function(e3) {
        return this._latestMessageSentByMeMap.get(e3);
      } }, { key: "getGroupLocalLastMessageSequence", value: function(e3) {
        return this._groupLocalLastMessageSequenceMap.get(e3) || 0;
      } }, { key: "modifyMessageSentByPeer", value: function(e3) {
        var t2 = e3.conversationID, n2 = e3.latestNick, o2 = e3.latestAvatar, r2 = this.list.get(t2);
        if (!xd(r2)) {
          var a2 = Array.from(r2.values()), s2 = a2.length;
          if (0 !== s2) {
            for (var i2 = null, c2 = 0, u2 = false, l2 = s2 - 1; l2 >= 0; l2--)
              "in" === a2[l2].flow && ((i2 = a2[l2]).nick !== n2 && (i2.setNickAndAvatar({ nick: n2 }), u2 = true), i2.avatar !== o2 && (i2.setNickAndAvatar({ avatar: o2 }), u2 = true), u2 && (c2 += 1));
            bl.log("".concat(this._className, ".modifyMessageSentByPeer conversationID:").concat(t2, " count:").concat(c2));
          }
        }
      } }, { key: "modifyMessageSentByMe", value: function(e3) {
        var t2 = e3.conversationID, n2 = e3.latestNick, o2 = e3.latestAvatar, r2 = this.list.get(t2);
        if (!xd(r2)) {
          var a2 = Array.from(r2.values()), s2 = a2.length;
          if (0 !== s2) {
            for (var i2 = null, c2 = 0, u2 = false, l2 = s2 - 1; l2 >= 0; l2--)
              "out" === a2[l2].flow && ((i2 = a2[l2]).nick !== n2 && (i2.setNickAndAvatar({ nick: n2 }), u2 = true), i2.avatar !== o2 && (i2.setNickAndAvatar({ avatar: o2 }), u2 = true), u2 && (c2 += 1));
            bl.log("".concat(this._className, ".modifyMessageSentByMe conversationID:").concat(t2, " count:").concat(c2));
          }
        }
      } }, { key: "getTopicConversationIDList", value: function(e3) {
        return M(this.list.keys()).filter(function(t2) {
          return t2.startsWith("".concat(gr.CONV_GROUP).concat(e3));
        });
      } }, { key: "traversal", value: function() {
        if (0 !== this.list.size && -1 === bl.getLevel()) {
          console.group("conversationID-messageCount");
          var e3, t2 = S(this.list);
          try {
            for (t2.s(); !(e3 = t2.n()).done; ) {
              var n2 = m(e3.value, 2), o2 = n2[0], r2 = n2[1];
              console.log("".concat(o2, "-").concat(r2.size));
            }
          } catch (a2) {
            t2.e(a2);
          } finally {
            t2.f();
          }
          console.groupEnd();
        }
      } }, { key: "onMessageModified", value: function(e3, t2) {
        if (!this.list.has(e3))
          return { isUpdated: false, message: null };
        var n2 = this._getUniqueIDOfMessage(t2), o2 = this.list.get(e3).has(n2);
        if (bl.debug("".concat(this._className, ".onMessageModified conversationID:").concat(e3, " uniqueID:").concat(n2, " has:").concat(o2)), o2) {
          var r2 = this.list.get(e3).get(n2), a2 = t2.messageVersion, s2 = t2.elements, i2 = t2.cloudCustomData;
          return r2.version < a2 ? (r2.version = a2, r2._elements = JSON.parse(JSON.stringify(s2)), r2.payload = JSON.parse(JSON.stringify(s2[0].content)), r2.type = s2[0].type, r2.cloudCustomData = i2, r2.isModified = true, { isUpdated: true, message: r2 }) : { isUpdated: false, message: r2 };
        }
        return { isUpdated: false, message: null };
      } }, { key: "_getUniqueIDOfMessage", value: function(e3) {
        var t2 = e3.from, n2 = e3.to, o2 = e3.random, r2 = e3.sequence, a2 = e3.time;
        return "".concat(t2, "-").concat(n2, "-").concat(o2, "-").concat(r2, "-").concat(a2);
      } }, { key: "reset", value: function() {
        this.list.clear(), this._latestMessageSentByPeerMap.clear(), this._latestMessageSentByMeMap.clear(), this._groupLocalLastMessageSequenceMap.clear();
      } }]), e2;
    }(), ZM = "_a2KeyAndTinyIDUpdated", ev = "_cloudConfigUpdated", tv = "_profileUpdated";
    function nv(e2) {
      this.mixin(e2);
    }
    nv.mixin = function(e2) {
      var t2 = e2.prototype || e2;
      t2._isReady = false, t2.ready = function(e3) {
        var t3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (e3)
          return this._isReady ? void (t3 ? e3.call(this) : setTimeout(e3, 1)) : (this._readyQueue = this._readyQueue || [], void this._readyQueue.push(e3));
      }, t2.triggerReady = function() {
        var e3 = this;
        this._isReady = true, setTimeout(function() {
          var t3 = e3._readyQueue;
          e3._readyQueue = [], t3 && t3.length > 0 && t3.forEach(function(e4) {
            e4.call(this);
          }, e3);
        }, 1);
      }, t2.resetReady = function() {
        this._isReady = false, this._readyQueue = [];
      }, t2.isReady = function() {
        return this._isReady;
      };
    };
    var ov = ["jpg", "jpeg", "gif", "png", "bmp", "image", "webp"], rv = ["mp4"], av = 1, sv = 2, iv = 3, cv = 255, uv = function() {
      function e2(t2) {
        var n2 = this;
        o(this, e2), xd(t2) || (this.userID = t2.userID || "", this.nick = t2.nick || "", this.gender = t2.gender || "", this.birthday = t2.birthday || 0, this.location = t2.location || "", this.selfSignature = t2.selfSignature || "", this.allowType = t2.allowType || gr.ALLOW_TYPE_ALLOW_ANY, this.language = t2.language || 0, this.avatar = t2.avatar || "", this.messageSettings = t2.messageSettings || 0, this.adminForbidType = t2.adminForbidType || gr.FORBID_TYPE_NONE, this.level = t2.level || 0, this.role = t2.role || 0, this.lastUpdatedTime = 0, this.profileCustomField = [], xd(t2.profileCustomField) || t2.profileCustomField.forEach(function(e3) {
          n2.profileCustomField.push({ key: e3.key, value: e3.value });
        }));
      }
      return a(e2, [{ key: "validate", value: function(e3) {
        var t2 = true, n2 = "";
        if (xd(e3))
          return { valid: false, tips: "empty options" };
        if (e3.profileCustomField)
          for (var o2 = e3.profileCustomField.length, r2 = null, a2 = 0; a2 < o2; a2++) {
            if (r2 = e3.profileCustomField[a2], !zl(r2.key) || -1 === r2.key.indexOf("Tag_Profile_Custom"))
              return { valid: false, tips: "\u81EA\u5B9A\u4E49\u8D44\u6599\u5B57\u6BB5\u7684\u524D\u7F00\u5FC5\u987B\u662F Tag_Profile_Custom" };
            if (!zl(r2.value))
              return { valid: false, tips: "\u81EA\u5B9A\u4E49\u8D44\u6599\u5B57\u6BB5\u7684 value \u5FC5\u987B\u662F\u5B57\u7B26\u4E32" };
          }
        for (var s2 in e3)
          if (Object.prototype.hasOwnProperty.call(e3, s2)) {
            if ("profileCustomField" === s2)
              continue;
            if (xd(e3[s2]) && !zl(e3[s2]) && !$l(e3[s2])) {
              n2 = "key:" + s2 + ", invalid value:" + e3[s2], t2 = false;
              continue;
            }
            switch (s2) {
              case "nick":
                zl(e3[s2]) || (n2 = "nick should be a string", t2 = false), ud(e3[s2]) > 500 && (n2 = "nick name limited: must less than or equal to ".concat(500, " bytes, current size: ").concat(ud(e3[s2]), " bytes"), t2 = false);
                break;
              case "gender":
                gd(ql, e3.gender) || (n2 = "key:gender, invalid value:" + e3.gender, t2 = false);
                break;
              case "birthday":
                $l(e3.birthday) || (n2 = "birthday should be a number", t2 = false);
                break;
              case "location":
                zl(e3.location) || (n2 = "location should be a string", t2 = false);
                break;
              case "selfSignature":
                zl(e3.selfSignature) || (n2 = "selfSignature should be a string", t2 = false);
                break;
              case "allowType":
                gd(xl, e3.allowType) || (n2 = "key:allowType, invalid value:" + e3.allowType, t2 = false);
                break;
              case "language":
                $l(e3.language) || (n2 = "language should be a number", t2 = false);
                break;
              case "avatar":
                zl(e3.avatar) || (n2 = "avatar should be a string", t2 = false);
                break;
              case "messageSettings":
                0 !== e3.messageSettings && 1 !== e3.messageSettings && (n2 = "messageSettings should be 0 or 1", t2 = false);
                break;
              case "adminForbidType":
                gd(Vl, e3.adminForbidType) || (n2 = "key:adminForbidType, invalid value:" + e3.adminForbidType, t2 = false);
                break;
              case "level":
                $l(e3.level) || (n2 = "level should be a number", t2 = false);
                break;
              case "role":
                $l(e3.role) || (n2 = "role should be a number", t2 = false);
                break;
              default:
                n2 = "unknown key:" + s2 + "  " + e3[s2], t2 = false;
            }
          }
        return { valid: t2, tips: n2 };
      } }]), e2;
    }(), lv = a(function e2(t2) {
      o(this, e2), this.value = t2, this.next = null;
    }), dv = function() {
      function e2(t2) {
        o(this, e2), this.MAX_LENGTH = t2, this.pTail = null, this.pNodeToDel = null, this.map = /* @__PURE__ */ new Map(), bl.debug("SinglyLinkedList init MAX_LENGTH:".concat(this.MAX_LENGTH));
      }
      return a(e2, [{ key: "set", value: function(e3) {
        var t2 = new lv(e3);
        if (this.map.size < this.MAX_LENGTH)
          null === this.pTail ? (this.pTail = t2, this.pNodeToDel = t2) : (this.pTail.next = t2, this.pTail = t2), this.map.set(e3, 1);
        else {
          var n2 = this.pNodeToDel;
          this.pNodeToDel = this.pNodeToDel.next, this.map.delete(n2.value), n2.next = null, n2 = null, this.pTail.next = t2, this.pTail = t2, this.map.set(e3, 1);
        }
      } }, { key: "has", value: function(e3) {
        return this.map.has(e3);
      } }, { key: "delete", value: function(e3) {
        this.has(e3) && this.map.delete(e3);
      } }, { key: "tail", value: function() {
        return this.pTail;
      } }, { key: "size", value: function() {
        return this.map.size;
      } }, { key: "data", value: function() {
        return Array.from(this.map.keys());
      } }, { key: "reset", value: function() {
        for (var e3; null !== this.pNodeToDel; )
          e3 = this.pNodeToDel, this.pNodeToDel = this.pNodeToDel.next, e3.next = null, e3 = null;
        this.pTail = null, this.map.clear();
      } }]), e2;
    }(), pv = ["groupID", "name", "avatar", "type", "introduction", "notification", "ownerID", "selfInfo", "createTime", "infoSequence", "lastInfoTime", "lastMessage", "nextMessageSeq", "memberNum", "maxMemberNum", "memberList", "joinOption", "groupCustomField", "muteAllMembers", "isSupportTopic"], gv = function() {
      function e2(t2) {
        o(this, e2), this.groupID = "", this.name = "", this.avatar = "", this.type = "", this.introduction = "", this.notification = "", this.ownerID = "", this.createTime = "", this.infoSequence = "", this.lastInfoTime = "", this.selfInfo = { messageRemindType: "", joinTime: "", nameCard: "", role: "", userID: "", memberCustomField: void 0, readedSequence: 0, excludedUnreadSequenceList: void 0 }, this.lastMessage = { lastTime: "", lastSequence: "", fromAccount: "", messageForShow: "" }, this.nextMessageSeq = "", this.memberNum = "", this.memberCount = "", this.maxMemberNum = "", this.maxMemberCount = "", this.joinOption = "", this.groupCustomField = [], this.muteAllMembers = false, this.isSupportTopic = false, this._initGroup(t2);
      }
      return a(e2, [{ key: "memberNum", get: function() {
        return bl.warn("\uFF01\uFF01\uFF01v2.8.0\u8D77\u5F03\u7528memberNum\uFF0C\u8BF7\u4F7F\u7528 memberCount"), this.memberCount;
      }, set: function(e3) {
      } }, { key: "maxMemberNum", get: function() {
        return bl.warn("\uFF01\uFF01\uFF01v2.8.0\u8D77\u5F03\u7528maxMemberNum\uFF0C\u8BF7\u4F7F\u7528 maxMemberCount"), this.maxMemberCount;
      }, set: function(e3) {
      } }, { key: "_initGroup", value: function(e3) {
        for (var t2 in e3)
          pv.indexOf(t2) < 0 || ("selfInfo" !== t2 ? ("memberNum" === t2 && (this.memberCount = e3[t2]), "maxMemberNum" === t2 && (this.maxMemberCount = e3[t2]), "isSupportTopic" !== t2 ? this[t2] = e3[t2] : this.isSupportTopic = 1 === e3[t2]) : this.updateSelfInfo(e3[t2]));
      } }, { key: "updateGroup", value: function(e3) {
        var t2 = this, n2 = JSON.parse(JSON.stringify(e3));
        n2.lastMsgTime && (this.lastMessage.lastTime = n2.lastMsgTime), Zl(n2.muteAllMembers) || ("On" === n2.muteAllMembers ? n2.muteAllMembers = true : n2.muteAllMembers = false), n2.groupCustomField && Md(this.groupCustomField, n2.groupCustomField), Zl(n2.memberNum) || (this.memberCount = n2.memberNum), Zl(n2.maxMemberNum) || (this.maxMemberCount = n2.maxMemberNum), Zl(n2.isSupportTopic) || (this.isSupportTopic = $l(n2.isSupportTopic) ? 1 === n2.isSupportTopic : n2.isSupportTopic), id(this, n2, ["members", "errorCode", "lastMsgTime", "groupCustomField", "memberNum", "maxMemberNum", "isSupportTopic"]), Ql(n2.members) && n2.members.length > 0 && n2.members.forEach(function(e4) {
          e4.userID === t2.selfInfo.userID && id(t2.selfInfo, e4, ["sequence"]);
        });
      } }, { key: "updateSelfInfo", value: function(e3) {
        var n2 = { nameCard: e3.nameCard, joinTime: e3.joinTime, role: e3.role, messageRemindType: e3.messageRemindType, readedSequence: e3.readedSequence, excludedUnreadSequenceList: e3.excludedUnreadSequenceList };
        id(this.selfInfo, t({}, n2), [], ["", null, void 0, 0, NaN]);
      } }, { key: "setSelfNameCard", value: function(e3) {
        this.selfInfo.nameCard = e3;
      } }]), e2;
    }(), _v = function(e2) {
      return Zl(e2) ? { lastTime: 0, lastSequence: 0, fromAccount: 0, messageForShow: "", payload: null, type: "", isRevoked: false, cloudCustomData: "", onlineOnlyFlag: false, nick: "", nameCard: "", version: 0, isPeerRead: false } : e2 instanceof CM ? { lastTime: e2.time || 0, lastSequence: e2.sequence || 0, fromAccount: e2.from || "", messageForShow: Fd(e2.type, e2.payload), payload: e2.payload || null, type: e2.type || null, isRevoked: e2.isRevoked || false, cloudCustomData: e2.cloudCustomData || "", onlineOnlyFlag: e2._onlineOnlyFlag || false, nick: e2.nick || "", nameCard: e2.nameCard || "", version: e2.version || 0, isPeerRead: e2.isPeerRead || false } : t(t({}, e2), {}, { messageForShow: Fd(e2.type, e2.payload) });
    }, hv = function() {
      function e2(t2) {
        o(this, e2), this.conversationID = t2.conversationID || "", this.unreadCount = t2.unreadCount || 0, this.type = t2.type || "", this.lastMessage = _v(t2.lastMessage), t2.lastMsgTime && (this.lastMessage.lastTime = t2.lastMsgTime), this._isInfoCompleted = false, this.peerReadTime = t2.peerReadTime || 0, this.groupAtInfoList = [], this.remark = "", this.isPinned = t2.isPinned || false, this.messageRemindType = "", this._initProfile(t2);
      }
      return a(e2, [{ key: "toAccount", get: function() {
        return this.conversationID.startsWith(gr.CONV_C2C) ? this.conversationID.replace(gr.CONV_C2C, "") : this.conversationID.startsWith(gr.CONV_GROUP) ? this.conversationID.replace(gr.CONV_GROUP, "") : "";
      } }, { key: "subType", get: function() {
        return this.groupProfile ? this.groupProfile.type : "";
      } }, { key: "_initProfile", value: function(e3) {
        var t2 = this;
        Object.keys(e3).forEach(function(n2) {
          switch (n2) {
            case "userProfile":
              t2.userProfile = e3.userProfile;
              break;
            case "groupProfile":
              t2.groupProfile = e3.groupProfile;
          }
        }), Zl(this.userProfile) && this.type === gr.CONV_C2C ? this.userProfile = new uv({ userID: e3.conversationID.replace("C2C", "") }) : Zl(this.groupProfile) && this.type === gr.CONV_GROUP && (this.groupProfile = new gv({ groupID: e3.conversationID.replace("GROUP", "") }));
      } }, { key: "updateUnreadCount", value: function(e3) {
        var t2 = e3.nextUnreadCount, n2 = e3.isFromGetConversations, o2 = e3.isUnreadC2CMessage;
        Zl(t2) || (yd(this.subType) ? this.unreadCount = 0 : n2 && this.type === gr.CONV_GROUP || n2 && this.type === gr.CONV_TOPIC || o2 && this.type === gr.CONV_C2C ? this.unreadCount = t2 : this.unreadCount = this.unreadCount + t2);
      } }, { key: "updateLastMessage", value: function(e3) {
        this.lastMessage = _v(e3);
      } }, { key: "updateGroupAtInfoList", value: function(e3) {
        if (!this._isNeedMergeGroupAtInfo(e3)) {
          var t2, n2 = (v(t2 = e3.groupAtType) || y(t2) || I(t2) || T()).slice(0);
          -1 !== n2.indexOf(gr.CONV_AT_ME) && -1 !== n2.indexOf(gr.CONV_AT_ALL) && (n2 = [gr.CONV_AT_ALL_AT_ME]);
          var o2 = { from: e3.from, groupID: e3.groupID, topicID: e3.topicID, messageSequence: e3.sequence, atTypeArray: n2, __random: e3.__random, __sequence: e3.__sequence };
          this.groupAtInfoList.push(o2), bl.debug("Conversation.updateGroupAtInfoList conversationID:".concat(this.conversationID), this.groupAtInfoList);
        }
      } }, { key: "_isNeedMergeGroupAtInfo", value: function(e3) {
        var t2 = e3.groupID, n2 = e3.sequence;
        if (!Id({ groupID: t2 }))
          return false;
        var o2 = false;
        return this.groupAtInfoList.forEach(function(t3) {
          t3.messageSequence === n2 && (t3.atTypeArray.indexOf(gr.CONV_AT_ME) > -1 && e3.groupAtType.indexOf(gr.CONV_AT_ALL) > -1 && (t3.atTypeArray = [gr.CONV_AT_ALL_AT_ME]), t3.atTypeArray.indexOf(gr.CONV_AT_ALL) > -1 && e3.groupAtType.indexOf(gr.CONV_AT_ME) > -1 && (t3.atTypeArray = [gr.CONV_AT_ALL_AT_ME], t3.__random = e3.__random, t3.__sequence = e3.__sequence), o2 = true);
        }), o2;
      } }, { key: "clearGroupAtInfoList", value: function() {
        this.groupAtInfoList.length = 0;
      } }, { key: "reduceUnreadCount", value: function() {
        this.unreadCount >= 1 && (this.unreadCount -= 1);
      } }, { key: "isLastMessageRevoked", value: function(e3) {
        var t2 = e3.sequence, n2 = e3.time;
        return this.type === gr.CONV_C2C && t2 === this.lastMessage.lastSequence && n2 === this.lastMessage.lastTime || this.type === gr.CONV_GROUP && t2 === this.lastMessage.lastSequence;
      } }, { key: "setLastMessageRevoked", value: function(e3) {
        this.lastMessage.isRevoked = e3;
      } }]), e2;
    }(), fv = function() {
      function e2(t2) {
        o(this, e2), this._conversationModule = t2, this._className = "MessageRemindHandler", this._updateSequence = 0;
      }
      return a(e2, [{ key: "getC2CMessageRemindType", value: function() {
        var e3 = this, t2 = "".concat(this._className, ".getC2CMessageRemindType");
        return this._conversationModule.request({ protocolName: Bg, updateSequence: this._updateSequence }).then(function(n2) {
          bl.log("".concat(t2, " ok"));
          var o2 = n2.data, r2 = o2.updateSequence, a2 = o2.muteFlagList;
          e3._updateSequence = r2, e3._patchC2CMessageRemindType(a2);
        }).catch(function(e4) {
          bl.error("".concat(t2, " failed. error:"), e4);
        });
      } }, { key: "_patchC2CMessageRemindType", value: function(e3) {
        var t2 = this, n2 = 0, o2 = "";
        Ql(e3) && e3.length > 0 && e3.forEach(function(e4) {
          var r2 = e4.userID, a2 = e4.muteFlag;
          0 === a2 ? o2 = gr.MSG_REMIND_ACPT_AND_NOTE : 1 === a2 ? o2 = gr.MSG_REMIND_DISCARD : 2 === a2 && (o2 = gr.MSG_REMIND_ACPT_NOT_NOTE), true === t2._conversationModule.patchMessageRemindType({ ID: r2, isC2CConversation: true, messageRemindType: o2 }) && (n2 += 1);
        }), bl.log("".concat(this._className, "._patchC2CMessageRemindType count:").concat(n2));
      } }, { key: "set", value: function(e3) {
        return e3.groupID ? this._setGroupMessageRemindType(e3) : Ql(e3.userIDList) ? this._setC2CMessageRemindType(e3) : void 0;
      } }, { key: "_setGroupMessageRemindType", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, "._setGroupMessageRemindType"), o2 = e3.groupID, r2 = e3.messageRemindType, a2 = "groupID:".concat(o2, " messageRemindType:").concat(r2), s2 = new Ih(Eh.SET_MESSAGE_REMIND_TYPE);
        return s2.setMessage(a2), this._getModule(sg).modifyGroupMemberInfo({ groupID: o2, messageRemindType: r2, userID: this._conversationModule.getMyUserID() }).then(function() {
          s2.setNetworkType(t2._conversationModule.getNetworkType()).end(), bl.log("".concat(n2, " ok. ").concat(a2));
          var o3 = t2.onGroupMessageRemindTypeUpdated(e3);
          return AM(o3);
        }).catch(function(e4) {
          return t2._conversationModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            s2.setError(e4, o3, r3).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "onGroupMessageRemindTypeUpdated", value: function(e3) {
        var t2 = e3.groupID, n2 = e3.messageRemindType, o2 = this._getModule(rg).getLocalGroupProfile(t2);
        if (o2 && (o2.selfInfo.messageRemindType = n2), Ed(t2)) {
          var r2 = t2, a2 = wd(r2), s2 = this._getModule(ig).getLocalTopic(a2, r2);
          return s2 && (s2.updateSelfInfo({ messageRemindType: n2 }), this._conversationModule.emitOuterEvent(pr.TOPIC_UPDATED, { groupID: a2, topic: s2 })), { topic: s2 };
        }
        return this._conversationModule.patchMessageRemindType({ ID: t2, isC2CConversation: false, messageRemindType: n2 }) && this._emitConversationUpdate(), { group: o2 };
      } }, { key: "_setC2CMessageRemindType", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, "._setC2CMessageRemindType"), o2 = e3.userIDList, r2 = e3.messageRemindType, a2 = o2.slice(0, 30), s2 = 0;
        r2 === gr.MSG_REMIND_DISCARD ? s2 = 1 : r2 === gr.MSG_REMIND_ACPT_NOT_NOTE && (s2 = 2);
        var i2 = "userIDList:".concat(a2, " messageRemindType:").concat(r2), c2 = new Ih(Eh.SET_MESSAGE_REMIND_TYPE);
        return c2.setMessage(i2), this._conversationModule.request({ protocolName: xg, requestData: { userIDList: a2, muteFlag: s2 } }).then(function(e4) {
          c2.setNetworkType(t2._conversationModule.getNetworkType()).end();
          var o3 = e4.data, s3 = o3.updateSequence, i3 = o3.errorList;
          t2._updateSequence = s3;
          var u2 = [], l2 = [];
          Ql(i3) && i3.forEach(function(e5) {
            u2.push(e5.userID), l2.push({ userID: e5.userID, code: e5.errorCode });
          });
          var d2 = a2.filter(function(e5) {
            return -1 === u2.indexOf(e5);
          });
          bl.log("".concat(n2, " ok. successUserIDList:").concat(d2, " failureUserIDList:").concat(JSON.stringify(l2)));
          var p3 = 0;
          return d2.forEach(function(e5) {
            t2._conversationModule.patchMessageRemindType({ ID: e5, isC2CConversation: true, messageRemindType: r2 }) && (p3 += 1);
          }), p3 >= 1 && t2._emitConversationUpdate(), a2.length = u2.length = 0, UM({ successUserIDList: d2.map(function(e5) {
            return { userID: e5 };
          }), failureUserIDList: l2 });
        }).catch(function(e4) {
          return t2._conversationModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            c2.setError(e4, o3, r3).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "_getModule", value: function(e3) {
        return this._conversationModule.getModule(e3);
      } }, { key: "_emitConversationUpdate", value: function() {
        this._conversationModule.emitConversationUpdate(true, false);
      } }, { key: "setUpdateSequence", value: function(e3) {
        this._updateSequence = e3;
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._updateSequence = 0;
      } }]), e2;
    }(), mv = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        return o(this, r2), (t2 = n2.call(this, e3))._className = "ConversationModule", nv.mixin(_(t2)), t2._messageListHandler = new QM(), t2._messageRemindHandler = new fv(_(t2)), t2.singlyLinkedList = new dv(100), t2._pagingStatus = wp.NOT_START, t2._pagingTimeStamp = 0, t2._pagingStartIndex = 0, t2._pagingPinnedTimeStamp = 0, t2._pagingPinnedStartIndex = 0, t2._conversationMap = /* @__PURE__ */ new Map(), t2._tmpGroupList = [], t2._tmpGroupAtTipsList = [], t2._peerReadTimeMap = /* @__PURE__ */ new Map(), t2._completedMap = /* @__PURE__ */ new Map(), t2._roamingMessageKeyAndTimeMap = /* @__PURE__ */ new Map(), t2._roamingMessageSequenceMap = /* @__PURE__ */ new Map(), t2._remoteGroupReadSequenceMap = /* @__PURE__ */ new Map(), t2._initListeners(), t2;
      }
      return a(r2, [{ key: "_initListeners", value: function() {
        var e3 = this.getInnerEmitterInstance();
        e3.on(ZM, this._initLocalConversationList, this), e3.on(tv, this._onProfileUpdated, this);
      } }, { key: "onCheckTimer", value: function(e3) {
        e3 % 60 == 0 && this._messageListHandler.traversal();
      } }, { key: "_initLocalConversationList", value: function() {
        var e3 = this, t2 = new Ih(Eh.GET_CONVERSATION_LIST_IN_STORAGE);
        bl.log("".concat(this._className, "._initLocalConversationList."));
        var n3 = "", o2 = this._getStorageConversationList();
        if (o2) {
          for (var r3 = o2.length, a2 = 0; a2 < r3; a2++) {
            var s2 = o2[a2];
            if (s2) {
              if (s2.conversationID === "".concat(gr.CONV_C2C, "@TLS#ERROR") || s2.conversationID === "".concat(gr.CONV_C2C, "@TLS#NOT_FOUND"))
                continue;
              if (s2.groupProfile) {
                var i2 = s2.groupProfile.type;
                if (yd(i2))
                  continue;
              }
            }
            this._conversationMap.set(o2[a2].conversationID, new hv(o2[a2]));
          }
          this.emitConversationUpdate(true, false), n3 = "count:".concat(r3);
        } else
          n3 = "count:0";
        t2.setNetworkType(this.getNetworkType()).setMessage(n3).end(), this.getModule(og) || this.triggerReady(), this.ready(function() {
          e3._tmpGroupList.length > 0 && (e3.updateConversationGroupProfile(e3._tmpGroupList), e3._tmpGroupList.length = 0);
        }), this.syncConversationList();
      } }, { key: "onMessageSent", value: function(e3) {
        this._onSendOrReceiveMessage({ conversationOptionsList: e3.conversationOptionsList, isInstantMessage: true });
      } }, { key: "onNewMessage", value: function(e3) {
        this._onSendOrReceiveMessage(e3);
      } }, { key: "_onSendOrReceiveMessage", value: function(e3) {
        var t2 = this, n3 = e3.conversationOptionsList, o2 = e3.isInstantMessage, r3 = void 0 === o2 || o2, a2 = e3.isUnreadC2CMessage, s2 = void 0 !== a2 && a2;
        this._isReady ? 0 !== n3.length && (this._getC2CPeerReadTime(n3), this._updateLocalConversationList({ conversationOptionsList: n3, isInstantMessage: r3, isUnreadC2CMessage: s2, isFromGetConversations: false }), this._setStorageConversationList(), n3.filter(function(e4) {
          return e4.type === gr.CONV_TOPIC;
        }).length > 0 || this.emitConversationUpdate()) : this.ready(function() {
          t2._onSendOrReceiveMessage(e3);
        });
      } }, { key: "updateConversationGroupProfile", value: function(e3) {
        var t2 = this;
        if (!Ql(e3) || 0 !== e3.length)
          if (0 !== this._conversationMap.size) {
            var n3 = false;
            e3.forEach(function(e4) {
              var o2 = "GROUP".concat(e4.groupID);
              if (t2._conversationMap.has(o2)) {
                n3 = true;
                var r3 = t2._conversationMap.get(o2);
                r3.groupProfile = JSON.parse(JSON.stringify(e4)), r3.lastMessage.lastSequence < e4.nextMessageSeq && (r3.lastMessage.lastSequence = e4.nextMessageSeq - 1), r3.subType || (r3.subType = e4.type);
              }
            }), n3 && this.emitConversationUpdate(true, false);
          } else
            this._tmpGroupList = e3;
      } }, { key: "_updateConversationUserProfile", value: function(e3) {
        var t2 = this;
        e3.data.forEach(function(e4) {
          var n3 = "C2C".concat(e4.userID);
          t2._conversationMap.has(n3) && (t2._conversationMap.get(n3).userProfile = e4);
        }), this.emitConversationUpdate(true, false);
      } }, { key: "onMessageRevoked", value: function(e3) {
        var t2 = this;
        if (0 !== e3.length) {
          var n3 = null, o2 = false;
          e3.forEach(function(e4) {
            (n3 = t2._conversationMap.get(e4.conversationID)) && (n3.reduceUnreadCount(), n3.isLastMessageRevoked(e4) && (o2 = true, n3.setLastMessageRevoked(true)));
          }), o2 && this.emitConversationUpdate(true, false);
        }
      } }, { key: "onMessageDeleted", value: function(e3) {
        var t2 = this;
        if (0 !== e3.length) {
          var n3 = null;
          e3.forEach(function(e4) {
            (n3 = t2._messageListHandler.getLocalMessage(e4.conversationID, e4.ID)) && (n3.isDeleted = true), e4 !== n3 && (e4.isDeleted = true);
          });
          for (var o2 = e3[0].conversationID, r3 = this._messageListHandler.getLocalMessageList(o2), a2 = {}, s2 = r3.length - 1; s2 >= 0; s2--)
            if (!r3[s2].isDeleted) {
              a2 = r3[s2];
              break;
            }
          var i2 = this._conversationMap.get(o2);
          if (i2) {
            var c2 = false;
            i2.lastMessage.lastSequence === a2.sequence && i2.lastMessage.lastTime === a2.time || (xd(a2) && (a2 = void 0), i2.updateLastMessage(a2), i2.type !== gr.CONV_TOPIC && (c2 = true), bl.log("".concat(this._className, ".onMessageDeleted. update conversationID:").concat(o2, " with lastMessage:"), i2.lastMessage)), o2.startsWith(gr.CONV_C2C) && this.updateUnreadCount(o2), c2 && this.emitConversationUpdate(true, false);
          }
        }
      } }, { key: "onMessageModified", value: function(e3) {
        var t2 = e3.conversationType, n3 = e3.from, o2 = e3.to, r3 = e3.time, a2 = e3.sequence, s2 = e3.elements, i2 = e3.cloudCustomData, c2 = e3.messageVersion, u2 = this.getMyUserID(), l2 = "".concat(t2).concat(o2);
        o2 === u2 && t2 === gr.CONV_C2C && (l2 = "".concat(t2).concat(n3));
        var d2 = this._messageListHandler.onMessageModified(l2, e3), p3 = d2.isUpdated, g2 = d2.message;
        true === p3 && this.emitOuterEvent(pr.MESSAGE_MODIFIED, [g2]);
        var _2 = this._isTopicConversation(l2);
        if (bl.log("".concat(this._className, ".onMessageModified isUpdated:").concat(p3, " isTopicMessage:").concat(_2, " from:").concat(n3, " to:").concat(o2)), _2) {
          this.getModule(ig).onMessageModified(e3);
        } else {
          var h3 = this._conversationMap.get(l2);
          if (h3) {
            var f2 = h3.lastMessage;
            bl.debug("".concat(this._className.onMessageModified, " lastMessage:"), JSON.stringify(f2), "options:", JSON.stringify(e3)), f2 && f2.lastTime === r3 && f2.lastSequence === a2 && f2.version !== c2 && (f2.type = s2[0].type, f2.payload = s2[0].content, f2.messageForShow = Fd(f2.type, f2.payload), f2.cloudCustomData = i2, f2.version = c2, this.emitConversationUpdate(true, false));
          }
        }
        return g2;
      } }, { key: "onNewGroupAtTips", value: function(e3) {
        var n3 = this, o2 = e3.dataList, r3 = null;
        o2.forEach(function(e4) {
          e4.groupAtTips ? r3 = e4.groupAtTips : e4.elements ? r3 = t(t({}, e4.elements), {}, { sync: true }) : e4.groupAtType && (r3 = t(t({}, e4), {}, { sync: true })), r3.__random = e4.random, r3.__sequence = e4.clientSequence, n3._tmpGroupAtTipsList.push(r3);
        }), bl.debug("".concat(this._className, ".onNewGroupAtTips isReady:").concat(this._isReady), this._tmpGroupAtTipsList), this._isReady && this._handleGroupAtTipsList();
      } }, { key: "_handleGroupAtTipsList", value: function() {
        var e3 = this;
        if (0 !== this._tmpGroupAtTipsList.length) {
          var t2 = false;
          this._tmpGroupAtTipsList.forEach(function(n3) {
            var o2 = n3.groupID, r3 = n3.from, a2 = n3.topicID, s2 = void 0 === a2 ? void 0 : a2, i2 = n3.sync, c2 = void 0 !== i2 && i2;
            if (r3 !== e3.getMyUserID())
              if (Zl(s2)) {
                var u2 = e3._conversationMap.get("".concat(gr.CONV_GROUP).concat(o2));
                u2 && (u2.updateGroupAtInfoList(n3), t2 = true);
              } else {
                var l2 = e3._conversationMap.get("".concat(gr.CONV_GROUP).concat(s2));
                if (l2) {
                  l2.updateGroupAtInfoList(n3);
                  var d2 = e3.getModule(ig), p3 = l2.groupAtInfoList;
                  d2.onConversationProxy({ topicID: s2, groupAtInfoList: p3 });
                }
                if (xd(l2) && c2)
                  e3.updateTopicConversation([{ conversationID: "".concat(gr.CONV_GROUP).concat(s2), type: gr.CONV_TOPIC }]), e3._conversationMap.get("".concat(gr.CONV_GROUP).concat(s2)).updateGroupAtInfoList(n3);
              }
          }), t2 && this.emitConversationUpdate(true, false), this._tmpGroupAtTipsList.length = 0;
        }
      } }, { key: "_getC2CPeerReadTime", value: function(e3) {
        var t2 = this, n3 = [];
        if (e3.forEach(function(e4) {
          t2._conversationMap.has(e4.conversationID) || e4.type !== gr.CONV_C2C || n3.push(e4.conversationID.replace(gr.CONV_C2C, ""));
        }), n3.length > 0) {
          bl.debug("".concat(this._className, "._getC2CPeerReadTime userIDList:").concat(n3));
          var o2 = this.getModule(og);
          o2 && o2.getRemotePeerReadTime(n3);
        }
      } }, { key: "_getStorageConversationList", value: function() {
        return this.getModule(lg).getItem("conversationMap");
      } }, { key: "_setStorageConversationList", value: function() {
        var e3 = this.getLocalConversationList().slice(0, 20).map(function(e4) {
          return { conversationID: e4.conversationID, type: e4.type, subType: e4.subType, lastMessage: e4.lastMessage, groupProfile: e4.groupProfile, userProfile: e4.userProfile };
        });
        this.getModule(lg).setItem("conversationMap", e3);
      } }, { key: "emitConversationUpdate", value: function() {
        var e3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n3 = this.getLocalConversationList();
        if (t2) {
          var o2 = this.getModule(rg);
          o2 && o2.updateGroupLastMessage(n3);
        }
        e3 && this.emitOuterEvent(pr.CONVERSATION_LIST_UPDATED);
      } }, { key: "getLocalConversationList", value: function() {
        return M(this._conversationMap.values()).filter(function(e3) {
          return e3.type !== gr.CONV_TOPIC;
        });
      } }, { key: "getLocalConversation", value: function(e3) {
        return this._conversationMap.get(e3);
      } }, { key: "getLocalOldestMessage", value: function(e3) {
        return this._messageListHandler.getLocalOldestMessage(e3);
      } }, { key: "syncConversationList", value: function() {
        var e3 = this, t2 = new Ih(Eh.SYNC_CONVERSATION_LIST);
        return this._pagingStatus === wp.NOT_START && this._conversationMap.clear(), this._pagingGetConversationList().then(function(n3) {
          return e3._pagingStatus = wp.RESOLVED, e3._setStorageConversationList(), e3._handleC2CPeerReadTime(), e3._patchConversationProperties(), t2.setMessage(e3._conversationMap.size).setNetworkType(e3.getNetworkType()).end(), n3;
        }).catch(function(n3) {
          return e3._pagingStatus = wp.REJECTED, t2.setMessage(e3._pagingTimeStamp), e3.probeNetwork().then(function(e4) {
            var o2 = m(e4, 2), r3 = o2[0], a2 = o2[1];
            t2.setError(n3, r3, a2).end();
          }), bM(n3);
        });
      } }, { key: "_patchConversationProperties", value: function() {
        var e3 = this, t2 = Date.now(), n3 = this.checkAndPatchRemark(), o2 = this._messageRemindHandler.getC2CMessageRemindType(), r3 = this.getModule(rg).getGroupList();
        Promise.all([n3, o2, r3]).then(function() {
          var n4 = Date.now() - t2;
          bl.log("".concat(e3._className, "._patchConversationProperties ok. cost ").concat(n4, " ms")), e3.emitConversationUpdate(true, false);
        });
      } }, { key: "_pagingGetConversationList", value: function() {
        var e3 = this, t2 = "".concat(this._className, "._pagingGetConversationList");
        return bl.log("".concat(t2, " timeStamp:").concat(this._pagingTimeStamp, " startIndex:").concat(this._pagingStartIndex) + " pinnedTimeStamp:".concat(this._pagingPinnedTimeStamp, " pinnedStartIndex:").concat(this._pagingPinnedStartIndex)), this._pagingStatus = wp.PENDING, this.request({ protocolName: Yg, requestData: { fromAccount: this.getMyUserID(), timeStamp: this._pagingTimeStamp, startIndex: this._pagingStartIndex, pinnedTimeStamp: this._pagingPinnedTimeStamp, pinnedStartIndex: this._pagingStartIndex, orderType: 1 } }).then(function(n3) {
          var o2 = n3.data, r3 = o2.completeFlag, a2 = o2.conversations, s2 = void 0 === a2 ? [] : a2, i2 = o2.timeStamp, c2 = o2.startIndex, u2 = o2.pinnedTimeStamp, l2 = o2.pinnedStartIndex;
          if (bl.log("".concat(t2, " ok. completeFlag:").concat(r3, " count:").concat(s2.length, " isReady:").concat(e3._isReady)), s2.length > 0) {
            var d2 = e3._getConversationOptions(s2);
            e3._updateLocalConversationList({ conversationOptionsList: d2, isFromGetConversations: true }), e3.isLoggedIn() && e3.emitConversationUpdate();
          }
          if (!e3._isReady) {
            if (!e3.isLoggedIn())
              return UM();
            e3.triggerReady();
          }
          return e3._pagingTimeStamp = i2, e3._pagingStartIndex = c2, e3._pagingPinnedTimeStamp = u2, e3._pagingPinnedStartIndex = l2, 1 !== r3 ? e3._pagingGetConversationList() : (e3._handleGroupAtTipsList(), UM());
        }).catch(function(n3) {
          throw e3.isLoggedIn() && (e3._isReady || (bl.warn("".concat(t2, " failed. error:"), n3), e3.triggerReady())), n3;
        });
      } }, { key: "_updateLocalConversationList", value: function(e3) {
        var t2, n3 = e3.isFromGetConversations, o2 = Date.now();
        t2 = this._getTmpConversationListMapping(e3), this._conversationMap = new Map(this._sortConversationList([].concat(M(t2.toBeUpdatedConversationList), M(this._conversationMap)))), n3 || this._updateUserOrGroupProfile(t2.newConversationList), bl.debug("".concat(this._className, "._updateLocalConversationList cost ").concat(Date.now() - o2, " ms"));
      } }, { key: "_getTmpConversationListMapping", value: function(e3) {
        for (var t2 = e3.conversationOptionsList, n3 = e3.isFromGetConversations, o2 = e3.isInstantMessage, r3 = e3.isUnreadC2CMessage, a2 = void 0 !== r3 && r3, s2 = [], i2 = [], c2 = this.getModule(rg), u2 = this.getModule(ag), l2 = 0, d2 = t2.length; l2 < d2; l2++) {
          var p3 = new hv(t2[l2]), g2 = p3.conversationID;
          if (g2 !== "".concat(gr.CONV_C2C, "@TLS#ERROR") && g2 !== "".concat(gr.CONV_C2C, "@TLS#NOT_FOUND"))
            if (this._conversationMap.has(g2)) {
              var _2 = this._conversationMap.get(g2), h3 = ["unreadCount", "allowType", "adminForbidType", "payload", "isPinned"];
              false === o2 && h3.push("lastMessage");
              var f2 = t2[l2].lastMessage, m2 = !Zl(f2);
              m2 || t2[l2].type === gr.CONV_TOPIC || this._onLastMessageNotExist(t2[l2]), Zl(o2) && m2 && null === _2.lastMessage.payload && (_2.lastMessage.payload = f2.payload), id(_2, p3, h3, [null, void 0, "", 0, NaN]), _2.updateUnreadCount({ nextUnreadCount: p3.unreadCount, isFromGetConversations: n3, isUnreadC2CMessage: a2 }), o2 && m2 && (f2.payload && (_2.lastMessage.payload = f2.payload), _2.type === gr.CONV_GROUP && (_2.lastMessage.nameCard = f2.nameCard, _2.lastMessage.nick = f2.nick)), m2 && _2.lastMessage.cloudCustomData !== f2.cloudCustomData && (_2.lastMessage.cloudCustomData = f2.cloudCustomData || ""), this._conversationMap.delete(g2), s2.push([g2, _2]);
            } else {
              if (p3.type === gr.CONV_GROUP && c2) {
                var M2 = p3.groupProfile.groupID, v2 = c2.getLocalGroupProfile(M2);
                v2 && (p3.groupProfile = v2, p3.updateUnreadCount({ nextUnreadCount: 0 }));
              } else if (p3.type === gr.CONV_C2C) {
                var y2 = g2.replace(gr.CONV_C2C, "");
                u2 && u2.isMyFriend(y2) && (p3.remark = u2.getFriendRemark(y2));
              }
              i2.push(p3), s2.push([g2, p3]);
            }
        }
        var I2 = this.getModule(ig);
        return s2.forEach(function(e4) {
          if (e4[1].type === gr.CONV_TOPIC) {
            var t3 = e4[1], n4 = t3.conversationID, o3 = t3.unreadCount, r4 = t3.groupAtInfoList;
            I2.onConversationProxy({ topicID: n4.replace(gr.CONV_GROUP, ""), unreadCount: o3, groupAtInfoList: xd(r4) ? void 0 : r4 });
          }
        }), { toBeUpdatedConversationList: s2, newConversationList: i2 };
      } }, { key: "_onLastMessageNotExist", value: function(e3) {
        new Ih(Eh.LAST_MESSAGE_NOT_EXIST).setMessage("".concat(JSON.stringify(e3))).setNetworkType(this.getNetworkType()).end();
      } }, { key: "_sortConversationList", value: function(e3) {
        var t2 = [], n3 = [];
        return e3.forEach(function(e4) {
          true === e4[1].isPinned ? t2.push(e4) : n3.push(e4);
        }), t2.sort(function(e4, t3) {
          return t3[1].lastMessage.lastTime - e4[1].lastMessage.lastTime;
        }).concat(n3.sort(function(e4, t3) {
          return t3[1].lastMessage.lastTime - e4[1].lastMessage.lastTime;
        }));
      } }, { key: "_sortConversationListAndEmitEvent", value: function() {
        this._conversationMap = new Map(this._sortConversationList(M(this._conversationMap))), this.emitConversationUpdate(true, false);
      } }, { key: "_updateUserOrGroupProfile", value: function(e3) {
        var t2 = this;
        if (0 !== e3.length) {
          var n3 = [], o2 = [], r3 = this.getModule(ng), a2 = this.getModule(rg);
          e3.forEach(function(e4) {
            if (e4.type === gr.CONV_C2C)
              n3.push(e4.toAccount);
            else if (e4.type === gr.CONV_GROUP) {
              var t3 = e4.toAccount;
              a2.hasLocalGroup(t3) ? e4.groupProfile = a2.getLocalGroupProfile(t3) : o2.push(t3);
            }
          }), bl.log("".concat(this._className, "._updateUserOrGroupProfile c2cUserIDList:").concat(n3, " groupIDList:").concat(o2)), n3.length > 0 && r3.getUserProfile({ userIDList: n3 }).then(function(e4) {
            var n4 = e4.data;
            Ql(n4) ? n4.forEach(function(e5) {
              t2._conversationMap.get("C2C".concat(e5.userID)).userProfile = e5;
            }) : t2._conversationMap.get("C2C".concat(n4.userID)).userProfile = n4;
          }), o2.length > 0 && a2.getGroupProfileAdvance({ groupIDList: o2, responseFilter: { groupBaseInfoFilter: ["Type", "Name", "FaceUrl"] } }).then(function(e4) {
            e4.data.successGroupList.forEach(function(e5) {
              var n4 = "GROUP".concat(e5.groupID);
              if (t2._conversationMap.has(n4)) {
                var o3 = t2._conversationMap.get(n4);
                id(o3.groupProfile, e5, [], [null, void 0, "", 0, NaN]), !o3.subType && e5.type && (o3.subType = e5.type);
              }
            });
          });
        }
      } }, { key: "_getConversationOptions", value: function(e3) {
        var n3 = this, o2 = [], r3 = e3.filter(function(e4) {
          var t2 = e4.lastMsg;
          return Xl(t2);
        }).filter(function(e4) {
          var t2 = e4.type, n4 = e4.userID;
          return 1 === t2 && "@TLS#NOT_FOUND" !== n4 && "@TLS#ERROR" !== n4 || 2 === t2;
        }), a2 = this.getMyUserID(), s2 = r3.map(function(e4) {
          if (1 === e4.type) {
            var r4 = { userID: e4.userID, nick: e4.peerNick, avatar: e4.peerAvatar };
            return o2.push(r4), { conversationID: "C2C".concat(e4.userID), type: "C2C", lastMessage: { lastTime: e4.time, lastSequence: e4.sequence, fromAccount: e4.lastC2CMsgFromAccount, messageForShow: e4.messageShow, type: e4.lastMsg.elements[0] ? e4.lastMsg.elements[0].type : null, payload: e4.lastMsg.elements[0] ? e4.lastMsg.elements[0].content : null, cloudCustomData: e4.lastMsg.cloudCustomData || "", isRevoked: 8 === e4.lastMessageFlag, onlineOnlyFlag: false, nick: "", nameCard: "", version: 0, isPeerRead: e4.lastC2CMsgFromAccount === a2 && e4.time <= e4.c2cPeerReadTime }, userProfile: new uv(r4), peerReadTime: e4.c2cPeerReadTime, isPinned: 1 === e4.isPinned, messageRemindType: "" };
          }
          return { conversationID: "GROUP".concat(e4.groupID), type: "GROUP", lastMessage: t(t({ lastTime: e4.time, lastSequence: e4.messageReadSeq + e4.unreadCount, fromAccount: e4.msgGroupFromAccount, messageForShow: e4.messageShow }, n3._patchTypeAndPayload(e4)), {}, { cloudCustomData: e4.lastMsg.cloudCustomData || "", isRevoked: 2 === e4.lastMessageFlag, onlineOnlyFlag: false, nick: e4.senderNick || "", nameCard: e4.senderNameCard || "" }), groupProfile: new gv({ groupID: e4.groupID, name: e4.groupNick, avatar: e4.groupImage }), unreadCount: e4.unreadCount, peerReadTime: 0, isPinned: 1 === e4.isPinned, messageRemindType: "", version: 0 };
        });
        o2.length > 0 && this.getModule(ng).onConversationsProfileUpdated(o2);
        return s2;
      } }, { key: "_patchTypeAndPayload", value: function(e3) {
        var n3 = e3.lastMsg, o2 = n3.event, r3 = void 0 === o2 ? void 0 : o2, a2 = n3.elements, s2 = void 0 === a2 ? [] : a2, i2 = n3.groupTips, c2 = void 0 === i2 ? {} : i2;
        if (!Zl(r3) && !xd(c2)) {
          var u2 = new CM(c2);
          u2.setElement({ type: gr.MSG_GRP_TIP, content: t(t({}, c2.elements), {}, { groupProfile: c2.groupProfile }) });
          var l2 = JSON.parse(JSON.stringify(u2.payload));
          return u2 = null, { type: gr.MSG_GRP_TIP, payload: l2 };
        }
        return { type: s2[0] ? s2[0].type : null, payload: s2[0] ? s2[0].content : null };
      } }, { key: "getLocalMessageList", value: function(e3) {
        return this._messageListHandler.getLocalMessageList(e3);
      } }, { key: "deleteLocalMessage", value: function(e3) {
        e3 instanceof CM && this._messageListHandler.remove(e3);
      } }, { key: "onConversationDeleted", value: function(e3) {
        var t2 = this;
        bl.log("".concat(this._className, ".onConversationDeleted")), Ql(e3) && e3.forEach(function(e4) {
          var n3 = e4.type, o2 = e4.userID, r3 = e4.groupID, a2 = "";
          1 === n3 ? a2 = "".concat(gr.CONV_C2C).concat(o2) : 2 === n3 && (a2 = "".concat(gr.CONV_GROUP).concat(r3)), t2.deleteLocalConversation(a2);
        });
      } }, { key: "onConversationPinned", value: function(e3) {
        var t2 = this;
        if (Ql(e3)) {
          var n3 = false;
          e3.forEach(function(e4) {
            var o2, r3 = e4.type, a2 = e4.userID, s2 = e4.groupID;
            1 === r3 ? o2 = t2.getLocalConversation("".concat(gr.CONV_C2C).concat(a2)) : 2 === r3 && (o2 = t2.getLocalConversation("".concat(gr.CONV_GROUP).concat(s2))), o2 && (bl.log("".concat(t2._className, ".onConversationPinned conversationID:").concat(o2.conversationID, " isPinned:").concat(o2.isPinned)), o2.isPinned || (o2.isPinned = true, n3 = true));
          }), n3 && this._sortConversationListAndEmitEvent();
        }
      } }, { key: "onConversationUnpinned", value: function(e3) {
        var t2 = this;
        if (Ql(e3)) {
          var n3 = false;
          e3.forEach(function(e4) {
            var o2, r3 = e4.type, a2 = e4.userID, s2 = e4.groupID;
            1 === r3 ? o2 = t2.getLocalConversation("".concat(gr.CONV_C2C).concat(a2)) : 2 === r3 && (o2 = t2.getLocalConversation("".concat(gr.CONV_GROUP).concat(s2))), o2 && (bl.log("".concat(t2._className, ".onConversationUnpinned conversationID:").concat(o2.conversationID, " isPinned:").concat(o2.isPinned)), o2.isPinned && (o2.isPinned = false, n3 = true));
          }), n3 && this._sortConversationListAndEmitEvent();
        }
      } }, { key: "getMessageList", value: function(e3) {
        var t2 = this, n3 = e3.conversationID, o2 = e3.nextReqMessageID, r3 = e3.count, a2 = "".concat(this._className, ".getMessageList"), s2 = this.getLocalConversation(n3), i2 = "";
        if (s2 && s2.groupProfile && (i2 = s2.groupProfile.type), yd(i2))
          return bl.log("".concat(a2, " not available in avchatroom. conversationID:").concat(n3)), UM({ messageList: [], nextReqMessageID: "", isCompleted: true });
        (Zl(r3) || r3 > 15) && (r3 = 15), !o2 && this._isNotInCommunity(n3) && (this._messageListHandler.removeByConversationID(n3), this._completedMap.delete(n3), this._roamingMessageSequenceMap.delete(n3));
        var c2 = this._computeRemainingCount({ conversationID: n3, nextReqMessageID: o2 }), u2 = this._completedMap.has(n3);
        if (bl.log("".concat(a2, " conversationID:").concat(n3, " nextReqMessageID:").concat(o2) + " remainingCount:".concat(c2, " count:").concat(r3, " isCompleted:").concat(u2)), this._needGetHistory({ conversationID: n3, remainingCount: c2, count: r3 }))
          return this.getHistoryMessages({ conversationID: n3, nextReqMessageID: o2, count: 20 }).then(function(e4) {
            var o3 = e4.nextReqID, r4 = e4.storedMessageList, s3 = t2._completedMap.has(n3), i3 = r4;
            c2 > 0 && (i3 = t2._messageListHandler.getLocalMessageList(n3).slice(0, r4.length + c2));
            var u3 = { nextReqMessageID: s3 ? "" : o3, messageList: i3, isCompleted: s3 };
            return bl.log("".concat(a2, " ret.nextReqMessageID:").concat(u3.nextReqMessageID, " ret.isCompleted:").concat(u3.isCompleted, " ret.length:").concat(i3.length)), AM(u3);
          });
        this.modifyMessageList(n3);
        var l2 = this._getMessageListFromMemory({ conversationID: n3, nextReqMessageID: o2, count: r3 });
        return UM(l2);
      } }, { key: "_getMessageListFromMemory", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.nextReqMessageID, o2 = e3.count, r3 = "".concat(this._className, "._getMessageListFromMemory"), a2 = this._messageListHandler.getLocalMessageList(t2), s2 = a2.length, i2 = 0, c2 = { isCompleted: false, nextReqMessageID: "", messageList: [] };
        return n3 ? (i2 = a2.findIndex(function(e4) {
          return e4.ID === n3;
        })) > o2 ? (c2.messageList = a2.slice(i2 - o2, i2), c2.nextReqMessageID = a2[i2 - o2].ID) : (c2.messageList = a2.slice(0, i2), c2.isCompleted = true) : s2 > o2 ? (i2 = s2 - o2, c2.messageList = a2.slice(i2, s2), c2.nextReqMessageID = a2[i2].ID) : (c2.messageList = a2.slice(0, s2), c2.isCompleted = true), bl.log("".concat(r3, " conversationID:").concat(t2) + " ret.nextReqMessageID:".concat(c2.nextReqMessageID, " ret.isCompleted:").concat(c2.isCompleted, " ret.length:").concat(c2.messageList.length)), c2;
      } }, { key: "getMessageListHopping", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.sequence, o2 = e3.time, r3 = e3.count, a2 = e3.direction, s2 = void 0 === a2 ? 0 : a2;
        if ((Zl(r3) || r3 > 15) && (r3 = 15), t2.startsWith(gr.CONV_C2C)) {
          var i2 = this.getModule(og), c2 = t2.replace(gr.CONV_C2C, "");
          return i2.getRoamingMessagesHopping({ peerAccount: c2, time: o2, count: r3, direction: s2 });
        }
        if (t2.startsWith(gr.CONV_GROUP)) {
          var u2 = this.getModule(rg), l2 = t2.replace(gr.CONV_GROUP, "");
          return u2.getRoamingMessagesHopping({ groupID: l2, sequence: n3, count: r3, direction: s2 });
        }
      } }, { key: "_computeRemainingCount", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.nextReqMessageID, o2 = this._messageListHandler.getLocalMessageList(t2), r3 = o2.length;
        if (!n3)
          return r3;
        var a2 = 0;
        return Td(t2) ? a2 = o2.findIndex(function(e4) {
          return e4.ID === n3;
        }) : Sd(t2) && (a2 = -1 !== n3.indexOf("-") ? o2.findIndex(function(e4) {
          return e4.ID === n3;
        }) : o2.findIndex(function(e4) {
          return e4.sequence === n3;
        })), -1 === a2 && (a2 = 0), a2;
      } }, { key: "_getMessageListSize", value: function(e3) {
        return this._messageListHandler.getLocalMessageList(e3).length;
      } }, { key: "_needGetHistory", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.remainingCount, o2 = e3.count, r3 = this.getLocalConversation(t2), a2 = "";
        return r3 && r3.groupProfile && (a2 = r3.groupProfile.type), !Cd(t2) && !yd(a2) && (!(Sd(t2) && this._isPagingGetGroupListCompleted() && !this._hasLocalGroup(t2) && !this._isTopicConversation(t2)) && (n3 <= o2 && !this._completedMap.has(t2)));
      } }, { key: "_isTopicConversation", value: function(e3) {
        var t2 = e3.replace(gr.CONV_GROUP, "");
        return Ed(t2);
      } }, { key: "getHistoryMessages", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.count;
        if (t2 === gr.CONV_SYSTEM)
          return UM();
        var o2 = 15;
        n3 > 20 && (o2 = 20);
        var r3 = null;
        if (Td(t2)) {
          var a2 = this._roamingMessageKeyAndTimeMap.has(t2);
          return (r3 = this.getModule(og)) ? r3.getRoamingMessage({ conversationID: t2, peerAccount: t2.replace(gr.CONV_C2C, ""), count: o2, lastMessageTime: a2 ? this._roamingMessageKeyAndTimeMap.get(t2).lastMessageTime : 0, messageKey: a2 ? this._roamingMessageKeyAndTimeMap.get(t2).messageKey : "" }) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
        }
        if (Sd(t2)) {
          if (!(r3 = this.getModule(rg)))
            return bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
          var s2 = null;
          this._conversationMap.has(t2) && (s2 = this._conversationMap.get(t2).lastMessage);
          var i2 = 0;
          s2 && (i2 = s2.lastSequence);
          var c2 = this._roamingMessageSequenceMap.get(t2);
          return r3.getRoamingMessage({ conversationID: t2, groupID: t2.replace(gr.CONV_GROUP, ""), count: o2, sequence: c2 || i2 });
        }
        return UM();
      } }, { key: "patchConversationLastMessage", value: function(e3) {
        var t2 = this.getLocalConversation(e3);
        if (t2) {
          var n3 = t2.lastMessage, o2 = n3.messageForShow, r3 = n3.payload;
          if (xd(o2) || xd(r3)) {
            var a2 = this._messageListHandler.getLocalMessageList(e3);
            if (0 === a2.length)
              return;
            var s2 = a2[a2.length - 1];
            bl.log("".concat(this._className, ".patchConversationLastMessage conversationID:").concat(e3, " payload:"), s2.payload), t2.updateLastMessage(s2);
          }
        }
      } }, { key: "onRoamingMessage", value: function() {
        var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], n3 = arguments.length > 1 ? arguments[1] : void 0, o2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r3 = n3.startsWith(gr.CONV_C2C) ? gr.CONV_C2C : gr.CONV_GROUP, a2 = null, s2 = [], i2 = [], c2 = 0, u2 = e3.length, l2 = null, d2 = r3 === gr.CONV_GROUP, p3 = this.getModule(gg), g2 = function() {
          c2 = d2 ? e3.length - 1 : 0, u2 = d2 ? 0 : e3.length;
        }, _2 = function() {
          d2 ? --c2 : ++c2;
        }, h3 = function() {
          return d2 ? c2 >= u2 : c2 < u2;
        };
        for (g2(); h3(); _2())
          if (d2 && 1 === e3[c2].sequence && o2 && this.setCompleted(n3), 1 !== e3[c2].isPlaceMessage)
            if ((a2 = new CM(e3[c2])).to = e3[c2].to, r3 !== gr.CONV_GROUP || Zl(e3[c2].topicID) || (a2.to = e3[c2].topicID), a2.isSystemMessage = !!e3[c2].isSystemMessage, a2.conversationType = r3, 4 === e3[c2].event ? l2 = { type: gr.MSG_GRP_TIP, content: t(t({}, e3[c2].elements), {}, { groupProfile: e3[c2].groupProfile }) } : (e3[c2].elements = p3.parseElements(e3[c2].elements, e3[c2].from), l2 = e3[c2].elements), d2 || a2.setNickAndAvatar({ nick: e3[c2].nick, avatar: e3[c2].avatar }), xd(l2)) {
              var f2 = new Ih(Eh.EMPTY_MESSAGE_BODY);
              f2.setMessage("from:".concat(a2.from, " to:").concat(a2.to, " sequence:").concat(a2.sequence, " event:").concat(e3[c2].event)), f2.setNetworkType(this.getNetworkType()).setLevel("warning").end();
            } else
              a2.setElement(l2), a2.reInitialize(this.getMyUserID()), s2.push(a2);
        return g2 = _2 = h3 = null, o2 ? (this._messageListHandler.unshift(s2, i2), s2 = null, i2) : (i2 = null, s2);
      } }, { key: "findMessage", value: function(e3) {
        return this._messageListHandler.findMessage(e3);
      } }, { key: "_isNotInCommunity", value: function(e3) {
        var t2 = false;
        if (e3.startsWith(gr.CONV_GROUP) && this._isTopicConversation(e3)) {
          var n3 = wd(e3.replace(gr.CONV_GROUP, ""));
          this.getModule(rg).hasLocalGroup(n3) || (t2 = true);
        }
        return t2;
      } }, { key: "deleteTopicRoamingMessageInfo", value: function(e3) {
        var t2 = this;
        Id({ groupID: e3 }) && this._messageListHandler.getTopicConversationIDList(e3).forEach(function(e4) {
          t2._messageListHandler.removeByConversationID(e4), t2._completedMap.delete(e4), t2._roamingMessageSequenceMap.delete(e4);
        });
      } }, { key: "deleteGroupRomaingMessageInfo", value: function(e3) {
        var t2 = "".concat(gr.CONV_GROUP).concat(e3);
        this._messageListHandler.removeByConversationID(t2), this._completedMap.delete(t2), this._roamingMessageSequenceMap.delete(t2);
      } }, { key: "setMessageRead", value: function(e3) {
        var t2 = e3.conversationID, n3 = this.getLocalConversation(t2);
        if (bl.log("".concat(this._className, ".setMessageRead conversationID:").concat(t2, " unreadCount:").concat(n3 ? n3.unreadCount : 0)), !n3)
          return UM();
        if (n3.type !== gr.CONV_GROUP && n3.type !== gr.CONV_TOPIC || xd(n3.groupAtInfoList) || this.deleteGroupAtTips(t2), 0 === n3.unreadCount)
          return UM();
        if (n3.type === gr.CONV_GROUP && !this._hasLocalGroup(t2))
          return 0 !== n3.unreadCount && (n3.unreadCount = 0, this.emitConversationUpdate(true, false)), UM();
        var o2 = this._messageListHandler.getLocalLastMessage(t2), r3 = n3.lastMessage.lastTime;
        o2 && r3 < o2.time && (r3 = o2.time);
        var a2 = n3.lastMessage.lastSequence;
        if (o2 && a2 < o2.sequence && (a2 = o2.sequence), n3.type === gr.CONV_TOPIC && Zl(o2)) {
          var s2 = this.getModule(ig), i2 = t2.replace(gr.CONV_GROUP, ""), c2 = wd(i2), u2 = s2.getLocalTopic(c2, i2);
          u2 && (a2 = u2.nextMessageSeq - 1);
        }
        var l2 = null;
        switch (n3.type) {
          case gr.CONV_C2C:
            return (l2 = this.getModule(og)) ? l2.setMessageRead({ conversationID: t2, lastMessageTime: r3 }) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
          case gr.CONV_GROUP:
          case gr.CONV_TOPIC:
            return (l2 = this.getModule(rg)) ? l2.setMessageRead({ conversationID: t2, lastMessageSeq: a2 }) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
          case gr.CONV_SYSTEM:
            return n3.unreadCount = 0, this.emitConversationUpdate(true, false), UM();
          default:
            return UM();
        }
      } }, { key: "setAllMessageRead", value: function() {
        var e3 = this, t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n3 = "".concat(this._className, ".setAllMessageRead");
        t2.scope || (t2.scope = gr.READ_ALL_MSG), bl.log("".concat(n3, " options:"), t2);
        var o2 = this._createSetAllMessageReadPack(t2);
        if (0 === o2.readAllC2CMessage && 0 === o2.groupMessageReadInfoList.length)
          return UM();
        var r3 = new Ih(Eh.SET_ALL_MESSAGE_READ);
        return this.request({ protocolName: p_, requestData: o2 }).then(function(n4) {
          var o3 = n4.data, a2 = e3._handleAllMessageRead(o3);
          return r3.setMessage("scope:".concat(t2.scope, " failureGroups:").concat(JSON.stringify(a2))).setNetworkType(e3.getNetworkType()).end(), UM();
        }).catch(function(t3) {
          return e3.probeNetwork().then(function(e4) {
            var n4 = m(e4, 2), o3 = n4[0], a2 = n4[1];
            r3.setError(t3, o3, a2).end();
          }), bl.warn("".concat(n3, " failed. error:"), t3), bM({ code: t3 && t3.code ? t3.code : ah.MESSAGE_UNREAD_ALL_FAIL, message: t3 && t3.message ? t3.message : sh.MESSAGE_UNREAD_ALL_FAIL });
        });
      } }, { key: "_getConversationLastMessageSequence", value: function(e3) {
        var t2 = this._messageListHandler.getLocalLastMessage(e3.conversationID), n3 = e3.lastMessage.lastSequence;
        return t2 && n3 < t2.sequence && (n3 = t2.sequence), n3;
      } }, { key: "_getConversationLastMessageTime", value: function(e3) {
        var t2 = this._messageListHandler.getLocalLastMessage(e3.conversationID), n3 = e3.lastMessage.lastTime;
        return t2 && n3 < t2.time && (n3 = t2.time), n3;
      } }, { key: "_createSetAllMessageReadPack", value: function(e3) {
        var t2, n3 = { readAllC2CMessage: 0, groupMessageReadInfoList: [] }, o2 = e3.scope, r3 = S(this._conversationMap);
        try {
          for (r3.s(); !(t2 = r3.n()).done; ) {
            var a2 = m(t2.value, 2)[1];
            if (a2.unreadCount > 0) {
              if (a2.type === gr.CONV_C2C && 0 === n3.readAllC2CMessage) {
                if (o2 === gr.READ_ALL_MSG)
                  n3.readAllC2CMessage = 1;
                else if (o2 === gr.READ_ALL_C2C_MSG) {
                  n3.readAllC2CMessage = 1;
                  break;
                }
              } else if (a2.type === gr.CONV_GROUP && (o2 === gr.READ_ALL_GROUP_MSG || o2 === gr.READ_ALL_MSG)) {
                var s2 = this._getConversationLastMessageSequence(a2);
                n3.groupMessageReadInfoList.push({ groupID: a2.groupProfile.groupID, messageSequence: s2 });
              }
            }
          }
        } catch (i2) {
          r3.e(i2);
        } finally {
          r3.f();
        }
        return n3;
      } }, { key: "onPushedAllMessageRead", value: function(e3) {
        this._handleAllMessageRead(e3);
      } }, { key: "_handleAllMessageRead", value: function(e3) {
        var t2 = e3.groupMessageReadInfoList, n3 = e3.readAllC2CMessage, o2 = this._parseGroupReadInfo(t2);
        return this._updateAllConversationUnreadCount({ readAllC2CMessage: n3 }) >= 1 && this.emitConversationUpdate(true, false), o2;
      } }, { key: "_parseGroupReadInfo", value: function(e3) {
        var t2 = [];
        if (e3 && e3.length)
          for (var n3 = 0, o2 = e3.length; n3 < o2; n3++) {
            var r3 = e3[n3], a2 = r3.groupID, s2 = r3.sequence, i2 = r3.retCode, c2 = r3.lastMessageSeq;
            Zl(i2) ? this._remoteGroupReadSequenceMap.set(a2, c2) : (this._remoteGroupReadSequenceMap.set(a2, s2), 0 !== i2 && t2.push("".concat(a2, "-").concat(s2, "-").concat(i2)));
          }
        return t2;
      } }, { key: "_updateAllConversationUnreadCount", value: function(e3) {
        var t2, n3 = e3.readAllC2CMessage, o2 = 0, r3 = S(this._conversationMap);
        try {
          for (r3.s(); !(t2 = r3.n()).done; ) {
            var a2 = m(t2.value, 2), s2 = a2[0], i2 = a2[1];
            if (i2.unreadCount >= 1) {
              if (1 === n3 && i2.type === gr.CONV_C2C) {
                var c2 = this._getConversationLastMessageTime(i2);
                this.updateIsReadAfterReadReport({ conversationID: s2, lastMessageTime: c2 });
              } else if (i2.type === gr.CONV_GROUP) {
                var u2 = s2.replace(gr.CONV_GROUP, "");
                if (this._remoteGroupReadSequenceMap.has(u2)) {
                  var l2 = this._remoteGroupReadSequenceMap.get(u2), d2 = this._getConversationLastMessageSequence(i2);
                  this.updateIsReadAfterReadReport({ conversationID: s2, remoteReadSequence: l2 }), d2 >= l2 && this._remoteGroupReadSequenceMap.delete(u2);
                }
              }
              this.updateUnreadCount(s2, false) && (o2 += 1);
            }
          }
        } catch (p3) {
          r3.e(p3);
        } finally {
          r3.f();
        }
        return o2;
      } }, { key: "isRemoteRead", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.sequence, o2 = t2.replace(gr.CONV_GROUP, ""), r3 = false;
        if (this._remoteGroupReadSequenceMap.has(o2)) {
          var a2 = this._remoteGroupReadSequenceMap.get(o2);
          n3 <= a2 && (r3 = true, bl.log("".concat(this._className, ".isRemoteRead conversationID:").concat(t2, " messageSequence:").concat(n3, " remoteReadSequence:").concat(a2))), n3 >= a2 + 10 && this._remoteGroupReadSequenceMap.delete(o2);
        }
        return r3;
      } }, { key: "updateIsReadAfterReadReport", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.lastMessageSeq, o2 = e3.lastMessageTime, r3 = this._messageListHandler.getLocalMessageList(t2);
        if (0 !== r3.length) {
          for (var a2, s2 = r3.length - 1; s2 >= 0; s2--)
            if (a2 = r3[s2], !(o2 && a2.time > o2 || n3 && a2.sequence > n3)) {
              if ("in" === a2.flow && a2.isRead)
                break;
              a2.setIsRead(true);
            }
        }
      } }, { key: "updateUnreadCount", value: function(e3) {
        var t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n3 = false, o2 = this.getLocalConversation(e3), r3 = this._messageListHandler.getLocalMessageList(e3);
        if (o2) {
          var a2 = o2.unreadCount, s2 = r3.filter(function(e4) {
            return !e4.isRead && !e4._onlineOnlyFlag && !e4.isDeleted;
          }).length;
          if (a2 !== s2 && (o2.unreadCount = s2, n3 = true, bl.log("".concat(this._className, ".updateUnreadCount from ").concat(a2, " to ").concat(s2, ", conversationID:").concat(e3)), true === t2 && this.emitConversationUpdate(true, false)), n3 && o2.type === gr.CONV_TOPIC) {
            var i2 = o2.unreadCount, c2 = this.getModule(ig), u2 = e3.replace(gr.CONV_GROUP, "");
            c2.onConversationProxy({ topicID: u2, unreadCount: i2 });
          }
          return n3;
        }
      } }, { key: "clearGroupAtInfoList", value: function(e3) {
        var t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n3 = this.getLocalConversation(e3);
        if (n3 && n3.groupAtInfoList.length > 0) {
          if (n3.clearGroupAtInfoList(), bl.log("".concat(this._className, ".clearGroupAtInfoList conversationID:").concat(e3)), n3.type === gr.CONV_TOPIC) {
            var o2 = n3.groupAtInfoList, r3 = this.getModule(ig), a2 = e3.replace(gr.CONV_GROUP, "");
            r3.onConversationProxy({ topicID: a2, groupAtInfoList: o2 });
          }
          true === t2 && this.emitConversationUpdate(true, false);
        }
      } }, { key: "updateReadReceiptInfo", value: function(e3) {
        var t2 = this, n3 = e3.userID, o2 = void 0 === n3 ? void 0 : n3, r3 = e3.groupID, a2 = void 0 === r3 ? void 0 : r3, s2 = e3.readReceiptList;
        if (!xd(s2)) {
          var i2 = [];
          if (Zl(o2)) {
            if (!Zl(a2)) {
              var c2 = "".concat(gr.CONV_GROUP).concat(a2);
              s2.forEach(function(e4) {
                var n4 = e4.tinyID, o3 = e4.clientTime, r4 = e4.random, s3 = e4.readCount, u3 = e4.unreadCount, l2 = "".concat(n4, "-").concat(o3, "-").concat(r4), d2 = t2._messageListHandler.getLocalMessage(c2, l2), p3 = { groupID: a2, messageID: l2, readCount: 0, unreadCount: 0 };
                d2 && ($l(s3) && (d2.readReceiptInfo.readCount = s3, p3.readCount = s3), $l(u3) && (d2.readReceiptInfo.unreadCount = u3, p3.unreadCount = u3), i2.push(p3));
              });
            }
          } else {
            var u2 = "".concat(gr.CONV_C2C).concat(o2);
            s2.forEach(function(e4) {
              var n4 = e4.tinyID, r4 = e4.clientTime, a3 = e4.random, s3 = "".concat(n4, "-").concat(r4, "-").concat(a3), c3 = t2._messageListHandler.getLocalMessage(u2, s3);
              if (c3 && !c3.isPeerRead) {
                c3.isPeerRead = true;
                var l2 = { userID: o2, messageID: s3, isPeerRead: true };
                i2.push(l2);
              }
            });
          }
          i2.length > 0 && this.emitOuterEvent(pr.MESSAGE_READ_RECEIPT_RECEIVED, i2);
        }
      } }, { key: "recomputeGroupUnreadCount", value: function(e3) {
        var t2 = e3.conversationID, n3 = e3.count, o2 = this.getLocalConversation(t2);
        if (o2) {
          var r3 = o2.unreadCount, a2 = r3 - n3;
          a2 < 0 && (a2 = 0), o2.unreadCount = a2, bl.log("".concat(this._className, ".recomputeGroupUnreadCount from ").concat(r3, " to ").concat(a2, ", conversationID:").concat(t2));
        }
      } }, { key: "updateIsRead", value: function(e3) {
        var t2 = this.getLocalConversation(e3), n3 = this.getLocalMessageList(e3);
        if (t2 && 0 !== n3.length && !Cd(t2.type)) {
          for (var o2 = [], r3 = 0, a2 = n3.length; r3 < a2; r3++)
            "in" !== n3[r3].flow ? "out" !== n3[r3].flow || n3[r3].isRead || n3[r3].setIsRead(true) : o2.push(n3[r3]);
          var s2 = 0;
          if (t2.type === gr.CONV_C2C) {
            var i2 = o2.slice(-t2.unreadCount).filter(function(e4) {
              return e4.isRevoked;
            }).length;
            s2 = o2.length - t2.unreadCount - i2;
          } else
            s2 = o2.length - t2.unreadCount;
          for (var c2 = 0; c2 < s2 && !o2[c2].isRead; c2++)
            o2[c2].setIsRead(true);
        }
      } }, { key: "deleteGroupAtTips", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".deleteGroupAtTips");
        bl.log("".concat(n3));
        var o2 = this._conversationMap.get(e3);
        if (!o2)
          return Promise.resolve();
        var r3 = o2.groupAtInfoList;
        if (0 === r3.length)
          return Promise.resolve();
        var a2 = void 0;
        e3.startsWith(gr.CONV_GROUP) && (a2 = e3.replace(gr.CONV_GROUP, ""));
        var s2 = M(r3);
        if ((Id({ groupID: a2 }) || Ed(a2)) && 0 === (s2 = r3.filter(function(e4) {
          return !e4.atTypeArray.includes(gr.CONV_AT_ALL);
        })).length)
          return this.clearGroupAtInfoList(e3, false), Promise.resolve();
        var i2 = this.getMyUserID();
        return this.request({ protocolName: Xg, requestData: { messageListToDelete: s2.map(function(e4) {
          return { from: e4.from, to: i2, messageSeq: e4.__sequence, messageRandom: e4.__random, groupID: Zl(e4.topicID) ? e4.groupID : e4.topicID };
        }) } }).then(function() {
          return bl.log("".concat(n3, " ok. count:").concat(r3.length)), t2.clearGroupAtInfoList(e3, false), Promise.resolve();
        }).catch(function(e4) {
          return bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "appendToMessageList", value: function(e3) {
        this._messageListHandler.pushIn(e3);
      } }, { key: "setMessageRandom", value: function(e3) {
        this.singlyLinkedList.set(e3.random);
      } }, { key: "deleteMessageRandom", value: function(e3) {
        this.singlyLinkedList.delete(e3.random);
      } }, { key: "pushIntoMessageList", value: function(e3, t2, n3) {
        return !(!this._messageListHandler.pushIn(t2, n3) || this._isMessageFromCurrentInstance(t2) && !n3) && (e3.push(t2), true);
      } }, { key: "_isMessageFromCurrentInstance", value: function(e3) {
        return this.singlyLinkedList.has(e3.random);
      } }, { key: "revoke", value: function(e3, t2, n3) {
        return this._messageListHandler.revoke(e3, t2, n3);
      } }, { key: "getPeerReadTime", value: function(e3) {
        return this._peerReadTimeMap.get(e3);
      } }, { key: "recordPeerReadTime", value: function(e3, t2) {
        this._peerReadTimeMap.has(e3) ? this._peerReadTimeMap.get(e3) < t2 && this._peerReadTimeMap.set(e3, t2) : this._peerReadTimeMap.set(e3, t2);
      } }, { key: "updateMessageIsPeerReadProperty", value: function(e3, t2) {
        if (e3.startsWith(gr.CONV_C2C) && t2 > 0) {
          var n3 = this._messageListHandler.updateMessageIsPeerReadProperty(e3, t2);
          if (n3.length > 0 && this.emitOuterEvent(pr.MESSAGE_READ_BY_PEER, n3), this._conversationMap.has(e3)) {
            var o2 = this._conversationMap.get(e3).lastMessage;
            xd(o2) || o2.fromAccount === this.getMyUserID() && o2.lastTime <= t2 && !o2.isPeerRead && (o2.isPeerRead = true, this.emitConversationUpdate(true, false));
          }
        }
      } }, { key: "updateMessageIsModifiedProperty", value: function(e3) {
        this._messageListHandler.updateMessageIsModifiedProperty(e3);
      } }, { key: "setCompleted", value: function(e3) {
        bl.log("".concat(this._className, ".setCompleted. conversationID:").concat(e3)), this._completedMap.set(e3, true);
      } }, { key: "updateRoamingMessageKeyAndTime", value: function(e3, t2, n3) {
        this._roamingMessageKeyAndTimeMap.set(e3, { messageKey: t2, lastMessageTime: n3 });
      } }, { key: "updateRoamingMessageSequence", value: function(e3, t2) {
        this._roamingMessageSequenceMap.set(e3, t2);
      } }, { key: "getConversationList", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getConversationList"), o2 = "pagingStatus:".concat(this._pagingStatus, ", local conversation count:").concat(this._conversationMap.size, ", options:").concat(e3);
        if (bl.log("".concat(n3, ". ").concat(o2)), this._pagingStatus === wp.REJECTED) {
          var r3 = new Ih(Eh.GET_CONVERSATION_LIST);
          return r3.setMessage(o2), this.syncConversationList().then(function() {
            r3.setNetworkType(t2.getNetworkType()).end();
            var n4 = t2._getConversationList(e3);
            return AM({ conversationList: n4 });
          }).catch(function(e4) {
            return t2.probeNetwork().then(function(t3) {
              var n4 = m(t3, 2), o3 = n4[0], a3 = n4[1];
              r3.setError(e4, o3, a3).end();
            }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
          });
        }
        if (0 === this._conversationMap.size) {
          var a2 = new Ih(Eh.GET_CONVERSATION_LIST);
          return a2.setMessage(o2), this.syncConversationList().then(function() {
            a2.setNetworkType(t2.getNetworkType()).end();
            var n4 = t2._getConversationList(e3);
            return AM({ conversationList: n4 });
          }).catch(function(e4) {
            return t2.probeNetwork().then(function(t3) {
              var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
              a2.setError(e4, o3, r4).end();
            }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
          });
        }
        var s2 = this._getConversationList(e3);
        return bl.log("".concat(n3, ". returned conversation count:").concat(s2.length)), UM({ conversationList: s2 });
      } }, { key: "_getConversationList", value: function(e3) {
        var t2 = this;
        if (Zl(e3))
          return this.getLocalConversationList();
        if (Ql(e3)) {
          var n3 = [];
          return e3.forEach(function(e4) {
            if (t2._conversationMap.has(e4)) {
              var o2 = t2.getLocalConversation(e4);
              n3.push(o2);
            }
          }), n3;
        }
      } }, { key: "_handleC2CPeerReadTime", value: function() {
        var e3, t2 = S(this._conversationMap);
        try {
          for (t2.s(); !(e3 = t2.n()).done; ) {
            var n3 = m(e3.value, 2), o2 = n3[0], r3 = n3[1];
            r3.type === gr.CONV_C2C && (bl.debug("".concat(this._className, "._handleC2CPeerReadTime conversationID:").concat(o2, " peerReadTime:").concat(r3.peerReadTime)), this.recordPeerReadTime(o2, r3.peerReadTime));
          }
        } catch (a2) {
          t2.e(a2);
        } finally {
          t2.f();
        }
      } }, { key: "_isPagingGetGroupListCompleted", value: function() {
        return this.getModule(rg).isPagingGetCompleted();
      } }, { key: "_hasLocalGroup", value: function(e3) {
        return this.getModule(rg).hasLocalGroup(e3.replace(gr.CONV_GROUP, ""));
      } }, { key: "getConversationProfile", value: function(e3) {
        var t2, n3 = this;
        if ((t2 = this._conversationMap.has(e3) ? this._conversationMap.get(e3) : new hv({ conversationID: e3, type: e3.slice(0, 3) === gr.CONV_C2C ? gr.CONV_C2C : gr.CONV_GROUP }))._isInfoCompleted || t2.type === gr.CONV_SYSTEM)
          return UM({ conversation: t2 });
        if (Sd(e3) && !this._hasLocalGroup(e3))
          return UM({ conversation: t2 });
        var o2 = new Ih(Eh.GET_CONVERSATION_PROFILE), r3 = "".concat(this._className, ".getConversationProfile");
        return bl.log("".concat(r3, ". conversationID:").concat(e3, " remark:").concat(t2.remark, " lastMessage:"), t2.lastMessage), this._updateUserOrGroupProfileCompletely(t2).then(function(a2) {
          o2.setNetworkType(n3.getNetworkType()).setMessage("conversationID:".concat(e3, " unreadCount:").concat(a2.data.conversation.unreadCount)).end();
          var s2 = n3.getModule(ag);
          if (s2 && t2.type === gr.CONV_C2C) {
            var i2 = e3.replace(gr.CONV_C2C, "");
            if (s2.isMyFriend(i2)) {
              var c2 = s2.getFriendRemark(i2);
              t2.remark !== c2 && (t2.remark = c2, bl.log("".concat(r3, ". conversationID:").concat(e3, " patch remark:").concat(t2.remark)));
            }
          }
          return bl.log("".concat(r3, " ok. conversationID:").concat(e3)), a2;
        }).catch(function(t3) {
          return n3.probeNetwork().then(function(n4) {
            var r4 = m(n4, 2), a2 = r4[0], s2 = r4[1];
            o2.setError(t3, a2, s2).setMessage("conversationID:".concat(e3)).end();
          }), bl.error("".concat(r3, " failed. error:"), t3), bM(t3);
        });
      } }, { key: "_updateUserOrGroupProfileCompletely", value: function(e3) {
        var t2 = this;
        return e3.type === gr.CONV_C2C ? this.getModule(ng).getUserProfile({ userIDList: [e3.toAccount] }).then(function(n3) {
          var o2 = n3.data;
          return 0 === o2.length ? bM(new kM({ code: ah.USER_OR_GROUP_NOT_FOUND, message: sh.USER_OR_GROUP_NOT_FOUND })) : (e3.userProfile = o2[0], e3._isInfoCompleted = true, t2._unshiftConversation(e3), UM({ conversation: e3 }));
        }) : this.getModule(rg).getGroupProfile({ groupID: e3.toAccount }).then(function(n3) {
          return e3.groupProfile = n3.data.group, e3._isInfoCompleted = true, t2._unshiftConversation(e3), UM({ conversation: e3 });
        });
      } }, { key: "_unshiftConversation", value: function(e3) {
        e3 instanceof hv && !this._conversationMap.has(e3.conversationID) && (this._conversationMap = new Map([[e3.conversationID, e3]].concat(M(this._conversationMap))), this._setStorageConversationList(), this.emitConversationUpdate(true, false));
      } }, { key: "_onProfileUpdated", value: function(e3) {
        var t2 = this;
        e3.data.forEach(function(e4) {
          var n3 = e4.userID;
          if (n3 === t2.getMyUserID())
            t2._onMyProfileModified({ latestNick: e4.nick, latestAvatar: e4.avatar });
          else {
            var o2 = t2._conversationMap.get("".concat(gr.CONV_C2C).concat(n3));
            o2 && (o2.userProfile = e4);
          }
        });
      } }, { key: "deleteConversation", value: function(e3) {
        var t2 = this, n3 = { fromAccount: this.getMyUserID(), toAccount: void 0, type: void 0, toGroupID: void 0 };
        if (!this._conversationMap.has(e3)) {
          var o2 = new kM({ code: ah.CONVERSATION_NOT_FOUND, message: sh.CONVERSATION_NOT_FOUND });
          return bM(o2);
        }
        var r3 = this._conversationMap.get(e3).type;
        if (r3 === gr.CONV_C2C)
          n3.type = 1, n3.toAccount = e3.replace(gr.CONV_C2C, "");
        else {
          if (r3 !== gr.CONV_GROUP) {
            if (r3 === gr.CONV_SYSTEM)
              return this.getModule(rg).deleteGroupSystemNotice({ messageList: this._messageListHandler.getLocalMessageList(e3) }), this.deleteLocalConversation(e3), UM({ conversationID: e3 });
            var a2 = new kM({ code: ah.CONVERSATION_UN_RECORDED_TYPE, message: sh.CONVERSATION_UN_RECORDED_TYPE });
            return bM(a2);
          }
          if (!this._hasLocalGroup(e3))
            return this.deleteLocalConversation(e3), UM({ conversationID: e3 });
          n3.type = 2, n3.toGroupID = e3.replace(gr.CONV_GROUP, "");
        }
        var s2 = new Ih(Eh.DELETE_CONVERSATION);
        s2.setMessage("conversationID:".concat(e3));
        var i2 = "".concat(this._className, ".deleteConversation");
        return bl.log("".concat(i2, ". conversationID:").concat(e3)), this.setMessageRead({ conversationID: e3 }).then(function() {
          return t2.request({ protocolName: zg, requestData: n3 });
        }).then(function() {
          return s2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(i2, " ok")), t2.deleteLocalConversation(e3), UM({ conversationID: e3 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            s2.setError(e4, o3, r4).end();
          }), bl.error("".concat(i2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "pinConversation", value: function(e3) {
        var t2 = this, n3 = e3.conversationID, o2 = e3.isPinned;
        if (!this._conversationMap.has(n3))
          return bM({ code: ah.CONVERSATION_NOT_FOUND, message: sh.CONVERSATION_NOT_FOUND });
        var r3 = this.getLocalConversation(n3);
        if (r3.isPinned === o2)
          return UM({ conversationID: n3 });
        var a2 = new Ih(Eh.PIN_CONVERSATION);
        a2.setMessage("conversationID:".concat(n3, " isPinned:").concat(o2));
        var s2 = "".concat(this._className, ".pinConversation");
        bl.log("".concat(s2, ". conversationID:").concat(n3, " isPinned:").concat(o2));
        var i2 = null;
        return Td(n3) ? i2 = { type: 1, toAccount: n3.replace(gr.CONV_C2C, "") } : Sd(n3) && (i2 = { type: 2, groupID: n3.replace(gr.CONV_GROUP, "") }), this.request({ protocolName: Jg, requestData: { fromAccount: this.getMyUserID(), operationType: true === o2 ? 1 : 2, itemList: [i2] } }).then(function() {
          return a2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(s2, " ok")), r3.isPinned !== o2 && (r3.isPinned = o2, t2._sortConversationListAndEmitEvent()), AM({ conversationID: n3 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            a2.setError(e4, o3, r4).end();
          }), bl.error("".concat(s2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "setMessageRemindType", value: function(e3) {
        return this._messageRemindHandler.set(e3);
      } }, { key: "patchMessageRemindType", value: function(e3) {
        var t2 = e3.ID, n3 = e3.isC2CConversation, o2 = e3.messageRemindType, r3 = false, a2 = this.getLocalConversation(n3 ? "".concat(gr.CONV_C2C).concat(t2) : "".concat(gr.CONV_GROUP).concat(t2));
        return a2 && a2.messageRemindType !== o2 && (a2.messageRemindType = o2, r3 = true), bl.debug("".concat(this._className, ".patchMessageRemindType options:"), e3, "ret:".concat(r3)), r3;
      } }, { key: "onC2CMessageRemindTypeSynced", value: function(e3) {
        var t2 = this;
        bl.debug("".concat(this._className, ".onC2CMessageRemindTypeSynced options:"), e3), e3.dataList.forEach(function(e4) {
          if (!xd(e4.muteNotificationsSync)) {
            var n3, o2 = e4.muteNotificationsSync, r3 = o2.to, a2 = o2.updateSequence, s2 = o2.muteFlag;
            t2._messageRemindHandler.setUpdateSequence(a2), 0 === s2 ? n3 = gr.MSG_REMIND_ACPT_AND_NOTE : 1 === s2 ? n3 = gr.MSG_REMIND_DISCARD : 2 === s2 && (n3 = gr.MSG_REMIND_ACPT_NOT_NOTE);
            var i2 = 0;
            t2.patchMessageRemindType({ ID: r3, isC2CConversation: true, messageRemindType: n3 }) && (i2 += 1), bl.log("".concat(t2._className, ".onC2CMessageRemindTypeSynced updateCount:").concat(i2)), i2 >= 1 && t2.emitConversationUpdate(true, false);
          }
        });
      } }, { key: "onGroupMessageRemindTypeSynced", value: function(e3) {
        bl.debug("".concat(this._className, ".onGroupMessageRemindTypeSynced options:"), e3), this._messageRemindHandler.onGroupMessageRemindTypeUpdated(e3);
      } }, { key: "deleteLocalConversation", value: function(e3) {
        var t2 = this._conversationMap.has(e3);
        if (bl.log("".concat(this._className, ".deleteLocalConversation conversationID:").concat(e3, " has:").concat(t2)), t2) {
          this._conversationMap.delete(e3), this._roamingMessageKeyAndTimeMap.has(e3) && this._roamingMessageKeyAndTimeMap.delete(e3), this._roamingMessageSequenceMap.has(e3) && this._roamingMessageSequenceMap.delete(e3), this._setStorageConversationList(), this._messageListHandler.removeByConversationID(e3), this._completedMap.delete(e3);
          var n3 = !this._isTopicConversation(e3);
          this.emitConversationUpdate(n3, false);
        }
      } }, { key: "isMessageSentByCurrentInstance", value: function(e3) {
        return !(!this._messageListHandler.hasLocalMessage(e3.conversationID, e3.ID) && !this.singlyLinkedList.has(e3.random));
      } }, { key: "modifyMessageList", value: function(e3) {
        if (e3.startsWith(gr.CONV_C2C) && this._conversationMap.has(e3)) {
          var t2 = this._conversationMap.get(e3), n3 = Date.now();
          this._messageListHandler.modifyMessageSentByPeer({ conversationID: e3, latestNick: t2.userProfile.nick, latestAvatar: t2.userProfile.avatar });
          var o2 = this.getModule(ng).getNickAndAvatarByUserID(this.getMyUserID());
          this._messageListHandler.modifyMessageSentByMe({ conversationID: e3, latestNick: o2.nick, latestAvatar: o2.avatar }), bl.log("".concat(this._className, ".modifyMessageList conversationID:").concat(e3, " cost ").concat(Date.now() - n3, " ms"));
        }
      } }, { key: "updateUserProfileSpecifiedKey", value: function(e3) {
        bl.log("".concat(this._className, ".updateUserProfileSpecifiedKey options:"), e3);
        var t2 = e3.conversationID, n3 = e3.nick, o2 = e3.avatar;
        if (this._conversationMap.has(t2)) {
          var r3 = this._conversationMap.get(t2).userProfile;
          zl(n3) && r3.nick !== n3 && (r3.nick = n3), zl(o2) && r3.avatar !== o2 && (r3.avatar = o2), this.emitConversationUpdate(true, false);
        }
      } }, { key: "_onMyProfileModified", value: function(e3) {
        var n3 = this, o2 = this.getLocalConversationList(), r3 = Date.now();
        o2.forEach(function(o3) {
          n3.modifyMessageSentByMe(t({ conversationID: o3.conversationID }, e3));
        }), bl.log("".concat(this._className, "._onMyProfileModified. modify all messages sent by me, cost ").concat(Date.now() - r3, " ms"));
      } }, { key: "modifyMessageSentByMe", value: function(e3) {
        this._messageListHandler.modifyMessageSentByMe(e3);
      } }, { key: "getLatestMessageSentByMe", value: function(e3) {
        return this._messageListHandler.getLatestMessageSentByMe(e3);
      } }, { key: "modifyMessageSentByPeer", value: function(e3) {
        this._messageListHandler.modifyMessageSentByPeer(e3);
      } }, { key: "getLatestMessageSentByPeer", value: function(e3) {
        return this._messageListHandler.getLatestMessageSentByPeer(e3);
      } }, { key: "pushIntoNoticeResult", value: function(e3, t2) {
        return !(!this._messageListHandler.pushIn(t2) || this.singlyLinkedList.has(t2.random)) && (e3.push(t2), true);
      } }, { key: "getGroupLocalLastMessageSequence", value: function(e3) {
        return this._messageListHandler.getGroupLocalLastMessageSequence(e3);
      } }, { key: "checkAndPatchRemark", value: function() {
        var e3 = Promise.resolve();
        if (0 === this._conversationMap.size)
          return e3;
        var t2 = this.getModule(ag);
        if (!t2)
          return e3;
        var n3 = M(this._conversationMap.values()).filter(function(e4) {
          return e4.type === gr.CONV_C2C;
        });
        if (0 === n3.length)
          return e3;
        var o2 = 0;
        return n3.forEach(function(e4) {
          var n4 = e4.conversationID.replace(gr.CONV_C2C, "");
          if (t2.isMyFriend(n4)) {
            var r3 = t2.getFriendRemark(n4);
            e4.remark !== r3 && (e4.remark = r3, o2 += 1);
          }
        }), bl.log("".concat(this._className, ".checkAndPatchRemark. c2c conversation count:").concat(n3.length, ", patched count:").concat(o2)), e3;
      } }, { key: "updateTopicConversation", value: function(e3) {
        this._updateLocalConversationList({ conversationOptionsList: e3, isFromGetConversations: true });
      } }, { key: "sendReadReceipt", value: function(e3) {
        var t2 = e3[0], n3 = null;
        return t2.conversationType === gr.CONV_C2C ? n3 = this._moduleManager.getModule(og) : t2.conversationType === gr.CONV_GROUP && (n3 = this._moduleManager.getModule(rg)), n3 ? n3.sendReadReceipt(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "getReadReceiptList", value: function(e3) {
        var t2 = e3[0], n3 = null;
        return t2.conversationType === gr.CONV_C2C ? n3 = this._moduleManager.getModule(og) : t2.conversationType === gr.CONV_GROUP && (n3 = this._moduleManager.getModule(rg)), n3 ? n3.getReadReceiptList(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "getLastMessageTime", value: function(e3) {
        var t2 = this.getLocalConversation(e3);
        return t2 ? t2.lastMessage.lastTime : 0;
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._pagingStatus = wp.NOT_START, this._messageListHandler.reset(), this._messageRemindHandler.reset(), this._roamingMessageKeyAndTimeMap.clear(), this._roamingMessageSequenceMap.clear(), this.singlyLinkedList.reset(), this._peerReadTimeMap.clear(), this._completedMap.clear(), this._conversationMap.clear(), this._pagingTimeStamp = 0, this._pagingStartIndex = 0, this._pagingPinnedTimeStamp = 0, this._pagingPinnedStartIndex = 0, this._remoteGroupReadSequenceMap.clear(), this.resetReady();
      } }]), r2;
    }(Cg), Mv = function() {
      function e2(t2) {
        o(this, e2), this._groupModule = t2, this._className = "GroupTipsHandler", this._cachedGroupTipsMap = /* @__PURE__ */ new Map(), this._checkCountMap = /* @__PURE__ */ new Map(), this.MAX_CHECK_COUNT = 4, this._getTopicPendingMap = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "onCheckTimer", value: function(e3) {
        e3 % 1 == 0 && this._cachedGroupTipsMap.size > 0 && this._checkCachedGroupTips();
      } }, { key: "_checkCachedGroupTips", value: function() {
        var e3 = this;
        this._cachedGroupTipsMap.forEach(function(t2, n2) {
          var o2 = e3._checkCountMap.get(n2), r2 = e3._groupModule.hasLocalGroup(n2);
          bl.log("".concat(e3._className, "._checkCachedGroupTips groupID:").concat(n2, " hasLocalGroup:").concat(r2, " checkCount:").concat(o2)), r2 ? (e3._notifyCachedGroupTips(n2), e3._checkCountMap.delete(n2), e3._groupModule.deleteUnjoinedAVChatRoom(n2)) : o2 >= e3.MAX_CHECK_COUNT ? (e3._deleteCachedGroupTips(n2), e3._checkCountMap.delete(n2)) : (o2++, e3._checkCountMap.set(n2, o2));
        });
      } }, { key: "onNewGroupTips", value: function(e3) {
        bl.debug("".concat(this._className, ".onReceiveGroupTips count:").concat(e3.dataList.length));
        var t2 = this.newGroupTipsStoredAndSummary(e3), n2 = t2.eventDataList, o2 = t2.result, r2 = t2.AVChatRoomMessageList;
        (r2.length > 0 && this._groupModule.onAVChatRoomMessage(r2), n2.length > 0) && (this._groupModule.updateNextMessageSeq(n2), this._groupModule.getModule(cg).onNewMessage({ conversationOptionsList: n2, isInstantMessage: true }));
        o2.length > 0 && (this._groupModule.emitOuterEvent(pr.MESSAGE_RECEIVED, o2), this.handleMessageList(o2));
      } }, { key: "newGroupTipsStoredAndSummary", value: function(e3) {
        for (var n2 = this, o2 = e3.event, r2 = e3.dataList, a2 = null, s2 = [], i2 = [], c2 = {}, u2 = [], l2 = function(e4, l3) {
          var d3 = md(r2[e4]), p4 = d3.groupProfile, g2 = p4.groupID, _2 = p4.communityType, h3 = void 0 === _2 ? 0 : _2, f2 = p4.topicID, m2 = void 0 === f2 ? void 0 : f2, M2 = void 0, v2 = 2 === h3 && !xd(m2);
          if (v2) {
            M2 = gr.CONV_TOPIC, d3.to = m2;
            var y2 = n2._groupModule.getModule(ig);
            y2.hasLocalTopic(g2, m2) || n2._getTopicPendingMap.has(m2) || (n2._getTopicPendingMap.set(m2, 1), y2.getTopicList({ groupID: g2, topicIDList: [m2] }).finally(function() {
              n2._getTopicPendingMap.delete(m2);
            }));
          }
          if (2 === h3 && xd(m2))
            return "continue";
          var I2 = n2._groupModule.hasLocalGroup(g2);
          if (!I2 && n2._groupModule.isUnjoinedAVChatRoom(g2))
            return "continue";
          if (!I2 && !v2)
            return n2._cacheGroupTipsAndProbe({ groupID: g2, event: o2, item: d3 }), "continue";
          if (n2._groupModule.isMessageFromOrToAVChatroom(g2))
            return d3.event = o2, u2.push(d3), "continue";
          d3.currentUser = n2._groupModule.getMyUserID(), d3.conversationType = gr.CONV_GROUP, (a2 = new CM(d3)).setElement({ type: gr.MSG_GRP_TIP, content: t(t({}, d3.elements), {}, { groupProfile: d3.groupProfile }) }), a2.isSystemMessage = false;
          var E2 = n2._groupModule.getModule(cg), T2 = a2, S2 = T2.conversationID, C2 = T2.sequence;
          if (6 === o2)
            a2._onlineOnlyFlag = true, i2.push(a2);
          else if (!E2.pushIntoNoticeResult(i2, a2))
            return "continue";
          if (6 === o2 && E2.getLocalConversation(S2))
            return "continue";
          6 !== o2 && n2._groupModule.getModule(Tg).addMessageSequence({ key: _h, message: a2 });
          var A2 = E2.isRemoteRead({ conversationID: S2, sequence: C2 });
          if (Zl(c2[S2])) {
            var D2 = 0;
            "in" === a2.flow && (a2._isExcludedFromUnreadCount || a2._onlineOnlyFlag || A2 || (D2 = 1)), c2[S2] = s2.push({ conversationID: S2, unreadCount: D2, type: Zl(M2) ? a2.conversationType : M2, subType: a2.conversationSubType, lastMessage: a2._isExcludedFromLastMessage ? "" : a2 }) - 1;
          } else {
            var N2 = c2[S2];
            s2[N2].type = a2.conversationType, s2[N2].subType = a2.conversationSubType, s2[N2].lastMessage = a2._isExcludedFromLastMessage ? "" : a2, "in" === a2.flow && (a2._isExcludedFromUnreadCount || a2._onlineOnlyFlag || A2 || s2[N2].unreadCount++);
          }
        }, d2 = 0, p3 = r2.length; d2 < p3; d2++)
          l2(d2);
        return { eventDataList: s2, result: i2, AVChatRoomMessageList: u2 };
      } }, { key: "handleMessageList", value: function(e3) {
        var t2 = this;
        e3.forEach(function(e4) {
          switch (e4.payload.operationType) {
            case 1:
              t2._onNewMemberComeIn(e4);
              break;
            case 2:
              t2._onMemberQuit(e4);
              break;
            case 3:
              t2._onMemberKickedOut(e4);
              break;
            case 4:
              t2._onMemberSetAdmin(e4);
              break;
            case 5:
              t2._onMemberCancelledAdmin(e4);
              break;
            case 6:
              t2._onGroupProfileModified(e4);
              break;
            case 7:
              t2._onMemberInfoModified(e4);
              break;
            case 8:
              t2._onTopicProfileUpdated(e4);
              break;
            default:
              bl.warn("".concat(t2._className, ".handleMessageList unknown operationType:").concat(e4.payload.operationType));
          }
        });
      } }, { key: "_onNewMemberComeIn", value: function(e3) {
        var t2 = e3.payload, n2 = t2.memberNum, o2 = t2.groupProfile.groupID, r2 = this._groupModule.getLocalGroupProfile(o2);
        r2 && $l(n2) && r2.memberCount !== n2 && (r2.memberCount = n2, this._updateConversationGroupProfile(r2));
      } }, { key: "_onMemberQuit", value: function(e3) {
        var t2 = e3.payload, n2 = t2.memberNum, o2 = t2.groupProfile.groupID, r2 = this._groupModule.getLocalGroupProfile(o2);
        r2 && $l(n2) && r2.memberCount !== n2 && (r2.memberCount = n2, this._updateConversationGroupProfile(r2)), this._groupModule.getModule(sg).deleteLocalGroupMembers(o2, e3.payload.userIDList);
      } }, { key: "_onMemberKickedOut", value: function(e3) {
        var t2 = e3.payload, n2 = t2.memberNum, o2 = t2.groupProfile.groupID, r2 = this._groupModule.getLocalGroupProfile(o2);
        r2 && $l(n2) && r2.memberCount !== n2 && (r2.memberCount = n2, this._updateConversationGroupProfile(r2)), this._groupModule.getModule(sg).deleteLocalGroupMembers(o2, e3.payload.userIDList);
      } }, { key: "_updateConversationGroupProfile", value: function(e3) {
        this._groupModule.getModule(cg).updateConversationGroupProfile([e3]);
      } }, { key: "_onMemberSetAdmin", value: function(e3) {
        var t2 = e3.payload.groupProfile.groupID, n2 = e3.payload.userIDList, o2 = this._groupModule.getModule(sg);
        n2.forEach(function(e4) {
          var n3 = o2.getLocalGroupMemberInfo(t2, e4);
          n3 && n3.updateRole(gr.GRP_MBR_ROLE_ADMIN);
        });
      } }, { key: "_onMemberCancelledAdmin", value: function(e3) {
        var t2 = e3.payload.groupProfile.groupID, n2 = e3.payload.userIDList, o2 = this._groupModule.getModule(sg);
        n2.forEach(function(e4) {
          var n3 = o2.getLocalGroupMemberInfo(t2, e4);
          n3 && n3.updateRole(gr.GRP_MBR_ROLE_MEMBER);
        });
      } }, { key: "_onGroupProfileModified", value: function(e3) {
        var t2 = this, n2 = e3.payload, o2 = n2.newGroupProfile, r2 = n2.groupProfile.groupID, a2 = this._groupModule.getLocalGroupProfile(r2);
        Object.keys(o2).forEach(function(e4) {
          switch (e4) {
            case "ownerID":
              t2._ownerChanged(a2, o2);
              break;
            case "muteAllMembers":
              a2.muteAllMembers = o2.muteAllMembers;
              break;
            case "joinOption":
              a2.joinOption = o2.joinOption;
              break;
            default:
              a2[e4] = o2[e4];
          }
        });
        var s2 = !a2.isSupportTopic;
        this._groupModule.emitGroupListUpdate(true, s2);
      } }, { key: "_ownerChanged", value: function(e3, t2) {
        var n2 = e3.groupID, o2 = this._groupModule.getLocalGroupProfile(n2), r2 = this._groupModule.getMyUserID();
        if (r2 === t2.ownerID) {
          o2.updateGroup({ selfInfo: { role: gr.GRP_MBR_ROLE_OWNER } });
          var a2 = this._groupModule.getModule(sg), s2 = a2.getLocalGroupMemberInfo(n2, r2), i2 = this._groupModule.getLocalGroupProfile(n2).ownerID, c2 = a2.getLocalGroupMemberInfo(n2, i2);
          s2 && s2.updateRole(gr.GRP_MBR_ROLE_OWNER), c2 && c2.updateRole(gr.GRP_MBR_ROLE_MEMBER);
        }
      } }, { key: "_onMemberInfoModified", value: function(e3) {
        var t2 = e3.to, n2 = e3.payload, o2 = n2.groupProfile, r2 = n2.memberList, a2 = o2.groupID;
        Ed(t2) && this._updateTopicMuteTime(e3);
        var s2 = this._groupModule.getModule(sg);
        r2.forEach(function(e4) {
          var t3 = s2.getLocalGroupMemberInfo(a2, e4.userID);
          t3 && $l(e4.muteTime) && t3.updateMuteUntil(e4.muteTime);
        });
      } }, { key: "_updateTopicMuteTime", value: function(e3) {
        var t2 = e3.to, n2 = e3.payload, o2 = n2.groupProfile, r2 = n2.memberList, a2 = void 0 === r2 ? [] : r2, s2 = this._groupModule.getModule(ig), i2 = o2.groupID, c2 = s2.getLocalTopic(i2, t2);
        if (c2) {
          for (var u2 = false, l2 = 0; l2 < a2.length; l2++) {
            var d2 = a2[l2];
            if (d2.userID === this._groupModule.getMyUserID() && d2.muteTime >= 0) {
              c2.updateSelfInfo({ muteTime: d2.muteTime }), u2 = true;
              break;
            }
          }
          u2 && this._groupModule.emitOuterEvent(pr.TOPIC_UPDATED, { groupID: i2, topic: c2 });
        }
      } }, { key: "_onTopicProfileUpdated", value: function(e3) {
        var n2 = e3.payload, o2 = n2.groupProfile.groupID, r2 = n2.newTopicInfo;
        this._groupModule.getModule(ig).onTopicProfileUpdated(t({ groupID: o2, topicID: e3.to }, r2));
      } }, { key: "_cacheGroupTips", value: function(e3, t2) {
        this._cachedGroupTipsMap.has(e3) || this._cachedGroupTipsMap.set(e3, []), this._cachedGroupTipsMap.get(e3).push(t2);
      } }, { key: "_deleteCachedGroupTips", value: function(e3) {
        this._cachedGroupTipsMap.has(e3) && this._cachedGroupTipsMap.delete(e3);
      } }, { key: "_notifyCachedGroupTips", value: function(e3) {
        var t2 = this, n2 = this._cachedGroupTipsMap.get(e3) || [];
        n2.forEach(function(e4) {
          t2.onNewGroupTips(e4);
        }), this._deleteCachedGroupTips(e3), bl.log("".concat(this._className, "._notifyCachedGroupTips groupID:").concat(e3, " count:").concat(n2.length));
      } }, { key: "_cacheGroupTipsAndProbe", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = e3.event, r2 = e3.item;
        this._cacheGroupTips(n2, { event: o2, dataList: [r2] }), this._groupModule.getGroupSimplifiedInfo(n2).then(function(e4) {
          e4.type === gr.GRP_AVCHATROOM ? t2._groupModule.hasLocalGroup(n2) ? t2._notifyCachedGroupTips(n2) : t2._groupModule.setUnjoinedAVChatRoom(n2) : (t2._groupModule.updateGroupMap([e4]), t2._notifyCachedGroupTips(n2));
        }), this._checkCountMap.has(n2) || this._checkCountMap.set(n2, 0), bl.log("".concat(this._className, "._cacheGroupTipsAndProbe groupID:").concat(n2));
      } }, { key: "reset", value: function() {
        this._cachedGroupTipsMap.clear(), this._checkCountMap.clear(), this._getTopicPendingMap.clear();
      } }]), e2;
    }(), vv = function() {
      function e2(t2) {
        o(this, e2), this._groupModule = t2, this._className = "CommonGroupHandler", this.tempConversationList = null, this._cachedGroupMessageMap = /* @__PURE__ */ new Map(), this._checkCountMap = /* @__PURE__ */ new Map(), this.MAX_CHECK_COUNT = 4, this._getTopicPendingMap = /* @__PURE__ */ new Map(), this._isPagingGetCompleted = false, t2.getInnerEmitterInstance().once(ZM, this._initGroupList, this);
      }
      return a(e2, [{ key: "onCheckTimer", value: function(e3) {
        e3 % 1 == 0 && this._cachedGroupMessageMap.size > 0 && this._checkCachedGroupMessage();
      } }, { key: "_checkCachedGroupMessage", value: function() {
        var e3 = this;
        this._cachedGroupMessageMap.forEach(function(t2, n2) {
          var o2 = e3._checkCountMap.get(n2), r2 = e3._groupModule.hasLocalGroup(n2);
          bl.log("".concat(e3._className, "._checkCachedGroupMessage groupID:").concat(n2, " hasLocalGroup:").concat(r2, " checkCount:").concat(o2)), r2 ? (e3._notifyCachedGroupMessage(n2), e3._checkCountMap.delete(n2), e3._groupModule.deleteUnjoinedAVChatRoom(n2)) : o2 >= e3.MAX_CHECK_COUNT ? (e3._deleteCachedGroupMessage(n2), e3._checkCountMap.delete(n2)) : (o2++, e3._checkCountMap.set(n2, o2));
        });
      } }, { key: "_initGroupList", value: function() {
        var e3 = this;
        bl.log("".concat(this._className, "._initGroupList"));
        var t2 = new Ih(Eh.GET_GROUP_LIST_IN_STORAGE), n2 = this._groupModule.getStorageGroupList();
        if (Ql(n2) && n2.length > 0) {
          n2.forEach(function(t3) {
            e3._groupModule.initGroupMap(t3);
          }), this._groupModule.emitGroupListUpdate(true, false);
          var o2 = this._groupModule.getLocalGroupList().length;
          t2.setNetworkType(this._groupModule.getNetworkType()).setMessage("group count:".concat(o2)).end();
        } else
          t2.setNetworkType(this._groupModule.getNetworkType()).setMessage("group count:0").end();
        bl.log("".concat(this._className, "._initGroupList ok"));
      } }, { key: "handleUpdateGroupLastMessage", value: function(e3) {
        var t2 = "".concat(this._className, ".handleUpdateGroupLastMessage");
        if (bl.debug("".concat(t2, " conversation count:").concat(e3.length, ", local group count:").concat(this._groupModule.getLocalGroupList().length)), 0 !== this._groupModule.getGroupMap().size) {
          for (var n2, o2, r2, a2 = false, s2 = 0, i2 = e3.length; s2 < i2; s2++)
            (n2 = e3[s2]).type === gr.CONV_GROUP && (o2 = n2.conversationID.split(/^GROUP/)[1], (r2 = this._groupModule.getLocalGroupProfile(o2)) && (r2.lastMessage = n2.lastMessage, a2 = true));
          a2 && (this._groupModule.sortLocalGroupList(), this._groupModule.emitGroupListUpdate(true, false));
        } else
          this.tempConversationList = e3;
      } }, { key: "onNewGroupMessage", value: function(e3) {
        bl.debug("".concat(this._className, ".onNewGroupMessage count:").concat(e3.dataList.length));
        var t2 = this._newGroupMessageStoredAndSummary(e3), n2 = t2.conversationOptionsList, o2 = t2.messageList, r2 = t2.AVChatRoomMessageList;
        (r2.length > 0 && this._groupModule.onAVChatRoomMessage(r2), this._groupModule.filterModifiedMessage(o2), n2.length > 0) && (this._groupModule.updateNextMessageSeq(n2), this._groupModule.getModule(cg).onNewMessage({ conversationOptionsList: n2, isInstantMessage: true }));
        var a2 = this._groupModule.filterUnmodifiedMessage(o2);
        a2.length > 0 && this._groupModule.emitOuterEvent(pr.MESSAGE_RECEIVED, a2), o2.length = 0;
      } }, { key: "_newGroupMessageStoredAndSummary", value: function(e3) {
        var t2 = this, n2 = e3.dataList, o2 = e3.event, r2 = e3.isInstantMessage, a2 = null, s2 = [], i2 = [], c2 = [], u2 = {}, l2 = this._groupModule.getModule(gg), d2 = this._groupModule.getModule(Tg), p3 = n2.length;
        p3 > 1 && n2.sort(function(e4, t3) {
          return e4.sequence - t3.sequence;
        });
        for (var g2 = function(e4) {
          var p4 = md(n2[e4]), g3 = p4.groupProfile, _3 = g3.groupID, h3 = g3.communityType, f2 = void 0 === h3 ? 0 : h3, m2 = g3.topicID, M2 = void 0 === m2 ? void 0 : m2, v2 = void 0, y2 = 2 === f2 && !xd(M2);
          if (y2) {
            v2 = gr.CONV_TOPIC, p4.to = M2;
            var I2 = t2._groupModule.getModule(ig);
            I2.hasLocalTopic(_3, M2) || t2._getTopicPendingMap.has(M2) || (t2._getTopicPendingMap.set(M2, 1), I2.getTopicList({ groupID: _3, topicIDList: [M2] }).finally(function() {
              t2._getTopicPendingMap.delete(M2);
            }));
          }
          if (2 === f2 && xd(M2))
            return "continue";
          var E2 = t2._groupModule.hasLocalGroup(_3);
          if (!E2 && t2._groupModule.isUnjoinedAVChatRoom(_3))
            return "continue";
          if (!E2 && !y2)
            return t2._cacheGroupMessageAndProbe({ groupID: _3, event: o2, item: p4 }), "continue";
          if (t2._groupModule.isMessageFromOrToAVChatroom(_3))
            return p4.event = o2, c2.push(p4), "continue";
          p4.currentUser = t2._groupModule.getMyUserID(), p4.conversationType = gr.CONV_GROUP, p4.isSystemMessage = !!p4.isSystemMessage, a2 = new CM(p4), p4.elements = l2.parseElements(p4.elements, p4.from), a2.setElement(p4.elements);
          var T2 = 1 === n2[e4].isModified, S2 = t2._groupModule.getModule(cg);
          if (S2.isMessageSentByCurrentInstance(a2) ? a2.isModified = T2 : T2 = false, 1 === p4.onlineOnlyFlag)
            a2._onlineOnlyFlag = true, S2.isMessageSentByCurrentInstance(a2) || i2.push(a2);
          else {
            if (!S2.pushIntoMessageList(i2, a2, T2))
              return "continue";
            d2.addMessageSequence({ key: _h, message: a2 }), r2 && a2.clientTime > 0 && d2.addMessageDelay(a2.clientTime);
            var C2 = a2, A2 = C2.conversationID, D2 = C2.sequence, N2 = S2.isRemoteRead({ conversationID: A2, sequence: D2 });
            if (Zl(u2[A2])) {
              var O2 = 0;
              "in" === a2.flow && (a2._isExcludedFromUnreadCount || N2 || (O2 = 1)), u2[A2] = s2.push({ conversationID: A2, unreadCount: O2, type: Zl(v2) ? a2.conversationType : v2, subType: a2.conversationSubType, lastMessage: a2._isExcludedFromLastMessage ? "" : a2 }) - 1;
            } else {
              var R2 = u2[A2];
              s2[R2].type = Zl(v2) ? a2.conversationType : v2, s2[R2].subType = a2.conversationSubType, s2[R2].lastMessage = a2._isExcludedFromLastMessage ? "" : a2, "in" === a2.flow && (a2._isExcludedFromUnreadCount || N2 || s2[R2].unreadCount++);
            }
          }
        }, _2 = 0; _2 < p3; _2++)
          g2(_2);
        return { conversationOptionsList: s2, messageList: i2, AVChatRoomMessageList: c2 };
      } }, { key: "onGroupMessageRevoked", value: function(e3) {
        bl.debug("".concat(this._className, ".onGroupMessageRevoked nums:").concat(e3.dataList.length));
        var t2 = this._groupModule.getModule(cg), n2 = [], o2 = null;
        e3.dataList.forEach(function(e4) {
          var r2 = e4.elements.revokedInfos;
          Zl(r2) || r2.forEach(function(e5) {
            var r3 = Zl(e5.topicID) ? "GROUP".concat(e5.groupID) : "GROUP".concat(e5.topicID);
            (o2 = t2.revoke(r3, e5.sequence, e5.random)) && n2.push(o2);
          });
        }), 0 !== n2.length && (t2.onMessageRevoked(n2), this._groupModule.emitOuterEvent(pr.MESSAGE_REVOKED, n2));
      } }, { key: "_groupListTreeShaking", value: function(e3) {
        for (var t2 = new Map(M(this._groupModule.getGroupMap())), n2 = 0, o2 = e3.length; n2 < o2; n2++)
          t2.delete(e3[n2].groupID);
        this._groupModule.hasJoinedAVChatRoom() && this._groupModule.getJoinedAVChatRoom().forEach(function(e4) {
          t2.delete(e4);
        });
        this._groupModule.getGroupMap().forEach(function(e4, n3) {
          e4.isSupportTopic && t2.delete(n3);
        });
        for (var r2 = M(t2.keys()), a2 = 0, s2 = r2.length; a2 < s2; a2++)
          this._groupModule.deleteGroup(r2[a2]);
      } }, { key: "getGroupList", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, ".getGroupList"), o2 = new Ih(Eh.GET_GROUP_LIST);
        bl.log("".concat(n2));
        var r2 = { introduction: "Introduction", notification: "Notification", createTime: "CreateTime", ownerID: "Owner_Account", lastInfoTime: "LastInfoTime", memberNum: "MemberNum", maxMemberNum: "MaxMemberNum", joinOption: "ApplyJoinOption", muteAllMembers: "ShutUpAllMember" }, a2 = ["Type", "Name", "FaceUrl", "NextMsgSeq", "LastMsgTime", "AtInfoList"], s2 = [];
        e3 && e3.groupProfileFilter && e3.groupProfileFilter.forEach(function(e4) {
          r2[e4] && a2.push(r2[e4]);
        });
        var i2 = (e3 || {}).isGroupWithTopicOnly, c2 = void 0 !== i2 && i2;
        return this._pagingGetGroupList({ limit: 50, offset: 0, groupBaseInfoFilter: a2, groupList: s2, isGroupWithTopicOnly: c2 }).then(function() {
          bl.log("".concat(n2, " ok. count:").concat(s2.length, " isGroupWithTopicOnly:").concat(c2)), c2 || t2._groupListTreeShaking(s2), t2._groupModule.updateGroupMap(s2);
          var e4 = t2._groupModule.getLocalGroupList().length;
          o2.setNetworkType(t2._groupModule.getNetworkType()).setMessage("remote count:".concat(s2.length, ", after tree shaking, local count:").concat(e4, ", isGroupWithTopicOnly:").concat(c2)).end(), t2.tempConversationList && (bl.log("".concat(n2, " update last message with tempConversationList, count:").concat(t2.tempConversationList.length)), t2.handleUpdateGroupLastMessage({ data: t2.tempConversationList }), t2.tempConversationList = null), t2._groupModule.patchGroupMessageRemindType(), t2._groupModule.recomputeUnreadCount(), t2._groupModule.emitGroupListUpdate(true, !c2);
          var r3 = t2._groupModule.getLocalGroupList();
          if (c2) {
            var a3 = r3.filter(function(e5) {
              return true === e5.isSupportTopic;
            });
            return AM({ groupList: a3 });
          }
          return t2._isPagingGetCompleted = true, AM({ groupList: r3 });
        }).catch(function(e4) {
          return t2._groupModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), r3 = n3[0], a3 = n3[1];
            o2.setError(e4, r3, a3).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "isPagingGetCompleted", value: function() {
        return this._isPagingGetCompleted;
      } }, { key: "_pagingGetGroupList", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, "._pagingGetGroupList"), o2 = e3.isCommunityRelay, r2 = void 0 !== o2 && o2, a2 = e3.isGroupWithTopicOnly, s2 = void 0 !== a2 && a2, i2 = e3.limit, c2 = e3.offset, u2 = e3.groupBaseInfoFilter, l2 = e3.groupList;
        if (s2)
          return this._pagingGetGroupListWithTopic({ limit: i2, offset: c2, groupBaseInfoFilter: u2, groupList: l2 });
        var d2 = new Ih(Eh.PAGING_GET_GROUP_LIST);
        return this._groupModule.request({ protocolName: Qg, requestData: { type: r2 ? gr.GRP_COMMUNITY : void 0, memberAccount: this._groupModule.getMyUserID(), limit: i2, offset: c2, responseFilter: { groupBaseInfoFilter: u2, selfInfoFilter: ["Role", "JoinTime", "MsgFlag", "MsgSeq"] } } }).then(function(e4) {
          var o3 = e4.data, a3 = o3.groups, s3 = void 0 === a3 ? [] : a3, p3 = o3.totalCount;
          l2.push.apply(l2, M(s3)), t2._handleGroupAtInfoWithoutTopic(r2, s3);
          var g2 = c2 + i2, _2 = !(p3 > g2), h3 = "offset:".concat(c2, " totalCount:").concat(p3, " isCompleted:").concat(_2, " ") + "currentCount:".concat(l2.length, " isCommunityRelay:").concat(r2);
          return d2.setNetworkType(t2._groupModule.getNetworkType()).setMessage("".concat(h3)).end(), r2 || _2 ? !r2 && _2 ? (bl.log("".concat(n2, " start to get community list")), c2 = 0, t2._pagingGetGroupList({ limit: i2, offset: c2, groupBaseInfoFilter: u2, groupList: l2, isCommunityRelay: true })) : r2 && !_2 ? (c2 = g2, t2._pagingGetGroupList({ limit: i2, offset: c2, groupBaseInfoFilter: u2, groupList: l2, isCommunityRelay: true })) : (bl.log("".concat(n2, " ok. totalCount:").concat(l2.length)), AM({ groupList: l2 })) : (c2 = g2, t2._pagingGetGroupList({ limit: i2, offset: c2, groupBaseInfoFilter: u2, groupList: l2 }));
        }).catch(function(e4) {
          return 11e3 !== e4.code && t2._groupModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], a3 = n3[1];
            d2.setMessage("isCommunityRelay:".concat(r2)).setError(e4, o3, a3).end();
          }), r2 ? (11e3 === e4.code && (d2 = null, bl.log("".concat(n2, " ok. community unavailable"))), UM({ groupList: l2 })) : bM(e4);
        });
      } }, { key: "_pagingGetGroupListWithTopic", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, "._pagingGetGroupListWithTopic"), o2 = e3.limit, r2 = e3.offset, a2 = e3.groupBaseInfoFilter, s2 = e3.groupList, i2 = new Ih(Eh.PAGING_GET_GROUP_LIST_WITH_TOPIC);
        return this._groupModule.request({ protocolName: Qg, requestData: { type: gr.GRP_COMMUNITY, memberAccount: this._groupModule.getMyUserID(), limit: o2, offset: r2, responseFilter: { groupBaseInfoFilter: a2, selfInfoFilter: ["Role", "JoinTime", "MsgFlag", "MsgSeq"] }, isSupportTopic: 1 } }).then(function(e4) {
          var c2 = e4.data, u2 = c2.groups, l2 = void 0 === u2 ? [] : u2, d2 = c2.totalCount;
          s2.push.apply(s2, M(l2));
          var p3 = r2 + o2, g2 = !(d2 > p3), _2 = "offset:".concat(r2, " totalCount:").concat(d2, " isCompleted:").concat(g2, " ") + "currentCount:".concat(s2.length);
          return i2.setNetworkType(t2._groupModule.getNetworkType()).setMessage("".concat(_2)).end(), g2 ? (bl.log("".concat(n2, " ok. totalCount:").concat(s2.length)), AM({ groupList: s2 })) : (r2 = p3, t2._pagingGetGroupListWithTopic({ limit: o2, offset: r2, groupBaseInfoFilter: a2, groupList: s2 }));
        }).catch(function(e4) {
          return t2._groupModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            i2.setError(e4, o3, r3).end();
          }), bM(e4);
        });
      } }, { key: "_cacheGroupMessage", value: function(e3, t2) {
        this._cachedGroupMessageMap.has(e3) || this._cachedGroupMessageMap.set(e3, []), this._cachedGroupMessageMap.get(e3).push(t2);
      } }, { key: "_deleteCachedGroupMessage", value: function(e3) {
        this._cachedGroupMessageMap.has(e3) && this._cachedGroupMessageMap.delete(e3);
      } }, { key: "_notifyCachedGroupMessage", value: function(e3) {
        var t2 = this, n2 = this._cachedGroupMessageMap.get(e3) || [];
        n2.forEach(function(e4) {
          t2.onNewGroupMessage(e4);
        }), this._deleteCachedGroupMessage(e3), bl.log("".concat(this._className, "._notifyCachedGroupMessage groupID:").concat(e3, " count:").concat(n2.length));
      } }, { key: "_cacheGroupMessageAndProbe", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = e3.event, r2 = e3.item;
        this._cacheGroupMessage(n2, { event: o2, dataList: [r2] }), this._groupModule.getGroupSimplifiedInfo(n2).then(function(e4) {
          e4.type === gr.GRP_AVCHATROOM ? t2._groupModule.hasLocalGroup(n2) ? t2._notifyCachedGroupMessage(n2) : t2._groupModule.setUnjoinedAVChatRoom(n2) : (t2._groupModule.updateGroupMap([e4]), t2._notifyCachedGroupMessage(n2));
        }), this._checkCountMap.has(n2) || this._checkCountMap.set(n2, 0), bl.log("".concat(this._className, "._cacheGroupMessageAndProbe groupID:").concat(n2));
      } }, { key: "_handleGroupAtInfoWithoutTopic", value: function(e3, n2) {
        var o2 = this;
        e3 && 0 !== n2.length && n2.forEach(function(e4) {
          var n3 = e4.groupID, r2 = e4.groupAtInfoList, a2 = [];
          Zl(r2) || (r2.forEach(function(e5) {
            a2.push(t(t({}, e5), {}, { groupID: n3 }));
          }), o2._groupModule.getModule(cg).onNewGroupAtTips({ dataList: a2 }));
        });
      } }, { key: "reset", value: function() {
        this._cachedGroupMessageMap.clear(), this._checkCountMap.clear(), this._getTopicPendingMap.clear(), this._isPagingGetCompleted = false, this._groupModule.getInnerEmitterInstance().once(ZM, this._initGroupList, this);
      } }]), e2;
    }(), yv = { 1: "init", 2: "modify", 3: "clear", 4: "delete" }, Iv = function() {
      function e2(t2) {
        o(this, e2), this._groupModule = t2, this._className = "GroupAttributesHandler", this._groupAttributesMap = /* @__PURE__ */ new Map(), this.CACHE_EXPIRE_TIME = 3e4, this._groupModule.getInnerEmitterInstance().on(ev, this._onCloudConfigUpdated, this);
      }
      return a(e2, [{ key: "_onCloudConfigUpdated", value: function() {
        var e3 = this._groupModule.getCloudConfig("grp_attr_cache_time");
        Zl(e3) || (this.CACHE_EXPIRE_TIME = Number(e3));
      } }, { key: "updateLocalMainSequenceOnReconnected", value: function() {
        this._groupAttributesMap.forEach(function(e3) {
          e3.localMainSequence = 0;
        });
      } }, { key: "onGroupAttributesUpdated", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = e3.groupAttributeOption, r2 = o2.mainSequence, a2 = o2.hasChangedAttributeInfo, s2 = o2.groupAttributeList, i2 = void 0 === s2 ? [] : s2, c2 = o2.operationType;
        if (bl.log("".concat(this._className, ".onGroupAttributesUpdated. groupID:").concat(n2, " hasChangedAttributeInfo:").concat(a2, " operationType:").concat(c2)), !Zl(c2)) {
          if (1 === a2) {
            if (4 === c2) {
              var u2 = [];
              i2.forEach(function(e4) {
                u2.push(e4.key);
              }), i2 = M(u2), u2 = null;
            }
            return this._refreshCachedGroupAttributes({ groupID: n2, remoteMainSequence: r2, groupAttributeList: i2, operationType: yv[c2] }), void this._emitGroupAttributesUpdated(n2);
          }
          if (this._groupAttributesMap.has(n2)) {
            var l2 = this._groupAttributesMap.get(n2).avChatRoomKey;
            this._getGroupAttributes({ groupID: n2, avChatRoomKey: l2 }).then(function() {
              t2._emitGroupAttributesUpdated(n2);
            });
          }
        }
      } }, { key: "initGroupAttributesCache", value: function(e3) {
        var t2 = e3.groupID, n2 = e3.avChatRoomKey;
        this._groupAttributesMap.set(t2, { lastUpdateTime: 0, localMainSequence: 0, remoteMainSequence: 0, attributes: /* @__PURE__ */ new Map(), avChatRoomKey: n2 }), bl.log("".concat(this._className, ".initGroupAttributesCache groupID:").concat(t2, " avChatRoomKey:").concat(n2));
      } }, { key: "initGroupAttributes", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = e3.groupAttributes, r2 = this._checkCachedGroupAttributes({ groupID: n2, funcName: "initGroupAttributes" });
        if (true !== r2)
          return bM(r2);
        var a2 = this._groupAttributesMap.get(n2), s2 = a2.remoteMainSequence, i2 = a2.avChatRoomKey, c2 = new Ih(Eh.INIT_GROUP_ATTRIBUTES);
        return c2.setMessage("groupID:".concat(n2, " mainSequence:").concat(s2, " groupAttributes:").concat(JSON.stringify(o2))), this._groupModule.request({ protocolName: C_, requestData: { groupID: n2, avChatRoomKey: i2, mainSequence: s2, groupAttributeList: this._transformGroupAttributes(o2) } }).then(function(e4) {
          var r3 = e4.data, a3 = r3.mainSequence, s3 = M(r3.groupAttributeList);
          return s3.forEach(function(e5) {
            e5.value = o2[e5.key];
          }), t2._refreshCachedGroupAttributes({ groupID: n2, remoteMainSequence: a3, groupAttributeList: s3, operationType: "init" }), c2.setNetworkType(t2._groupModule.getNetworkType()).end(), bl.log("".concat(t2._className, ".initGroupAttributes ok. groupID:").concat(n2)), AM({ groupAttributes: o2 });
        }).catch(function(e4) {
          return t2._groupModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            c2.setError(e4, o3, r3).end();
          }), bM(e4);
        });
      } }, { key: "setGroupAttributes", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = e3.groupAttributes, r2 = this._checkCachedGroupAttributes({ groupID: n2, funcName: "setGroupAttributes" });
        if (true !== r2)
          return bM(r2);
        var a2 = this._groupAttributesMap.get(n2), s2 = a2.remoteMainSequence, i2 = a2.avChatRoomKey, c2 = a2.attributes, u2 = this._transformGroupAttributes(o2);
        u2.forEach(function(e4) {
          var t3 = e4.key;
          e4.sequence = 0, c2.has(t3) && (e4.sequence = c2.get(t3).sequence);
        });
        var l2 = new Ih(Eh.SET_GROUP_ATTRIBUTES);
        return l2.setMessage("groupID:".concat(n2, " mainSequence:").concat(s2, " groupAttributes:").concat(JSON.stringify(o2))), this._groupModule.request({ protocolName: A_, requestData: { groupID: n2, avChatRoomKey: i2, mainSequence: s2, groupAttributeList: u2 } }).then(function(e4) {
          var r3 = e4.data, a3 = r3.mainSequence, s3 = M(r3.groupAttributeList);
          return s3.forEach(function(e5) {
            e5.value = o2[e5.key];
          }), t2._refreshCachedGroupAttributes({ groupID: n2, remoteMainSequence: a3, groupAttributeList: s3, operationType: "modify" }), l2.setNetworkType(t2._groupModule.getNetworkType()).end(), bl.log("".concat(t2._className, ".setGroupAttributes ok. groupID:").concat(n2)), AM({ groupAttributes: o2 });
        }).catch(function(e4) {
          return t2._groupModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            l2.setError(e4, o3, r3).end();
          }), bM(e4);
        });
      } }, { key: "deleteGroupAttributes", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = e3.keyList, r2 = void 0 === o2 ? [] : o2, a2 = this._checkCachedGroupAttributes({ groupID: n2, funcName: "deleteGroupAttributes" });
        if (true !== a2)
          return bM(a2);
        var s2 = this._groupAttributesMap.get(n2), i2 = s2.remoteMainSequence, c2 = s2.avChatRoomKey, u2 = s2.attributes, l2 = M(u2.keys()), d2 = N_, p3 = "clear", g2 = { groupID: n2, avChatRoomKey: c2, mainSequence: i2 };
        if (r2.length > 0) {
          var _2 = [];
          l2 = [], d2 = D_, p3 = "delete", r2.forEach(function(e4) {
            var t3 = 0;
            u2.has(e4) && (t3 = u2.get(e4).sequence, l2.push(e4)), _2.push({ key: e4, sequence: t3 });
          }), g2.groupAttributeList = _2;
        }
        var h3 = new Ih(Eh.DELETE_GROUP_ATTRIBUTES);
        return h3.setMessage("groupID:".concat(n2, " mainSequence:").concat(i2, " keyList:").concat(r2, " protocolName:").concat(d2)), this._groupModule.request({ protocolName: d2, requestData: g2 }).then(function(e4) {
          var o3 = e4.data.mainSequence;
          return t2._refreshCachedGroupAttributes({ groupID: n2, remoteMainSequence: o3, groupAttributeList: r2, operationType: p3 }), h3.setNetworkType(t2._groupModule.getNetworkType()).end(), bl.log("".concat(t2._className, ".deleteGroupAttributes ok. groupID:").concat(n2)), AM({ keyList: l2 });
        }).catch(function(e4) {
          return t2._groupModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            h3.setError(e4, o3, r3).end();
          }), bM(e4);
        });
      } }, { key: "getGroupAttributes", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = this._checkCachedGroupAttributes({ groupID: n2, funcName: "getGroupAttributes" });
        if (true !== o2)
          return bM(o2);
        var r2 = this._groupAttributesMap.get(n2), a2 = r2.avChatRoomKey, s2 = r2.lastUpdateTime, i2 = r2.localMainSequence, c2 = r2.remoteMainSequence, u2 = new Ih(Eh.GET_GROUP_ATTRIBUTES);
        if (u2.setMessage("groupID:".concat(n2, " localMainSequence:").concat(i2, " remoteMainSequence:").concat(c2, " keyList:").concat(e3.keyList)), Date.now() - s2 >= this.CACHE_EXPIRE_TIME || i2 < c2)
          return this._getGroupAttributes({ groupID: n2, avChatRoomKey: a2 }).then(function(o3) {
            u2.setMoreMessage("get attributes from remote. count:".concat(o3.length)).setNetworkType(t2._groupModule.getNetworkType()).end(), bl.log("".concat(t2._className, ".getGroupAttributes from remote. groupID:").concat(n2));
            var r3 = t2._getLocalGroupAttributes(e3);
            return AM({ groupAttributes: r3 });
          }).catch(function(e4) {
            return t2._groupModule.probeNetwork().then(function(t3) {
              var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
              u2.setError(e4, o3, r3).end();
            }), bM(e4);
          });
        u2.setMoreMessage("get attributes from cache").setNetworkType(this._groupModule.getNetworkType()).end(), bl.log("".concat(this._className, ".getGroupAttributes from cache. groupID:").concat(n2));
        var l2 = this._getLocalGroupAttributes(e3);
        return UM({ groupAttributes: l2 });
      } }, { key: "_getGroupAttributes", value: function(e3) {
        var n2 = this;
        return this._groupModule.request({ protocolName: O_, requestData: t({}, e3) }).then(function(t2) {
          var o2 = t2.data, r2 = o2.mainSequence, a2 = o2.groupAttributeList, s2 = M(a2);
          return Zl(r2) || n2._refreshCachedGroupAttributes({ groupID: e3.groupID, remoteMainSequence: r2, groupAttributeList: s2, operationType: "get" }), bl.log("".concat(n2._className, "._getGroupAttributes ok. groupID:").concat(e3.groupID)), a2;
        }).catch(function(e4) {
          return bM(e4);
        });
      } }, { key: "_getLocalGroupAttributes", value: function(e3) {
        var t2 = e3.groupID, n2 = e3.keyList, o2 = void 0 === n2 ? [] : n2, r2 = {};
        if (!this._groupAttributesMap.has(t2))
          return r2;
        var a2 = this._groupAttributesMap.get(t2).attributes;
        if (o2.length > 0)
          o2.forEach(function(e4) {
            a2.has(e4) && (r2[e4] = a2.get(e4).value);
          });
        else {
          var s2, i2 = S(a2.keys());
          try {
            for (i2.s(); !(s2 = i2.n()).done; ) {
              var c2 = s2.value;
              r2[c2] = a2.get(c2).value;
            }
          } catch (u2) {
            i2.e(u2);
          } finally {
            i2.f();
          }
        }
        return r2;
      } }, { key: "_refreshCachedGroupAttributes", value: function(e3) {
        var t2 = e3.groupID, n2 = e3.remoteMainSequence, o2 = e3.groupAttributeList, r2 = e3.operationType;
        if (this._groupAttributesMap.has(t2)) {
          var a2 = this._groupAttributesMap.get(t2), s2 = a2.localMainSequence;
          if ("get" === r2 || n2 - s2 == 1)
            a2.remoteMainSequence = n2, a2.localMainSequence = n2, a2.lastUpdateTime = Date.now(), this._updateCachedAttributes({ groupAttributes: a2, groupAttributeList: o2, operationType: r2 });
          else {
            if (s2 === n2)
              return;
            a2.remoteMainSequence = n2;
          }
          this._groupAttributesMap.set(t2, a2);
          var i2 = "operationType:".concat(r2, " localMainSequence:").concat(s2, " remoteMainSequence:").concat(n2);
          bl.log("".concat(this._className, "._refreshCachedGroupAttributes. ").concat(i2));
        }
      } }, { key: "_updateCachedAttributes", value: function(e3) {
        var t2 = e3.groupAttributes, n2 = e3.groupAttributeList, o2 = e3.operationType;
        "clear" !== o2 ? "delete" !== o2 ? ("init" === o2 && t2.attributes.clear(), n2.forEach(function(e4) {
          var n3 = e4.key, o3 = e4.value, r2 = e4.sequence;
          t2.attributes.set(n3, { value: o3, sequence: r2 });
        })) : n2.forEach(function(e4) {
          t2.attributes.delete(e4);
        }) : t2.attributes.clear();
      } }, { key: "_checkCachedGroupAttributes", value: function(e3) {
        var t2 = e3.groupID, n2 = e3.funcName;
        if (this._groupModule.hasLocalGroup(t2) && this._groupModule.getLocalGroupProfile(t2).type !== gr.GRP_AVCHATROOM) {
          return bl.warn("".concat(this._className, "._checkCachedGroupAttributes. ").concat("\u975E\u76F4\u64AD\u7FA4\u4E0D\u80FD\u4F7F\u7528\u7FA4\u5C5E\u6027 API")), new kM({ code: ah.CANNOT_USE_GRP_ATTR_NOT_AVCHATROOM, message: "\u975E\u76F4\u64AD\u7FA4\u4E0D\u80FD\u4F7F\u7528\u7FA4\u5C5E\u6027 API" });
        }
        var o2 = this._groupAttributesMap.get(t2);
        if (Zl(o2)) {
          var r2 = "\u5982\u679C groupID:".concat(t2, " \u662F\u76F4\u64AD\u7FA4\uFF0C\u4F7F\u7528 ").concat(n2, " \u524D\u5148\u4F7F\u7528 joinGroup \u63A5\u53E3\u7533\u8BF7\u52A0\u5165\u7FA4\u7EC4\uFF0C\u8BE6\u7EC6\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#joinGroup");
          return bl.warn("".concat(this._className, "._checkCachedGroupAttributes. ").concat(r2)), new kM({ code: ah.CANNOT_USE_GRP_ATTR_AVCHATROOM_UNJOIN, message: r2 });
        }
        return true;
      } }, { key: "_transformGroupAttributes", value: function(e3) {
        var t2 = [];
        return Object.keys(e3).forEach(function(n2) {
          t2.push({ key: n2, value: e3[n2] });
        }), t2;
      } }, { key: "_emitGroupAttributesUpdated", value: function(e3) {
        var t2 = this._getLocalGroupAttributes({ groupID: e3 });
        this._groupModule.emitOuterEvent(pr.GROUP_ATTRIBUTES_UPDATED, { groupID: e3, groupAttributes: t2 });
      } }, { key: "reset", value: function() {
        this._groupAttributesMap.clear(), this.CACHE_EXPIRE_TIME = 3e4;
      } }]), e2;
    }(), Ev = function() {
      function e2(t2) {
        o(this, e2);
        var n2 = t2.manager, r2 = t2.groupID, a2 = t2.onInit, s2 = t2.onSuccess, i2 = t2.onFail;
        this._className = "Polling", this._manager = n2, this._groupModule = n2._groupModule, this._onInit = a2, this._onSuccess = s2, this._onFail = i2, this._groupID = r2, this._timeoutID = -1, this._isRunning = false, this._protocolName = y_;
      }
      return a(e2, [{ key: "start", value: function() {
        var e3 = this._groupModule.isLoggedIn();
        e3 || (this._protocolName = I_), bl.log("".concat(this._className, ".start pollingInterval:").concat(this._manager.getPollingInterval(), " isLoggedIn:").concat(e3)), this._isRunning = true, this._request();
      } }, { key: "isRunning", value: function() {
        return this._isRunning;
      } }, { key: "_request", value: function() {
        var e3 = this, t2 = this._onInit(this._groupID);
        this._groupModule.request({ protocolName: this._protocolName, requestData: t2 }).then(function(t3) {
          e3._onSuccess(e3._groupID, t3), e3.isRunning() && (clearTimeout(e3._timeoutID), e3._timeoutID = setTimeout(e3._request.bind(e3), e3._manager.getPollingInterval()));
        }).catch(function(t3) {
          e3._onFail(e3._groupID, t3), e3.isRunning() && (clearTimeout(e3._timeoutID), e3._timeoutID = setTimeout(e3._request.bind(e3), e3._manager.MAX_POLLING_INTERVAL));
        });
      } }, { key: "stop", value: function() {
        bl.log("".concat(this._className, ".stop")), this._timeoutID > 0 && (clearTimeout(this._timeoutID), this._timeoutID = -1), this._isRunning = false;
      } }]), e2;
    }(), Tv = { 3: true, 4: true, 5: true, 6: true, 17: true }, Sv = function() {
      function e2(t2) {
        o(this, e2), this._groupModule = t2, this._className = "AVChatRoomHandler", this._joinedGroupMap = /* @__PURE__ */ new Map(), this._pollingRequestInfoMap = /* @__PURE__ */ new Map(), this._pollingInstanceMap = /* @__PURE__ */ new Map(), this.sequencesLinkedList = new dv(200), this.messageIDLinkedList = new dv(100), this.receivedMessageCount = 0, this._reportMessageStackedCount = 0, this._onlineMemberCountMap = /* @__PURE__ */ new Map(), this.DEFAULT_EXPIRE_TIME = 60, this.DEFAULT_POLLING_INTERVAL = 300, this.MAX_POLLING_INTERVAL = 2e3, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0, this._startBroadcastSeq = 1, this._broadcastMessageIDMap = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "hasJoinedAVChatRoom", value: function() {
        return this._joinedGroupMap.size > 0;
      } }, { key: "checkJoinedAVChatRoomByID", value: function(e3) {
        return this._joinedGroupMap.has(e3);
      } }, { key: "getJoinedAVChatRoom", value: function() {
        return this._joinedGroupMap.size > 0 ? M(this._joinedGroupMap.keys()) : null;
      } }, { key: "_updateRequestData", value: function(e3) {
        var n2 = this._pollingRequestInfoMap.get(e3);
        return e3 === M(this._pollingInstanceMap.keys())[0] ? t(t({}, n2), {}, { startBroadcastSeq: this._startBroadcastSeq }) : t({}, n2);
      } }, { key: "_handleSuccess", value: function(e3, t2) {
        var n2 = t2.data, o2 = n2.key, r2 = n2.nextSeq, a2 = n2.rspMsgList, s2 = n2.errorCode, i2 = n2.nextBroadcastSeq, c2 = n2.broadcastMessageList;
        if (0 !== s2) {
          var u2 = this._pollingRequestInfoMap.get(e3), l2 = new Ih(Eh.LONG_POLLING_AV_ERROR), d2 = u2 ? "".concat(u2.key, "-").concat(u2.startSeq) : "requestInfo is undefined";
          l2.setMessage("".concat(e3, "-").concat(d2, "-").concat(t2.errorInfo)).setCode(t2.errorCode).setNetworkType(this._groupModule.getNetworkType()).end(true);
        } else {
          if (!this.checkJoinedAVChatRoomByID(e3))
            return;
          zl(o2) && $l(r2) && this._pollingRequestInfoMap.set(e3, { key: o2, startSeq: r2 }), $l(i2) && i2 > this._startBroadcastSeq && (this._startBroadcastSeq = i2), Ql(a2) && a2.length > 0 ? (a2.forEach(function(e4) {
            e4.to = e4.groupID;
          }), this.onMessage(a2)) : (this._pollingNoMessageCount += 1, this._pollingNoMessageCount === this.DEFAULT_POLLING_NO_MESSAGE_COUNT && (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL + this.DEFAULT_POLLING_INTERVAL_PLUS)), this._onBroadcastMessage(c2);
        }
      } }, { key: "_handleFailure", value: function(e3, t2) {
      } }, { key: "onMessage", value: function(e3) {
        if (Ql(e3) && 0 !== e3.length) {
          0 !== this._pollingNoMessageCount && (this._pollingNoMessageCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL);
          var t2 = null, n2 = [], o2 = this._getModule(cg), r2 = this._getModule(Tg), a2 = e3.length;
          a2 > 1 && e3.sort(function(e4, t3) {
            return e4.sequence - t3.sequence;
          });
          for (var s2 = this._getModule(ug), i2 = 0; i2 < a2; i2++)
            if (Tv[e3[i2].event]) {
              this.receivedMessageCount += 1, t2 = this.packMessage(e3[i2], e3[i2].event);
              var c2 = 1 === e3[i2].isModified, u2 = 1 === e3[i2].isHistoryMessage;
              if ((s2.isUnlimitedAVChatRoom() || !this.sequencesLinkedList.has(t2.sequence)) && !this.messageIDLinkedList.has(t2.ID)) {
                var l2 = t2.conversationID;
                if (this.receivedMessageCount % 50 == 0 ? this._getModule(vg).detectFirstRound(l2, this.sequencesLinkedList.data()) : this.receivedMessageCount % 80 == 0 && this._getModule(vg).detectSecondRound(l2, this.sequencesLinkedList.data()), null !== this.sequencesLinkedList.tail()) {
                  var d2 = this.sequencesLinkedList.tail().value, p3 = t2.sequence - d2;
                  p3 > 1 && p3 <= 20 ? this._getModule(vg).onMessageMaybeLost(l2, d2 + 1, p3 - 1) : p3 < -1 && p3 >= -20 && this._getModule(vg).onMessageMaybeLost(l2, t2.sequence + 1, Math.abs(p3) - 1);
                }
                this.sequencesLinkedList.set(t2.sequence), this.messageIDLinkedList.set(t2.ID);
                var g2 = false;
                if (this._isMessageSentByCurrentInstance(t2) ? c2 && (g2 = true, t2.isModified = c2, o2.updateMessageIsModifiedProperty(t2)) : g2 = true, g2) {
                  if (t2.conversationType === gr.CONV_SYSTEM && 5 === t2.payload.operationType && this._onGroupDismissed(t2.payload.groupProfile.groupID), !u2 && t2.conversationType !== gr.CONV_SYSTEM) {
                    var _2 = t2.conversationID.replace(gr.CONV_GROUP, "");
                    this._pollingInstanceMap.has(_2) ? r2.addMessageSequence({ key: fh, message: t2 }) : (t2.type !== gr.MSG_GRP_TIP && t2.clientTime > 0 && r2.addMessageDelay(t2.clientTime), r2.addMessageSequence({ key: hh, message: t2 }));
                  }
                  n2.push(t2);
                }
              }
            } else
              bl.warn("".concat(this._className, ".onMessage \u672A\u5904\u7406\u7684 event \u7C7B\u578B: ").concat(e3[i2].event));
          if (0 !== n2.length) {
            this._groupModule.filterModifiedMessage(n2);
            var h3 = this.packConversationOption(n2);
            if (h3.length > 0)
              this._getModule(cg).onNewMessage({ conversationOptionsList: h3, isInstantMessage: true });
            bl.debug("".concat(this._className, ".onMessage count:").concat(n2.length)), this._checkMessageStacked(n2);
            var f2 = this._groupModule.filterUnmodifiedMessage(n2);
            f2.length > 0 && this._groupModule.emitOuterEvent(pr.MESSAGE_RECEIVED, f2), n2.length = 0;
          }
        }
      } }, { key: "_onGroupDismissed", value: function(e3) {
        bl.log("".concat(this._className, "._onGroupDismissed groupID:").concat(e3)), this._groupModule.deleteLocalGroupAndConversation(e3), this.reset(e3);
      } }, { key: "_checkMessageStacked", value: function(e3) {
        var t2 = e3.length;
        t2 >= 100 && (bl.warn("".concat(this._className, "._checkMessageStacked \u76F4\u64AD\u7FA4\u6D88\u606F\u5806\u79EF\u6570:").concat(e3.length, '\uFF01\u53EF\u80FD\u4F1A\u5BFC\u81F4\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F\u6E32\u67D3\u65F6\u9047\u5230 "Dom limit exceeded" \u7684\u9519\u8BEF\uFF0C\u5EFA\u8BAE\u63A5\u5165\u4FA7\u6B64\u65F6\u53EA\u6E32\u67D3\u6700\u8FD1\u768410\u6761\u6D88\u606F')), this._reportMessageStackedCount < 5 && (new Ih(Eh.MESSAGE_STACKED).setNetworkType(this._groupModule.getNetworkType()).setMessage("count:".concat(t2, " groupID:").concat(M(this._joinedGroupMap.keys()))).setLevel("warning").end(), this._reportMessageStackedCount += 1));
      } }, { key: "_isMessageSentByCurrentInstance", value: function(e3) {
        return !!this._getModule(cg).isMessageSentByCurrentInstance(e3);
      } }, { key: "packMessage", value: function(e3, t2) {
        e3.currentUser = this._groupModule.getMyUserID(), e3.conversationType = 5 === t2 ? gr.CONV_SYSTEM : gr.CONV_GROUP, e3.isSystemMessage = !!e3.isSystemMessage;
        var n2 = new CM(e3), o2 = this.packElements(e3, t2);
        return n2.setElement(o2), n2;
      } }, { key: "packElements", value: function(e3, n2) {
        return 4 === n2 || 6 === n2 ? (this._updateMemberCountByGroupTips(e3), this._onGroupAttributesUpdated(e3), { type: gr.MSG_GRP_TIP, content: t(t({}, e3.elements), {}, { groupProfile: e3.groupProfile }) }) : 5 === n2 ? { type: gr.MSG_GRP_SYS_NOTICE, content: t(t({}, e3.elements), {}, { groupProfile: t(t({}, e3.groupProfile), {}, { groupID: e3.groupID }) }) } : this._getModule(gg).parseElements(e3.elements, e3.from);
      } }, { key: "packConversationOption", value: function(e3) {
        for (var t2 = /* @__PURE__ */ new Map(), n2 = 0; n2 < e3.length; n2++) {
          var o2 = e3[n2], r2 = o2.conversationID;
          if (t2.has(r2)) {
            var a2 = t2.get(r2);
            a2.lastMessage = o2, "in" === o2.flow && a2.unreadCount++;
          } else
            t2.set(r2, { conversationID: o2.conversationID, unreadCount: "out" === o2.flow ? 0 : 1, type: o2.conversationType, subType: o2.conversationSubType, lastMessage: o2 });
        }
        return M(t2.values());
      } }, { key: "_updateMemberCountByGroupTips", value: function(e3) {
        var t2 = e3.groupProfile.groupID, n2 = e3.elements.onlineMemberInfo, o2 = void 0 === n2 ? void 0 : n2;
        if (!xd(o2)) {
          var r2 = o2.onlineMemberNum, a2 = void 0 === r2 ? 0 : r2, s2 = o2.expireTime, i2 = void 0 === s2 ? this.DEFAULT_EXPIRE_TIME : s2, c2 = this._onlineMemberCountMap.get(t2) || {}, u2 = Date.now();
          xd(c2) ? Object.assign(c2, { lastReqTime: 0, lastSyncTime: 0, latestUpdateTime: u2, memberCount: a2, expireTime: i2 }) : (c2.latestUpdateTime = u2, c2.memberCount = a2), bl.debug("".concat(this._className, "._updateMemberCountByGroupTips info:"), c2), this._onlineMemberCountMap.set(t2, c2);
        }
      } }, { key: "_onBroadcastMessage", value: function(e3) {
        if (!xd(e3)) {
          for (var t2 = [], n2 = e3.length, o2 = null, r2 = 0; r2 < n2; r2++)
            Tv[e3[r2].event] ? ((o2 = this.packMessage(e3[r2], e3[r2].event)).isBroadcastMessage = true, this._broadcastMessageIDMap.has(o2.ID) || (t2.push(o2), this._broadcastMessageIDMap.set(o2.ID, 1))) : bl.warn("".concat(this._className, "._onBroadcastMessage \u672A\u5904\u7406\u7684 event \u7C7B\u578B: ").concat(e3[r2].event));
          t2.length > 0 && this._groupModule.emitOuterEvent(pr.MESSAGE_RECEIVED, t2);
        }
      } }, { key: "start", value: function(e3) {
        if (this._pollingInstanceMap.has(e3)) {
          var t2 = this._pollingInstanceMap.get(e3);
          t2.isRunning() || t2.start();
        } else {
          var n2 = new Ev({ manager: this, groupID: e3, onInit: this._updateRequestData.bind(this), onSuccess: this._handleSuccess.bind(this), onFail: this._handleFailure.bind(this) });
          n2.start(), this._pollingInstanceMap.set(e3, n2), bl.log("".concat(this._className, ".start groupID:").concat(e3));
        }
      } }, { key: "handleJoinResult", value: function(e3) {
        var t2 = this;
        return this._preCheck().then(function() {
          var n2 = e3.longPollingKey, o2 = e3.group, r2 = o2.groupID;
          return t2._joinedGroupMap.set(r2, o2), t2._groupModule.updateGroupMap([o2]), t2._groupModule.deleteUnjoinedAVChatRoom(r2), t2._groupModule.emitGroupListUpdate(true, false), Zl(n2) ? UM({ status: Bl, group: o2 }) : Promise.resolve();
        });
      } }, { key: "startRunLoop", value: function(e3) {
        var t2 = this;
        return this.handleJoinResult(e3).then(function() {
          var n2 = e3.longPollingKey, o2 = e3.group, r2 = e3.startSeq, a2 = void 0 === r2 ? 0 : r2, s2 = o2.groupID;
          return t2._pollingRequestInfoMap.set(s2, { key: n2, startSeq: a2 }), t2.start(s2), t2._groupModule.isLoggedIn() ? UM({ status: Bl, group: o2 }) : UM({ status: Bl });
        });
      } }, { key: "_preCheck", value: function() {
        if (this._getModule(ug).isUnlimitedAVChatRoom())
          return Promise.resolve();
        if (!this.hasJoinedAVChatRoom())
          return Promise.resolve();
        var e3 = m(this._joinedGroupMap.entries().next().value, 2), t2 = e3[0], n2 = e3[1];
        if (this._groupModule.isLoggedIn()) {
          if (!(n2.selfInfo.role === gr.GRP_MBR_ROLE_OWNER || n2.ownerID === this._groupModule.getMyUserID()))
            return this._groupModule.quitGroup(t2);
          this._groupModule.deleteLocalGroupAndConversation(t2);
        } else
          this._groupModule.deleteLocalGroupAndConversation(t2);
        return this.reset(t2), Promise.resolve();
      } }, { key: "joinWithoutAuth", value: function(e3) {
        var t2 = this, n2 = e3.groupID, o2 = "".concat(this._className, ".joinWithoutAuth"), r2 = new Ih(Eh.JOIN_WITHOUT_AUTH);
        return this._groupModule.request({ protocolName: r_, requestData: e3 }).then(function(e4) {
          var a2 = e4.data.longPollingKey;
          if (t2._groupModule.probeNetwork().then(function(e5) {
            var t3 = m(e5, 2), o3 = (t3[0], t3[1]);
            r2.setNetworkType(o3).setMessage("groupID:".concat(n2, " longPollingKey:").concat(a2)).end(true);
          }), Zl(a2))
            return bM(new kM({ code: ah.CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN, message: sh.CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN }));
          bl.log("".concat(o2, " ok. groupID:").concat(n2)), t2._getModule(cg).setCompleted("".concat(gr.CONV_GROUP).concat(n2));
          var s2 = new gv({ groupID: n2 });
          return t2.startRunLoop({ group: s2, longPollingKey: a2 }), AM({ status: Bl });
        }).catch(function(e4) {
          return bl.error("".concat(o2, " failed. groupID:").concat(n2, " error:"), e4), t2._groupModule.probeNetwork().then(function(t3) {
            var o3 = m(t3, 2), a2 = o3[0], s2 = o3[1];
            r2.setError(e4, a2, s2).setMessage("groupID:".concat(n2)).end(true);
          }), bM(e4);
        }).finally(function() {
          t2._groupModule.getModule(dg).reportAtOnce();
        });
      } }, { key: "getGroupOnlineMemberCount", value: function(e3) {
        var t2 = this._onlineMemberCountMap.get(e3) || {}, n2 = Date.now();
        return xd(t2) || n2 - t2.lastSyncTime > 1e3 * t2.expireTime && n2 - t2.latestUpdateTime > 1e4 && n2 - t2.lastReqTime > 3e3 ? (t2.lastReqTime = n2, this._onlineMemberCountMap.set(e3, t2), this._getGroupOnlineMemberCount(e3).then(function(e4) {
          return AM({ memberCount: e4.memberCount });
        }).catch(function(e4) {
          return bM(e4);
        })) : UM({ memberCount: t2.memberCount });
      } }, { key: "_getGroupOnlineMemberCount", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, "._getGroupOnlineMemberCount");
        return this._groupModule.request({ protocolName: E_, requestData: { groupID: e3 } }).then(function(o2) {
          var r2 = t2._onlineMemberCountMap.get(e3) || {}, a2 = o2.data, s2 = a2.onlineMemberNum, i2 = void 0 === s2 ? 0 : s2, c2 = a2.expireTime, u2 = void 0 === c2 ? t2.DEFAULT_EXPIRE_TIME : c2;
          bl.log("".concat(n2, " ok. groupID:").concat(e3, " memberCount:").concat(i2, " expireTime:").concat(u2));
          var l2 = Date.now();
          return xd(r2) && (r2.lastReqTime = l2), t2._onlineMemberCountMap.set(e3, Object.assign(r2, { lastSyncTime: l2, latestUpdateTime: l2, memberCount: i2, expireTime: u2 })), { memberCount: i2 };
        }).catch(function(o2) {
          return bl.warn("".concat(n2, " failed. error:"), o2), new Ih(Eh.GET_GROUP_ONLINE_MEMBER_COUNT).setCode(o2.code).setMessage("groupID:".concat(e3, " error:").concat(JSON.stringify(o2))).setNetworkType(t2._groupModule.getNetworkType()).end(), Promise.reject(o2);
        });
      } }, { key: "_onGroupAttributesUpdated", value: function(e3) {
        var t2 = e3.groupID, n2 = e3.elements, o2 = n2.operationType, r2 = n2.newGroupProfile;
        if (6 === o2) {
          var a2 = (void 0 === r2 ? void 0 : r2).groupAttributeOption;
          xd(a2) || this._groupModule.onGroupAttributesUpdated({ groupID: t2, groupAttributeOption: a2 });
        }
      } }, { key: "_getModule", value: function(e3) {
        return this._groupModule.getModule(e3);
      } }, { key: "setPollingInterval", value: function(e3) {
        Zl(e3) || ($l(e3) ? this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = e3 : this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = parseInt(e3, 10));
      } }, { key: "setPollingIntervalPlus", value: function(e3) {
        Zl(e3) || ($l(e3) ? this.DEFAULT_POLLING_INTERVAL_PLUS = e3 : this.DEFAULT_POLLING_INTERVAL_PLUS = parseInt(e3, 10));
      } }, { key: "setPollingNoMessageCount", value: function(e3) {
        Zl(e3) || ($l(e3) ? this.DEFAULT_POLLING_NO_MESSAGE_COUNT = e3 : this.DEFAULT_POLLING_NO_MESSAGE_COUNT = parseInt(e3, 10));
      } }, { key: "getPollingInterval", value: function() {
        return this._pollingInterval;
      } }, { key: "reset", value: function(e3) {
        if (e3) {
          bl.log("".concat(this._className, ".reset groupID:").concat(e3));
          var t2 = this._pollingInstanceMap.get(e3);
          t2 && t2.stop(), this._pollingInstanceMap.delete(e3), this._joinedGroupMap.delete(e3), this._pollingRequestInfoMap.delete(e3), this._onlineMemberCountMap.delete(e3);
        } else {
          bl.log("".concat(this._className, ".reset all"));
          var n2, o2 = S(this._pollingInstanceMap.values());
          try {
            for (o2.s(); !(n2 = o2.n()).done; ) {
              n2.value.stop();
            }
          } catch (r2) {
            o2.e(r2);
          } finally {
            o2.f();
          }
          this._pollingInstanceMap.clear(), this._joinedGroupMap.clear(), this._pollingRequestInfoMap.clear(), this._onlineMemberCountMap.clear(), this._broadcastMessageIDMap.clear();
        }
        this.sequencesLinkedList.reset(), this.messageIDLinkedList.reset(), this.receivedMessageCount = 0, this._reportMessageStackedCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = 300, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0;
      } }]), e2;
    }(), Cv = 1, Av = 15, Dv = function() {
      function e2(t2) {
        o(this, e2), this._groupModule = t2, this._className = "GroupSystemNoticeHandler", this.pendencyMap = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "onNewGroupSystemNotice", value: function(e3) {
        var t2 = e3.dataList, n2 = e3.isSyncingEnded, o2 = e3.isInstantMessage;
        bl.debug("".concat(this._className, ".onReceiveSystemNotice count:").concat(t2.length));
        var r2 = this.newSystemNoticeStoredAndSummary({ notifiesList: t2, isInstantMessage: o2 }), a2 = r2.eventDataList, s2 = r2.result;
        a2.length > 0 && (this._groupModule.getModule(cg).onNewMessage({ conversationOptionsList: a2, isInstantMessage: o2 }), this._onReceivedGroupSystemNotice({ result: s2, isInstantMessage: o2 }));
        o2 ? s2.length > 0 && this._groupModule.emitOuterEvent(pr.MESSAGE_RECEIVED, s2) : true === n2 && this._clearGroupSystemNotice();
      } }, { key: "newSystemNoticeStoredAndSummary", value: function(e3) {
        var n2 = e3.notifiesList, o2 = e3.isInstantMessage, r2 = null, a2 = n2.length, s2 = 0, i2 = [], c2 = { conversationID: gr.CONV_SYSTEM, unreadCount: 0, type: gr.CONV_SYSTEM, subType: null, lastMessage: null };
        for (s2 = 0; s2 < a2; s2++) {
          var u2 = n2[s2], l2 = u2.groupProfile, d2 = l2.communityType, p3 = void 0 === d2 ? 0 : d2, g2 = l2.topicID, _2 = void 0 === g2 ? void 0 : g2, h3 = u2.elements, f2 = h3.topicIDList, m2 = void 0 === f2 ? void 0 : f2, M2 = h3.operationType;
          if (!(2 !== p3 || xd(_2) && xd(m2))) {
            if ([17, 18, 20].includes(M2)) {
              this._handleTopicSystemNotice(u2);
              continue;
            }
            xd(_2) || (u2.to = _2);
          }
          if (u2.elements.operationType !== Av)
            u2.currentUser = this._groupModule.getMyUserID(), u2.conversationType = gr.CONV_SYSTEM, u2.conversationID = gr.CONV_SYSTEM, (r2 = new CM(u2)).setElement({ type: gr.MSG_GRP_SYS_NOTICE, content: t(t({}, u2.elements), {}, { groupProfile: t({}, u2.groupProfile) }) }), r2.isSystemMessage = true, (1 === r2.sequence && 1 === r2.random || 2 === r2.sequence && 2 === r2.random) && (r2.sequence = ld(), r2.random = ld(), r2.generateMessageID(), bl.log("".concat(this._className, ".newSystemNoticeStoredAndSummary sequence and random maybe duplicated, regenerate. ID:").concat(r2.ID))), this._groupModule.getModule(cg).pushIntoNoticeResult(i2, r2) && (o2 ? c2.unreadCount++ : r2.setIsRead(true), c2.subType = r2.conversationSubType);
        }
        return c2.lastMessage = i2[i2.length - 1], { eventDataList: i2.length > 0 ? [c2] : [], result: i2 };
      } }, { key: "_clearGroupSystemNotice", value: function() {
        var e3 = this;
        this.getPendencyList().then(function(t2) {
          t2.forEach(function(t3) {
            e3.pendencyMap.set("".concat(t3.from, "_").concat(t3.groupID, "_").concat(t3.to), t3);
          });
          var n2 = e3._groupModule.getModule(cg).getLocalMessageList(gr.CONV_SYSTEM), o2 = [];
          n2.forEach(function(t3) {
            var n3 = t3.payload, r2 = n3.operatorID, a2 = n3.operationType, s2 = n3.groupProfile;
            if (a2 === Cv) {
              var i2 = "".concat(r2, "_").concat(s2.groupID, "_").concat(s2.to), c2 = e3.pendencyMap.get(i2);
              c2 && $l(c2.handled) && 0 !== c2.handled && o2.push(t3);
            }
          }), e3.deleteGroupSystemNotice({ messageList: o2 });
        });
      } }, { key: "deleteGroupSystemNotice", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, ".deleteGroupSystemNotice");
        return Ql(e3.messageList) && 0 !== e3.messageList.length ? (bl.log("".concat(n2, " ") + e3.messageList.map(function(e4) {
          return e4.ID;
        })), this._groupModule.request({ protocolName: v_, requestData: { messageListToDelete: e3.messageList.map(function(e4) {
          return { from: gr.CONV_SYSTEM, messageSeq: e4.clientSequence, messageRandom: e4.random };
        }) } }).then(function() {
          bl.log("".concat(n2, " ok"));
          var o2 = t2._groupModule.getModule(cg);
          return e3.messageList.forEach(function(e4) {
            o2.deleteLocalMessage(e4);
          }), AM();
        }).catch(function(e4) {
          return bl.error("".concat(n2, " error:"), e4), bM(e4);
        })) : UM();
      } }, { key: "getPendencyList", value: function(e3) {
        var t2 = this;
        return this._groupModule.request({ protocolName: M_, requestData: { startTime: e3 && e3.startTime ? e3.startTime : 0, limit: e3 && e3.limit ? e3.limit : 10, handleAccount: this._groupModule.getMyUserID() } }).then(function(e4) {
          var n2 = e4.data.pendencyList;
          return 0 !== e4.data.nextStartTime ? t2.getPendencyList({ startTime: e4.data.nextStartTime }).then(function(e5) {
            return [].concat(M(n2), M(e5));
          }) : n2;
        });
      } }, { key: "_onReceivedGroupSystemNotice", value: function(e3) {
        var t2 = this, n2 = e3.result;
        e3.isInstantMessage && n2.forEach(function(e4) {
          switch (e4.payload.operationType) {
            case 1:
              break;
            case 2:
              t2._onApplyGroupRequestAgreed(e4);
              break;
            case 3:
              break;
            case 4:
              t2._onMemberKicked(e4);
              break;
            case 5:
              t2._onGroupDismissed(e4);
              break;
            case 6:
              break;
            case 7:
              t2._onInviteGroup(e4);
              break;
            case 8:
              t2._onQuitGroup(e4);
              break;
            case 9:
              t2._onSetManager(e4);
              break;
            case 10:
              t2._onDeleteManager(e4);
              break;
            case 11:
            case 12:
            case 15:
              break;
            case 20:
              t2._onMessageRemindTypeSynced(e4);
          }
        });
      } }, { key: "_onApplyGroupRequestAgreed", value: function(e3) {
        var t2 = this, n2 = e3.payload.groupProfile.groupID;
        this._groupModule.hasLocalGroup(n2) || this._groupModule.getGroupProfile({ groupID: n2 }).then(function(e4) {
          var n3 = e4.data.group;
          if (n3) {
            t2._groupModule.updateGroupMap([n3]);
            var o2 = !n3.isSupportTopic;
            t2._groupModule.emitGroupListUpdate(true, o2);
          }
        });
      } }, { key: "_onMemberKicked", value: function(e3) {
        var t2 = e3.payload.groupProfile.groupID;
        this._groupModule.hasLocalGroup(t2) && this._groupModule.deleteLocalGroupAndConversation(t2);
      } }, { key: "_onGroupDismissed", value: function(e3) {
        var t2 = e3.payload.groupProfile.groupID;
        this._groupModule.hasLocalGroup(t2) && this._groupModule.deleteLocalGroupAndConversation(t2);
        var n2 = this._groupModule._AVChatRoomHandler;
        n2 && n2.checkJoinedAVChatRoomByID(t2) && n2.reset(t2);
      } }, { key: "_onInviteGroup", value: function(e3) {
        var t2 = this, n2 = e3.payload.groupProfile.groupID;
        this._groupModule.hasLocalGroup(n2) || this._groupModule.getGroupProfile({ groupID: n2 }).then(function(e4) {
          var n3 = e4.data.group;
          n3 && (t2._groupModule.updateGroupMap([n3]), t2._groupModule.emitGroupListUpdate());
        });
      } }, { key: "_onQuitGroup", value: function(e3) {
        var t2 = e3.payload.groupProfile.groupID;
        this._groupModule.hasLocalGroup(t2) && this._groupModule.deleteLocalGroupAndConversation(t2);
      } }, { key: "_onSetManager", value: function(e3) {
        var t2 = e3.payload.groupProfile, n2 = t2.to, o2 = t2.groupID, r2 = this._groupModule.getModule(sg).getLocalGroupMemberInfo(o2, n2);
        r2 && r2.updateRole(gr.GRP_MBR_ROLE_ADMIN);
      } }, { key: "_onDeleteManager", value: function(e3) {
        var t2 = e3.payload.groupProfile, n2 = t2.to, o2 = t2.groupID, r2 = this._groupModule.getModule(sg).getLocalGroupMemberInfo(o2, n2);
        r2 && r2.updateRole(gr.GRP_MBR_ROLE_MEMBER);
      } }, { key: "_onMessageRemindTypeSynced", value: function(e3) {
        var t2 = e3.payload.groupProfile.groupID, n2 = e3.payload.messageRemindType;
        this._groupModule.getModule(cg).onGroupMessageRemindTypeSynced({ groupID: t2, messageRemindType: n2 });
      } }, { key: "_handleTopicSystemNotice", value: function(e3) {
        var t2 = e3.groupProfile, n2 = t2.groupID, o2 = t2.topicID, r2 = e3.elements, a2 = r2.operationType, s2 = r2.topicIDList, i2 = r2.messageRemindType, c2 = this._groupModule.getModule(ig);
        17 === a2 ? c2.onTopicCreated({ groupID: n2, topicID: o2 }) : 18 === a2 ? c2.onTopicDeleted({ groupID: n2, topicIDList: s2 }) : 20 === a2 && c2.onTopicMessageRemindTypeUpdated({ groupID: n2, topicID: o2, messageRemindType: i2 });
      } }, { key: "reset", value: function() {
        this.pendencyMap.clear();
      } }]), e2;
    }(), Nv = ["relayFlag"], Ov = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        return o(this, r2), (t2 = n2.call(this, e3))._className = "GroupModule", t2._commonGroupHandler = null, t2._AVChatRoomHandler = null, t2._groupSystemNoticeHandler = null, t2._commonGroupHandler = new vv(_(t2)), t2._groupAttributesHandler = new Iv(_(t2)), t2._AVChatRoomHandler = new Sv(_(t2)), t2._groupTipsHandler = new Mv(_(t2)), t2._groupSystemNoticeHandler = new Dv(_(t2)), t2.groupMap = /* @__PURE__ */ new Map(), t2._unjoinedAVChatRoomList = /* @__PURE__ */ new Map(), t2._receiptDetailCompleteMap = /* @__PURE__ */ new Map(), t2.getInnerEmitterInstance().on(ev, t2._onCloudConfigUpdated, _(t2)), t2;
      }
      return a(r2, [{ key: "_onCloudConfigUpdated", value: function() {
        var e3 = this.getCloudConfig("polling_interval"), t2 = this.getCloudConfig("polling_interval_plus"), n3 = this.getCloudConfig("polling_no_msg_count");
        this._AVChatRoomHandler && (bl.log("".concat(this._className, "._onCloudConfigUpdated pollingInterval:").concat(e3) + " pollingIntervalPlus:".concat(t2, " pollingNoMessageCount:").concat(n3)), this._AVChatRoomHandler.setPollingInterval(e3), this._AVChatRoomHandler.setPollingIntervalPlus(t2), this._AVChatRoomHandler.setPollingNoMessageCount(n3));
      } }, { key: "onCheckTimer", value: function(e3) {
        this.isLoggedIn() && (this._commonGroupHandler.onCheckTimer(e3), this._groupTipsHandler.onCheckTimer(e3));
      } }, { key: "guardForAVChatRoom", value: function(e3) {
        var t2 = this;
        if (e3.conversationType === gr.CONV_GROUP) {
          var n3 = Ed(e3.to) ? wd(e3.to) : e3.to;
          return this.hasLocalGroup(n3) ? UM() : this.getGroupProfile({ groupID: n3 }).then(function(o2) {
            var r3 = o2.data.group.type;
            if (bl.log("".concat(t2._className, ".guardForAVChatRoom. groupID:").concat(n3, " type:").concat(r3)), r3 === gr.GRP_AVCHATROOM) {
              var a2 = "userId:".concat(e3.from, " \u672A\u52A0\u5165\u7FA4 groupID:").concat(n3, "\u3002\u53D1\u6D88\u606F\u524D\u5148\u4F7F\u7528 joinGroup \u63A5\u53E3\u7533\u8BF7\u52A0\u7FA4\uFF0C\u8BE6\u7EC6\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#joinGroup");
              return bl.warn("".concat(t2._className, ".guardForAVChatRoom sendMessage not allowed. ").concat(a2)), bM(new kM({ code: ah.MESSAGE_SEND_FAIL, message: a2, data: { message: e3 } }));
            }
            return UM();
          });
        }
        return UM();
      } }, { key: "checkJoinedAVChatRoomByID", value: function(e3) {
        return !!this._AVChatRoomHandler && this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e3);
      } }, { key: "onNewGroupMessage", value: function(e3) {
        this._commonGroupHandler && this._commonGroupHandler.onNewGroupMessage(e3);
      } }, { key: "updateNextMessageSeq", value: function(e3) {
        var t2 = this;
        if (Ql(e3)) {
          var n3 = this.getModule(ig);
          e3.forEach(function(e4) {
            var o2 = e4.conversationID.replace(gr.CONV_GROUP, "");
            if (Ed(o2)) {
              var r3 = o2, a2 = e4.lastMessage.sequence + 1;
              o2 = wd(r3);
              var s2 = n3.getLocalTopic(o2, r3);
              s2 && (s2.updateNextMessageSeq(a2), s2.updateLastMessage(e4.lastMessage));
            }
            t2.groupMap.has(o2) && (t2.groupMap.get(o2).nextMessageSeq = e4.lastMessage.sequence + 1);
          });
        }
      } }, { key: "onNewGroupTips", value: function(e3) {
        this._groupTipsHandler && this._groupTipsHandler.onNewGroupTips(e3);
      } }, { key: "onGroupMessageRevoked", value: function(e3) {
        this._commonGroupHandler && this._commonGroupHandler.onGroupMessageRevoked(e3);
      } }, { key: "onNewGroupSystemNotice", value: function(e3) {
        this._groupSystemNoticeHandler && this._groupSystemNoticeHandler.onNewGroupSystemNotice(e3);
      } }, { key: "onGroupMessageReadNotice", value: function(e3) {
        var t2 = this;
        e3.dataList.forEach(function(e4) {
          var n3 = e4.elements.groupMessageReadNotice;
          if (!Zl(n3)) {
            var o2 = t2.getModule(cg);
            n3.forEach(function(e5) {
              var n4 = e5.groupID, r3 = e5.topicID, a2 = void 0 === r3 ? void 0 : r3, s2 = e5.lastMessageSeq;
              bl.debug("".concat(t2._className, ".onGroupMessageReadNotice groupID:").concat(n4, " lastMessageSeq:").concat(s2));
              var i2 = "".concat(gr.CONV_GROUP).concat(n4), c2 = true;
              xd(a2) || (i2 = "".concat(gr.CONV_GROUP).concat(a2), c2 = false), o2.updateIsReadAfterReadReport({ conversationID: i2, lastMessageSeq: s2 }), o2.updateUnreadCount(i2, c2), o2.clearGroupAtInfoList(i2, c2);
            });
          }
        });
      } }, { key: "onReadReceiptList", value: function(e3) {
        var t2 = this;
        bl.debug("".concat(this._className, ".onReadReceiptList options:"), JSON.stringify(e3)), e3.dataList.forEach(function(e4) {
          var n3 = e4.groupProfile, o2 = e4.elements, r3 = n3.groupID, a2 = t2.getModule(cg), s2 = o2.readReceiptList;
          a2.updateReadReceiptInfo({ groupID: r3, readReceiptList: s2 });
        });
      } }, { key: "onGroupMessageModified", value: function(e3) {
        bl.debug("".concat(this._className, ".onGroupMessageModified options:"), JSON.stringify(e3));
        var n3 = this.getModule(cg);
        e3.dataList.forEach(function(e4) {
          n3.onMessageModified(t(t({}, e4), {}, { conversationType: gr.CONV_GROUP, to: e4.topicID ? e4.topicID : e4.groupID }));
        });
      } }, { key: "deleteGroupSystemNotice", value: function(e3) {
        this._groupSystemNoticeHandler && this._groupSystemNoticeHandler.deleteGroupSystemNotice(e3);
      } }, { key: "initGroupMap", value: function(e3) {
        this.groupMap.set(e3.groupID, new gv(e3));
      } }, { key: "deleteGroup", value: function(e3) {
        this.groupMap.delete(e3);
      } }, { key: "updateGroupMap", value: function(e3) {
        var t2, n3 = this, o2 = this.getModule(cg);
        e3.forEach(function(e4) {
          t2 = e4.groupID, n3.groupMap.has(t2) ? n3.groupMap.get(t2).updateGroup(e4) : (n3.groupMap.set(t2, new gv(e4)), o2.deleteGroupRomaingMessageInfo(t2));
        });
        var r3, a2 = this.getMyUserID(), s2 = S(this.groupMap);
        try {
          for (s2.s(); !(r3 = s2.n()).done; ) {
            m(r3.value, 2)[1].selfInfo.userID = a2;
          }
        } catch (i2) {
          s2.e(i2);
        } finally {
          s2.f();
        }
        this._setStorageGroupList();
      } }, { key: "getStorageGroupList", value: function() {
        return this.getModule(lg).getItem("groupMap");
      } }, { key: "_setStorageGroupList", value: function() {
        var e3 = this.getLocalGroupList().filter(function(e4) {
          var t2 = e4.type;
          return !yd(t2);
        }).filter(function(e4) {
          return !e4.isSupportTopic;
        }).slice(0, 20).map(function(e4) {
          return { groupID: e4.groupID, name: e4.name, avatar: e4.avatar, type: e4.type };
        });
        this.getModule(lg).setItem("groupMap", e3);
      } }, { key: "getGroupMap", value: function() {
        return this.groupMap;
      } }, { key: "getLocalGroupList", value: function() {
        return M(this.groupMap.values());
      } }, { key: "getLocalGroupProfile", value: function(e3) {
        return this.groupMap.get(e3);
      } }, { key: "sortLocalGroupList", value: function() {
        var e3 = M(this.groupMap).filter(function(e4) {
          var t2 = m(e4, 2);
          t2[0];
          return !xd(t2[1].lastMessage);
        });
        e3.sort(function(e4, t2) {
          return t2[1].lastMessage.lastTime - e4[1].lastMessage.lastTime;
        }), this.groupMap = new Map(M(e3));
      } }, { key: "updateGroupLastMessage", value: function(e3) {
        this._commonGroupHandler && this._commonGroupHandler.handleUpdateGroupLastMessage(e3);
      } }, { key: "emitGroupListUpdate", value: function() {
        var e3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n3 = this.getLocalGroupList();
        if (e3 && this.emitOuterEvent(pr.GROUP_LIST_UPDATED), t2) {
          var o2 = JSON.parse(JSON.stringify(n3)), r3 = this.getModule(cg);
          r3.updateConversationGroupProfile(o2);
        }
      } }, { key: "patchGroupMessageRemindType", value: function() {
        var e3 = this.getLocalGroupList(), t2 = this.getModule(cg), n3 = 0;
        e3.forEach(function(e4) {
          true === t2.patchMessageRemindType({ ID: e4.groupID, isC2CConversation: false, messageRemindType: e4.selfInfo.messageRemindType }) && (n3 += 1);
        }), bl.log("".concat(this._className, ".patchGroupMessageRemindType count:").concat(n3));
      } }, { key: "recomputeUnreadCount", value: function() {
        var e3 = this.getLocalGroupList(), t2 = this.getModule(cg);
        e3.forEach(function(e4) {
          var n3 = e4.groupID, o2 = e4.selfInfo, r3 = o2.excludedUnreadSequenceList, a2 = o2.readedSequence;
          if (Ql(r3)) {
            var s2 = 0;
            r3.forEach(function(t3) {
              t3 >= a2 && t3 <= e4.nextMessageSeq - 1 && (s2 += 1);
            }), s2 >= 1 && t2.recomputeGroupUnreadCount({ conversationID: "".concat(gr.CONV_GROUP).concat(n3), count: s2 });
          }
        });
      } }, { key: "getMyNameCardByGroupID", value: function(e3) {
        var t2 = this.getLocalGroupProfile(e3);
        return t2 ? t2.selfInfo.nameCard : "";
      } }, { key: "isPagingGetCompleted", value: function() {
        return !!this._commonGroupHandler && this._commonGroupHandler.isPagingGetCompleted();
      } }, { key: "getGroupList", value: function(e3) {
        return this._commonGroupHandler ? this._commonGroupHandler.getGroupList(e3) : UM();
      } }, { key: "getGroupProfile", value: function(e3) {
        var t2 = this, n3 = new Ih(Eh.GET_GROUP_PROFILE), o2 = "".concat(this._className, ".getGroupProfile"), r3 = e3.groupID, a2 = e3.groupCustomFieldFilter;
        bl.log("".concat(o2, " groupID:").concat(r3));
        var s2 = { groupIDList: [r3], responseFilter: { groupBaseInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "Owner_Account", "CreateTime", "InfoSeq", "LastInfoTime", "LastMsgTime", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "NextMsgSeq", "ShutUpAllMember"], groupCustomFieldFilter: a2, memberInfoFilter: ["Role", "JoinTime", "MsgSeq", "MsgFlag", "NameCard"] } };
        return this.getGroupProfileAdvance(s2).then(function(e4) {
          var a3, s3 = e4.data, i2 = s3.successGroupList, c2 = s3.failureGroupList;
          if (bl.log("".concat(o2, " ok")), c2.length > 0)
            return bM(c2[0]);
          (yd(i2[0].type) && !t2.hasLocalGroup(r3) ? a3 = new gv(i2[0]) : (t2.updateGroupMap(i2), a3 = t2.getLocalGroupProfile(r3)), a3.isSupportTopic) || t2.getModule(cg).updateConversationGroupProfile([a3]);
          return n3.setNetworkType(t2.getNetworkType()).setMessage("groupID:".concat(r3, " type:").concat(a3.type, " muteAllMembers:").concat(a3.muteAllMembers, " ownerID:").concat(a3.ownerID)).end(), AM({ group: a3 });
        }).catch(function(r4) {
          return t2.probeNetwork().then(function(t3) {
            var o3 = m(t3, 2), a3 = o3[0], s3 = o3[1];
            n3.setError(r4, a3, s3).setMessage("groupID:".concat(e3.groupID)).end();
          }), bl.error("".concat(o2, " failed. error:"), r4), bM(r4);
        });
      } }, { key: "getGroupProfileAdvance", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".getGroupProfileAdvance"), r3 = e3.groupIDList;
        Ql(r3) && r3.length > 50 && (bl.warn("".concat(o2, " \u83B7\u53D6\u7FA4\u8D44\u6599\u7684\u6570\u91CF\u4E0D\u80FD\u8D85\u8FC750\u4E2A")), r3.length = 50);
        var a2 = [], s2 = [];
        r3.forEach(function(e4) {
          Id({ groupID: e4 }) ? s2.push(e4) : a2.push(e4);
        });
        var i2 = [];
        if (a2.length > 0) {
          var c2 = this._getGroupProfileAdvance(t(t({}, e3), {}, { groupIDList: a2 }));
          i2.push(c2);
        }
        if (s2.length > 0) {
          var u2 = this._getGroupProfileAdvance(t(t({}, e3), {}, { groupIDList: s2, relayFlag: a2.length > 0 }));
          i2.push(u2);
        }
        return Promise.all(i2).then(function(e4) {
          var t2 = [], n4 = [];
          return e4.forEach(function(e5) {
            t2.push.apply(t2, M(e5.successGroupList)), n4.push.apply(n4, M(e5.failureGroupList));
          }), AM({ successGroupList: t2, failureGroupList: n4 });
        }).catch(function(e4) {
          return bl.error("".concat(n3._className, "._getGroupProfileAdvance failed. error:"), e4), bM(e4);
        });
      } }, { key: "_getGroupProfileAdvance", value: function(e3) {
        var t2 = this, n3 = e3.relayFlag, o2 = void 0 !== n3 && n3, r3 = g(e3, Nv);
        return this.request({ protocolName: Zg, requestData: r3 }).then(function(e4) {
          bl.log("".concat(t2._className, "._getGroupProfileAdvance ok."));
          var n4 = e4.data.groups;
          return { successGroupList: n4.filter(function(e5) {
            return Zl(e5.errorCode) || 0 === e5.errorCode;
          }), failureGroupList: n4.filter(function(e5) {
            return e5.errorCode && 0 !== e5.errorCode;
          }).map(function(e5) {
            return new kM({ code: e5.errorCode, message: e5.errorInfo, data: { groupID: e5.groupID } });
          }) };
        }).catch(function(t3) {
          return o2 && Id({ groupID: e3.groupIDList[0] }) ? { successGroupList: [], failureGroupList: [] } : bM(t3);
        });
      } }, { key: "createGroup", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".createGroup"), r3 = e3.type, a2 = e3.groupID;
        if (!["Public", "Private", "ChatRoom", "AVChatRoom", "Community"].includes(r3))
          return bM({ code: ah.ILLEGAL_GROUP_TYPE, message: sh.ILLEGAL_GROUP_TYPE });
        if (!Id({ type: r3 })) {
          if (!xd(a2) && Id({ groupID: a2 }))
            return bM({ code: ah.ILLEGAL_GROUP_ID, message: sh.ILLEGAL_GROUP_ID });
          e3.isSupportTopic = void 0;
        }
        if (yd(r3) && !Zl(e3.memberList) && e3.memberList.length > 0 && (bl.warn("".concat(o2, " \u521B\u5EFA AVChatRoom \u65F6\u4E0D\u80FD\u6DFB\u52A0\u7FA4\u6210\u5458\uFF0C\u81EA\u52A8\u5FFD\u7565\u8BE5\u5B57\u6BB5")), e3.memberList = void 0), vd(r3) || Zl(e3.joinOption) || (bl.warn("".concat(o2, " \u521B\u5EFA Work/Meeting/AVChatRoom/Community \u7FA4\u65F6\u4E0D\u80FD\u8BBE\u7F6E\u5B57\u6BB5 joinOption\uFF0C\u81EA\u52A8\u5FFD\u7565\u8BE5\u5B57\u6BB5")), e3.joinOption = void 0), Id({ type: r3 })) {
          if (!xd(a2) && !Id({ groupID: a2 }))
            return bM({ code: ah.ILLEGAL_GROUP_ID, message: sh.ILLEGAL_GROUP_ID });
          e3.isSupportTopic = true === e3.isSupportTopic ? 1 : 0;
        }
        var s2 = new Ih(Eh.CREATE_GROUP);
        bl.log("".concat(o2, " options:"), e3);
        var i2 = [];
        return this.request({ protocolName: e_, requestData: t(t({}, e3), {}, { ownerID: this.getMyUserID(), webPushFlag: 1 }) }).then(function(r4) {
          var a3 = r4.data, c2 = a3.groupID, u2 = a3.overLimitUserIDList, l2 = void 0 === u2 ? [] : u2;
          if (i2 = l2, s2.setNetworkType(n3.getNetworkType()).setMessage("groupType:".concat(e3.type, " groupID:").concat(c2, " overLimitUserIDList=").concat(l2)).end(), bl.log("".concat(o2, " ok groupID:").concat(c2, " overLimitUserIDList:"), l2), e3.type === gr.GRP_AVCHATROOM)
            return n3.getGroupProfile({ groupID: c2 });
          if (e3.type === gr.GRP_COMMUNITY && 1 === e3.isSupportTopic)
            return n3.getGroupProfile({ groupID: c2 });
          xd(e3.memberList) || xd(l2) || (e3.memberList = e3.memberList.filter(function(e4) {
            return -1 === l2.indexOf(e4.userID);
          })), n3.updateGroupMap([t(t({}, e3), {}, { groupID: c2 })]);
          var d2 = n3.getModule(tg), p3 = d2.createCustomMessage({ to: c2, conversationType: gr.CONV_GROUP, payload: { data: "group_create", extension: "".concat(n3.getMyUserID(), "\u521B\u5EFA\u7FA4\u7EC4") } });
          return d2.sendMessageInstance(p3), n3.emitGroupListUpdate(), n3.getGroupProfile({ groupID: c2 });
        }).then(function(e4) {
          var t2 = e4.data.group, n4 = t2.selfInfo, o3 = n4.nameCard, r4 = n4.joinTime;
          return t2.updateSelfInfo({ nameCard: o3, joinTime: r4, messageRemindType: gr.MSG_REMIND_ACPT_AND_NOTE, role: gr.GRP_MBR_ROLE_OWNER }), AM({ group: t2, overLimitUserIDList: i2 });
        }).catch(function(t2) {
          return s2.setMessage("groupType:".concat(e3.type)), n3.probeNetwork().then(function(e4) {
            var n4 = m(e4, 2), o3 = n4[0], r4 = n4[1];
            s2.setError(t2, o3, r4).end();
          }), bl.error("".concat(o2, " failed. error:"), t2), bM(t2);
        });
      } }, { key: "dismissGroup", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".dismissGroup");
        if (this.hasLocalGroup(e3) && this.getLocalGroupProfile(e3).type === gr.GRP_WORK)
          return bM(new kM({ code: ah.CANNOT_DISMISS_WORK, message: sh.CANNOT_DISMISS_WORK }));
        var o2 = new Ih(Eh.DISMISS_GROUP);
        return o2.setMessage("groupID:".concat(e3)), bl.log("".concat(n3, " groupID:").concat(e3)), this.request({ protocolName: t_, requestData: { groupID: e3 } }).then(function() {
          return o2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok")), t2.deleteLocalGroupAndConversation(e3), t2.checkJoinedAVChatRoomByID(e3) && t2._AVChatRoomHandler.reset(e3), AM({ groupID: e3 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), r3 = n4[0], a2 = n4[1];
            o2.setError(e4, r3, a2).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "updateGroupProfile", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".updateGroupProfile");
        !this.hasLocalGroup(e3.groupID) || vd(this.getLocalGroupProfile(e3.groupID).type) || Zl(e3.joinOption) || (bl.warn("".concat(n3, " Work/Meeting/AVChatRoom/Community \u7FA4\u4E0D\u80FD\u8BBE\u7F6E\u5B57\u6BB5 joinOption\uFF0C\u81EA\u52A8\u5FFD\u7565\u8BE5\u5B57\u6BB5")), e3.joinOption = void 0), Zl(e3.muteAllMembers) || (e3.muteAllMembers ? e3.muteAllMembers = "On" : e3.muteAllMembers = "Off");
        var o2 = new Ih(Eh.UPDATE_GROUP_PROFILE);
        return o2.setMessage(JSON.stringify(e3)), bl.log("".concat(n3, " groupID:").concat(e3.groupID)), this.request({ protocolName: n_, requestData: e3 }).then(function() {
          (o2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok")), t2.hasLocalGroup(e3.groupID)) && (t2.groupMap.get(e3.groupID).updateGroup(e3), t2._setStorageGroupList());
          return AM({ group: t2.groupMap.get(e3.groupID) });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), r3 = n4[0], a2 = n4[1];
            o2.setError(e4, r3, a2).end();
          }), bl.log("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "joinGroup", value: function(e3) {
        var t2 = this, n3 = e3.groupID, o2 = e3.type, r3 = "".concat(this._className, ".joinGroup");
        if (o2 === gr.GRP_WORK) {
          var a2 = new kM({ code: ah.CANNOT_JOIN_WORK, message: sh.CANNOT_JOIN_WORK });
          return bM(a2);
        }
        if (this.deleteUnjoinedAVChatRoom(n3), this.hasLocalGroup(n3)) {
          if (!this.isLoggedIn())
            return UM({ status: gr.JOIN_STATUS_ALREADY_IN_GROUP });
          var s2 = new Ih(Eh.APPLY_JOIN_GROUP);
          return this.getGroupProfile({ groupID: n3 }).then(function() {
            return s2.setNetworkType(t2.getNetworkType()).setMessage("groupID:".concat(n3, " joinedStatus:").concat(gr.JOIN_STATUS_ALREADY_IN_GROUP)).end(), UM({ status: gr.JOIN_STATUS_ALREADY_IN_GROUP });
          }).catch(function(o3) {
            return s2.setNetworkType(t2.getNetworkType()).setMessage("groupID:".concat(n3, " unjoined")).end(), bl.warn("".concat(r3, " ").concat(n3, " was unjoined, now join!")), t2.groupMap.delete(n3), t2.applyJoinGroup(e3);
          });
        }
        return bl.log("".concat(r3, " groupID:").concat(n3)), this.isLoggedIn() ? this.applyJoinGroup(e3) : this._AVChatRoomHandler.joinWithoutAuth(e3);
      } }, { key: "applyJoinGroup", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".applyJoinGroup"), r3 = e3.groupID, a2 = new Ih(Eh.APPLY_JOIN_GROUP), s2 = t({}, e3), i2 = this.canIUse(Uu.AVCHATROOM_HISTORY_MSG);
        return i2 && (s2.historyMessageFlag = 1), this.getModule(cg).deleteTopicRoamingMessageInfo(r3), this.request({ protocolName: o_, requestData: s2 }).then(function(e4) {
          var t2 = e4.data, s3 = t2.joinedStatus, c2 = t2.longPollingKey, u2 = t2.startSeq, l2 = t2.avChatRoomFlag, d2 = t2.avChatRoomKey, p3 = t2.messageList, g2 = "groupID:".concat(r3, " joinedStatus:").concat(s3, " longPollingKey:").concat(c2, " startSeq:").concat(u2) + " avChatRoomFlag:".concat(l2, " canGetAVChatRoomHistoryMessage:").concat(i2, ",") + " history message count:".concat(xd(p3) ? 0 : p3.length);
          switch (a2.setNetworkType(n3.getNetworkType()).setMessage("".concat(g2)).end(), bl.log("".concat(o2, " ok. ").concat(g2)), s3) {
            case Kl:
              return AM({ status: Kl });
            case Bl:
              return n3.getGroupProfile({ groupID: r3 }).then(function(e5) {
                var t3, o3 = e5.data.group, a3 = { status: Bl, group: o3 };
                return 1 === l2 ? (n3.getModule(cg).setCompleted("".concat(gr.CONV_GROUP).concat(r3)), n3._groupAttributesHandler.initGroupAttributesCache({ groupID: r3, avChatRoomKey: d2 }), (t3 = Zl(c2) ? n3._AVChatRoomHandler.handleJoinResult({ group: o3 }) : n3._AVChatRoomHandler.startRunLoop({ longPollingKey: c2, group: o3, startSeq: u2 })).then(function() {
                  n3._onAVChatRoomHistoryMessage(p3);
                }), t3) : (n3.emitGroupListUpdate(true, false), AM(a3));
              });
            default:
              var _2 = new kM({ code: ah.JOIN_GROUP_FAIL, message: sh.JOIN_GROUP_FAIL });
              return bl.error("".concat(o2, " error:"), _2), bM(_2);
          }
        }).catch(function(t2) {
          return a2.setMessage("groupID:".concat(e3.groupID)), n3.probeNetwork().then(function(e4) {
            var n4 = m(e4, 2), o3 = n4[0], r4 = n4[1];
            a2.setError(t2, o3, r4).end();
          }), bl.error("".concat(o2, " error:"), t2), bM(t2);
        });
      } }, { key: "quitGroup", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".quitGroup");
        bl.log("".concat(n3, " groupID:").concat(e3));
        var o2 = this.checkJoinedAVChatRoomByID(e3);
        if (!o2 && !this.hasLocalGroup(e3)) {
          var r3 = new kM({ code: ah.MEMBER_NOT_IN_GROUP, message: sh.MEMBER_NOT_IN_GROUP });
          return bM(r3);
        }
        if (o2 && !this.isLoggedIn())
          return bl.log("".concat(n3, " anonymously ok. groupID:").concat(e3)), this.deleteLocalGroupAndConversation(e3), this._AVChatRoomHandler.reset(e3), UM({ groupID: e3 });
        var a2 = new Ih(Eh.QUIT_GROUP);
        return a2.setMessage("groupID:".concat(e3)), this.request({ protocolName: a_, requestData: { groupID: e3 } }).then(function() {
          return a2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok")), t2.deleteLocalGroupAndConversation(e3), o2 && t2._AVChatRoomHandler.reset(e3), AM({ groupID: e3 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            a2.setError(e4, o3, r4).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "searchGroupByID", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".searchGroupByID"), o2 = { groupIDList: [e3] }, r3 = new Ih(Eh.SEARCH_GROUP_BY_ID);
        return r3.setMessage("groupID:".concat(e3)), bl.log("".concat(n3, " groupID:").concat(e3)), this.request({ protocolName: s_, requestData: o2 }).then(function(e4) {
          var o3 = e4.data.groupProfile;
          if (0 !== o3[0].errorCode)
            throw new kM({ code: o3[0].errorCode, message: o3[0].errorInfo });
          return r3.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok")), AM({ group: new gv(o3[0]) });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], a2 = n4[1];
            r3.setError(e4, o3, a2).end();
          }), bl.warn("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "changeGroupOwner", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".changeGroupOwner");
        if (this.hasLocalGroup(e3.groupID) && this.getLocalGroupProfile(e3.groupID).type === gr.GRP_AVCHATROOM)
          return bM(new kM({ code: ah.CANNOT_CHANGE_OWNER_IN_AVCHATROOM, message: sh.CANNOT_CHANGE_OWNER_IN_AVCHATROOM }));
        if (e3.newOwnerID === this.getMyUserID())
          return bM(new kM({ code: ah.CANNOT_CHANGE_OWNER_TO_SELF, message: sh.CANNOT_CHANGE_OWNER_TO_SELF }));
        var o2 = new Ih(Eh.CHANGE_GROUP_OWNER);
        return o2.setMessage("groupID:".concat(e3.groupID, " newOwnerID:").concat(e3.newOwnerID)), bl.log("".concat(n3, " groupID:").concat(e3.groupID)), this.request({ protocolName: i_, requestData: e3 }).then(function() {
          o2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok"));
          var r3 = e3.groupID, a2 = e3.newOwnerID;
          t2.groupMap.get(r3).ownerID = a2;
          var s2 = t2.getModule(sg).getLocalGroupMemberList(r3);
          if (s2 instanceof Map) {
            var i2 = s2.get(t2.getMyUserID());
            Zl(i2) || (i2.updateRole("Member"), t2.groupMap.get(r3).selfInfo.role = "Member");
            var c2 = s2.get(a2);
            Zl(c2) || c2.updateRole("Owner");
          }
          return t2.emitGroupListUpdate(true, false), AM({ group: t2.groupMap.get(r3) });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), r3 = n4[0], a2 = n4[1];
            o2.setError(e4, r3, a2).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "handleGroupApplication", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".handleGroupApplication"), r3 = e3.message.payload, a2 = r3.groupProfile.groupID, s2 = r3.authentication, i2 = r3.messageKey, c2 = r3.operatorID, u2 = new Ih(Eh.HANDLE_GROUP_APPLICATION);
        return u2.setMessage("groupID:".concat(a2)), bl.log("".concat(o2, " groupID:").concat(a2)), this.request({ protocolName: c_, requestData: t(t({}, e3), {}, { applicant: c2, groupID: a2, authentication: s2, messageKey: i2 }) }).then(function() {
          return u2.setNetworkType(n3.getNetworkType()).end(), bl.log("".concat(o2, " ok")), n3._groupSystemNoticeHandler.deleteGroupSystemNotice({ messageList: [e3.message] }), AM({ group: n3.getLocalGroupProfile(a2) });
        }).catch(function(e4) {
          return n3.probeNetwork().then(function(t2) {
            var n4 = m(t2, 2), o3 = n4[0], r4 = n4[1];
            u2.setError(e4, o3, r4).end();
          }), bl.error("".concat(o2, " failed. error"), e4), bM(e4);
        });
      } }, { key: "handleGroupInvitation", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".handleGroupInvitation"), r3 = e3.message.payload, a2 = r3.groupProfile.groupID, s2 = r3.authentication, i2 = r3.messageKey, c2 = r3.operatorID, u2 = e3.handleAction, l2 = new Ih(Eh.HANDLE_GROUP_INVITATION);
        return l2.setMessage("groupID:".concat(a2, " inviter:").concat(c2, " handleAction:").concat(u2)), bl.log("".concat(o2, " groupID:").concat(a2, " inviter:").concat(c2, " handleAction:").concat(u2)), this.request({ protocolName: u_, requestData: t(t({}, e3), {}, { inviter: c2, groupID: a2, authentication: s2, messageKey: i2 }) }).then(function() {
          return l2.setNetworkType(n3.getNetworkType()).end(), bl.log("".concat(o2, " ok")), n3._groupSystemNoticeHandler.deleteGroupSystemNotice({ messageList: [e3.message] }), AM({ group: n3.getLocalGroupProfile(a2) });
        }).catch(function(e4) {
          return n3.probeNetwork().then(function(t2) {
            var n4 = m(t2, 2), o3 = n4[0], r4 = n4[1];
            l2.setError(e4, o3, r4).end();
          }), bl.error("".concat(o2, " failed. error"), e4), bM(e4);
        });
      } }, { key: "getGroupOnlineMemberCount", value: function(e3) {
        return this._AVChatRoomHandler ? this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e3) ? this._AVChatRoomHandler.getGroupOnlineMemberCount(e3) : UM({ memberCount: 0 }) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "hasLocalGroup", value: function(e3) {
        return this.groupMap.has(e3);
      } }, { key: "deleteLocalGroupAndConversation", value: function(e3) {
        var t2 = this.checkJoinedAVChatRoomByID(e3);
        (bl.log("".concat(this._className, ".deleteLocalGroupAndConversation isJoinedAVChatRoom:").concat(t2)), t2) && this.getModule(cg).deleteLocalConversation("".concat(gr.CONV_GROUP).concat(e3));
        if (Id({ groupID: e3 })) {
          var n3 = this.getLocalGroupProfile(e3);
          if (n3 && true === n3.isSupportTopic)
            this.getModule(ig).deleteTopicListInCommunity(e3);
        }
        this._deleteLocalGroup(e3), this.emitGroupListUpdate(true, false);
      } }, { key: "_deleteLocalGroup", value: function(e3) {
        this.groupMap.delete(e3), this.getModule(sg).deleteGroupMemberList(e3), this._setStorageGroupList();
      } }, { key: "sendMessage", value: function(e3, t2) {
        var n3 = this.createGroupMessagePack(e3, t2);
        return this.request(n3);
      } }, { key: "createGroupMessagePack", value: function(e3, t2) {
        var n3 = null;
        t2 && t2.offlinePushInfo && (n3 = t2.offlinePushInfo);
        var o2 = "";
        zl(e3.cloudCustomData) && e3.cloudCustomData.length > 0 && (o2 = e3.cloudCustomData);
        var r3 = [];
        if (Xl(t2) && Xl(t2.messageControlInfo)) {
          var a2 = t2.messageControlInfo, s2 = a2.excludedFromUnreadCount, i2 = a2.excludedFromLastMessage;
          true === s2 && r3.push("NoUnread"), true === i2 && r3.push("NoLastMsg");
        }
        var c2 = e3.getGroupAtInfoList(), u2 = { fromAccount: this.getMyUserID(), groupID: e3.to, msgBody: e3.getElements(), cloudCustomData: o2, random: e3.random, priority: e3.priority, clientSequence: e3.clientSequence, groupAtInfo: e3.type !== gr.MSG_TEXT || xd(c2) ? void 0 : c2, onlineOnlyFlag: this.isOnlineMessage(e3, t2) ? 1 : 0, clientTime: e3.clientTime, offlinePushInfo: n3 ? { pushFlag: true === n3.disablePush ? 1 : 0, title: n3.title || "", desc: n3.description || "", ext: n3.extension || "", apnsInfo: { badgeMode: true === n3.ignoreIOSBadge ? 1 : 0 }, androidInfo: { OPPOChannelID: n3.androidOPPOChannelID || "" } } : void 0, messageControlInfo: r3, needReadReceipt: true !== e3.needReadReceipt || this.isMessageFromOrToAVChatroom(e3.to) ? 0 : 1 };
        return Ed(e3.to) && (u2.groupID = wd(e3.to), u2.topicID = e3.to), { protocolName: Gg, tjgID: this.generateTjgID(e3), requestData: u2 };
      } }, { key: "revokeMessage", value: function(e3) {
        var t2 = { groupID: e3.to, msgSeqList: [{ msgSeq: e3.sequence }] };
        return Ed(e3.to) && (t2.groupID = wd(e3.to), t2.topicID = e3.to), this.request({ protocolName: l_, requestData: t2 });
      } }, { key: "deleteMessage", value: function(e3) {
        var t2 = e3.to, n3 = e3.keyList;
        bl.log("".concat(this._className, ".deleteMessage groupID:").concat(t2, " count:").concat(n3.length));
        var o2 = { groupID: t2, deleter: this.getMyUserID(), keyList: n3 };
        return Ed(t2) && (o2.groupID = wd(t2), o2.topicID = t2), this.request({ protocolName: T_, requestData: o2 });
      } }, { key: "modifyRemoteMessage", value: function(e3) {
        var t2 = e3.to, n3 = e3.sequence, o2 = e3.payload, r3 = e3.type, a2 = e3.version, s2 = void 0 === a2 ? 0 : a2, i2 = e3.cloudCustomData, c2 = t2, u2 = void 0;
        Ed(t2) && (c2 = wd(t2), u2 = t2);
        var l2 = void 0;
        return qd(r3) && (l2 = []).push({ type: r3, content: o2 }), this.request({ protocolName: S_, requestData: { groupID: c2, topicID: u2, sequence: n3, version: s2, elements: l2, cloudCustomData: i2 } });
      } }, { key: "getRoamingMessage", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getRoamingMessage"), o2 = e3.conversationID, r3 = e3.groupID, a2 = e3.sequence, s2 = new Ih(Eh.GET_GROUP_ROAMING_MESSAGES), i2 = 0, c2 = void 0;
        return Ed(r3) && (r3 = wd(c2 = r3)), this._computeLastSequence({ groupID: r3, topicID: c2, sequence: a2 }).then(function(e4) {
          return i2 = e4, bl.log("".concat(n3, " groupID:").concat(r3, " startSequence:").concat(i2)), t2.request({ protocolName: g_, requestData: { groupID: r3, count: 21, sequence: i2, topicID: c2 } });
        }).then(function(e4) {
          var a3 = e4.data, u2 = a3.messageList, l2 = a3.complete;
          Zl(u2) ? bl.log("".concat(n3, " ok. complete:").concat(l2, " but messageList is undefined!")) : bl.log("".concat(n3, " ok. complete:").concat(l2, " count:").concat(u2.length)), s2.setNetworkType(t2.getNetworkType()).setMessage("groupID:".concat(r3, " topicID:").concat(c2, " startSequence:").concat(i2, " complete:").concat(l2, " count:").concat(u2 ? u2.length : "undefined")).end();
          var d2 = t2.getModule(cg);
          if (2 === l2 || xd(u2))
            return d2.setCompleted(o2), { nextReqID: "", storedMessageList: [] };
          var p3 = u2[u2.length - 1].sequence - 1;
          d2.updateRoamingMessageSequence(o2, p3);
          var g2 = d2.onRoamingMessage(u2, o2);
          return d2.updateIsRead(o2), d2.patchConversationLastMessage(o2), bl.log("".concat(n3, " nextReqID:").concat(p3, " stored message count:").concat(g2.length)), { nextReqID: p3 + "", storedMessageList: g2 };
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], a3 = n4[1];
            s2.setError(e4, o3, a3).setMessage("groupID:".concat(r3, " topicID:").concat(c2, " startSequence:").concat(i2)).end();
          }), bl.warn("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "_getGroupIDOfMessage", value: function(e3) {
        return e3.conversationID.replace(gr.CONV_GROUP, "");
      } }, { key: "getReadReceiptList", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getReadReceiptList"), o2 = this._getGroupIDOfMessage(e3[0]), r3 = this.getMyUserID(), a2 = e3.filter(function(e4) {
          return e4.from === r3 && true === e4.needReadReceipt;
        }).map(function(e4) {
          return { sequence: e4.sequence };
        });
        if (bl.log("".concat(n3, " groupID:").concat(o2, " sequenceList:").concat(JSON.stringify(a2))), 0 === a2.length)
          return UM({ messageList: e3 });
        var s2 = new Ih(Eh.GET_READ_RECEIPT);
        return s2.setMessage("groupID:".concat(o2)), this.request({ protocolName: __, requestData: { groupID: o2, sequenceList: a2 } }).then(function(t3) {
          s2.end(), bl.log("".concat(n3, " ok"));
          var o3 = t3.data.readReceiptList;
          return Ql(o3) && o3.forEach(function(t4) {
            e3.forEach(function(e4) {
              0 === t4.code && t4.sequence === e4.sequence && (e4.readReceiptInfo.readCount = t4.readCount, e4.readReceiptInfo.unreadCount = t4.unreadCount);
            });
          }), AM({ messageList: e3 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            s2.setError(e4, o3, r4).end();
          }), bl.warn("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "sendReadReceipt", value: function(e3) {
        var t2 = this, n3 = this._getGroupIDOfMessage(e3[0]), o2 = new Ih(Eh.SEND_READ_RECEIPT);
        o2.setMessage("groupID:".concat(n3));
        var r3 = this.getMyUserID(), a2 = e3.filter(function(e4) {
          return e4.from !== r3 && true === e4.needReadReceipt;
        }).map(function(e4) {
          return { sequence: e4.sequence };
        });
        if (0 === a2.length)
          return bM({ code: ah.READ_RECEIPT_MESSAGE_LIST_EMPTY, message: sh.READ_RECEIPT_MESSAGE_LIST_EMPTY });
        var s2 = "".concat(this._className, ".sendReadReceipt");
        return bl.log("".concat(s2, ". sequenceList:").concat(JSON.stringify(a2))), this.request({ protocolName: h_, requestData: { groupID: n3, sequenceList: a2 } }).then(function(e4) {
          return o2.end(), bl.log("".concat(s2, " ok")), AM();
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), r4 = n4[0], a3 = n4[1];
            o2.setError(e4, r4, a3).end();
          }), bl.warn("".concat(s2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getReadReceiptDetail", value: function(e3) {
        var t2 = this, n3 = e3.message, o2 = e3.filter, r3 = e3.cursor, a2 = e3.count, s2 = this._getGroupIDOfMessage(n3), i2 = n3.ID, c2 = n3.sequence, u2 = "".concat(this._className, ".getReadReceiptDetail"), l2 = this._receiptDetailCompleteMap.get(i2) || false, d2 = 0 !== o2 && 1 !== o2 ? 0 : o2, p3 = zl(r3) ? r3 : "", g2 = !$l(a2) || a2 <= 0 || a2 >= 100 ? 100 : a2, _2 = "groupID:".concat(s2, " sequence:").concat(c2, " cursor:").concat(p3, " filter:").concat(d2, " completeFlag:").concat(l2);
        bl.log("".concat(u2, " ").concat(_2));
        var h3 = { cursor: "", isCompleted: false, messageID: i2, unreadUserIDList: [], readUserIDList: [] }, f2 = new Ih(Eh.GET_READ_RECEIPT_DETAIL);
        return f2.setMessage(_2), this.request({ protocolName: m_, requestData: { groupID: s2, sequence: c2, flag: d2, cursor: p3, count: g2 } }).then(function(e4) {
          f2.end();
          var n4 = e4.data, o3 = n4.cursor, r4 = n4.isCompleted, a3 = n4.unreadUserIDList, s3 = n4.readUserIDList;
          return h3.cursor = o3, 1 === r4 && (h3.isCompleted = true, t2._receiptDetailCompleteMap.set(i2, true)), 0 === d2 ? h3.readUserIDList = s3.map(function(e5) {
            return e5.userID;
          }) : 1 === d2 && (h3.unreadUserIDList = a3.map(function(e5) {
            return e5.userID;
          })), bl.log("".concat(u2, " ok")), AM(h3);
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            f2.setError(e4, o3, r4).end();
          }), bl.warn("".concat(u2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getRoamingMessagesHopping", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getRoamingMessagesHopping"), o2 = new Ih(Eh.GET_GROUP_ROAMING_MESSAGES_HOPPING), r3 = e3.groupID, a2 = e3.count, s2 = e3.sequence, i2 = e3.direction, c2 = s2;
        1 === i2 && (c2 = s2 + a2 - 1);
        var u2 = void 0;
        Ed(r3) && (r3 = wd(u2 = r3));
        var l2 = "".concat(u2 ? "topicID:".concat(u2) : "groupID:".concat(r3), " sequence:").concat(s2, " direction:").concat(i2);
        return bl.log("".concat(n3, " ").concat(l2)), this.request({ protocolName: g_, requestData: { groupID: r3, topicID: u2, count: a2, sequence: c2 } }).then(function(r4) {
          var a3 = r4.data, c3 = a3.messageList, d2 = a3.complete;
          if (bl.log("".concat(n3, " ok. complete:").concat(d2, " count:").concat(c3 ? c3.length : 0)), o2.setNetworkType(t2.getNetworkType()).setMessage("".concat(l2, " complete:").concat(d2, " count:").concat(c3 ? c3.length : 0)).end(), 2 === d2 || xd(c3)) {
            var p3 = t2._computeResult();
            return AM(p3);
          }
          var g2 = "".concat(gr.CONV_GROUP).concat(e3.groupID), _2 = t2.getModule(cg).onRoamingMessage(c3, g2, false), h3 = t2._computeResult({ direction: i2, sequence: s2, topicID: u2, messageList: c3, resultList: _2 });
          return AM(h3);
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), i3 = n4[0], c3 = n4[1];
            o2.setError(e4, i3, c3).setMessage("groupID:".concat(r3, " sequence:").concat(s2, " count:").concat(a2)).end();
          }), bl.warn("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "_computeResult", value: function(e3) {
        var t2 = { messageList: [], isCompleted: false, nextMessageSeq: "" };
        if (Zl(e3))
          return t2.isCompleted = true, t2;
        var n3 = e3.direction, o2 = e3.sequence, r3 = e3.topicID, a2 = e3.messageList, s2 = void 0 === a2 ? [] : a2, i2 = e3.resultList, c2 = void 0 === i2 ? [] : i2, u2 = s2.length;
        if (1 === n3) {
          if (t2.nextMessageSeq = s2[0].sequence + 1, !Zl(r3)) {
            var l2 = c2.findIndex(function(e4) {
              return e4.sequence === o2;
            });
            return -1 === l2 ? (c2[c2.length - 1].sequence < o2 ? (t2.isCompleted = true, t2.nextMessageSeq = "") : t2.messageList = M(c2), t2) : (t2.messageList = c2.slice(l2), t2);
          }
          return t2.messageList = M(c2), t2;
        }
        return t2.nextMessageSeq = s2[u2 - 1].sequence - 1, t2.messageList = M(c2), 0 === t2.nextMessageSeq && (t2.isCompleted = true, t2.nextMessageSeq = ""), t2;
      } }, { key: "setMessageRead", value: function(e3) {
        var t2 = this, n3 = e3.conversationID, o2 = e3.lastMessageSeq, r3 = "".concat(this._className, ".setMessageRead");
        bl.log("".concat(r3, " conversationID:").concat(n3, " lastMessageSeq:").concat(o2)), $l(o2) || bl.warn("".concat(r3, " \u8BF7\u52FF\u4FEE\u6539 Conversation.lastMessage.lastSequence\uFF0C\u5426\u5219\u53EF\u80FD\u4F1A\u5BFC\u81F4\u5DF2\u8BFB\u4E0A\u62A5\u7ED3\u679C\u4E0D\u51C6\u786E"));
        var a2 = new Ih(Eh.SET_GROUP_MESSAGE_READ);
        a2.setMessage("".concat(n3, "-").concat(o2));
        var s2 = n3.replace(gr.CONV_GROUP, ""), i2 = void 0;
        return Ed(s2) && (s2 = wd(i2 = s2)), this.request({ protocolName: d_, requestData: { groupID: s2, topicID: i2, messageReadSeq: o2 } }).then(function() {
          a2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(r3, " ok."));
          var e4 = t2.getModule(cg);
          e4.updateIsReadAfterReadReport({ conversationID: n3, lastMessageSeq: o2 });
          var c2 = true;
          if (!Zl(i2)) {
            c2 = false;
            var u2 = t2.getModule(ig).getLocalTopic(s2, i2);
            u2 && u2.updateSelfInfo({ readedSequence: o2 });
          }
          return e4.updateUnreadCount(n3, c2), AM();
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            a2.setError(e4, o3, r4).end();
          }), bl.log("".concat(r3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "_computeLastSequence", value: function(e3) {
        var t2 = e3.groupID, n3 = e3.topicID, o2 = void 0 === n3 ? void 0 : n3, r3 = e3.sequence;
        return r3 > 0 ? Promise.resolve(r3) : Zl(o2) || this.hasLocalGroup(t2) ? Zl(o2) ? this.getGroupLastSequence(t2) : this.getTopicLastSequence({ groupID: t2, topicID: o2 }) : Promise.resolve(0);
      } }, { key: "getGroupLastSequence", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".getGroupLastSequence"), o2 = new Ih(Eh.GET_GROUP_LAST_SEQUENCE), r3 = 0, a2 = "";
        if (this.hasLocalGroup(e3)) {
          var s2 = this.getLocalGroupProfile(e3), i2 = s2.lastMessage;
          if (i2.lastSequence > 0 && false === i2.onlineOnlyFlag)
            return r3 = i2.lastSequence, a2 = "got lastSequence:".concat(r3, " from local group profile[lastMessage.lastSequence]. groupID:").concat(e3), bl.log("".concat(n3, " ").concat(a2)), o2.setNetworkType(this.getNetworkType()).setMessage("".concat(a2)).end(), Promise.resolve(r3);
          if (s2.nextMessageSeq > 1)
            return r3 = s2.nextMessageSeq - 1, a2 = "got lastSequence:".concat(r3, " from local group profile[nextMessageSeq]. groupID:").concat(e3), bl.log("".concat(n3, " ").concat(a2)), o2.setNetworkType(this.getNetworkType()).setMessage("".concat(a2)).end(), Promise.resolve(r3);
        }
        var c2 = "GROUP".concat(e3), u2 = this.getModule(cg).getLocalConversation(c2);
        if (u2 && u2.lastMessage.lastSequence && false === u2.lastMessage.onlineOnlyFlag)
          return r3 = u2.lastMessage.lastSequence, a2 = "got lastSequence:".concat(r3, " from local conversation profile[lastMessage.lastSequence]. groupID:").concat(e3), bl.log("".concat(n3, " ").concat(a2)), o2.setNetworkType(this.getNetworkType()).setMessage("".concat(a2)).end(), Promise.resolve(r3);
        var l2 = { groupIDList: [e3], responseFilter: { groupBaseInfoFilter: ["NextMsgSeq"] } };
        return this.getGroupProfileAdvance(l2).then(function(s3) {
          var i3 = s3.data.successGroupList;
          return xd(i3) ? bl.log("".concat(n3, " successGroupList is empty. groupID:").concat(e3)) : (r3 = i3[0].nextMessageSeq - 1, a2 = "got lastSequence:".concat(r3, " from getGroupProfileAdvance. groupID:").concat(e3), bl.log("".concat(n3, " ").concat(a2))), o2.setNetworkType(t2.getNetworkType()).setMessage("".concat(a2)).end(), r3;
        }).catch(function(r4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), a3 = n4[0], s3 = n4[1];
            o2.setError(r4, a3, s3).setMessage("get lastSequence failed from getGroupProfileAdvance. groupID:".concat(e3)).end();
          }), bl.warn("".concat(n3, " failed. error:"), r4), bM(r4);
        });
      } }, { key: "getTopicLastSequence", value: function(e3) {
        var t2 = this, n3 = e3.groupID, o2 = e3.topicID, r3 = "".concat(this._className, ".getTopicLastSequence"), a2 = new Ih(Eh.GET_TOPIC_LAST_SEQUENCE), s2 = 0, i2 = "", c2 = this.getModule(ig);
        return c2.hasLocalTopic(n3, o2) ? (s2 = c2.getLocalTopic(n3, o2).nextMessageSeq - 1, i2 = "get lastSequence:".concat(s2, " from local topic info[nextMessageSeq]. topicID:").concat(o2), bl.log("".concat(r3, " ").concat(i2)), a2.setNetworkType(this.getNetworkType()).setMessage("".concat(i2)).end(), Promise.resolve(s2)) : c2.getTopicList({ groupID: n3, topicIDList: [o2] }).then(function(e4) {
          var n4 = e4.data.successTopicList;
          return xd(n4) ? bl.log("".concat(r3, " successTopicList is empty. topicID:").concat(o2)) : (s2 = n4[0].nextMessageSeq - 1, i2 = "get lastSequence:".concat(s2, " from getTopicList. topicID:").concat(o2), bl.log("".concat(r3, " ").concat(i2))), a2.setNetworkType(t2.getNetworkType()).setMessage("".concat(i2)).end(), s2;
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), r4 = n4[0], s3 = n4[1];
            a2.setError(e4, r4, s3).setMessage("get lastSequence failed from getTopicList. topicID:".concat(o2)).end();
          }), bl.warn("".concat(r3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "isMessageFromOrToAVChatroom", value: function(e3) {
        return !!this._AVChatRoomHandler && this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e3);
      } }, { key: "hasJoinedAVChatRoom", value: function() {
        return this._AVChatRoomHandler ? this._AVChatRoomHandler.hasJoinedAVChatRoom() : 0;
      } }, { key: "getJoinedAVChatRoom", value: function() {
        return this._AVChatRoomHandler ? this._AVChatRoomHandler.getJoinedAVChatRoom() : [];
      } }, { key: "isOnlineMessage", value: function(e3, t2) {
        return !(!this._canIUseOnlineOnlyFlag(e3) || !t2 || true !== t2.onlineUserOnly);
      } }, { key: "_canIUseOnlineOnlyFlag", value: function(e3) {
        var t2 = this.getJoinedAVChatRoom();
        return !t2 || !t2.includes(e3.to) || e3.conversationType !== gr.CONV_GROUP;
      } }, { key: "_onAVChatRoomHistoryMessage", value: function(e3) {
        if (!xd(e3)) {
          bl.log("".concat(this._className, "._onAVChatRoomHistoryMessage count:").concat(e3.length));
          var n3 = [];
          e3.forEach(function(e4) {
            n3.push(t(t({}, e4), {}, { isHistoryMessage: 1 }));
          }), this.onAVChatRoomMessage(n3);
        }
      } }, { key: "onAVChatRoomMessage", value: function(e3) {
        this._AVChatRoomHandler && this._AVChatRoomHandler.onMessage(e3);
      } }, { key: "getGroupSimplifiedInfo", value: function(e3) {
        var t2 = this, n3 = new Ih(Eh.GET_GROUP_SIMPLIFIED_INFO), o2 = { groupIDList: [e3], responseFilter: { groupBaseInfoFilter: ["Type", "Name"] } };
        return this.getGroupProfileAdvance(o2).then(function(o3) {
          var r3 = o3.data.successGroupList;
          return n3.setNetworkType(t2.getNetworkType()).setMessage("groupID:".concat(e3, " type:").concat(r3[0].type)).end(), r3[0];
        }).catch(function(o3) {
          t2.probeNetwork().then(function(t3) {
            var r3 = m(t3, 2), a2 = r3[0], s2 = r3[1];
            n3.setError(o3, a2, s2).setMessage("groupID:".concat(e3)).end();
          });
        });
      } }, { key: "setUnjoinedAVChatRoom", value: function(e3) {
        this._unjoinedAVChatRoomList.set(e3, 1);
      } }, { key: "deleteUnjoinedAVChatRoom", value: function(e3) {
        this._unjoinedAVChatRoomList.has(e3) && this._unjoinedAVChatRoomList.delete(e3);
      } }, { key: "isUnjoinedAVChatRoom", value: function(e3) {
        return this._unjoinedAVChatRoomList.has(e3);
      } }, { key: "onGroupAttributesUpdated", value: function(e3) {
        this._groupAttributesHandler && this._groupAttributesHandler.onGroupAttributesUpdated(e3);
      } }, { key: "updateLocalMainSequenceOnReconnected", value: function() {
        this._groupAttributesHandler && this._groupAttributesHandler.updateLocalMainSequenceOnReconnected();
      } }, { key: "initGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.initGroupAttributes(e3);
      } }, { key: "setGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.setGroupAttributes(e3);
      } }, { key: "deleteGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.deleteGroupAttributes(e3);
      } }, { key: "getGroupAttributes", value: function(e3) {
        return this._groupAttributesHandler.getGroupAttributes(e3);
      } }, { key: "reset", value: function() {
        this.groupMap.clear(), this._unjoinedAVChatRoomList.clear(), this._receiptDetailCompleteMap.clear(), this._commonGroupHandler.reset(), this._groupSystemNoticeHandler.reset(), this._groupTipsHandler.reset(), this._AVChatRoomHandler && this._AVChatRoomHandler.reset();
      } }]), r2;
    }(Cg), Rv = function() {
      function e2(t2) {
        o(this, e2), this.userID = "", this.avatar = "", this.nick = "", this.role = "", this.joinTime = "", this.lastSendMsgTime = "", this.nameCard = "", this.muteUntil = 0, this.memberCustomField = [], this._initMember(t2);
      }
      return a(e2, [{ key: "_initMember", value: function(e3) {
        this.updateMember(e3);
      } }, { key: "updateMember", value: function(e3) {
        var t2 = [null, void 0, "", 0, NaN];
        e3.memberCustomField && Md(this.memberCustomField, e3.memberCustomField), id(this, e3, ["memberCustomField"], t2);
      } }, { key: "updateRole", value: function(e3) {
        ["Owner", "Admin", "Member"].indexOf(e3) < 0 || (this.role = e3);
      } }, { key: "updateMuteUntil", value: function(e3) {
        Zl(e3) || (this.muteUntil = Math.floor((Date.now() + 1e3 * e3) / 1e3));
      } }, { key: "updateNameCard", value: function(e3) {
        Zl(e3) || (this.nameCard = e3);
      } }, { key: "updateMemberCustomField", value: function(e3) {
        e3 && Md(this.memberCustomField, e3);
      } }]), e2;
    }(), Lv = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        return o(this, r2), (t2 = n2.call(this, e3))._className = "GroupMemberModule", t2.groupMemberListMap = /* @__PURE__ */ new Map(), t2.getInnerEmitterInstance().on(tv, t2._onProfileUpdated, _(t2)), t2;
      }
      return a(r2, [{ key: "_onProfileUpdated", value: function(e3) {
        for (var t2 = this, n3 = e3.data, o2 = function(e4) {
          var o3 = n3[e4];
          t2.groupMemberListMap.forEach(function(e5) {
            e5.has(o3.userID) && e5.get(o3.userID).updateMember({ nick: o3.nick, avatar: o3.avatar });
          });
        }, r3 = 0; r3 < n3.length; r3++)
          o2(r3);
      } }, { key: "deleteGroupMemberList", value: function(e3) {
        this.groupMemberListMap.delete(e3);
      } }, { key: "getGroupMemberList", value: function(e3) {
        var t2 = this, n3 = e3.groupID, o2 = e3.offset, r3 = void 0 === o2 ? 0 : o2, a2 = e3.count, s2 = void 0 === a2 ? 15 : a2, i2 = "".concat(this._className, ".getGroupMemberList"), c2 = this.getModule(rg).hasLocalGroup(n3);
        if (bl.log("".concat(i2, " groupID:").concat(n3, " offset:").concat(r3, " count:").concat(s2, " hasLocalGroup:").concat(c2)), !c2)
          return UM({ memberList: [], offset: 0 });
        var u2 = new Ih(Eh.GET_GROUP_MEMBER_LIST), l2 = 0, d2 = { groupID: n3, limit: s2 > 100 ? 100 : s2 };
        Id({ groupID: n3 }) ? d2.next = "".concat(r3) : (d2.offset = r3, l2 = r3 + 1);
        var p3 = [];
        return this.request({ protocolName: R_, requestData: d2 }).then(function(e4) {
          var o3 = e4.data, r4 = o3.members, a3 = o3.memberNum, s3 = o3.next, i3 = void 0 === s3 ? void 0 : s3;
          if (Zl(i3) || (l2 = xd(i3) ? 0 : i3), !Ql(r4) || 0 === r4.length)
            return l2 = 0, Promise.resolve([]);
          var c3 = t2.getModule(rg);
          return c3.hasLocalGroup(n3) && (c3.getLocalGroupProfile(n3).memberNum = a3), p3 = t2._updateLocalGroupMemberMap(n3, r4), t2.getModule(ng).getUserProfile({ userIDList: r4.map(function(e5) {
            return e5.userID;
          }), tagList: [Fl.NICK, Fl.AVATAR] });
        }).then(function(e4) {
          var o3 = e4.data;
          if (!Ql(o3) || 0 === o3.length)
            return UM({ memberList: [], offset: l2 });
          var r4 = o3.map(function(e5) {
            return { userID: e5.userID, nick: e5.nick, avatar: e5.avatar };
          });
          return t2._updateLocalGroupMemberMap(n3, r4), u2.setNetworkType(t2.getNetworkType()).setMessage("groupID:".concat(n3, " offset:").concat(l2, " count:").concat(s2)).end(), bl.log("".concat(i2, " ok.")), AM({ memberList: p3, offset: l2 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            u2.setError(e4, o3, r4).end();
          }), bl.error("".concat(i2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getGroupMemberProfile", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".getGroupMemberProfile"), r3 = new Ih(Eh.GET_GROUP_MEMBER_PROFILE);
        r3.setMessage(e3.userIDList.length > 5 ? "userIDList.length:".concat(e3.userIDList.length) : "userIDList:".concat(e3.userIDList)), bl.log("".concat(o2, " groupID:").concat(e3.groupID, " userIDList:").concat(e3.userIDList.join(","))), e3.userIDList.length > 50 && (e3.userIDList = e3.userIDList.slice(0, 50));
        var a2 = e3.groupID, s2 = e3.userIDList;
        return this._getGroupMemberProfileAdvance(t(t({}, e3), {}, { userIDList: s2 })).then(function(e4) {
          var t2 = e4.data.members;
          return Ql(t2) && 0 !== t2.length ? (n3._updateLocalGroupMemberMap(a2, t2), n3.getModule(ng).getUserProfile({ userIDList: t2.map(function(e5) {
            return e5.userID;
          }), tagList: [Fl.NICK, Fl.AVATAR] })) : UM([]);
        }).then(function(e4) {
          var t2 = e4.data.map(function(e5) {
            return { userID: e5.userID, nick: e5.nick, avatar: e5.avatar };
          });
          n3._updateLocalGroupMemberMap(a2, t2);
          var o3 = s2.filter(function(e5) {
            return n3.hasLocalGroupMember(a2, e5);
          }).map(function(e5) {
            return n3.getLocalGroupMemberInfo(a2, e5);
          });
          return r3.setNetworkType(n3.getNetworkType()).end(), AM({ memberList: o3 });
        });
      } }, { key: "addGroupMember", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".addGroupMember"), o2 = e3.groupID, r3 = this.getModule(rg).getLocalGroupProfile(o2), a2 = r3.type, s2 = new Ih(Eh.ADD_GROUP_MEMBER);
        if (s2.setMessage("groupID:".concat(o2, " groupType:").concat(a2)), yd(a2)) {
          var i2 = new kM({ code: ah.CANNOT_ADD_MEMBER_IN_AVCHATROOM, message: sh.CANNOT_ADD_MEMBER_IN_AVCHATROOM });
          return s2.setCode(ah.CANNOT_ADD_MEMBER_IN_AVCHATROOM).setError(sh.CANNOT_ADD_MEMBER_IN_AVCHATROOM).setNetworkType(this.getNetworkType()).end(), bM(i2);
        }
        return e3.userIDList = e3.userIDList.map(function(e4) {
          return { userID: e4 };
        }), bl.log("".concat(n3, " groupID:").concat(o2)), this.request({ protocolName: k_, requestData: e3 }).then(function(o3) {
          var a3 = o3.data.members;
          bl.log("".concat(n3, " ok"));
          var i3 = a3.filter(function(e4) {
            return 1 === e4.result;
          }).map(function(e4) {
            return e4.userID;
          }), c2 = a3.filter(function(e4) {
            return 0 === e4.result;
          }).map(function(e4) {
            return e4.userID;
          }), u2 = a3.filter(function(e4) {
            return 2 === e4.result;
          }).map(function(e4) {
            return e4.userID;
          }), l2 = a3.filter(function(e4) {
            return 4 === e4.result;
          }).map(function(e4) {
            return e4.userID;
          }), d2 = "groupID:".concat(e3.groupID, ", ") + "successUserIDList:".concat(i3, ", ") + "failureUserIDList:".concat(c2, ", ") + "existedUserIDList:".concat(u2, ", ") + "overLimitUserIDList:".concat(l2);
          return s2.setNetworkType(t2.getNetworkType()).setMoreMessage(d2).end(), 0 === i3.length ? AM({ successUserIDList: i3, failureUserIDList: c2, existedUserIDList: u2, overLimitUserIDList: l2 }) : (r3.memberCount += i3.length, t2._updateConversationGroupProfile(r3), AM({ successUserIDList: i3, failureUserIDList: c2, existedUserIDList: u2, overLimitUserIDList: l2, group: r3 }));
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            s2.setError(e4, o3, r4).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "deleteGroupMember", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".deleteGroupMember"), o2 = e3.groupID, r3 = e3.userIDList, a2 = new Ih(Eh.DELETE_GROUP_MEMBER), s2 = "groupID:".concat(o2, " ").concat(r3.length > 5 ? "userIDList.length:".concat(r3.length) : "userIDList:".concat(r3));
        a2.setMessage(s2), bl.log("".concat(n3, " groupID:").concat(o2, " userIDList:"), r3);
        var i2 = this.getModule(rg).getLocalGroupProfile(o2);
        return yd(i2.type) ? bM(new kM({ code: ah.CANNOT_KICK_MEMBER_IN_AVCHATROOM, message: sh.CANNOT_KICK_MEMBER_IN_AVCHATROOM })) : this.request({ protocolName: G_, requestData: e3 }).then(function() {
          return a2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok")), i2.memberCount -= 1, t2._updateConversationGroupProfile(i2), t2.deleteLocalGroupMembers(o2, r3), AM({ group: i2, userIDList: r3 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            a2.setError(e4, o3, r4).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "_updateConversationGroupProfile", value: function(e3) {
        this.getModule(cg).updateConversationGroupProfile([e3]);
      } }, { key: "setGroupMemberMuteTime", value: function(e3) {
        var t2 = this, n3 = e3.groupID, o2 = e3.userID, r3 = e3.muteTime, a2 = "".concat(this._className, ".setGroupMemberMuteTime");
        if (o2 === this.getMyUserID())
          return bM(new kM({ code: ah.CANNOT_MUTE_SELF, message: sh.CANNOT_MUTE_SELF }));
        bl.log("".concat(a2, " groupID:").concat(n3, " userID:").concat(o2));
        var s2 = new Ih(Eh.SET_GROUP_MEMBER_MUTE_TIME);
        return s2.setMessage("groupID:".concat(n3, " userID:").concat(o2, " muteTime:").concat(r3)), this.modifyGroupMemberInfo({ groupID: n3, userID: o2, muteTime: r3 }).then(function(e4) {
          s2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(a2, " ok"));
          var o3 = t2.getModule(rg);
          return AM({ group: o3.getLocalGroupProfile(n3), member: e4 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            s2.setError(e4, o3, r4).end();
          }), bl.error("".concat(a2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "setGroupMemberRole", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".setGroupMemberRole"), o2 = e3.groupID, r3 = e3.userID, a2 = e3.role, s2 = this.getModule(rg).getLocalGroupProfile(o2);
        if (s2.selfInfo.role !== gr.GRP_MBR_ROLE_OWNER)
          return bM({ code: ah.NOT_OWNER, message: sh.NOT_OWNER });
        if ([gr.GRP_WORK, gr.GRP_AVCHATROOM].includes(s2.type))
          return bM({ code: ah.CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM, message: sh.CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM });
        var i2 = [gr.GRP_MBR_ROLE_ADMIN, gr.GRP_MBR_ROLE_MEMBER];
        if (Id({ groupID: o2 }) && i2.push(gr.GRP_MBR_ROLE_CUSTOM), i2.indexOf(a2) < 0)
          return bM({ code: ah.INVALID_MEMBER_ROLE, message: sh.INVALID_MEMBER_ROLE });
        if (r3 === this.getMyUserID())
          return bM({ code: ah.CANNOT_SET_SELF_MEMBER_ROLE, message: sh.CANNOT_SET_SELF_MEMBER_ROLE });
        var c2 = new Ih(Eh.SET_GROUP_MEMBER_ROLE);
        return c2.setMessage("groupID:".concat(o2, " userID:").concat(r3, " role:").concat(a2)), bl.log("".concat(n3, " groupID:").concat(o2, " userID:").concat(r3)), this.modifyGroupMemberInfo({ groupID: o2, userID: r3, role: a2 }).then(function(e4) {
          return c2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok")), AM({ group: s2, member: e4 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            c2.setError(e4, o3, r4).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "setGroupMemberNameCard", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".setGroupMemberNameCard"), o2 = e3.groupID, r3 = e3.userID, a2 = void 0 === r3 ? this.getMyUserID() : r3, s2 = e3.nameCard;
        bl.log("".concat(n3, " groupID:").concat(o2, " userID:").concat(a2));
        var i2 = new Ih(Eh.SET_GROUP_MEMBER_NAME_CARD);
        return i2.setMessage("groupID:".concat(o2, " userID:").concat(a2, " nameCard:").concat(s2)), this.modifyGroupMemberInfo({ groupID: o2, userID: a2, nameCard: s2 }).then(function(e4) {
          bl.log("".concat(n3, " ok")), i2.setNetworkType(t2.getNetworkType()).end();
          var r4 = t2.getModule(rg).getLocalGroupProfile(o2);
          return a2 === t2.getMyUserID() && r4 && r4.setSelfNameCard(s2), AM({ group: r4, member: e4 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            i2.setError(e4, o3, r4).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "setGroupMemberCustomField", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".setGroupMemberCustomField"), o2 = e3.groupID, r3 = e3.userID, a2 = void 0 === r3 ? this.getMyUserID() : r3, s2 = e3.memberCustomField;
        bl.log("".concat(n3, " groupID:").concat(o2, " userID:").concat(a2));
        var i2 = new Ih(Eh.SET_GROUP_MEMBER_CUSTOM_FIELD);
        return i2.setMessage("groupID:".concat(o2, " userID:").concat(a2, " memberCustomField:").concat(JSON.stringify(s2))), this.modifyGroupMemberInfo({ groupID: o2, userID: a2, memberCustomField: s2 }).then(function(e4) {
          i2.setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(n3, " ok"));
          var r4 = t2.getModule(rg).getLocalGroupProfile(o2);
          return AM({ group: r4, member: e4 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            i2.setError(e4, o3, r4).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "modifyGroupMemberInfo", value: function(e3) {
        var n3 = this, o2 = e3.groupID, r3 = e3.userID, a2 = void 0;
        return Ed(o2) && (o2 = wd(a2 = o2)), this.request({ protocolName: P_, requestData: t(t({}, e3), {}, { groupID: o2, topicID: a2 }) }).then(function() {
          if (n3.hasLocalGroupMember(o2, r3)) {
            var t2 = n3.getLocalGroupMemberInfo(o2, r3);
            return Zl(e3.muteTime) || t2.updateMuteUntil(e3.muteTime), Zl(e3.role) || t2.updateRole(e3.role), Zl(e3.nameCard) || t2.updateNameCard(e3.nameCard), Zl(e3.memberCustomField) || t2.updateMemberCustomField(e3.memberCustomField), t2;
          }
          return n3.getGroupMemberProfile({ groupID: o2, userIDList: [r3] }).then(function(e4) {
            return m(e4.data.memberList, 1)[0];
          });
        });
      } }, { key: "_getGroupMemberProfileAdvance", value: function(e3) {
        return this.request({ protocolName: L_, requestData: t(t({}, e3), {}, { memberInfoFilter: e3.memberInfoFilter ? e3.memberInfoFilter : ["Role", "JoinTime", "NameCard", "ShutUpUntil"] }) });
      } }, { key: "_updateLocalGroupMemberMap", value: function(e3, t2) {
        var n3 = this;
        return Ql(t2) && 0 !== t2.length ? t2.map(function(t3) {
          return n3.hasLocalGroupMember(e3, t3.userID) ? n3.getLocalGroupMemberInfo(e3, t3.userID).updateMember(t3) : n3.setLocalGroupMember(e3, new Rv(t3)), n3.getLocalGroupMemberInfo(e3, t3.userID);
        }) : [];
      } }, { key: "deleteLocalGroupMembers", value: function(e3, t2) {
        var n3 = this.groupMemberListMap.get(e3);
        n3 && t2.forEach(function(e4) {
          n3.delete(e4);
        });
      } }, { key: "getLocalGroupMemberInfo", value: function(e3, t2) {
        return this.groupMemberListMap.has(e3) ? this.groupMemberListMap.get(e3).get(t2) : null;
      } }, { key: "setLocalGroupMember", value: function(e3, t2) {
        if (this.groupMemberListMap.has(e3))
          this.groupMemberListMap.get(e3).set(t2.userID, t2);
        else {
          var n3 = (/* @__PURE__ */ new Map()).set(t2.userID, t2);
          this.groupMemberListMap.set(e3, n3);
        }
      } }, { key: "getLocalGroupMemberList", value: function(e3) {
        return this.groupMemberListMap.get(e3);
      } }, { key: "hasLocalGroupMember", value: function(e3, t2) {
        return this.groupMemberListMap.has(e3) && this.groupMemberListMap.get(e3).has(t2);
      } }, { key: "hasLocalGroupMemberMap", value: function(e3) {
        return this.groupMemberListMap.has(e3);
      } }, { key: "reset", value: function() {
        this.groupMemberListMap.clear();
      } }]), r2;
    }(Cg), kv = ["topicID", "topicName", "avatar", "introduction", "notification", "unreadCount", "muteAllMembers", "customData", "groupAtInfoList", "nextMessageSeq", "selfInfo"], Gv = function(e2) {
      return xd(e2) ? { lastTime: 0, lastSequence: 0, fromAccount: "", payload: null, type: "", messageForShow: "", nick: "", version: 0, cloudCustomData: "" } : { lastTime: e2.time || 0, lastSequence: e2.sequence || 0, fromAccount: e2.from || "", payload: e2.payload || null, type: e2.type || "", messageForShow: Fd(e2.type, e2.payload), nick: e2.nick || "", version: e2.version || 0, cloudCustomData: e2.cloudCustomData || "" };
    }, Pv = function() {
      function e2(t2) {
        o(this, e2), this.topicID = "", this.topicName = "", this.avatar = "", this.introduction = "", this.notification = "", this.unreadCount = 0, this.muteAllMembers = false, this.customData = "", this.groupAtInfoList = [], this.nextMessageSeq = 0, this.lastMessage = Gv(t2.lastMessage), this.selfInfo = { muteTime: 0, readedSequence: 0, messageRemindType: "" }, this._initTopic(t2);
      }
      return a(e2, [{ key: "_initTopic", value: function(e3) {
        for (var t2 in e3)
          kv.indexOf(t2) < 0 || ("selfInfo" === t2 ? this.updateSelfInfo(e3[t2]) : this[t2] = "muteAllMembers" === t2 ? 1 === e3[t2] : e3[t2]);
      } }, { key: "updateUnreadCount", value: function() {
        var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        this.unreadCount = e3;
      } }, { key: "updateNextMessageSeq", value: function(e3) {
        this.nextMessageSeq = e3;
      } }, { key: "updateLastMessage", value: function(e3) {
        this.lastMessage = Gv(e3);
      } }, { key: "updateGroupAtInfoList", value: function(e3) {
        this.groupAtInfoList = JSON.parse(JSON.stringify(e3));
      } }, { key: "updateTopic", value: function(e3) {
        Zl(e3.selfInfo) || this.updateSelfInfo(e3.selfInfo), Zl(e3.muteAllMembers) || (this.muteAllMembers = 1 === e3.muteAllMembers), id(this, e3, ["groupID", "lastMessageTime", "selfInfo", "muteAllMembers"]);
      } }, { key: "updateSelfInfo", value: function(e3) {
        return 0 !== id(this.selfInfo, e3, [], [""]);
      } }]), e2;
    }(), Uv = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        return o(this, r2), (t2 = n2.call(this, e3))._className = "TopicModule", t2._topicMap = /* @__PURE__ */ new Map(), t2._getTopicTimeMap = /* @__PURE__ */ new Map(), t2.TOPIC_CACHE_TIME = 300, t2.TOPIC_LAST_ACTIVE_TIME = 3600, t2.getInnerEmitterInstance().on(ev, t2._onCloudConfigUpdated, _(t2)), t2;
      }
      return a(r2, [{ key: "_onCloudConfigUpdated", value: function() {
        var e3 = this.getCloudConfig("topic_cache_time"), t2 = this.getCloudConfig("topic_last_active_time");
        Zl(e3) || (this.TOPIC_CACHE_TIME = Number(e3)), Zl(t2) || (this.TOPIC_LAST_ACTIVE_TIME = Number(t2));
      } }, { key: "onTopicCreated", value: function(e3) {
        var t2 = e3.groupID;
        this.resetGetTopicTime(t2), this.emitOuterEvent(pr.TOPIC_CREATED, e3);
      } }, { key: "onTopicDeleted", value: function(e3) {
        var t2 = this, n3 = e3.groupID, o2 = e3.topicIDList;
        (void 0 === o2 ? [] : o2).forEach(function(e4) {
          t2._deleteLocalTopic(n3, e4);
        }), this.emitOuterEvent(pr.TOPIC_DELETED, e3);
      } }, { key: "onTopicMessageRemindTypeUpdated", value: function(e3) {
        var t2 = e3.groupID, n3 = e3.topicID, o2 = e3.messageRemindType, r3 = this.getLocalTopic(t2, n3);
        if (r3) {
          var a2 = r3.updateSelfInfo({ messageRemindType: o2 });
          a2 && this.emitOuterEvent(pr.TOPIC_UPDATED, { groupID: t2, topic: r3 }), bl.debug("".concat(this._className, ".onTopicMessageRemindTypeUpdated topicID:").concat(n3) + " messageRemindType:".concat(o2, " isTopicUpdated:").concat(a2));
        }
      } }, { key: "onTopicProfileUpdated", value: function(e3) {
        var t2 = e3.groupID, n3 = e3.topicID, o2 = this.getLocalTopic(t2, n3);
        o2 && (o2.updateTopic(e3), this.emitOuterEvent(pr.TOPIC_UPDATED, { groupID: t2, topic: o2 }));
      } }, { key: "onConversationProxy", value: function(e3) {
        var t2 = e3.topicID, n3 = e3.unreadCount, o2 = e3.groupAtInfoList, r3 = wd(t2), a2 = this.getLocalTopic(r3, t2), s2 = false;
        a2 && (Zl(n3) || a2.unreadCount === n3 || (a2.updateUnreadCount(n3), s2 = true), Zl(o2) || (a2.updateGroupAtInfoList(o2), s2 = true)), s2 && this.emitOuterEvent(pr.TOPIC_UPDATED, { groupID: r3, topic: a2 });
      } }, { key: "onMessageSent", value: function(e3) {
        var t2 = e3.groupID, n3 = e3.topicID, o2 = e3.lastMessage, r3 = this.getLocalTopic(t2, n3);
        r3 && (r3.nextMessageSeq += 1, r3.updateLastMessage(o2), this.emitOuterEvent(pr.TOPIC_UPDATED, { groupID: t2, topic: r3 }));
      } }, { key: "onMessageModified", value: function(e3) {
        var t2 = e3.to, n3 = e3.time, o2 = e3.sequence, r3 = e3.elements, a2 = e3.cloudCustomData, s2 = e3.messageVersion, i2 = wd(t2), c2 = this.getLocalTopic(i2, t2);
        if (c2) {
          var u2 = c2.lastMessage;
          bl.debug("".concat(this._className, ".onMessageModified topicID:").concat(t2, " lastMessage:"), JSON.stringify(u2), "options:", JSON.stringify(e3)), u2 && (null === u2.payload || u2.lastTime === n3 && u2.lastSequence === o2 && u2.version !== s2) && (u2.type = r3[0].type, u2.payload = r3[0].content, u2.messageForShow = Fd(u2.type, u2.payload), u2.cloudCustomData = a2, u2.version = s2, u2.lastSequence = o2, u2.lastTime = n3, this.emitOuterEvent(pr.TOPIC_UPDATED, { groupID: i2, topic: c2 }));
        }
      } }, { key: "getJoinedCommunityList", value: function() {
        return this.getModule(rg).getGroupList({ isGroupWithTopicOnly: true }).then(function(e3) {
          var t2 = e3.data.groupList;
          return AM({ groupList: void 0 === t2 ? [] : t2 });
        }).catch(function(e3) {
          return bM(e3);
        });
      } }, { key: "createTopicInCommunity", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".createTopicInCommunity"), r3 = e3.topicID;
        if (!Zl(r3) && !Ed(r3))
          return bM({ code: ah.ILLEGAL_TOPIC_ID, message: sh.ILLEGAL_TOPIC_ID });
        var a2 = new Ih(Eh.CREATE_TOPIC);
        return this.request({ protocolName: X_, requestData: t({}, e3) }).then(function(r4) {
          var s2 = r4.data.topicID;
          return a2.setMessage("topicID:".concat(s2)).setNetworkType(n3.getNetworkType()).end(), bl.log("".concat(o2, " ok")), n3._updateTopicMap([t(t({}, e3), {}, { topicID: s2 })]), AM({ topicID: s2 });
        }).catch(function(e4) {
          return n3.probeNetwork().then(function(t2) {
            var n4 = m(t2, 2), o3 = n4[0], r4 = n4[1];
            a2.setError(e4, o3, r4).end();
          }), bl.error("".concat(o2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "deleteTopicFromCommunity", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".deleteTopicFromCommunity"), o2 = e3.groupID, r3 = e3.topicIDList, a2 = void 0 === r3 ? [] : r3, s2 = new Ih(Eh.DELETE_TOPIC);
        return s2.setMessage("groupID:".concat(o2, " topicIDList:").concat(a2)), this.request({ protocolName: Q_, requestData: { groupID: o2, topicIDList: a2 } }).then(function(e4) {
          var n4 = e4.data.resultList, r4 = [], a3 = [];
          (void 0 === n4 ? [] : n4).forEach(function(e5) {
            var t3 = e5.topicID, n5 = e5.errorCode, o3 = e5.errorInfo;
            0 === n5 ? r4.push({ topicID: t3 }) : a3.push({ topicID: t3, code: n5, message: o3 });
          });
          var i2 = "success count:".concat(r4.length, ", fail count:").concat(a3.length);
          return s2.setMoreMessage("".concat(i2)).setNetworkType(t2.getNetworkType()).end(), bl.log("".concat(i2)), r4.forEach(function(e5) {
            t2._deleteLocalTopic(o2, e5.topicID);
          }), AM({ successTopicList: r4, failureTopicList: a3 });
        }).catch(function(e4) {
          return t2.probeNetwork().then(function(t3) {
            var n4 = m(t3, 2), o3 = n4[0], r4 = n4[1];
            s2.setError(e4, o3, r4).end();
          }), bl.error("".concat(n3, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "updateTopicProfile", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".updateTopicProfile"), r3 = new Ih(Eh.UPDATE_TOPIC_PROFILE);
        return r3.setMessage("groupID:".concat(e3.groupID, " topicID:").concat(e3.topicID)), bl.log("".concat(o2, " options:"), e3), Zl(e3.muteAllMembers) || (e3.muteAllMembers = true === e3.muteAllMembers ? "On" : "Off"), this.request({ protocolName: Z_, requestData: t({}, e3) }).then(function() {
          return r3.setNetworkType(n3.getNetworkType()).end(), bl.log("".concat(o2, " ok")), n3._updateTopicMap([e3]), AM({ topic: n3.getLocalTopic(e3.groupID, e3.topicID) });
        }).catch(function(e4) {
          return n3.probeNetwork().then(function(t2) {
            var n4 = m(t2, 2), o3 = n4[0], a2 = n4[1];
            r3.setError(e4, o3, a2).end();
          }), bl.error("".concat(o2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getTopicList", value: function(e3) {
        var n3 = this, o2 = "".concat(this._className, ".getTopicList"), r3 = e3.groupID, a2 = e3.topicIDList, s2 = void 0 === a2 ? [] : a2, i2 = 0 === s2.length, c2 = new Ih(Eh.GET_TOPIC_LIST);
        if (c2.setMessage("groupID:".concat(r3)), this._getTopicTimeMap.has(r3)) {
          var u2 = this._getTopicTimeMap.get(r3), l2 = u2.isGetAll, d2 = u2.time;
          if ((l2 || !l2 && !i2) && Date.now() - d2 < 1e3 * this.TOPIC_CACHE_TIME) {
            var p3 = this._getLocalTopicList(r3, s2);
            if (i2 || p3.length === s2.length)
              return c2.setNetworkType(this.getNetworkType()).setMoreMessage("from cache, topic count:".concat(p3.length)).end(), bl.log("".concat(o2, " groupID:").concat(r3, " from cache, topic count:").concat(p3.length)), UM({ successTopicList: p3, failureTopicList: [] });
          }
        }
        return this.request({ protocolName: eh, requestData: { groupID: r3, topicIDList: s2 } }).then(function(e4) {
          var a3 = e4.data.topicInfoList, s3 = [], u3 = [], l3 = [];
          (void 0 === a3 ? [] : a3).forEach(function(e5) {
            var n4 = e5.topic, o3 = e5.selfInfo, r4 = e5.errorCode, a4 = e5.errorInfo, i3 = n4.topicID;
            0 === r4 ? (s3.push(t(t({}, n4), {}, { selfInfo: o3 })), u3.push(i3)) : l3.push({ topicID: i3, code: r4, message: a4 });
          }), n3._updateTopicMap(s3), n3._handleTopicAtInfo(s3);
          var d3 = "success count:".concat(u3.length, ", fail count:").concat(l3.length);
          c2.setNetworkType(n3.getNetworkType()).setMoreMessage("".concat(d3)).end(), bl.log("".concat(o2, " groupID:").concat(r3, " from remote, ").concat(d3));
          var p4 = [];
          return xd(u3) || (n3._getTopicTimeMap.set(r3, { time: Date.now(), isGetAll: i2 }), p4 = n3._getLocalTopicList(r3, u3)), AM({ successTopicList: p4, failureTopicList: l3 });
        }).catch(function(e4) {
          return n3.probeNetwork(e4).then(function(t2) {
            var n4 = m(t2, 2), o3 = n4[0], r4 = n4[1];
            c2.setError(e4, o3, r4).end();
          }), bl.error("".concat(o2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "hasLocalTopic", value: function(e3, t2) {
        return !!this._topicMap.has(e3) && this._topicMap.get(e3).has(t2);
      } }, { key: "getLocalTopic", value: function(e3, t2) {
        var n3 = null;
        return this._topicMap.has(e3) && (n3 = this._topicMap.get(e3).get(t2)), n3;
      } }, { key: "_getLocalTopicList", value: function(e3) {
        var t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], n3 = this._topicMap.get(e3), o2 = [];
        return n3 && (o2 = M(n3.values())), 0 === t2.length ? o2 : o2.filter(function(e4) {
          return t2.includes(e4.topicID);
        });
      } }, { key: "_deleteLocalTopic", value: function(e3, t2) {
        this._topicMap.has(e3) && (this._topicMap.get(e3).delete(t2), bl.log("".concat(this._className, "._deleteLocalTopic groupID:").concat(e3, " topicID:").concat(t2)));
      } }, { key: "_updateTopicMap", value: function(e3) {
        var t2 = this, n3 = [];
        (e3.forEach(function(e4) {
          var o2 = e4.groupID, r3 = e4.topicID, a2 = null;
          t2._topicMap.has(o2) || t2._topicMap.set(o2, /* @__PURE__ */ new Map()), t2._topicMap.get(o2).has(r3) ? (a2 = t2._topicMap.get(o2).get(r3)).updateTopic(e4) : (t2._getTopicLastMessage(e4), a2 = new Pv(e4), t2._topicMap.get(o2).set(r3, a2));
          var s2 = a2.nextMessageSeq - a2.selfInfo.readedSequence - 1, i2 = s2 > 0 ? s2 : 0;
          a2.updateUnreadCount(i2), n3.push({ conversationID: "".concat(gr.CONV_GROUP).concat(r3), type: gr.CONV_TOPIC, unreadCount: i2 });
        }), n3.length > 0) && this.getModule(cg).updateTopicConversation(n3);
      } }, { key: "resetGetTopicTime", value: function(e3) {
        var t2 = this;
        Zl(e3) ? M(this._getTopicTimeMap.keys()).forEach(function(e4) {
          t2._getTopicTimeMap.set(e4, 0);
        }) : this._getTopicTimeMap.set(e3, 0);
      } }, { key: "getTopicListOnReconnected", value: function() {
        var e3 = this, t2 = M(this._topicMap.keys()), n3 = [];
        t2.forEach(function(t3) {
          var o2 = [];
          e3._getLocalTopicList(t3).forEach(function(t4) {
            var n4 = t4.lastMessage.lastTime, r3 = void 0 === n4 ? 0 : n4;
            Date.now() - 1e3 * r3 < 1e3 * e3.TOPIC_LAST_ACTIVE_TIME && o2.push(t4.topicID);
          }), o2.length > 0 && n3.push({ groupID: t3, topicIDList: o2 });
        }), bl.log("".concat(this._className, ".getTopicListOnReconnected. active community count:").concat(n3.length)), this._relayGetTopicList(n3);
      } }, { key: "_relayGetTopicList", value: function(e3) {
        var t2 = this;
        if (0 !== e3.length) {
          var n3 = e3.shift(), o2 = n3.topicIDList.length > 5 ? "topicIDList.length:".concat(n3.topicIDList.length) : "topicIDList:".concat(n3.topicIDList), r3 = new Ih(Eh.RELAY_GET_TOPIC_LIST);
          r3.setMessage(o2), bl.log("".concat(this._className, "._relayGetTopicList. ").concat(o2)), this.getTopicList(n3).then(function() {
            r3.setNetworkType(t2.getNetworkType()).end(), t2._relayGetTopicList(e3);
          }).catch(function(n4) {
            t2.probeNetwork().then(function(e4) {
              var t3 = m(e4, 2), o3 = t3[0], a2 = t3[1];
              r3.setError(n4, o3, a2).end();
            }), t2._relayGetTopicList(e3);
          });
        }
      } }, { key: "_handleTopicAtInfo", value: function(e3) {
        var n3 = this;
        0 !== e3.length && e3.forEach(function(e4) {
          var o2 = e4.groupID, r3 = e4.topicID, a2 = e4.groupAtInfoList, s2 = [];
          Zl(a2) || (a2.forEach(function(e5) {
            s2.push(t(t({}, e5), {}, { groupID: o2, topicID: r3 }));
          }), n3.getModule(cg).onNewGroupAtTips({ dataList: s2 }));
        });
      } }, { key: "_getTopicLastMessage", value: function(e3) {
        if (!Zl(e3.lastMsg)) {
          var t2 = { time: e3.lastMsg.time, sequence: e3.lastMsg.sequence, from: e3.lastMsg.from, payload: e3.lastMsg.elements[0] ? e3.lastMsg.elements[0].content : null, type: e3.lastMsg.elements[0] ? e3.lastMsg.elements[0].type : "", nick: e3.lastMsg.nick, version: e3.lastMsg.messageVersion, cloudCustomData: e3.lastMsg.cloudCustomData };
          e3.lastMessage = t2;
        }
      } }, { key: "deleteTopicListInCommunity", value: function(e3) {
        var t2 = this, n3 = this._getLocalTopicList(e3), o2 = this.getModule(cg);
        n3.forEach(function(n4) {
          var r3 = n4.topicID;
          t2._deleteLocalTopic(e3, r3), t2._getTopicTimeMap.delete(e3), o2.deleteLocalConversation("".concat(gr.CONV_GROUP).concat(r3));
        });
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._topicMap.clear(), this._getTopicTimeMap.clear(), this.TOPIC_CACHE_TIME = 300, this.TOPIC_LAST_ACTIVE_TIME = 3600;
      } }]), r2;
    }(Cg), bv = function() {
      function e2(t2) {
        o(this, e2), this._userModule = t2, this._className = "ProfileHandler", this.TAG = "profile", this.accountProfileMap = /* @__PURE__ */ new Map(), this.expirationTime = 864e5;
      }
      return a(e2, [{ key: "setExpirationTime", value: function(e3) {
        this.expirationTime = e3;
      } }, { key: "getUserProfile", value: function(e3) {
        var t2 = this, n2 = e3.userIDList;
        e3.fromAccount = this._userModule.getMyAccount(), n2.length > 100 && (bl.warn("".concat(this._className, ".getUserProfile \u83B7\u53D6\u7528\u6237\u8D44\u6599\u4EBA\u6570\u4E0D\u80FD\u8D85\u8FC7100\u4EBA")), n2.length = 100);
        for (var o2, r2 = [], a2 = [], s2 = 0, i2 = n2.length; s2 < i2; s2++)
          o2 = n2[s2], this._userModule.isMyFriend(o2) && this._containsAccount(o2) ? a2.push(this._getProfileFromMap(o2)) : r2.push(o2);
        if (0 === r2.length)
          return UM(a2);
        e3.toAccount = r2;
        var c2 = e3.bFromGetMyProfile || false, u2 = [];
        e3.toAccount.forEach(function(e4) {
          u2.push({ toAccount: e4, standardSequence: 0, customSequence: 0 });
        }), e3.userItem = u2;
        var l2 = new Ih(Eh.GET_USER_PROFILE);
        return l2.setMessage(n2.length > 5 ? "userIDList.length:".concat(n2.length) : "userIDList:".concat(n2)), this._userModule.request({ protocolName: Pg, requestData: e3 }).then(function(e4) {
          l2.setNetworkType(t2._userModule.getNetworkType()).end(), bl.info("".concat(t2._className, ".getUserProfile ok"));
          var n3 = t2._handleResponse(e4).concat(a2);
          return AM(c2 ? n3[0] : n3);
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            l2.setError(e4, o3, r3).end();
          }), bl.error("".concat(t2._className, ".getUserProfile failed. error:"), e4), bM(e4);
        });
      } }, { key: "getMyProfile", value: function() {
        var e3 = this._userModule.getMyAccount();
        if (bl.log("".concat(this._className, ".getMyProfile myAccount:").concat(e3)), this._fillMap(), this._containsAccount(e3)) {
          var t2 = this._getProfileFromMap(e3);
          return bl.debug("".concat(this._className, ".getMyProfile from cache, myProfile:") + JSON.stringify(t2)), UM(t2);
        }
        return this.getUserProfile({ fromAccount: e3, userIDList: [e3], bFromGetMyProfile: true });
      } }, { key: "_handleResponse", value: function(e3) {
        for (var t2, n2, o2 = sd.now(), r2 = e3.data.userProfileItem, a2 = [], s2 = 0, i2 = r2.length; s2 < i2; s2++)
          "@TLS#NOT_FOUND" !== r2[s2].to && "" !== r2[s2].to && (t2 = r2[s2].to, n2 = this._updateMap(t2, this._getLatestProfileFromResponse(t2, r2[s2].profileItem)), a2.push(n2));
        return bl.log("".concat(this._className, "._handleResponse cost ").concat(sd.now() - o2, " ms")), a2;
      } }, { key: "_getLatestProfileFromResponse", value: function(e3, t2) {
        var n2 = {};
        if (n2.userID = e3, n2.profileCustomField = [], !xd(t2))
          for (var o2 = 0, r2 = t2.length; o2 < r2; o2++)
            if (t2[o2].tag.indexOf("Tag_Profile_Custom") > -1)
              n2.profileCustomField.push({ key: t2[o2].tag, value: t2[o2].value });
            else
              switch (t2[o2].tag) {
                case Fl.NICK:
                  n2.nick = t2[o2].value;
                  break;
                case Fl.GENDER:
                  n2.gender = t2[o2].value;
                  break;
                case Fl.BIRTHDAY:
                  n2.birthday = t2[o2].value;
                  break;
                case Fl.LOCATION:
                  n2.location = t2[o2].value;
                  break;
                case Fl.SELFSIGNATURE:
                  n2.selfSignature = t2[o2].value;
                  break;
                case Fl.ALLOWTYPE:
                  n2.allowType = t2[o2].value;
                  break;
                case Fl.LANGUAGE:
                  n2.language = t2[o2].value;
                  break;
                case Fl.AVATAR:
                  n2.avatar = t2[o2].value;
                  break;
                case Fl.MESSAGESETTINGS:
                  n2.messageSettings = t2[o2].value;
                  break;
                case Fl.ADMINFORBIDTYPE:
                  n2.adminForbidType = t2[o2].value;
                  break;
                case Fl.LEVEL:
                  n2.level = t2[o2].value;
                  break;
                case Fl.ROLE:
                  n2.role = t2[o2].value;
                  break;
                default:
                  bl.warn("".concat(this._className, "._handleResponse unknown tag:"), t2[o2].tag, t2[o2].value);
              }
        return n2;
      } }, { key: "updateMyProfile", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, ".updateMyProfile"), o2 = new Ih(Eh.UPDATE_MY_PROFILE);
        o2.setMessage(JSON.stringify(e3));
        var r2 = new uv().validate(e3);
        if (!r2.valid)
          return o2.setCode(ah.UPDATE_PROFILE_INVALID_PARAM).setMoreMessage("".concat(n2, " info:").concat(r2.tips)).setNetworkType(this._userModule.getNetworkType()).end(), bl.error("".concat(n2, " info:").concat(r2.tips, "\uFF0C\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#updateMyProfile")), bM({ code: ah.UPDATE_PROFILE_INVALID_PARAM, message: sh.UPDATE_PROFILE_INVALID_PARAM });
        var a2 = [];
        for (var s2 in e3)
          Object.prototype.hasOwnProperty.call(e3, s2) && ("profileCustomField" === s2 ? e3.profileCustomField.forEach(function(e4) {
            a2.push({ tag: e4.key, value: e4.value });
          }) : a2.push({ tag: Fl[s2.toUpperCase()], value: e3[s2] }));
        return 0 === a2.length ? (o2.setCode(ah.UPDATE_PROFILE_NO_KEY).setMoreMessage(sh.UPDATE_PROFILE_NO_KEY).setNetworkType(this._userModule.getNetworkType()).end(), bl.error("".concat(n2, " info:").concat(sh.UPDATE_PROFILE_NO_KEY, "\uFF0C\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#updateMyProfile")), bM({ code: ah.UPDATE_PROFILE_NO_KEY, message: sh.UPDATE_PROFILE_NO_KEY })) : this._userModule.request({ protocolName: Ug, requestData: { fromAccount: this._userModule.getMyAccount(), profileItem: a2 } }).then(function(r3) {
          o2.setNetworkType(t2._userModule.getNetworkType()).end(), bl.info("".concat(n2, " ok"));
          var a3 = t2._updateMap(t2._userModule.getMyAccount(), e3);
          return t2._userModule.emitOuterEvent(pr.PROFILE_UPDATED, [a3]), UM(a3);
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), r3 = n3[0], a3 = n3[1];
            o2.setError(e4, r3, a3).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "onProfileModified", value: function(e3) {
        var t2 = e3.dataList;
        if (!xd(t2)) {
          var n2, o2, r2 = t2.length;
          bl.debug("".concat(this._className, ".onProfileModified count:").concat(r2, " dataList:"), e3.dataList);
          for (var a2 = [], s2 = 0; s2 < r2; s2++)
            n2 = t2[s2].userID, o2 = this._updateMap(n2, this._getLatestProfileFromResponse(n2, t2[s2].profileList)), a2.push(o2);
          a2.length > 0 && (this._userModule.emitInnerEvent(tv, a2), this._userModule.emitOuterEvent(pr.PROFILE_UPDATED, a2));
        }
      } }, { key: "_fillMap", value: function() {
        if (0 === this.accountProfileMap.size) {
          for (var e3 = this._getCachedProfiles(), t2 = Date.now(), n2 = 0, o2 = e3.length; n2 < o2; n2++)
            t2 - e3[n2].lastUpdatedTime < this.expirationTime && this.accountProfileMap.set(e3[n2].userID, e3[n2]);
          bl.log("".concat(this._className, "._fillMap from cache, map.size:").concat(this.accountProfileMap.size));
        }
      } }, { key: "_updateMap", value: function(e3, t2) {
        var n2, o2 = Date.now();
        return this._containsAccount(e3) ? (n2 = this._getProfileFromMap(e3), t2.profileCustomField && Md(n2.profileCustomField, t2.profileCustomField), id(n2, t2, ["profileCustomField"]), n2.lastUpdatedTime = o2) : (n2 = new uv(t2), (this._userModule.isMyFriend(e3) || e3 === this._userModule.getMyAccount()) && (n2.lastUpdatedTime = o2, this.accountProfileMap.set(e3, n2))), this._flushMap(e3 === this._userModule.getMyAccount()), n2;
      } }, { key: "_flushMap", value: function(e3) {
        var t2 = M(this.accountProfileMap.values()), n2 = this._userModule.getStorageModule();
        bl.debug("".concat(this._className, "._flushMap length:").concat(t2.length, " flushAtOnce:").concat(e3)), n2.setItem(this.TAG, t2, e3);
      } }, { key: "_containsAccount", value: function(e3) {
        return this.accountProfileMap.has(e3);
      } }, { key: "_getProfileFromMap", value: function(e3) {
        return this.accountProfileMap.get(e3);
      } }, { key: "_getCachedProfiles", value: function() {
        var e3 = this._userModule.getStorageModule().getItem(this.TAG);
        return xd(e3) ? [] : e3;
      } }, { key: "onConversationsProfileUpdated", value: function(e3) {
        for (var t2, n2, o2, r2 = [], a2 = 0, s2 = e3.length; a2 < s2; a2++)
          n2 = (t2 = e3[a2]).userID, this._userModule.isMyFriend(n2) || (this._containsAccount(n2) ? (o2 = this._getProfileFromMap(n2), id(o2, t2) > 0 && r2.push(n2)) : r2.push(t2.userID));
        0 !== r2.length && (bl.info("".concat(this._className, ".onConversationsProfileUpdated toAccountList:").concat(r2)), this.getUserProfile({ userIDList: r2 }));
      } }, { key: "getNickAndAvatarByUserID", value: function(e3) {
        if (this._containsAccount(e3)) {
          var t2 = this._getProfileFromMap(e3);
          return { nick: t2.nick, avatar: t2.avatar };
        }
        return { nick: "", avatar: "" };
      } }, { key: "reset", value: function() {
        this._flushMap(true), this.accountProfileMap.clear();
      } }]), e2;
    }(), wv = a(function e2(t2) {
      o(this, e2), xd || (this.userID = t2.userID || "", this.timeStamp = t2.timeStamp || 0);
    }), Fv = function() {
      function e2(t2) {
        o(this, e2), this._userModule = t2, this._className = "BlacklistHandler", this._blacklistMap = /* @__PURE__ */ new Map(), this.startIndex = 0, this.maxLimited = 100, this.currentSequence = 0;
      }
      return a(e2, [{ key: "getLocalBlacklist", value: function() {
        return M(this._blacklistMap.keys());
      } }, { key: "getBlacklist", value: function() {
        var e3 = this, t2 = "".concat(this._className, ".getBlacklist"), n2 = { fromAccount: this._userModule.getMyAccount(), maxLimited: this.maxLimited, startIndex: 0, lastSequence: this.currentSequence }, o2 = new Ih(Eh.GET_BLACKLIST);
        return this._userModule.request({ protocolName: bg, requestData: n2 }).then(function(n3) {
          var r2 = n3.data, a2 = r2.blackListItem, s2 = r2.currentSequence, i2 = xd(a2) ? 0 : a2.length;
          o2.setNetworkType(e3._userModule.getNetworkType()).setMessage("blackList count:".concat(i2)).end(), bl.info("".concat(t2, " ok")), e3.currentSequence = s2, e3._handleResponse(a2, true), e3._userModule.emitOuterEvent(pr.BLACKLIST_UPDATED, M(e3._blacklistMap.keys()));
        }).catch(function(n3) {
          return e3._userModule.probeNetwork().then(function(e4) {
            var t3 = m(e4, 2), r2 = t3[0], a2 = t3[1];
            o2.setError(n3, r2, a2).end();
          }), bl.error("".concat(t2, " failed. error:"), n3), bM(n3);
        });
      } }, { key: "addBlacklist", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, ".addBlacklist"), o2 = new Ih(Eh.ADD_TO_BLACKLIST);
        if (!Ql(e3.userIDList))
          return o2.setCode(ah.ADD_BLACKLIST_INVALID_PARAM).setMessage(sh.ADD_BLACKLIST_INVALID_PARAM).setNetworkType(this._userModule.getNetworkType()).end(), bl.error("".concat(n2, " options.userIDList \u5FC5\u9700\u662F\u6570\u7EC4")), bM({ code: ah.ADD_BLACKLIST_INVALID_PARAM, message: sh.ADD_BLACKLIST_INVALID_PARAM });
        var r2 = this._userModule.getMyAccount();
        return 1 === e3.userIDList.length && e3.userIDList[0] === r2 ? (o2.setCode(ah.CANNOT_ADD_SELF_TO_BLACKLIST).setMessage(sh.CANNOT_ADD_SELF_TO_BLACKLIST).setNetworkType(this._userModule.getNetworkType()).end(), bl.error("".concat(n2, " \u4E0D\u80FD\u628A\u81EA\u5DF1\u62C9\u9ED1")), bM({ code: ah.CANNOT_ADD_SELF_TO_BLACKLIST, message: sh.CANNOT_ADD_SELF_TO_BLACKLIST })) : (e3.userIDList.includes(r2) && (e3.userIDList = e3.userIDList.filter(function(e4) {
          return e4 !== r2;
        }), bl.warn("".concat(n2, " \u4E0D\u80FD\u628A\u81EA\u5DF1\u62C9\u9ED1\uFF0C\u5DF2\u8FC7\u6EE4"))), e3.fromAccount = this._userModule.getMyAccount(), e3.toAccount = e3.userIDList, this._userModule.request({ protocolName: wg, requestData: e3 }).then(function(r3) {
          return o2.setNetworkType(t2._userModule.getNetworkType()).setMessage(e3.userIDList.length > 5 ? "userIDList.length:".concat(e3.userIDList.length) : "userIDList:".concat(e3.userIDList)).end(), bl.info("".concat(n2, " ok")), t2._handleResponse(r3.resultItem, true), AM(M(t2._blacklistMap.keys()));
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), r3 = n3[0], a2 = n3[1];
            o2.setError(e4, r3, a2).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        }));
      } }, { key: "_handleResponse", value: function(e3, t2) {
        if (!xd(e3))
          for (var n2, o2, r2, a2 = 0, s2 = e3.length; a2 < s2; a2++)
            o2 = e3[a2].to, r2 = e3[a2].resultCode, (Zl(r2) || 0 === r2) && (t2 ? ((n2 = this._blacklistMap.has(o2) ? this._blacklistMap.get(o2) : new wv()).userID = o2, !xd(e3[a2].addBlackTimeStamp) && (n2.timeStamp = e3[a2].addBlackTimeStamp), this._blacklistMap.set(o2, n2)) : this._blacklistMap.has(o2) && (n2 = this._blacklistMap.get(o2), this._blacklistMap.delete(o2)));
        bl.log("".concat(this._className, "._handleResponse total:").concat(this._blacklistMap.size, " bAdd:").concat(t2));
      } }, { key: "deleteBlacklist", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, ".deleteBlacklist"), o2 = new Ih(Eh.REMOVE_FROM_BLACKLIST);
        return Ql(e3.userIDList) ? (e3.fromAccount = this._userModule.getMyAccount(), e3.toAccount = e3.userIDList, this._userModule.request({ protocolName: Fg, requestData: e3 }).then(function(r2) {
          return o2.setNetworkType(t2._userModule.getNetworkType()).setMessage(e3.userIDList.length > 5 ? "userIDList.length:".concat(e3.userIDList.length) : "userIDList:".concat(e3.userIDList)).end(), bl.info("".concat(n2, " ok")), t2._handleResponse(r2.data.resultItem, false), AM(M(t2._blacklistMap.keys()));
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), r2 = n3[0], a2 = n3[1];
            o2.setError(e4, r2, a2).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        })) : (o2.setCode(ah.DEL_BLACKLIST_INVALID_PARAM).setMessage(sh.DEL_BLACKLIST_INVALID_PARAM).setNetworkType(this._userModule.getNetworkType()).end(), bl.error("".concat(n2, " options.userIDList \u5FC5\u9700\u662F\u6570\u7EC4")), bM({ code: ah.DEL_BLACKLIST_INVALID_PARAM, message: sh.DEL_BLACKLIST_INVALID_PARAM }));
      } }, { key: "onAccountDeleted", value: function(e3) {
        for (var t2, n2 = [], o2 = 0, r2 = e3.length; o2 < r2; o2++)
          t2 = e3[o2], this._blacklistMap.has(t2) && (this._blacklistMap.delete(t2), n2.push(t2));
        n2.length > 0 && (bl.log("".concat(this._className, ".onAccountDeleted count:").concat(n2.length, " userIDList:"), n2), this._userModule.emitOuterEvent(pr.BLACKLIST_UPDATED, M(this._blacklistMap.keys())));
      } }, { key: "onAccountAdded", value: function(e3) {
        for (var t2, n2 = [], o2 = 0, r2 = e3.length; o2 < r2; o2++)
          t2 = e3[o2], this._blacklistMap.has(t2) || (this._blacklistMap.set(t2, new wv({ userID: t2 })), n2.push(t2));
        n2.length > 0 && (bl.log("".concat(this._className, ".onAccountAdded count:").concat(n2.length, " userIDList:"), n2), this._userModule.emitOuterEvent(pr.BLACKLIST_UPDATED, M(this._blacklistMap.keys())));
      } }, { key: "reset", value: function() {
        this._blacklistMap.clear(), this.startIndex = 0, this.maxLimited = 100, this.currentSequence = 0;
      } }]), e2;
    }(), qv = Er("splice"), Vv = R.TypeError, xv = Math.max, Bv = Math.min;
    nn({ target: "Array", proto: true, forced: !qv }, { splice: function(e2, t2) {
      var n2, o2, r2, a2, s2, i2, c2 = Ae(this), u2 = Ut(c2), l2 = kt(e2, u2), d2 = arguments.length;
      if (0 === d2 ? n2 = o2 = 0 : 1 === d2 ? (n2 = 0, o2 = u2 - l2) : (n2 = d2 - 2, o2 = Bv(xv(Ot(t2), 0), u2 - l2)), u2 + n2 - o2 > 9007199254740991)
        throw Vv("Maximum allowed length exceeded");
      for (r2 = Jn(c2, o2), a2 = 0; a2 < o2; a2++)
        (s2 = l2 + a2) in c2 && Mo(r2, a2, c2[s2]);
      if (r2.length = o2, n2 < o2) {
        for (a2 = l2; a2 < u2 - o2; a2++)
          i2 = a2 + n2, (s2 = a2 + o2) in c2 ? c2[i2] = c2[s2] : delete c2[i2];
        for (a2 = u2; a2 > u2 - o2 + n2; a2--)
          delete c2[a2 - 1];
      } else if (n2 > o2)
        for (a2 = u2 - o2; a2 > l2; a2--)
          i2 = a2 + n2 - 1, (s2 = a2 + o2 - 1) in c2 ? c2[i2] = c2[s2] : delete c2[i2];
      for (a2 = 0; a2 < n2; a2++)
        c2[a2 + l2] = arguments[a2 + 2];
      return c2.length = u2 - o2 + n2, r2;
    } });
    var Kv = function(e2) {
      var t2 = String(e2).replace(/[=]+$/, ""), n2 = "";
      if (t2.length % 4 == 1)
        return bl.warn("decodeBase64 failed: ".concat(e2, " to be decoded is not correctly encoded.")), "";
      for (var o2, r2, a2 = 0, s2 = 0; r2 = t2.charAt(s2++); ~r2 && (o2 = a2 % 4 ? 64 * o2 + r2 : r2, a2++ % 4) ? n2 += String.fromCharCode(255 & o2 >> (-2 * a2 & 6)) : 0)
        r2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(r2);
      try {
        return decodeURIComponent(escape(n2));
      } catch (fS) {
        return bl.warn("decodeBase64 failed: ".concat(e2, " to be decoded is not correctly encoded.")), "";
      }
    }, Hv = function() {
      function e2(t2) {
        o(this, e2), this._userModule = t2, this._className = "UserStatusHandler", this.MAX_QUERY_USER_COUNT = 500, this.MAX_SUBSCRIBE_USER_COUNT = 100, this.MAX_UNSUBSCRIBE_USER_COUNT = 100, this._userModule.getInnerEmitterInstance().on(ev, this._onCloudConfigUpdated, this);
      }
      return a(e2, [{ key: "_onCloudConfigUpdated", value: function() {
        var e3 = this._userModule.getCloudConfig("status_query_count"), t2 = this._userModule.getCloudConfig("status_sub_count"), n2 = this._userModule.getCloudConfig("status_unsub_count");
        bl.log("".concat(this._className, "._onCloudConfigUpdated statusQueryCount:").concat(e3, " statusSubscribeCount:").concat(t2) + " statusUnsubscribeCount:".concat(n2)), Zl(e3) || (this.MAX_QUERY_USER_COUNT = parseInt(e3, 10)), Zl(e3) || (this.MAX_SUBSCRIBE_USER_COUNT = parseInt(t2, 10)), Zl(e3) || (this.MAX_UNSUBSCRIBE_USER_COUNT = parseInt(n2, 10));
      } }, { key: "onUserStatusUpdated", value: function(e3) {
        var t2 = e3.dataList, n2 = this._userModule.getMyUserID(), o2 = this._userModule.getModule(ug), r2 = t2.map(function(e4) {
          var t3 = e4.to, r3 = e4.statusType, a2 = e4.customStatus, s2 = Kv(a2);
          return t3 === n2 && o2.setCustomStatus(s2), { userID: t3, statusType: r3, customStatus: s2 };
        });
        this._userModule.emitOuterEvent(pr.USER_STATUS_UPDATED, r2);
      } }, { key: "setSelfStatus", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, ".setSelfStatus"), o2 = e3.customStatus, r2 = new Ih(Eh.SET_SELF_STATUS);
        return this._userModule.request({ protocolName: th, requestData: { customStatus: o2 } }).then(function(e4) {
          return r2.setNetworkType(t2._userModule.getNetworkType()).setMessage("customStatus:".concat(o2)).end(), bl.log("".concat(n2, " ok. customStatus:").concat(o2)), t2._userModule.getModule(ug).setCustomStatus(o2), AM({ userID: t2._userModule.getMyUserID(), statusType: 1, customStatus: o2 });
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], a2 = n3[1];
            r2.setError(e4, o3, a2).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "getUserStatus", value: function(e3) {
        var t2 = this, n2 = "".concat(this._className, ".getUserStatus"), o2 = e3.userIDList, r2 = void 0 === o2 ? [] : o2, a2 = this._userModule.getMyUserID(), s2 = M(r2), i2 = void 0, c2 = s2.indexOf(a2);
        if (c2 > -1) {
          s2.splice(c2, 1);
          var u2 = this._userModule.getModule(ug).getCustomStatus();
          i2 = { userID: a2, statusType: 1, customStatus: u2 };
        }
        if (0 === s2.length)
          return UM({ successUserList: [i2], failureUserList: [] });
        if (!this._canIUseUserStatus())
          return bM({ code: ah.CANNOT_USE_COMMERCIAL_ABILITY, message: sh.CANNOT_USE_COMMERCIAL_ABILITY });
        s2.length > this.MAX_QUERY_USER_COUNT && (bl.warn("".concat(n2, " \u67E5\u8BE2\u7528\u6237\u72B6\u6001\u5355\u6B21\u8BF7\u6C42\u4E0D\u80FD\u8D85\u8FC7").concat(this.MAX_QUERY_USER_COUNT, "\u4E2A\u7528\u6237")), s2 = r2.slice(0, this.MAX_QUERY_USER_COUNT));
        var l2 = new Ih(Eh.GET_USER_STATUS);
        return this._userModule.request({ protocolName: nh, requestData: { userIDList: s2 } }).then(function(e4) {
          var o3 = e4.data, a3 = o3.successUserList, s3 = void 0 === a3 ? [] : a3, c3 = o3.failureUserList, u3 = void 0 === c3 ? [] : c3, d2 = s3.map(function(e5) {
            var t3 = e5.userID, n3 = e5.statusType, o4 = e5.customStatus;
            return { userID: t3, statusType: n3, customStatus: Kv(o4) };
          }), p3 = u3.map(function(e5) {
            var t3 = e5.userID, n3 = e5.invalidUserID, o4 = e5.errorCode, r3 = e5.errorInfo;
            return { userID: xd(n3) ? t3 : n3, code: o4, message: r3 };
          });
          Zl(i2) || d2.unshift(i2);
          var g2 = "userID count:".concat(r2.length, ", success count:").concat(d2.length, ", fail count:").concat(p3.length);
          return l2.setNetworkType(t2._userModule.getNetworkType()).setMessage("".concat(g2)).end(), bl.log("".concat(n2, " ok. ").concat(g2, ".")), AM({ successUserList: d2, failureUserList: p3 });
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], a3 = n3[1];
            l2.setMessage("userID count:".concat(r2.length)).setError(e4, o3, a3).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "subscribeUserStatus", value: function(e3) {
        var t2 = this;
        if (!this._canIUseUserStatus())
          return bM({ code: ah.CANNOT_USE_COMMERCIAL_ABILITY, message: sh.CANNOT_USE_COMMERCIAL_ABILITY });
        var n2 = "".concat(this._className, ".subscribeUserStatus"), o2 = e3.userIDList, r2 = void 0 === o2 ? [] : o2, a2 = M(r2);
        a2.length > this.MAX_SUBSCRIBE_USER_COUNT && (bl.warn("".concat(n2, " \u8BA2\u9605\u7528\u6237\u72B6\u6001\u5355\u6B21\u8BF7\u6C42\u4E0D\u80FD\u8D85\u8FC7").concat(this.MAX_SUBSCRIBE_USER_COUNT, "\u4E2A\u7528\u6237")), a2 = r2.slice(0, this.MAX_SUBSCRIBE_USER_COUNT));
        var s2 = new Ih(Eh.SUBSCRIBE_USER_STATUS), i2 = "userID count:".concat(r2.length);
        return bl.log("".concat(n2, " ").concat(i2)), this._userModule.request({ protocolName: oh, requestData: { userIDList: a2 } }).then(function(e4) {
          var o3 = e4.data.failureUserList, r3 = (void 0 === o3 ? [] : o3).map(function(e5) {
            var t3 = e5.userID, n3 = e5.invalidUserID, o4 = e5.errorCode, r4 = e5.errorInfo;
            return { userID: xd(n3) ? t3 : n3, code: o4, message: r4 };
          });
          return s2.setNetworkType(t2._userModule.getNetworkType()).setMessage("".concat(i2, " fail count:").concat(r3.length)).end(), bl.log("".concat(n2, " ok. fail count:").concat(r3.length, ".")), AM({ failureUserList: r3 });
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            s2.setMessage("".concat(i2)).setError(e4, o3, r3).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "unsubscribeUserStatus", value: function(e3) {
        var t2 = this;
        if (!this._canIUseUserStatus())
          return bM({ code: ah.CANNOT_USE_COMMERCIAL_ABILITY, message: sh.CANNOT_USE_COMMERCIAL_ABILITY });
        var n2 = "".concat(this._className, ".unsubscribeUserStatus"), o2 = (e3 || {}).userIDList, r2 = void 0 === o2 ? [] : o2, a2 = M(r2);
        r2.length > this.MAX_UNSUBSCRIBE_USER_COUNT && (bl.warn("".concat(n2, " \u53D6\u6D88\u8BA2\u9605\u7528\u6237\u72B6\u6001\u5355\u6B21\u8BF7\u6C42\u4E0D\u80FD\u8D85\u8FC7").concat(this.MAX_UNSUBSCRIBE_USER_COUNT, "\u4E2A\u7528\u6237")), a2 = r2.slice(0, this.MAX_UNSUBSCRIBE_USER_COUNT));
        var s2 = new Ih(Eh.UNSUBSCRIBE_USER_STATUS), i2 = "userID count:".concat(r2.length);
        bl.log("".concat(n2, " ").concat(i2));
        var c2 = { userIDList: a2 };
        return 0 === a2.length && (c2.userIDList = void 0, c2.unsubscribeAll = 1), this._userModule.request({ protocolName: rh, requestData: c2 }).then(function(e4) {
          var o3 = e4.data.failureUserList, r3 = (void 0 === o3 ? [] : o3).map(function(e5) {
            var t3 = e5.userID, n3 = e5.invalidUserID, o4 = e5.errorCode, r4 = e5.errorInfo;
            return { userID: xd(n3) ? t3 : n3, code: o4, message: r4 };
          });
          return s2.setNetworkType(t2._userModule.getNetworkType()).setMessage("".concat(i2, " fail count:").concat(r3.length)).end(), bl.log("".concat(n2, " ok. fail count:").concat(r3.length, ".")), AM({ failureUserList: r3 });
        }).catch(function(e4) {
          return t2._userModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            s2.setMessage("".concat(i2)).setError(e4, o3, r3).end();
          }), bl.error("".concat(n2, " failed. error:"), e4), bM(e4);
        });
      } }, { key: "_canIUseUserStatus", value: function() {
        return this._userModule.getModule(Sg).hasPurchasedFeature(Uu.USER_STATUS);
      } }, { key: "reset", value: function() {
        this.MAX_QUERY_USER_COUNT = 500, this.MAX_SUBSCRIBE_USER_COUNT = 100, this.MAX_UNSUBSCRIBE_USER_COUNT = 100;
      } }]), e2;
    }(), jv = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "UserModule", r2._profileHandler = new bv(_(r2)), r2._blacklistHandler = new Fv(_(r2)), r2._userStatusHandler = new Hv(_(r2)), r2.getInnerEmitterInstance().on(ZM, r2.onContextUpdated, _(r2)), r2;
      }
      return a(n2, [{ key: "onContextUpdated", value: function(e3) {
        this._profileHandler.getMyProfile(), this._blacklistHandler.getBlacklist();
      } }, { key: "onProfileModified", value: function(e3) {
        this._profileHandler.onProfileModified(e3);
      } }, { key: "onRelationChainModified", value: function(e3) {
        var t3 = e3.dataList;
        if (!xd(t3)) {
          var n3 = [];
          t3.forEach(function(e4) {
            e4.blackListDelAccount && n3.push.apply(n3, M(e4.blackListDelAccount));
          }), n3.length > 0 && this._blacklistHandler.onAccountDeleted(n3);
          var o2 = [];
          t3.forEach(function(e4) {
            e4.blackListAddAccount && o2.push.apply(o2, M(e4.blackListAddAccount));
          }), o2.length > 0 && this._blacklistHandler.onAccountAdded(o2);
        }
      } }, { key: "onConversationsProfileUpdated", value: function(e3) {
        this._profileHandler.onConversationsProfileUpdated(e3);
      } }, { key: "getMyAccount", value: function() {
        return this.getMyUserID();
      } }, { key: "getMyProfile", value: function() {
        return this._profileHandler.getMyProfile();
      } }, { key: "getStorageModule", value: function() {
        return this.getModule(lg);
      } }, { key: "isMyFriend", value: function(e3) {
        var t3 = this.getModule(ag);
        return !!t3 && t3.isMyFriend(e3);
      } }, { key: "getUserProfile", value: function(e3) {
        return this._profileHandler.getUserProfile(e3);
      } }, { key: "updateMyProfile", value: function(e3) {
        return this._profileHandler.updateMyProfile(e3);
      } }, { key: "getNickAndAvatarByUserID", value: function(e3) {
        return this._profileHandler.getNickAndAvatarByUserID(e3);
      } }, { key: "getLocalBlacklist", value: function() {
        var e3 = this._blacklistHandler.getLocalBlacklist();
        return UM(e3);
      } }, { key: "addBlacklist", value: function(e3) {
        return this._blacklistHandler.addBlacklist(e3);
      } }, { key: "deleteBlacklist", value: function(e3) {
        return this._blacklistHandler.deleteBlacklist(e3);
      } }, { key: "onUserStatusUpdated", value: function(e3) {
        this._userStatusHandler.onUserStatusUpdated(e3);
      } }, { key: "setSelfStatus", value: function(e3) {
        return this._userStatusHandler.setSelfStatus(e3);
      } }, { key: "getUserStatus", value: function(e3) {
        return this._userStatusHandler.getUserStatus(e3);
      } }, { key: "subscribeUserStatus", value: function(e3) {
        return this._userStatusHandler.subscribeUserStatus(e3);
      } }, { key: "unsubscribeUserStatus", value: function(e3) {
        return this._userStatusHandler.unsubscribeUserStatus(e3);
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._profileHandler.reset(), this._blacklistHandler.reset(), this._userStatusHandler.reset();
      } }]), n2;
    }(Cg), Wv = function() {
      function e2(t2, n2) {
        o(this, e2), this._moduleManager = t2, this._isLoggedIn = false, this._SDKAppID = n2.SDKAppID, this._userID = n2.userID || "", this._userSig = n2.userSig || "", this._version = "2.21.0", this._a2Key = "", this._tinyID = "", this._customStatus = "", this._contentType = "json", this._unlimitedAVChatRoom = n2.unlimitedAVChatRoom, this._scene = n2.scene || "", this._oversea = n2.oversea, this._instanceID = n2.instanceID, this._statusInstanceID = 0, this._isDevMode = n2.devMode, this._proxyServer = n2.proxyServer;
      }
      return a(e2, [{ key: "isLoggedIn", value: function() {
        return this._isLoggedIn;
      } }, { key: "isOversea", value: function() {
        return this._oversea;
      } }, { key: "isPrivateNetWork", value: function() {
        return this._proxyServer;
      } }, { key: "isDevMode", value: function() {
        return this._isDevMode;
      } }, { key: "isSingaporeSite", value: function() {
        return this._SDKAppID >= 2e7 && this._SDKAppID < 3e7;
      } }, { key: "isKoreaSite", value: function() {
        return this._SDKAppID >= 3e7 && this._SDKAppID < 4e7;
      } }, { key: "isGermanySite", value: function() {
        return this._SDKAppID >= 4e7 && this._SDKAppID < 5e7;
      } }, { key: "isIndiaSite", value: function() {
        return this._SDKAppID >= 5e7 && this._SDKAppID < 6e7;
      } }, { key: "isUnlimitedAVChatRoom", value: function() {
        return this._unlimitedAVChatRoom;
      } }, { key: "setUserID", value: function(e3) {
        this._userID = e3;
      } }, { key: "getUserID", value: function() {
        return this._userID;
      } }, { key: "setUserSig", value: function(e3) {
        this._userSig = e3;
      } }, { key: "getUserSig", value: function() {
        return this._userSig;
      } }, { key: "getSDKAppID", value: function() {
        return this._SDKAppID;
      } }, { key: "setTinyID", value: function(e3) {
        this._tinyID = e3, this._isLoggedIn = true;
      } }, { key: "getTinyID", value: function() {
        return this._tinyID;
      } }, { key: "setCustomStatus", value: function(e3) {
        this._customStatus = e3;
      } }, { key: "getCustomStatus", value: function() {
        return this._customStatus;
      } }, { key: "getScene", value: function() {
        return this._isTUIKit() ? "tuikit" : this._scene;
      } }, { key: "getInstanceID", value: function() {
        return this._instanceID;
      } }, { key: "getStatusInstanceID", value: function() {
        return this._statusInstanceID;
      } }, { key: "setStatusInstanceID", value: function(e3) {
        this._statusInstanceID = e3;
      } }, { key: "getVersion", value: function() {
        return this._version;
      } }, { key: "getA2Key", value: function() {
        return this._a2Key;
      } }, { key: "setA2Key", value: function(e3) {
        this._a2Key = e3;
      } }, { key: "getContentType", value: function() {
        return this._contentType;
      } }, { key: "getProxyServer", value: function() {
        return this._proxyServer;
      } }, { key: "_isTUIKit", value: function() {
        var e3 = false, t2 = false, n2 = false, o2 = false, r2 = [];
        Hu && (r2 = Object.keys(Wu)), ju && (r2 = Ku ? Object.keys(uni) : Object.keys(window));
        for (var a2 = 0, s2 = r2.length; a2 < s2; a2++)
          if (r2[a2].toLowerCase().includes("uikit")) {
            e3 = true;
            break;
          }
        if (r2 = null, Hu && td(getApp)) {
          var i2 = getApp().globalData;
          Xl(i2) && true === i2.isTUIKit && (t2 = true);
        }
        true === this._moduleManager.getModule(lg).getStorageSync("TIM_".concat(this._SDKAppID, "_isTUIKit")) && (n2 = true);
        var c2 = null;
        if (wu && !qu && "undefined" == typeof uni && __wxConfig && (c2 = __wxConfig.pages), Fu && "undefined" == typeof uni && __qqConfig && (c2 = __qqConfig.pages), Ql(c2) && c2.length > 0) {
          for (var u2 = 0, l2 = c2.length; u2 < l2; u2++)
            if (c2[u2].toLowerCase().includes("tui")) {
              o2 = true;
              break;
            }
          c2 = null;
        }
        return e3 || t2 || n2 || o2;
      } }, { key: "reset", value: function() {
        this._isLoggedIn = false, this._userSig = "", this._a2Key = "", this._tinyID = "", this._customStatus = "", this._statusInstanceID = 0;
      } }]), e2;
    }(), Yv = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "SignModule", r2._helloInterval = 120, r2._lastLoginTs = 0, r2._lastWsHelloTs = 0, nv.mixin(_(r2)), r2;
      }
      return a(n2, [{ key: "onCheckTimer", value: function(e3) {
        this.isLoggedIn() && e3 % this._helloInterval == 0 && this._hello();
      } }, { key: "login", value: function(e3) {
        if (this.isLoggedIn()) {
          var t3 = "\u60A8\u5DF2\u7ECF\u767B\u5F55\u5E10\u53F7".concat(e3.userID, "\uFF01\u5982\u9700\u5207\u6362\u5E10\u53F7\u767B\u5F55\uFF0C\u8BF7\u5148\u8C03\u7528 logout \u63A5\u53E3\u767B\u51FA\uFF0C\u518D\u8C03\u7528 login \u63A5\u53E3\u767B\u5F55\u3002");
          return bl.warn(t3), UM({ actionStatus: "OK", errorCode: 0, errorInfo: t3, repeatLogin: true });
        }
        if (Date.now() - this._lastLoginTs <= 15e3)
          return bl.warn("\u60A8\u6B63\u5728\u5C1D\u8BD5\u767B\u5F55\u5E10\u53F7".concat(e3.userID, "\uFF01\u8BF7\u52FF\u91CD\u590D\u767B\u5F55\u3002")), bM({ code: ah.REPEAT_LOGIN, message: sh.REPEAT_LOGIN });
        bl.log("".concat(this._className, ".login userID:").concat(e3.userID));
        var n3 = this._checkLoginInfo(e3);
        if (0 !== n3.code)
          return bM(n3);
        var o2 = this.getModule(ug), r2 = e3.userID, a2 = e3.userSig;
        return o2.setUserID(r2), o2.setUserSig(a2), this.getModule(mg).updateProtocolConfig(), this._login();
      } }, { key: "_login", value: function() {
        var e3 = this, t3 = this.getModule(ug), n3 = t3.getScene(), o2 = new Ih(Eh.LOGIN);
        return o2.setMessage("".concat(n3)).setMoreMessage("identifier:".concat(this.getMyUserID())), Ku ? "tuikit" === n3 ? o2.setUIPlatform(4) : o2.setUIPlatform(3) : Hu ? "tuikit" === n3 ? o2.setUIPlatform(12) : o2.setUIPlatform(11) : ju && (pl ? "tuikit" === n3 ? o2.setUIPlatform(17) : o2.setUIPlatform(16) : "tuikit" === n3 ? o2.setUIPlatform(14) : o2.setUIPlatform(13)), this._lastLoginTs = Date.now(), this.request({ protocolName: Ag }).then(function(r2) {
          e3._lastLoginTs = 0;
          var a2 = Date.now(), s2 = null, i2 = r2.data, c2 = i2.a2Key, u2 = i2.tinyID, l2 = i2.helloInterval, d2 = i2.instanceID, p3 = i2.timeStamp, g2 = i2.customStatus, _2 = void 0 === g2 ? "" : g2;
          bl.log("".concat(e3._className, ".login ok. scene:").concat(n3, " helloInterval:").concat(l2, " instanceID:").concat(d2, " timeStamp:").concat(p3));
          var h3 = 1e3 * p3, f2 = a2 - o2.getStartTs(), m2 = h3 + parseInt(f2 / 2) - a2, M2 = o2.getStartTs() + m2;
          if (o2.start(M2), function(e4, t4) {
            Ol = t4;
            var n4 = new Date();
            n4.setTime(e4), bl.info("baseTime from server: ".concat(n4, " offset: ").concat(Ol));
          }(h3, m2), !u2)
            throw s2 = new kM({ code: ah.NO_TINYID, message: sh.NO_TINYID }), o2.setError(s2, true, e3.getNetworkType()).end(), s2;
          if (!c2)
            throw s2 = new kM({ code: ah.NO_A2KEY, message: sh.NO_A2KEY }), o2.setError(s2, true, e3.getNetworkType()).end(), s2;
          o2.setNetworkType(e3.getNetworkType()).setMoreMessage("helloInterval:".concat(l2, " instanceID:").concat(d2, " offset:").concat(m2)).end(), t3.setA2Key(c2), t3.setTinyID(u2), t3.setStatusInstanceID(d2);
          var v2 = Kv(_2);
          return t3.setCustomStatus(v2), e3.getModule(mg).updateProtocolConfig(), e3.emitInnerEvent(ZM), e3._helloInterval = l2, e3.triggerReady(), e3._fetchCloudControlConfig(), r2;
        }).catch(function(t4) {
          return e3.probeNetwork().then(function(e4) {
            var n4 = m(e4, 2), r2 = n4[0], a2 = n4[1];
            o2.setError(t4, r2, a2).end(true);
          }), e3._moduleManager.setNotReadyReason(ah.LOGIN_FAILED), bl.error("".concat(e3._className, ".login failed. error:"), t4), e3._lastLoginTs = 0, e3._moduleManager.onLoginFailed(), bM(t4);
        });
      } }, { key: "logout", value: function() {
        var e3 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        if (!this.isLoggedIn())
          return bM({ code: ah.USER_NOT_LOGGED_IN, message: sh.USER_NOT_LOGGED_IN });
        var n3 = new Ih(Eh.LOGOUT);
        return n3.setNetworkType(this.getNetworkType()).setMessage("identifier:".concat(this.getMyUserID())).end(true), bl.info("".concat(this._className, ".logout type:").concat(t3)), 0 === t3 && this._moduleManager.setNotReadyReason(ah.LOGGED_OUT), this.request({ protocolName: Dg, requestData: { type: t3 } }).then(function() {
          return e3.resetReady(), UM({});
        }).catch(function(t4) {
          return bl.error("".concat(e3._className, "._logout error:"), t4), e3.resetReady(), UM({});
        });
      } }, { key: "_fetchCloudControlConfig", value: function() {
        this.getModule(yg).fetchConfig();
      } }, { key: "_hello", value: function() {
        var e3 = this;
        this._lastWsHelloTs = Date.now(), this.request({ protocolName: Ng }).catch(function(t3) {
          bl.warn("".concat(e3._className, "._hello error:"), t3);
        });
      } }, { key: "getLastWsHelloTs", value: function() {
        return this._lastWsHelloTs;
      } }, { key: "_checkLoginInfo", value: function(e3) {
        var t3 = 0, n3 = "";
        return xd(this.getModule(ug).getSDKAppID()) ? (t3 = ah.NO_SDKAPPID, n3 = sh.NO_SDKAPPID) : xd(e3.userID) ? (t3 = ah.NO_IDENTIFIER, n3 = sh.NO_IDENTIFIER) : xd(e3.userSig) && (t3 = ah.NO_USERSIG, n3 = sh.NO_USERSIG), { code: t3, message: n3 };
      } }, { key: "onMultipleAccountKickedOut", value: function(e3) {
        var t3 = this;
        new Ih(Eh.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage("type:".concat(gr.KICKED_OUT_MULT_ACCOUNT, " newInstanceInfo:").concat(JSON.stringify(e3))).end(true), bl.warn("".concat(this._className, ".onMultipleAccountKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e3), this.logout(1).then(function() {
          t3.emitOuterEvent(pr.KICKED_OUT, { type: gr.KICKED_OUT_MULT_ACCOUNT }), t3._moduleManager.setNotReadyReason(ah.KICKED_OUT_MULT_ACCOUNT), t3._moduleManager.reset();
        });
      } }, { key: "onMultipleDeviceKickedOut", value: function(e3) {
        var t3 = this;
        new Ih(Eh.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage("type:".concat(gr.KICKED_OUT_MULT_DEVICE, " newInstanceInfo:").concat(JSON.stringify(e3))).end(true), bl.warn("".concat(this._className, ".onMultipleDeviceKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e3), this.logout(1).then(function() {
          t3.emitOuterEvent(pr.KICKED_OUT, { type: gr.KICKED_OUT_MULT_DEVICE }), t3._moduleManager.setNotReadyReason(ah.KICKED_OUT_MULT_DEVICE), t3._moduleManager.reset();
        });
      } }, { key: "onUserSigExpired", value: function() {
        new Ih(Eh.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage(gr.KICKED_OUT_USERSIG_EXPIRED).end(true), bl.warn("".concat(this._className, ".onUserSigExpired: userSig \u7B7E\u540D\u8FC7\u671F\u88AB\u8E22\u4E0B\u7EBF")), 0 !== this.getModule(ug).getStatusInstanceID() && (this.emitOuterEvent(pr.KICKED_OUT, { type: gr.KICKED_OUT_USERSIG_EXPIRED }), this._moduleManager.setNotReadyReason(ah.KICKED_OUT_USERSIG_EXPIRED), this._moduleManager.reset());
      } }, { key: "onRestApiKickedOut", value: function(e3) {
        (new Ih(Eh.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage("type:".concat(gr.KICKED_OUT_REST_API, " newInstanceInfo:").concat(JSON.stringify(e3))).end(true), bl.warn("".concat(this._className, ".onRestApiKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e3), 0 !== this.getModule(ug).getStatusInstanceID()) && (this.emitOuterEvent(pr.KICKED_OUT, { type: gr.KICKED_OUT_REST_API }), this._moduleManager.setNotReadyReason(ah.KICKED_OUT_REST_API), this._moduleManager.reset(), this.getModule(Mg).onRestApiKickedOut());
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this.resetReady(), this._helloInterval = 120, this._lastLoginTs = 0, this._lastWsHelloTs = 0;
      } }]), n2;
    }(Cg), $v = nt.f;
    function zv() {
      return null;
    }
    nn({ target: "Object", stat: true, forced: Object.defineProperty !== $v, sham: !k }, { defineProperty: $v });
    var Jv = function() {
      function e2(t2) {
        o(this, e2), this._moduleManager = t2, this._className = "StorageModule", this._storageQueue = /* @__PURE__ */ new Map(), this._errorTolerantHandle();
      }
      return a(e2, [{ key: "_errorTolerantHandle", value: function() {
        Hu || !Zl(window) && !Zl(window.localStorage) || (this.getItem = zv, this.setItem = zv, this.removeItem = zv, this.clear = zv);
      } }, { key: "onCheckTimer", value: function(e3) {
        if (e3 % 20 == 0) {
          if (0 === this._storageQueue.size)
            return;
          this._doFlush();
        }
      } }, { key: "_doFlush", value: function() {
        try {
          var e3, t2 = S(this._storageQueue);
          try {
            for (t2.s(); !(e3 = t2.n()).done; ) {
              var n2 = m(e3.value, 2), o2 = n2[0], r2 = n2[1];
              this._setStorageSync(this._getKey(o2), r2);
            }
          } catch (a2) {
            t2.e(a2);
          } finally {
            t2.f();
          }
          this._storageQueue.clear();
        } catch (fS) {
          bl.warn("".concat(this._className, "._doFlush error:"), fS);
        }
      } }, { key: "_getPrefix", value: function() {
        var e3 = this._moduleManager.getModule(ug);
        return "TIM_".concat(e3.getSDKAppID(), "_").concat(e3.getUserID(), "_");
      } }, { key: "_getKey", value: function(e3) {
        return "".concat(this._getPrefix()).concat(e3);
      } }, { key: "getItem", value: function(e3) {
        var t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        try {
          var n2 = t2 ? this._getKey(e3) : e3;
          return this.getStorageSync(n2);
        } catch (fS) {
          return bl.warn("".concat(this._className, ".getItem error:"), fS), {};
        }
      } }, { key: "setItem", value: function(e3, t2) {
        var n2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
        if (n2) {
          var r2 = o2 ? this._getKey(e3) : e3;
          this._setStorageSync(r2, t2);
        } else
          this._storageQueue.set(e3, t2);
      } }, { key: "clear", value: function() {
        try {
          Hu ? Wu.clearStorageSync() : localStorage && localStorage.clear();
        } catch (fS) {
          bl.warn("".concat(this._className, ".clear error:"), fS);
        }
      } }, { key: "removeItem", value: function(e3) {
        var t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        try {
          var n2 = t2 ? this._getKey(e3) : e3;
          this._removeStorageSync(n2);
        } catch (fS) {
          bl.warn("".concat(this._className, ".removeItem error:"), fS);
        }
      } }, { key: "getSize", value: function(e3) {
        var t2 = this, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "b";
        try {
          var o2 = { size: 0, limitSize: 5242880, unit: n2 };
          if (Object.defineProperty(o2, "leftSize", { enumerable: true, get: function() {
            return o2.limitSize - o2.size;
          } }), Hu && (o2.limitSize = 1024 * Wu.getStorageInfoSync().limitSize), e3)
            o2.size = JSON.stringify(this.getItem(e3)).length + this._getKey(e3).length;
          else if (Hu) {
            var r2 = Wu.getStorageInfoSync(), a2 = r2.keys;
            a2.forEach(function(e4) {
              o2.size += JSON.stringify(t2.getStorageSync(e4)).length + t2._getKey(e4).length;
            });
          } else if (localStorage)
            for (var s2 in localStorage)
              localStorage.hasOwnProperty(s2) && (o2.size += localStorage.getItem(s2).length + s2.length);
          return this._convertUnit(o2);
        } catch (fS) {
          bl.warn("".concat(this._className, " error:"), fS);
        }
      } }, { key: "_convertUnit", value: function(e3) {
        var t2 = {}, n2 = e3.unit;
        for (var o2 in t2.unit = n2, e3)
          "number" == typeof e3[o2] && ("kb" === n2.toLowerCase() ? t2[o2] = Math.round(e3[o2] / 1024) : "mb" === n2.toLowerCase() ? t2[o2] = Math.round(e3[o2] / 1024 / 1024) : t2[o2] = e3[o2]);
        return t2;
      } }, { key: "_setStorageSync", value: function(e3, t2) {
        Hu ? xu ? my.setStorageSync({ key: e3, data: t2 }) : Wu.setStorageSync(e3, t2) : localStorage && localStorage.setItem(e3, JSON.stringify(t2));
      } }, { key: "getStorageSync", value: function(e3) {
        return Hu ? xu ? my.getStorageSync({ key: e3 }).data : Wu.getStorageSync(e3) : localStorage ? JSON.parse(localStorage.getItem(e3)) : {};
      } }, { key: "_removeStorageSync", value: function(e3) {
        Hu ? xu ? my.removeStorageSync({ key: e3 }) : Wu.removeStorageSync(e3) : localStorage && localStorage.removeItem(e3);
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._doFlush();
      } }]), e2;
    }(), Xv = function() {
      function e2(t2) {
        o(this, e2), this._className = "SSOLogBody", this._report = [];
      }
      return a(e2, [{ key: "pushIn", value: function(e3) {
        bl.debug("".concat(this._className, ".pushIn"), this._report.length, e3), this._report.push(e3);
      } }, { key: "backfill", value: function(e3) {
        var t2;
        Ql(e3) && 0 !== e3.length && (bl.debug("".concat(this._className, ".backfill"), this._report.length, e3.length), (t2 = this._report).unshift.apply(t2, M(e3)));
      } }, { key: "getLogsNumInMemory", value: function() {
        return this._report.length;
      } }, { key: "isEmpty", value: function() {
        return 0 === this._report.length;
      } }, { key: "_reset", value: function() {
        this._report.length = 0, this._report = [];
      } }, { key: "getLogsInMemory", value: function() {
        var e3 = this._report.slice();
        return this._reset(), e3;
      } }]), e2;
    }(), Qv = function(e2) {
      var t2 = e2.getModule(ug);
      return { SDKType: 10, SDKAppID: t2.getSDKAppID(), SDKVersion: t2.getVersion(), tinyID: Number(t2.getTinyID()), userID: t2.getUserID(), platform: e2.getPlatform(), instanceID: t2.getInstanceID(), traceID: Rl() };
    }, Zv = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        o(this, r2), (t2 = n2.call(this, e3))._className = "EventStatModule", t2.TAG = "im-ssolog-event", t2._reportBody = new Xv(), t2.MIN_THRESHOLD = 20, t2.MAX_THRESHOLD = 100, t2.WAITING_TIME = 6e4, t2.REPORT_LEVEL = [4, 5, 6], t2.REPORT_SDKAPPID_BLACKLIST = [], t2.REPORT_TINYID_WHITELIST = [], t2._lastReportTime = Date.now();
        var a2 = t2.getInnerEmitterInstance();
        return a2.on(ZM, t2._onLoginSuccess, _(t2)), a2.on(ev, t2._onCloudConfigUpdated, _(t2)), t2;
      }
      return a(r2, [{ key: "reportAtOnce", value: function() {
        bl.debug("".concat(this._className, ".reportAtOnce")), this._report();
      } }, { key: "_onLoginSuccess", value: function() {
        var e3 = this, t2 = this.getModule(lg), n3 = t2.getItem(this.TAG, false);
        !xd(n3) && td(n3.forEach) && (bl.log("".concat(this._className, "._onLoginSuccess get ssolog in storage, count:").concat(n3.length)), n3.forEach(function(t3) {
          e3._reportBody.pushIn(t3);
        }), t2.removeItem(this.TAG, false));
      } }, { key: "_onCloudConfigUpdated", value: function() {
        var e3 = this.getCloudConfig("evt_rpt_threshold"), t2 = this.getCloudConfig("evt_rpt_waiting"), n3 = this.getCloudConfig("evt_rpt_level"), o2 = this.getCloudConfig("evt_rpt_sdkappid_bl"), r3 = this.getCloudConfig("evt_rpt_tinyid_wl");
        Zl(e3) || (this.MIN_THRESHOLD = Number(e3)), Zl(t2) || (this.WAITING_TIME = Number(t2)), Zl(n3) || (this.REPORT_LEVEL = n3.split(",").map(function(e4) {
          return Number(e4);
        })), Zl(o2) || (this.REPORT_SDKAPPID_BLACKLIST = o2.split(",").map(function(e4) {
          return Number(e4);
        })), Zl(r3) || (this.REPORT_TINYID_WHITELIST = r3.split(","));
      } }, { key: "pushIn", value: function(e3) {
        e3 instanceof Ih && (e3.updateTimeStamp(), this._reportBody.pushIn(e3), this._reportBody.getLogsNumInMemory() >= this.MIN_THRESHOLD && this._report());
      } }, { key: "onCheckTimer", value: function() {
        Date.now() < this._lastReportTime + this.WAITING_TIME || this._reportBody.isEmpty() || this._report();
      } }, { key: "_filterLogs", value: function(e3) {
        var t2 = this, n3 = this.getModule(ug), o2 = n3.getSDKAppID(), r3 = n3.getTinyID();
        return Ud(this.REPORT_SDKAPPID_BLACKLIST, o2) && !bd(this.REPORT_TINYID_WHITELIST, r3) ? [] : e3.filter(function(e4) {
          return t2.REPORT_LEVEL.includes(e4.level);
        });
      } }, { key: "_report", value: function() {
        var e3 = this;
        if (!this._reportBody.isEmpty()) {
          var n3 = this._reportBody.getLogsInMemory(), o2 = this._filterLogs(n3);
          if (0 !== o2.length) {
            var r3 = { header: Qv(this), event: o2 };
            this.request({ protocolName: F_, requestData: t({}, r3) }).then(function() {
              e3._lastReportTime = Date.now();
            }).catch(function(t2) {
              bl.warn("".concat(e3._className, ".report failed. networkType:").concat(e3.getNetworkType(), " error:"), t2), e3._reportBody.backfill(n3), e3._reportBody.getLogsNumInMemory() > e3.MAX_THRESHOLD && e3._flushAtOnce();
            });
          } else
            this._lastReportTime = Date.now();
        }
      } }, { key: "_flushAtOnce", value: function() {
        var e3 = this.getModule(lg), t2 = e3.getItem(this.TAG, false), n3 = this._reportBody.getLogsInMemory();
        if (xd(t2))
          bl.log("".concat(this._className, "._flushAtOnce count:").concat(n3.length)), e3.setItem(this.TAG, n3, true, false);
        else {
          var o2 = n3.concat(t2);
          o2.length > this.MAX_THRESHOLD && (o2 = o2.slice(0, this.MAX_THRESHOLD)), bl.log("".concat(this._className, "._flushAtOnce count:").concat(o2.length)), e3.setItem(this.TAG, o2, true, false);
        }
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._lastReportTime = 0, this._report(), this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [];
      } }]), r2;
    }(Cg), ey = "none", ty = "online", ny = [ah.OVER_FREQUENCY_LIMIT, ah.OPEN_SERVICE_OVERLOAD_ERROR], oy = function() {
      function e2(t2) {
        o(this, e2), this._moduleManager = t2, this._networkType = "", this._className = "NetMonitorModule", this.MAX_WAIT_TIME = 3e3, this._mpNetworkStatusCallback = null, this._webOnlineCallback = null, this._webOfflineCallback = null;
      }
      return a(e2, [{ key: "start", value: function() {
        var e3 = this;
        Hu ? (Wu.getNetworkType({ success: function(t2) {
          e3._networkType = t2.networkType, t2.networkType === ey ? bl.warn("".concat(e3._className, ".start no network, please check!")) : bl.info("".concat(e3._className, ".start networkType:").concat(t2.networkType));
        } }), this._mpNetworkStatusCallback = this._onNetworkStatusChange.bind(this), Wu.onNetworkStatusChange(this._mpNetworkStatusCallback)) : (this._networkType = ty, this._webOnlineCallback = this._onWebOnline.bind(this), this._webOfflineCallback = this._onWebOffline.bind(this), window && (window.addEventListener("online", this._webOnlineCallback), window.addEventListener("offline", this._webOfflineCallback)));
      } }, { key: "_onWebOnline", value: function() {
        this._onNetworkStatusChange({ isConnected: true, networkType: ty });
      } }, { key: "_onWebOffline", value: function() {
        this._onNetworkStatusChange({ isConnected: false, networkType: ey });
      } }, { key: "_onNetworkStatusChange", value: function(e3) {
        var t2 = e3.isConnected, n2 = e3.networkType, o2 = false;
        t2 ? (bl.info("".concat(this._className, "._onNetworkStatusChange previousNetworkType:").concat(this._networkType, " currentNetworkType:").concat(n2)), this._networkType !== n2 && (o2 = true, this._moduleManager.getModule(Mg).reConnect(true))) : this._networkType !== n2 && (o2 = true, bl.warn("".concat(this._className, "._onNetworkStatusChange no network, please check!")), this._moduleManager.getModule(Mg).offline());
        o2 && (new Ih(Eh.NETWORK_CHANGE).setMessage("isConnected:".concat(t2, " previousNetworkType:").concat(this._networkType, " networkType:").concat(n2)).end(), this._networkType = n2);
      } }, { key: "probe", value: function(e3) {
        var t2 = this;
        return !Zl(e3) && ny.includes(e3.code) ? Promise.resolve([true, this._networkType]) : new Promise(function(e4, n2) {
          if (Hu)
            Wu.getNetworkType({ success: function(n3) {
              t2._networkType = n3.networkType, n3.networkType === ey ? (bl.warn("".concat(t2._className, ".probe no network, please check!")), e4([false, n3.networkType])) : (bl.info("".concat(t2._className, ".probe networkType:").concat(n3.networkType)), e4([true, n3.networkType]));
            } });
          else if (window && window.fetch)
            fetch("".concat(hd(), "//web.sdk.qcloud.com/im/assets/speed.xml?random=").concat(Math.random())).then(function(t3) {
              t3.ok ? e4([true, ty]) : e4([false, ey]);
            }).catch(function(t3) {
              e4([false, ey]);
            });
          else {
            var o2 = new XMLHttpRequest(), r2 = setTimeout(function() {
              bl.warn("".concat(t2._className, ".probe fetch timeout. Probably no network, please check!")), o2.abort(), t2._networkType = ey, e4([false, ey]);
            }, t2.MAX_WAIT_TIME);
            o2.onreadystatechange = function() {
              4 === o2.readyState && (clearTimeout(r2), 200 === o2.status || 304 === o2.status || 514 === o2.status ? (this._networkType = ty, e4([true, ty])) : (bl.warn("".concat(this.className, ".probe fetch status:").concat(o2.status, ". Probably no network, please check!")), this._networkType = ey, e4([false, ey])));
            }, o2.open("GET", "".concat(hd(), "//web.sdk.qcloud.com/im/assets/speed.xml?random=").concat(Math.random())), o2.send();
          }
        });
      } }, { key: "getNetworkType", value: function() {
        return this._networkType;
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), Hu ? null !== this._mpNetworkStatusCallback && (Wu.offNetworkStatusChange && (Bu || qu ? Wu.offNetworkStatusChange(this._mpNetworkStatusCallback) : Wu.offNetworkStatusChange()), this._mpNetworkStatusCallback = null) : window && (null !== this._webOnlineCallback && (window.removeEventListener("online", this._webOnlineCallback), this._webOnlineCallback = null), null !== this._onWebOffline && (window.removeEventListener("offline", this._webOfflineCallback), this._webOfflineCallback = null));
      } }]), e2;
    }(), ry = A(function(e2) {
      var t2 = Object.prototype.hasOwnProperty, n2 = "~";
      function o2() {
      }
      function r2(e3, t3, n3) {
        this.fn = e3, this.context = t3, this.once = n3 || false;
      }
      function a2(e3, t3, o3, a3, s3) {
        if ("function" != typeof o3)
          throw new TypeError("The listener must be a function");
        var i3 = new r2(o3, a3 || e3, s3), c2 = n2 ? n2 + t3 : t3;
        return e3._events[c2] ? e3._events[c2].fn ? e3._events[c2] = [e3._events[c2], i3] : e3._events[c2].push(i3) : (e3._events[c2] = i3, e3._eventsCount++), e3;
      }
      function s2(e3, t3) {
        0 == --e3._eventsCount ? e3._events = new o2() : delete e3._events[t3];
      }
      function i2() {
        this._events = new o2(), this._eventsCount = 0;
      }
      Object.create && (o2.prototype = /* @__PURE__ */ Object.create(null), new o2().__proto__ || (n2 = false)), i2.prototype.eventNames = function() {
        var e3, o3, r3 = [];
        if (0 === this._eventsCount)
          return r3;
        for (o3 in e3 = this._events)
          t2.call(e3, o3) && r3.push(n2 ? o3.slice(1) : o3);
        return Object.getOwnPropertySymbols ? r3.concat(Object.getOwnPropertySymbols(e3)) : r3;
      }, i2.prototype.listeners = function(e3) {
        var t3 = n2 ? n2 + e3 : e3, o3 = this._events[t3];
        if (!o3)
          return [];
        if (o3.fn)
          return [o3.fn];
        for (var r3 = 0, a3 = o3.length, s3 = new Array(a3); r3 < a3; r3++)
          s3[r3] = o3[r3].fn;
        return s3;
      }, i2.prototype.listenerCount = function(e3) {
        var t3 = n2 ? n2 + e3 : e3, o3 = this._events[t3];
        return o3 ? o3.fn ? 1 : o3.length : 0;
      }, i2.prototype.emit = function(e3, t3, o3, r3, a3, s3) {
        var i3 = n2 ? n2 + e3 : e3;
        if (!this._events[i3])
          return false;
        var c2, u2, l2 = this._events[i3], d2 = arguments.length;
        if (l2.fn) {
          switch (l2.once && this.removeListener(e3, l2.fn, void 0, true), d2) {
            case 1:
              return l2.fn.call(l2.context), true;
            case 2:
              return l2.fn.call(l2.context, t3), true;
            case 3:
              return l2.fn.call(l2.context, t3, o3), true;
            case 4:
              return l2.fn.call(l2.context, t3, o3, r3), true;
            case 5:
              return l2.fn.call(l2.context, t3, o3, r3, a3), true;
            case 6:
              return l2.fn.call(l2.context, t3, o3, r3, a3, s3), true;
          }
          for (u2 = 1, c2 = new Array(d2 - 1); u2 < d2; u2++)
            c2[u2 - 1] = arguments[u2];
          l2.fn.apply(l2.context, c2);
        } else {
          var p3, g2 = l2.length;
          for (u2 = 0; u2 < g2; u2++)
            switch (l2[u2].once && this.removeListener(e3, l2[u2].fn, void 0, true), d2) {
              case 1:
                l2[u2].fn.call(l2[u2].context);
                break;
              case 2:
                l2[u2].fn.call(l2[u2].context, t3);
                break;
              case 3:
                l2[u2].fn.call(l2[u2].context, t3, o3);
                break;
              case 4:
                l2[u2].fn.call(l2[u2].context, t3, o3, r3);
                break;
              default:
                if (!c2)
                  for (p3 = 1, c2 = new Array(d2 - 1); p3 < d2; p3++)
                    c2[p3 - 1] = arguments[p3];
                l2[u2].fn.apply(l2[u2].context, c2);
            }
        }
        return true;
      }, i2.prototype.on = function(e3, t3, n3) {
        return a2(this, e3, t3, n3, false);
      }, i2.prototype.once = function(e3, t3, n3) {
        return a2(this, e3, t3, n3, true);
      }, i2.prototype.removeListener = function(e3, t3, o3, r3) {
        var a3 = n2 ? n2 + e3 : e3;
        if (!this._events[a3])
          return this;
        if (!t3)
          return s2(this, a3), this;
        var i3 = this._events[a3];
        if (i3.fn)
          i3.fn !== t3 || r3 && !i3.once || o3 && i3.context !== o3 || s2(this, a3);
        else {
          for (var c2 = 0, u2 = [], l2 = i3.length; c2 < l2; c2++)
            (i3[c2].fn !== t3 || r3 && !i3[c2].once || o3 && i3[c2].context !== o3) && u2.push(i3[c2]);
          u2.length ? this._events[a3] = 1 === u2.length ? u2[0] : u2 : s2(this, a3);
        }
        return this;
      }, i2.prototype.removeAllListeners = function(e3) {
        var t3;
        return e3 ? (t3 = n2 ? n2 + e3 : e3, this._events[t3] && s2(this, t3)) : (this._events = new o2(), this._eventsCount = 0), this;
      }, i2.prototype.off = i2.prototype.removeListener, i2.prototype.addListener = i2.prototype.on, i2.prefixed = n2, i2.EventEmitter = i2, e2.exports = i2;
    }), ay = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "BigDataChannelModule", r2.FILETYPE = { SOUND: 2106, FILE: 2107, VIDEO: 2113 }, r2._bdh_download_server = "grouptalk.c2c.qq.com", r2._BDHBizID = 10001, r2._authKey = "", r2._expireTime = 0, r2.getInnerEmitterInstance().on(ZM, r2._getAuthKey, _(r2)), r2;
      }
      return a(n2, [{ key: "_getAuthKey", value: function() {
        var e3 = this;
        this.request({ protocolName: Lg }).then(function(t3) {
          t3.data.authKey && (e3._authKey = t3.data.authKey, e3._expireTime = parseInt(t3.data.expireTime));
        });
      } }, { key: "_isFromOlderVersion", value: function(e3) {
        return !(!e3.content || 2 === e3.content.downloadFlag);
      } }, { key: "parseElements", value: function(e3, t3) {
        if (!Ql(e3) || !t3)
          return [];
        for (var n3 = [], o2 = null, r2 = 0; r2 < e3.length; r2++)
          o2 = e3[r2], this._needParse(o2) ? n3.push(this._parseElement(o2, t3)) : n3.push(e3[r2]);
        return n3;
      } }, { key: "_needParse", value: function(e3) {
        return !e3.cloudCustomData && !(!this._isFromOlderVersion(e3) || e3.type !== gr.MSG_AUDIO && e3.type !== gr.MSG_FILE && e3.type !== gr.MSG_VIDEO);
      } }, { key: "_parseElement", value: function(e3, t3) {
        switch (e3.type) {
          case gr.MSG_AUDIO:
            return this._parseAudioElement(e3, t3);
          case gr.MSG_FILE:
            return this._parseFileElement(e3, t3);
          case gr.MSG_VIDEO:
            return this._parseVideoElement(e3, t3);
        }
      } }, { key: "_parseAudioElement", value: function(e3, t3) {
        return e3.content.url = this._genAudioUrl(e3.content.uuid, t3), e3;
      } }, { key: "_parseFileElement", value: function(e3, t3) {
        return e3.content.url = this._genFileUrl(e3.content.uuid, t3, e3.content.fileName), e3;
      } }, { key: "_parseVideoElement", value: function(e3, t3) {
        return e3.content.url = this._genVideoUrl(e3.content.uuid, t3), e3;
      } }, { key: "_genAudioUrl", value: function(e3, t3) {
        if ("" === this._authKey)
          return bl.warn("".concat(this._className, "._genAudioUrl no authKey!")), "";
        var n3 = this.getModule(ug).getSDKAppID();
        return "https://".concat(this._bdh_download_server, "/asn.com/stddownload_common_file?authkey=").concat(this._authKey, "&bid=").concat(this._BDHBizID, "&subbid=").concat(n3, "&fileid=").concat(e3, "&filetype=").concat(this.FILETYPE.SOUND, "&openid=").concat(t3, "&ver=0");
      } }, { key: "_genFileUrl", value: function(e3, t3, n3) {
        if ("" === this._authKey)
          return bl.warn("".concat(this._className, "._genFileUrl no authKey!")), "";
        n3 || (n3 = "".concat(Math.floor(1e5 * Math.random()), "-").concat(Date.now()));
        var o2 = this.getModule(ug).getSDKAppID();
        return "https://".concat(this._bdh_download_server, "/asn.com/stddownload_common_file?authkey=").concat(this._authKey, "&bid=").concat(this._BDHBizID, "&subbid=").concat(o2, "&fileid=").concat(e3, "&filetype=").concat(this.FILETYPE.FILE, "&openid=").concat(t3, "&ver=0&filename=").concat(encodeURIComponent(n3));
      } }, { key: "_genVideoUrl", value: function(e3, t3) {
        if ("" === this._authKey)
          return bl.warn("".concat(this._className, "._genVideoUrl no authKey!")), "";
        var n3 = this.getModule(ug).getSDKAppID();
        return "https://".concat(this._bdh_download_server, "/asn.com/stddownload_common_file?authkey=").concat(this._authKey, "&bid=").concat(this._BDHBizID, "&subbid=").concat(n3, "&fileid=").concat(e3, "&filetype=").concat(this.FILETYPE.VIDEO, "&openid=").concat(t3, "&ver=0");
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._authKey = "", this.expireTime = 0;
      } }]), n2;
    }(Cg), sy = ["requestSnapshotUrl"], iy = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        return o(this, r2), (t2 = n2.call(this, e3))._className = "UploadModule", t2.TIMUploadPlugin = null, t2.timUploadPlugin = null, t2.COSSDK = null, t2._cosUploadMethod = null, t2.expiredTimeLimit = 600, t2.appid = 0, t2.bucketName = "", t2.ciUrl = "", t2.directory = "", t2.downloadUrl = "", t2.uploadUrl = "", t2.region = "ap-shanghai", t2.cos = null, t2.cosOptions = { secretId: "", secretKey: "", sessionToken: "", expiredTime: 0 }, t2.uploadFileType = "", t2.duration = 900, t2.tryCount = 0, t2.getInnerEmitterInstance().on(ZM, t2._init, _(t2)), t2;
      }
      return a(r2, [{ key: "_init", value: function() {
        var e3 = "".concat(this._className, "._init"), t2 = this.getModule(hg);
        if (this.TIMUploadPlugin = t2.getPlugin("tim-upload-plugin"), this.TIMUploadPlugin)
          this._initUploaderMethod();
        else {
          var n3 = Hu ? "cos-wx-sdk" : "cos-js-sdk";
          this.COSSDK = t2.getPlugin(n3), this.COSSDK ? (this._getAuthorizationKey(), bl.warn("".concat(e3, " v2.9.2\u8D77\u63A8\u8350\u4F7F\u7528 tim-upload-plugin \u4EE3\u66FF ").concat(n3, "\uFF0C\u4E0A\u4F20\u66F4\u5FEB\u66F4\u5B89\u5168\u3002\u8BE6\u7EC6\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#registerPlugin"))) : bl.warn("".concat(e3, " \u6CA1\u6709\u68C0\u6D4B\u5230\u4E0A\u4F20\u63D2\u4EF6\uFF0C\u5C06\u65E0\u6CD5\u53D1\u9001\u56FE\u7247\u3001\u97F3\u9891\u3001\u89C6\u9891\u3001\u6587\u4EF6\u7B49\u7C7B\u578B\u7684\u6D88\u606F\u3002\u8BE6\u7EC6\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#registerPlugin"));
        }
      } }, { key: "_getAuthorizationKey", value: function() {
        var e3 = this, t2 = new Ih(Eh.GET_COS_AUTH_KEY), n3 = Math.ceil(Date.now() / 1e3);
        this.request({ protocolName: U_, requestData: { duration: this.expiredTimeLimit } }).then(function(o2) {
          var r3 = o2.data;
          bl.log("".concat(e3._className, "._getAuthorizationKey ok. data:"), r3);
          var a2 = r3.expiredTime - n3;
          t2.setMessage("requestId:".concat(r3.requestId, " requestTime:").concat(n3, " expiredTime:").concat(r3.expiredTime, " diff:").concat(a2, "s")).setNetworkType(e3.getNetworkType()).end(), !Hu && r3.region && (e3.region = r3.region), e3.appid = r3.appid, e3.bucketName = r3.bucketName, e3.ciUrl = r3.ciUrl, e3.directory = r3.directory, e3.downloadUrl = r3.downloadUrl, e3.uploadUrl = r3.uploadUrl, e3.cosOptions = { secretId: r3.secretId, secretKey: r3.secretKey, sessionToken: r3.sessionToken, expiredTime: r3.expiredTime }, bl.log("".concat(e3._className, "._getAuthorizationKey ok. region:").concat(e3.region, " bucketName:").concat(e3.bucketName)), e3._initUploaderMethod();
        }).catch(function(n4) {
          e3.probeNetwork().then(function(e4) {
            var o2 = m(e4, 2), r3 = o2[0], a2 = o2[1];
            t2.setError(n4, r3, a2).end();
          }), bl.warn("".concat(e3._className, "._getAuthorizationKey failed. error:"), n4);
        });
      } }, { key: "_getCosPreSigUrl", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, "._getCosPreSigUrl"), o2 = Math.ceil(Date.now() / 1e3), r3 = new Ih(Eh.GET_COS_PRE_SIG_URL);
        return this.request({ protocolName: b_, requestData: { fileType: e3.fileType, fileName: e3.fileName, uploadMethod: e3.uploadMethod, duration: e3.duration } }).then(function(e4) {
          t2.tryCount = 0;
          var a2 = e4.data || {}, s2 = a2.expiredTime - o2;
          return bl.log("".concat(n3, " ok. data:"), a2), r3.setMessage("requestId:".concat(a2.requestId, " expiredTime:").concat(a2.expiredTime, " diff:").concat(s2, "s")).setNetworkType(t2.getNetworkType()).end(), a2;
        }).catch(function(o3) {
          return -1 === o3.code && (o3.code = ah.COS_GET_SIG_FAIL), t2.probeNetwork().then(function(e4) {
            var t3 = m(e4, 2), n4 = t3[0], a2 = t3[1];
            r3.setError(o3, n4, a2).end();
          }), bl.warn("".concat(n3, " failed. error:"), o3), t2.tryCount < 1 ? (t2.tryCount++, t2._getCosPreSigUrl(e3)) : (t2.tryCount = 0, bM({ code: ah.COS_GET_SIG_FAIL, message: sh.COS_GET_SIG_FAIL }));
        });
      } }, { key: "_initUploaderMethod", value: function() {
        var e3 = this;
        if (this.TIMUploadPlugin)
          return this.timUploadPlugin = new this.TIMUploadPlugin(), void (this._cosUploadMethod = function(t2, n3) {
            e3.timUploadPlugin.uploadFile(t2, n3);
          });
        this.appid && (this.cos = Hu ? new this.COSSDK({ ForcePathStyle: true, getAuthorization: this._getAuthorization.bind(this) }) : new this.COSSDK({ getAuthorization: this._getAuthorization.bind(this) }), this._cosUploadMethod = Hu ? function(t2, n3) {
          e3.cos.postObject(t2, n3);
        } : function(t2, n3) {
          e3.cos.uploadFiles(t2, n3);
        });
      } }, { key: "onCheckTimer", value: function(e3) {
        this.COSSDK && (this.TIMUploadPlugin || this.isLoggedIn() && e3 % 60 == 0 && Math.ceil(Date.now() / 1e3) >= this.cosOptions.expiredTime - 120 && this._getAuthorizationKey());
      } }, { key: "_getAuthorization", value: function(e3, t2) {
        t2({ TmpSecretId: this.cosOptions.secretId, TmpSecretKey: this.cosOptions.secretKey, XCosSecurityToken: this.cosOptions.sessionToken, ExpiredTime: this.cosOptions.expiredTime });
      } }, { key: "upload", value: function(e3) {
        if (true === e3.getRelayFlag())
          return Promise.resolve();
        var t2 = this.getModule(Tg);
        switch (e3.type) {
          case gr.MSG_IMAGE:
            return t2.addTotalCount(gh), this._uploadImage(e3);
          case gr.MSG_FILE:
            return t2.addTotalCount(gh), this._uploadFile(e3);
          case gr.MSG_AUDIO:
            return t2.addTotalCount(gh), this._uploadAudio(e3);
          case gr.MSG_VIDEO:
            return t2.addTotalCount(gh), this._uploadVideo(e3);
          default:
            return Promise.resolve();
        }
      } }, { key: "_uploadImage", value: function(e3) {
        var n3 = this, o2 = this.getModule(tg), r3 = e3.getElements()[0], a2 = o2.getMessageOption(e3.clientSequence);
        return this.doUploadImage({ file: a2.payload.file, to: a2.to, onProgress: function(e4) {
          if (r3.updatePercent(e4), td(a2.onProgress))
            try {
              a2.onProgress(e4);
            } catch (t2) {
              return bM({ code: ah.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: sh.MESSAGE_ONPROGRESS_FUNCTION_ERROR });
            }
        } }).then(function(o3) {
          var a3 = o3.location, s2 = o3.fileType, i2 = o3.fileSize, c2 = o3.width, u2 = o3.height, l2 = n3.isPrivateNetWork() ? a3 : fd(a3);
          r3.updateImageFormat(s2);
          var d2 = Ld({ originUrl: l2, originWidth: c2, originHeight: u2, min: 198 }), p3 = Ld({ originUrl: l2, originWidth: c2, originHeight: u2, min: 720 });
          return r3.updateImageInfoArray([{ size: i2, url: l2, width: c2, height: u2 }, t({}, p3), t({}, d2)]), e3;
        });
      } }, { key: "_uploadFile", value: function(e3) {
        var t2 = this, n3 = this.getModule(tg), o2 = e3.getElements()[0], r3 = n3.getMessageOption(e3.clientSequence);
        return this.doUploadFile({ file: r3.payload.file, to: r3.to, onProgress: function(e4) {
          if (o2.updatePercent(e4), td(r3.onProgress))
            try {
              r3.onProgress(e4);
            } catch (t3) {
              return bM({ code: ah.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: sh.MESSAGE_ONPROGRESS_FUNCTION_ERROR });
            }
        } }).then(function(n4) {
          var r4 = n4.location, a2 = t2.isPrivateNetWork() ? r4 : fd(r4);
          return o2.updateFileUrl(a2), e3;
        });
      } }, { key: "_uploadAudio", value: function(e3) {
        var t2 = this, n3 = this.getModule(tg), o2 = e3.getElements()[0], r3 = n3.getMessageOption(e3.clientSequence);
        return this.doUploadAudio({ file: r3.payload.file, to: r3.to, onProgress: function(e4) {
          if (o2.updatePercent(e4), td(r3.onProgress))
            try {
              r3.onProgress(e4);
            } catch (t3) {
              return bM({ code: ah.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: sh.MESSAGE_ONPROGRESS_FUNCTION_ERROR });
            }
        } }).then(function(n4) {
          var r4 = n4.location, a2 = t2.isPrivateNetWork() ? r4 : fd(r4);
          return o2.updateAudioUrl(a2), e3;
        });
      } }, { key: "_uploadVideo", value: function(e3) {
        var t2 = this, n3 = this.getModule(tg), o2 = e3.getElements()[0], r3 = n3.getMessageOption(e3.clientSequence);
        return this.doUploadVideo({ file: r3.payload.file, to: r3.to, onProgress: function(e4) {
          if (o2.updatePercent(e4), td(r3.onProgress))
            try {
              r3.onProgress(e4);
            } catch (t3) {
              return bM({ code: ah.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: sh.MESSAGE_ONPROGRESS_FUNCTION_ERROR });
            }
        } }).then(function(n4) {
          var r4 = n4.location, a2 = n4.snapshotInfo, s2 = t2.isPrivateNetWork() ? r4 : fd(r4);
          return o2.updateVideoUrl(s2), xd(a2) || o2.updateSnapshotInfo(a2), e3;
        });
      } }, { key: "doUploadImage", value: function(e3) {
        var t2 = this;
        if (!e3.file)
          return bM({ code: ah.MESSAGE_IMAGE_SELECT_FILE_FIRST, message: sh.MESSAGE_IMAGE_SELECT_FILE_FIRST });
        var n3 = this._checkImageType(e3.file);
        if (true !== n3)
          return n3;
        var o2 = this._checkImageSize(e3.file);
        if (true !== o2)
          return o2;
        var r3 = null;
        return this._setUploadFileType(av), this.uploadByCOS(e3).then(function(e4) {
          return r3 = e4, t2.isPrivateNetWork() ? Dd(e4.location) : Dd("https://".concat(e4.location));
        }).then(function(e4) {
          return r3.width = e4.width, r3.height = e4.height, Promise.resolve(r3);
        });
      } }, { key: "_checkImageType", value: function(e3) {
        var t2 = "";
        return t2 = Hu ? e3.url.slice(e3.url.lastIndexOf(".") + 1) : e3.files[0].name.slice(e3.files[0].name.lastIndexOf(".") + 1), ov.indexOf(t2.toLowerCase()) >= 0 || bM({ code: ah.MESSAGE_IMAGE_TYPES_LIMIT, message: sh.MESSAGE_IMAGE_TYPES_LIMIT });
      } }, { key: "_checkImageSize", value: function(e3) {
        var t2 = 0;
        return 0 === (t2 = Hu ? e3.size : e3.files[0].size) ? bM({ code: ah.MESSAGE_FILE_IS_EMPTY, message: "".concat(sh.MESSAGE_FILE_IS_EMPTY) }) : t2 < 20971520 || bM({ code: ah.MESSAGE_IMAGE_SIZE_LIMIT, message: "".concat(sh.MESSAGE_IMAGE_SIZE_LIMIT) });
      } }, { key: "doUploadFile", value: function(e3) {
        var t2 = null;
        return e3.file ? e3.file.files[0].size > 104857600 ? bM(t2 = { code: ah.MESSAGE_FILE_SIZE_LIMIT, message: sh.MESSAGE_FILE_SIZE_LIMIT }) : 0 === e3.file.files[0].size ? (t2 = { code: ah.MESSAGE_FILE_IS_EMPTY, message: "".concat(sh.MESSAGE_FILE_IS_EMPTY) }, bM(t2)) : (this._setUploadFileType(cv), this.uploadByCOS(e3)) : bM(t2 = { code: ah.MESSAGE_FILE_SELECT_FILE_FIRST, message: sh.MESSAGE_FILE_SELECT_FILE_FIRST });
      } }, { key: "doUploadVideo", value: function(e3) {
        return e3.file.videoFile.size > 104857600 ? bM({ code: ah.MESSAGE_VIDEO_SIZE_LIMIT, message: "".concat(sh.MESSAGE_VIDEO_SIZE_LIMIT) }) : 0 === e3.file.videoFile.size ? bM({ code: ah.MESSAGE_FILE_IS_EMPTY, message: "".concat(sh.MESSAGE_FILE_IS_EMPTY) }) : -1 === rv.indexOf(e3.file.videoFile.type) ? bM({ code: ah.MESSAGE_VIDEO_TYPES_LIMIT, message: "".concat(sh.MESSAGE_VIDEO_TYPES_LIMIT) }) : (this._setUploadFileType(sv), Hu ? this.handleVideoUpload({ file: e3.file.videoFile, onProgress: e3.onProgress }) : ju ? this.handleVideoUpload(e3) : void 0);
      } }, { key: "handleVideoUpload", value: function(e3) {
        var t2 = this;
        return new Promise(function(n3, o2) {
          t2.uploadByCOS(e3).then(function(e4) {
            n3(e4);
          }).catch(function() {
            t2.uploadByCOS(e3).then(function(e4) {
              n3(e4);
            }).catch(function() {
              o2(new kM({ code: ah.MESSAGE_VIDEO_UPLOAD_FAIL, message: sh.MESSAGE_VIDEO_UPLOAD_FAIL }));
            });
          });
        });
      } }, { key: "doUploadAudio", value: function(e3) {
        return e3.file ? e3.file.size > 20971520 ? bM(new kM({ code: ah.MESSAGE_AUDIO_SIZE_LIMIT, message: "".concat(sh.MESSAGE_AUDIO_SIZE_LIMIT) })) : 0 === e3.file.size ? bM(new kM({ code: ah.MESSAGE_FILE_IS_EMPTY, message: "".concat(sh.MESSAGE_FILE_IS_EMPTY) })) : (this._setUploadFileType(iv), this.uploadByCOS(e3)) : bM(new kM({ code: ah.MESSAGE_AUDIO_UPLOAD_FAIL, message: sh.MESSAGE_AUDIO_UPLOAD_FAIL }));
      } }, { key: "uploadByCOS", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, ".uploadByCOS");
        if (!td(this._cosUploadMethod))
          return bl.warn("".concat(n3, " \u6CA1\u6709\u68C0\u6D4B\u5230\u4E0A\u4F20\u63D2\u4EF6\uFF0C\u5C06\u65E0\u6CD5\u53D1\u9001\u56FE\u7247\u3001\u97F3\u9891\u3001\u89C6\u9891\u3001\u6587\u4EF6\u7B49\u7C7B\u578B\u7684\u6D88\u606F\u3002\u8BE6\u7EC6\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#registerPlugin")), bM({ code: ah.COS_UNDETECTED, message: sh.COS_UNDETECTED });
        if (this.timUploadPlugin)
          return this._uploadWithPreSigUrl(e3);
        var o2 = new Ih(Eh.UPLOAD), r3 = Date.now(), a2 = this._getFile(e3);
        return new Promise(function(s2, i2) {
          var c2 = Hu ? t2._createCosOptionsWXMiniApp(e3) : t2._createCosOptionsWeb(e3), u2 = t2;
          t2._cosUploadMethod(c2, function(e4, c3) {
            var l2 = /* @__PURE__ */ Object.create(null);
            if (c3) {
              if (e4 || Ql(c3.files) && c3.files[0].error) {
                var d2 = new kM({ code: ah.MESSAGE_FILE_UPLOAD_FAIL, message: sh.MESSAGE_FILE_UPLOAD_FAIL });
                return o2.setError(d2, true, t2.getNetworkType()).end(), bl.log("".concat(n3, " failed. error:"), c3.files[0].error), 403 === c3.files[0].error.statusCode && (bl.warn("".concat(n3, " failed. cos AccessKeyId was invalid, regain auth key!")), t2._getAuthorizationKey()), void i2(d2);
              }
              l2.fileName = a2.name, l2.fileSize = a2.size, l2.fileType = a2.type.slice(a2.type.indexOf("/") + 1).toLowerCase(), l2.location = Hu ? c3.Location : c3.files[0].data.Location;
              var p3 = Date.now() - r3, g2 = u2._formatFileSize(a2.size), _2 = u2._formatSpeed(1e3 * a2.size / p3), h3 = "size:".concat(g2, " time:").concat(p3, "ms speed:").concat(_2);
              bl.log("".concat(n3, " success. name:").concat(a2.name, " ").concat(h3)), s2(l2);
              var f2 = t2.getModule(Tg);
              return f2.addCost(gh, p3), f2.addFileSize(gh, a2.size), void o2.setNetworkType(t2.getNetworkType()).setMessage(h3).end();
            }
            var m2 = new kM({ code: ah.MESSAGE_FILE_UPLOAD_FAIL, message: sh.MESSAGE_FILE_UPLOAD_FAIL });
            o2.setError(m2, true, u2.getNetworkType()).end(), bl.warn("".concat(n3, " failed. error:"), e4), 403 === e4.statusCode && (bl.warn("".concat(n3, " failed. cos AccessKeyId was invalid, regain auth key!")), t2._getAuthorizationKey()), i2(m2);
          });
        });
      } }, { key: "_uploadWithPreSigUrl", value: function(e3) {
        var t2 = this, n3 = "".concat(this._className, "._uploadWithPreSigUrl"), o2 = this._getFile(e3);
        return this._createCosOptionsPreSigUrl(e3).then(function(e4) {
          return new Promise(function(r3, a2) {
            var s2 = new Ih(Eh.UPLOAD), i2 = e4.requestSnapshotUrl, c2 = void 0 === i2 ? void 0 : i2, u2 = g(e4, sy), l2 = Date.now();
            t2._cosUploadMethod(u2, function(e5, i3) {
              var u3 = /* @__PURE__ */ Object.create(null);
              if (e5 || 403 === i3.statusCode) {
                var d2 = new kM({ code: ah.MESSAGE_FILE_UPLOAD_FAIL, message: sh.MESSAGE_FILE_UPLOAD_FAIL });
                return s2.setError(d2, true, t2.getNetworkType()).end(), bl.log("".concat(n3, " failed, error:"), e5), void a2(d2);
              }
              var p3 = i3.data.location || "";
              t2.isPrivateNetWork() || 0 !== p3.indexOf("https://") && 0 !== p3.indexOf("http://") || (p3 = p3.split("//")[1]), u3.fileName = o2.name, u3.fileSize = o2.size, u3.fileType = o2.type.slice(o2.type.indexOf("/") + 1).toLowerCase(), u3.location = p3;
              var g2 = Date.now() - l2, _2 = t2._formatFileSize(o2.size), h3 = t2._formatSpeed(1e3 * o2.size / g2), f2 = "size:".concat(_2, ",time:").concat(g2, "ms,speed:").concat(h3, " res:").concat(JSON.stringify(i3.data));
              bl.log("".concat(n3, " success name:").concat(o2.name, ",").concat(f2)), s2.setNetworkType(t2.getNetworkType()).setMessage(f2).end();
              var m2 = t2.getModule(Tg);
              if (m2.addCost(gh, g2), m2.addFileSize(gh, o2.size), !xd(c2))
                return t2._getSnapshotInfoByUrl(c2).then(function(e6) {
                  u3.snapshotInfo = e6, r3(u3);
                });
              r3(u3);
            });
          });
        });
      } }, { key: "_getFile", value: function(e3) {
        var t2 = null;
        return Hu ? t2 = wu || Fu || Bu && Ql(e3.file.files) ? e3.file.files[0] : e3.file : ju && (t2 = e3.file.files[0]), t2;
      } }, { key: "_formatFileSize", value: function(e3) {
        return e3 < 1024 ? e3 + "B" : e3 < 1048576 ? Math.floor(e3 / 1024) + "KB" : Math.floor(e3 / 1048576) + "MB";
      } }, { key: "_formatSpeed", value: function(e3) {
        return e3 <= 1048576 ? Pd(e3 / 1024, 1) + "KB/s" : Pd(e3 / 1048576, 1) + "MB/s";
      } }, { key: "_createCosOptionsWeb", value: function(e3) {
        var t2 = e3.file.files[0].name, n3 = t2.slice(t2.lastIndexOf(".")), o2 = this._genFileName("".concat(ld(999999)).concat(n3));
        return { files: [{ Bucket: "".concat(this.bucketName, "-").concat(this.appid), Region: this.region, Key: "".concat(this.directory, "/").concat(o2), Body: e3.file.files[0] }], SliceSize: 1048576, onProgress: function(t3) {
          if ("function" == typeof e3.onProgress)
            try {
              e3.onProgress(t3.percent);
            } catch (n4) {
              bl.warn("onProgress callback error:", n4);
            }
        }, onFileFinish: function(e4, t3, n4) {
        } };
      } }, { key: "_createCosOptionsWXMiniApp", value: function(e3) {
        var t2 = this._getFile(e3), n3 = this._genFileName(t2.name), o2 = t2.url;
        return { Bucket: "".concat(this.bucketName, "-").concat(this.appid), Region: this.region, Key: "".concat(this.directory, "/").concat(n3), FilePath: o2, onProgress: function(t3) {
          if (bl.log(JSON.stringify(t3)), "function" == typeof e3.onProgress)
            try {
              e3.onProgress(t3.percent);
            } catch (n4) {
              bl.warn("onProgress callback error:", n4);
            }
        } };
      } }, { key: "_createCosOptionsPreSigUrl", value: function(e3) {
        var t2 = this, n3 = "", o2 = "", r3 = 0;
        if (Hu) {
          var a2 = this._getFile(e3);
          n3 = this._genFileName(a2.name), o2 = a2.url, r3 = 1;
        } else {
          var s2 = e3.file.files[0].name, i2 = s2.slice(s2.lastIndexOf("."));
          n3 = this._genFileName("".concat(ld(999999)).concat(i2)), o2 = e3.file.files[0], r3 = 0;
        }
        return this._getCosPreSigUrl({ fileType: this.uploadFileType, fileName: n3, uploadMethod: r3, duration: this.duration }).then(function(r4) {
          var a3 = r4.uploadUrl, s3 = r4.downloadUrl, i3 = r4.requestSnapshotUrl, c2 = void 0 === i3 ? void 0 : i3;
          return { url: a3, fileType: t2.uploadFileType, fileName: n3, resources: o2, downloadUrl: s3, requestSnapshotUrl: c2, onProgress: function(t3) {
            if ("function" == typeof e3.onProgress)
              try {
                e3.onProgress(t3.percent);
              } catch (n4) {
                bl.warn("onProgress callback error:", n4), bl.error(n4);
              }
          } };
        });
      } }, { key: "_genFileName", value: function(e3) {
        return "".concat(Nd(), "-").concat(e3);
      } }, { key: "_setUploadFileType", value: function(e3) {
        this.uploadFileType = e3;
      } }, { key: "_getSnapshotInfoByUrl", value: function(e3) {
        var t2 = this, n3 = new Ih(Eh.GET_SNAPSHOT_INFO);
        return this.request({ protocolName: w_, requestData: { platform: this.getPlatform(), coverName: this._genFileName(ld(99999)), requestSnapshotUrl: e3 } }).then(function(e4) {
          var t3 = (e4.data || {}).snapshotUrl;
          return n3.setMessage("snapshotUrl:".concat(t3)).end(), xd(t3) ? {} : Dd(t3).then(function(e5) {
            return { snapshotUrl: t3, snapshotWidth: e5.width, snapshotHeight: e5.height };
          });
        }).catch(function(e4) {
          return bl.warn("".concat(t2._className, "._getSnapshotInfoByUrl failed. error:"), e4), n3.setCode(e4.errorCode).setMessage(e4.errorInfo).end(), {};
        });
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset"));
      } }]), r2;
    }(Cg), cy = ["downloadKey", "pbDownloadKey", "messageList"], uy = function() {
      function e2(t2) {
        o(this, e2), this._className = "MergerMessageHandler", this._messageModule = t2;
      }
      return a(e2, [{ key: "uploadMergerMessage", value: function(e3, t2) {
        var n2 = this;
        bl.debug("".concat(this._className, ".uploadMergerMessage message:"), e3, "messageBytes:".concat(t2));
        var o2 = e3.payload.messageList, r2 = o2.length, a2 = new Ih(Eh.UPLOAD_MERGER_MESSAGE);
        return this._messageModule.request({ protocolName: H_, requestData: { messageList: o2 } }).then(function(e4) {
          bl.debug("".concat(n2._className, ".uploadMergerMessage ok. response:"), e4.data);
          var o3 = e4.data, s2 = o3.pbDownloadKey, i2 = o3.downloadKey, c2 = { pbDownloadKey: s2, downloadKey: i2, messageNumber: r2 };
          return a2.setNetworkType(n2._messageModule.getNetworkType()).setMessage("".concat(r2, "-").concat(t2, "-").concat(i2)).end(), c2;
        }).catch(function(e4) {
          throw bl.warn("".concat(n2._className, ".uploadMergerMessage failed. error:"), e4), n2._messageModule.probeNetwork().then(function(t3) {
            var n3 = m(t3, 2), o3 = n3[0], r3 = n3[1];
            a2.setError(e4, o3, r3).end();
          }), e4;
        });
      } }, { key: "downloadMergerMessage", value: function(e3) {
        var n2 = this;
        bl.debug("".concat(this._className, ".downloadMergerMessage message:"), e3);
        var o2 = e3.payload.downloadKey, r2 = new Ih(Eh.DOWNLOAD_MERGER_MESSAGE);
        return r2.setMessage("downloadKey:".concat(o2)), this._messageModule.request({ protocolName: j_, requestData: { downloadKey: o2 } }).then(function(o3) {
          if (bl.debug("".concat(n2._className, ".downloadMergerMessage ok. response:"), o3.data), td(e3.clearElement)) {
            var a2 = e3.payload, s2 = (a2.downloadKey, a2.pbDownloadKey, a2.messageList, g(a2, cy));
            e3.clearElement(), e3.setElement({ type: e3.type, content: t({ messageList: o3.data.messageList }, s2) });
          } else {
            var i2 = [];
            o3.data.messageList.forEach(function(e4) {
              if (!xd(e4)) {
                var t2 = new EM(e4);
                i2.push(t2);
              }
            }), e3.payload.messageList = i2, e3.payload.downloadKey = "", e3.payload.pbDownloadKey = "";
          }
          return r2.setNetworkType(n2._messageModule.getNetworkType()).end(), e3;
        }).catch(function(e4) {
          throw bl.warn("".concat(n2._className, ".downloadMergerMessage failed. key:").concat(o2, " error:"), e4), n2._messageModule.probeNetwork().then(function(t2) {
            var n3 = m(t2, 2), o3 = n3[0], a2 = n3[1];
            r2.setError(e4, o3, a2).end();
          }), e4;
        });
      } }, { key: "createMergerMessagePack", value: function(e3, t2, n2) {
        return e3.conversationType === gr.CONV_C2C ? this._createC2CMergerMessagePack(e3, t2, n2) : this._createGroupMergerMessagePack(e3, t2, n2);
      } }, { key: "_createC2CMergerMessagePack", value: function(e3, t2, n2) {
        var o2 = null;
        t2 && (t2.offlinePushInfo && (o2 = t2.offlinePushInfo), true === t2.onlineUserOnly && (o2 ? o2.disablePush = true : o2 = { disablePush: true }));
        var r2 = "";
        zl(e3.cloudCustomData) && e3.cloudCustomData.length > 0 && (r2 = e3.cloudCustomData);
        var a2 = n2.pbDownloadKey, s2 = n2.downloadKey, i2 = n2.messageNumber, c2 = e3.payload, u2 = c2.title, l2 = c2.abstractList, d2 = c2.compatibleText, p3 = this._messageModule.getModule(og);
        return { protocolName: kg, tjgID: this._messageModule.generateTjgID(e3), requestData: { fromAccount: this._messageModule.getMyUserID(), toAccount: e3.to, msgBody: [{ msgType: e3.type, msgContent: { pbDownloadKey: a2, downloadKey: s2, title: u2, abstractList: l2, compatibleText: d2, messageNumber: i2 } }], cloudCustomData: r2, msgSeq: e3.sequence, msgRandom: e3.random, msgLifeTime: p3 && p3.isOnlineMessage(e3, t2) ? 0 : void 0, offlinePushInfo: o2 ? { pushFlag: true === o2.disablePush ? 1 : 0, title: o2.title || "", desc: o2.description || "", ext: o2.extension || "", apnsInfo: { badgeMode: true === o2.ignoreIOSBadge ? 1 : 0 }, androidInfo: { OPPOChannelID: o2.androidOPPOChannelID || "" } } : void 0 } };
      } }, { key: "_createGroupMergerMessagePack", value: function(e3, t2, n2) {
        var o2 = null;
        t2 && t2.offlinePushInfo && (o2 = t2.offlinePushInfo);
        var r2 = "";
        zl(e3.cloudCustomData) && e3.cloudCustomData.length > 0 && (r2 = e3.cloudCustomData);
        var a2 = n2.pbDownloadKey, s2 = n2.downloadKey, i2 = n2.messageNumber, c2 = e3.payload, u2 = c2.title, l2 = c2.abstractList, d2 = c2.compatibleText, p3 = this._messageModule.getModule(rg);
        return { protocolName: Gg, tjgID: this._messageModule.generateTjgID(e3), requestData: { fromAccount: this._messageModule.getMyUserID(), groupID: e3.to, msgBody: [{ msgType: e3.type, msgContent: { pbDownloadKey: a2, downloadKey: s2, title: u2, abstractList: l2, compatibleText: d2, messageNumber: i2 } }], random: e3.random, priority: e3.priority, clientSequence: e3.clientSequence, groupAtInfo: void 0, cloudCustomData: r2, onlineOnlyFlag: p3 && p3.isOnlineMessage(e3, t2) ? 1 : 0, offlinePushInfo: o2 ? { pushFlag: true === o2.disablePush ? 1 : 0, title: o2.title || "", desc: o2.description || "", ext: o2.extension || "", apnsInfo: { badgeMode: true === o2.ignoreIOSBadge ? 1 : 0 }, androidInfo: { OPPOChannelID: o2.androidOPPOChannelID || "" } } : void 0, clientTime: e3.clientTime, needReadReceipt: true !== e3.needReadReceipt || p3.isMessageFromOrToAVChatroom(e3.to) ? 0 : 1 } };
      } }]), e2;
    }(), ly = { ERR_SVR_COMM_SENSITIVE_TEXT: 80001, ERR_SVR_COMM_BODY_SIZE_LIMIT: 80002, OPEN_SERVICE_OVERLOAD_ERROR: 60022, ERR_SVR_MSG_PKG_PARSE_FAILED: 20001, ERR_SVR_MSG_INTERNAL_AUTH_FAILED: 20002, ERR_SVR_MSG_INVALID_ID: 20003, ERR_SVR_MSG_PUSH_DENY: 20006, ERR_SVR_MSG_IN_PEER_BLACKLIST: 20007, ERR_SVR_MSG_BOTH_NOT_FRIEND: 20009, ERR_SVR_MSG_NOT_PEER_FRIEND: 20010, ERR_SVR_MSG_NOT_SELF_FRIEND: 20011, ERR_SVR_MSG_SHUTUP_DENY: 20012, ERR_SVR_GROUP_INVALID_PARAMETERS: 10004, ERR_SVR_GROUP_PERMISSION_DENY: 10007, ERR_SVR_GROUP_NOT_FOUND: 10010, ERR_SVR_GROUP_INVALID_GROUPID: 10015, ERR_SVR_GROUP_REJECT_FROM_THIRDPARTY: 10016, ERR_SVR_GROUP_SHUTUP_DENY: 10017, MESSAGE_SEND_FAIL: 2100, OVER_FREQUENCY_LIMIT: 2996 }, dy = [ah.MESSAGE_ONPROGRESS_FUNCTION_ERROR, ah.MESSAGE_IMAGE_SELECT_FILE_FIRST, ah.MESSAGE_IMAGE_TYPES_LIMIT, ah.MESSAGE_FILE_IS_EMPTY, ah.MESSAGE_IMAGE_SIZE_LIMIT, ah.MESSAGE_FILE_SELECT_FILE_FIRST, ah.MESSAGE_FILE_SIZE_LIMIT, ah.MESSAGE_VIDEO_SIZE_LIMIT, ah.MESSAGE_VIDEO_TYPES_LIMIT, ah.MESSAGE_AUDIO_UPLOAD_FAIL, ah.MESSAGE_AUDIO_SIZE_LIMIT, ah.COS_UNDETECTED];
    var py, gy = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        return o(this, r2), (t2 = n2.call(this, e3))._className = "MessageModule", t2._messageOptionsMap = /* @__PURE__ */ new Map(), t2._mergerMessageHandler = new uy(_(t2)), t2;
      }
      return a(r2, [{ key: "createTextMessage", value: function(e3) {
        var t2 = this.getMyUserID();
        e3.currentUser = t2, e3.senderTinyID = this.getMyTinyID();
        var n3 = new CM(e3), o2 = "string" == typeof e3.payload ? e3.payload : e3.payload.text, r3 = new Nh({ text: o2 }), a2 = this._getNickAndAvatarByUserID(t2);
        return n3.setElement(r3), n3.setNickAndAvatar(a2), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "createImageMessage", value: function(e3) {
        var t2 = this.getMyUserID();
        e3.currentUser = t2, e3.senderTinyID = this.getMyTinyID();
        var n3 = new CM(e3);
        if (Hu) {
          var o2 = e3.payload.file;
          if (Yl(o2))
            return void bl.warn("\u5C0F\u7A0B\u5E8F\u73AF\u5883\u4E0B\u8C03\u7528 createImageMessage \u63A5\u53E3\u65F6\uFF0Cpayload.file \u4E0D\u652F\u6301\u4F20\u5165 File \u5BF9\u8C61");
          var r3 = o2.tempFilePaths[0], a2 = { url: r3, name: r3.slice(r3.lastIndexOf("/") + 1), size: o2.tempFiles && o2.tempFiles[0].size || 1, type: r3.slice(r3.lastIndexOf(".") + 1).toLowerCase() };
          e3.payload.file = a2;
        } else if (ju) {
          if (Yl(e3.payload.file)) {
            var s2 = e3.payload.file;
            e3.payload.file = { files: [s2] };
          } else if (Xl(e3.payload.file) && "undefined" != typeof uni) {
            var i2 = e3.payload.file.tempFiles[0];
            e3.payload.file = { files: [i2] };
          }
        }
        var c2 = new sM({ imageFormat: wl.UNKNOWN, uuid: this._generateUUID(), file: e3.payload.file }), u2 = this._getNickAndAvatarByUserID(t2);
        return n3.setElement(c2), n3.setNickAndAvatar(u2), n3.setNameCard(this._getNameCardByGroupID(n3)), this._messageOptionsMap.set(n3.clientSequence, e3), n3;
      } }, { key: "createAudioMessage", value: function(e3) {
        if (Hu) {
          var t2 = e3.payload.file;
          if (Hu) {
            var n3 = { url: t2.tempFilePath, name: t2.tempFilePath.slice(t2.tempFilePath.lastIndexOf("/") + 1), size: t2.fileSize, second: parseInt(t2.duration) / 1e3, type: t2.tempFilePath.slice(t2.tempFilePath.lastIndexOf(".") + 1).toLowerCase() };
            e3.payload.file = n3;
          }
          var o2 = this.getMyUserID();
          e3.currentUser = o2, e3.senderTinyID = this.getMyTinyID();
          var r3 = new CM(e3), a2 = new cM({ second: Math.floor(t2.duration / 1e3), size: t2.fileSize, url: t2.tempFilePath, uuid: this._generateUUID() }), s2 = this._getNickAndAvatarByUserID(o2);
          return r3.setElement(a2), r3.setNickAndAvatar(s2), r3.setNameCard(this._getNameCardByGroupID(r3)), this._messageOptionsMap.set(r3.clientSequence, e3), r3;
        }
        bl.warn("createAudioMessage \u76EE\u524D\u53EA\u652F\u6301\u5C0F\u7A0B\u5E8F\u73AF\u5883\u4E0B\u53D1\u8BED\u97F3\u6D88\u606F");
      } }, { key: "createVideoMessage", value: function(e3) {
        var t2 = this.getMyUserID();
        e3.currentUser = t2, e3.senderTinyID = this.getMyTinyID(), e3.payload.file.thumbUrl = "https://web.sdk.qcloud.com/im/assets/images/transparent.png", e3.payload.file.thumbSize = 1668;
        var n3 = {};
        if (Hu) {
          if (xu)
            return void bl.warn("createVideoMessage \u4E0D\u652F\u6301\u5728\u652F\u4ED8\u5B9D\u5C0F\u7A0B\u5E8F\u73AF\u5883\u4E0B\u4F7F\u7528");
          if (Yl(e3.payload.file))
            return void bl.warn("\u5C0F\u7A0B\u5E8F\u73AF\u5883\u4E0B\u8C03\u7528 createVideoMessage \u63A5\u53E3\u65F6\uFF0Cpayload.file \u4E0D\u652F\u6301\u4F20\u5165 File \u5BF9\u8C61");
          var o2 = e3.payload.file;
          n3.url = o2.tempFilePath, n3.name = o2.tempFilePath.slice(o2.tempFilePath.lastIndexOf("/") + 1), n3.size = o2.size, n3.second = o2.duration, n3.type = o2.tempFilePath.slice(o2.tempFilePath.lastIndexOf(".") + 1).toLowerCase();
        } else if (ju) {
          if (Yl(e3.payload.file)) {
            var r3 = e3.payload.file;
            e3.payload.file.files = [r3];
          } else if (Xl(e3.payload.file) && "undefined" != typeof uni) {
            var a2 = e3.payload.file.tempFile;
            e3.payload.file.files = [a2];
          }
          var s2 = e3.payload.file;
          n3.url = window.URL.createObjectURL(s2.files[0]), n3.name = s2.files[0].name, n3.size = s2.files[0].size, n3.second = s2.files[0].duration || 0, n3.type = s2.files[0].type.split("/")[1];
        }
        e3.payload.file.videoFile = n3;
        var i2 = new CM(e3), c2 = new yM({ videoFormat: n3.type, videoSecond: Pd(n3.second, 0), videoSize: n3.size, remoteVideoUrl: "", videoUrl: n3.url, videoUUID: this._generateUUID(), thumbUUID: this._generateUUID(), thumbWidth: e3.payload.file.width || 200, thumbHeight: e3.payload.file.height || 200, thumbUrl: e3.payload.file.thumbUrl, thumbSize: e3.payload.file.thumbSize, thumbFormat: e3.payload.file.thumbUrl.slice(e3.payload.file.thumbUrl.lastIndexOf(".") + 1).toLowerCase() }), u2 = this._getNickAndAvatarByUserID(t2);
        return i2.setElement(c2), i2.setNickAndAvatar(u2), i2.setNameCard(this._getNameCardByGroupID(i2)), this._messageOptionsMap.set(i2.clientSequence, e3), i2;
      } }, { key: "createCustomMessage", value: function(e3) {
        var t2 = this.getMyUserID();
        e3.currentUser = t2, e3.senderTinyID = this.getMyTinyID();
        var n3 = new CM(e3), o2 = new vM({ data: e3.payload.data, description: e3.payload.description, extension: e3.payload.extension }), r3 = this._getNickAndAvatarByUserID(t2);
        return n3.setElement(o2), n3.setNickAndAvatar(r3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "createFaceMessage", value: function(e3) {
        var t2 = this.getMyUserID();
        e3.currentUser = t2, e3.senderTinyID = this.getMyTinyID();
        var n3 = new CM(e3), o2 = new iM(e3.payload), r3 = this._getNickAndAvatarByUserID(t2);
        return n3.setElement(o2), n3.setNickAndAvatar(r3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "createMergerMessage", value: function(e3) {
        var t2 = this.getMyUserID();
        e3.currentUser = t2, e3.senderTinyID = this.getMyTinyID();
        var n3 = this._getNickAndAvatarByUserID(t2), o2 = new CM(e3), r3 = new TM(e3.payload);
        return o2.setElement(r3), o2.setNickAndAvatar(n3), o2.setNameCard(this._getNameCardByGroupID(o2)), o2.setRelayFlag(true), o2;
      } }, { key: "createForwardMessage", value: function(e3) {
        var t2 = e3.to, n3 = e3.conversationType, o2 = e3.priority, r3 = e3.payload, a2 = e3.needReadReceipt, s2 = this.getMyUserID(), i2 = this._getNickAndAvatarByUserID(s2);
        if (r3.type === gr.MSG_GRP_TIP)
          return bM(new kM({ code: ah.MESSAGE_FORWARD_TYPE_INVALID, message: sh.MESSAGE_FORWARD_TYPE_INVALID }));
        var c2 = { to: t2, conversationType: n3, conversationID: "".concat(n3).concat(t2), priority: o2, isPlaceMessage: 0, status: bp.UNSEND, currentUser: s2, senderTinyID: this.getMyTinyID(), cloudCustomData: e3.cloudCustomData || r3.cloudCustomData || "", needReadReceipt: a2 }, u2 = new CM(c2);
        return u2.setElement(r3.getElements()[0]), u2.setNickAndAvatar(i2), u2.setNameCard(this._getNameCardByGroupID(r3)), u2.setRelayFlag(true), u2;
      } }, { key: "downloadMergerMessage", value: function(e3) {
        return this._mergerMessageHandler.downloadMergerMessage(e3);
      } }, { key: "createFileMessage", value: function(e3) {
        if (Hu) {
          var n3, o2 = "createFileMessage \u63A5\u53E3\u4E0D\u53EF\u7528\uFF01";
          if (!wu && !Fu && !Bu)
            return void bl.warn("\u5C0F\u7A0B\u5E8F\u76EE\u524D\u4E0D\u652F\u6301\u9009\u62E9\u6587\u4EF6\uFF0C".concat(o2));
          var r3 = Wu.getSystemInfoSync().SDKVersion;
          if (wu && Rd(r3, n3 = "2.5.0") < 0)
            return void bl.warn("wx.chooseMessageFile \u9700\u8981\u57FA\u7840\u5E93".concat(n3, "\u6216\u66F4\u9AD8\u7248\u672C\uFF0C").concat(o2));
          if (Fu && Rd(r3, n3 = "1.18.0") < 0)
            return void bl.warn("qq.chooseMessageFile \u9700\u8981\u57FA\u7840\u5E93".concat(n3, "\u6216\u66F4\u9AD8\u7248\u672C\uFF0C").concat(o2));
        }
        if (ju || Bu) {
          if (Yl(e3.payload.file)) {
            var a2 = e3.payload.file;
            e3.payload.file = { files: [a2] };
          } else if (Xl(e3.payload.file) && "undefined" != typeof uni) {
            var s2 = e3.payload.file, i2 = s2.tempFiles, c2 = s2.files, u2 = null;
            Ql(i2) ? u2 = i2[0] : Ql(c2) && (u2 = c2[0]), e3.payload.file = { files: [u2] };
          }
        } else if (wu || Fu) {
          var l2 = e3.payload.file.tempFiles, d2 = t(t({}, l2[0]), {}, { url: l2[0].path });
          e3.payload.file = { files: [d2] };
        }
        var p3 = this.getMyUserID();
        e3.currentUser = p3, e3.senderTinyID = this.getMyTinyID();
        var g2 = new CM(e3), _2 = new MM({ uuid: this._generateUUID(), file: e3.payload.file }), h3 = this._getNickAndAvatarByUserID(p3);
        return g2.setElement(_2), g2.setNickAndAvatar(h3), g2.setNameCard(this._getNameCardByGroupID(g2)), this._messageOptionsMap.set(g2.clientSequence, e3), g2;
      } }, { key: "createLocationMessage", value: function(e3) {
        var t2 = this.getMyUserID();
        e3.currentUser = t2, e3.senderTinyID = this.getMyTinyID();
        var n3 = new CM(e3), o2 = new IM(e3.payload), r3 = this._getNickAndAvatarByUserID(t2);
        return n3.setElement(o2), n3.setNickAndAvatar(r3), n3.setNameCard(this._getNameCardByGroupID(n3)), n3;
      } }, { key: "_onCannotFindModule", value: function() {
        return bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "sendMessageInstance", value: function(e3, t2) {
        var n3, o2 = this, r3 = null;
        switch (e3.conversationType) {
          case gr.CONV_C2C:
            if (!(r3 = this.getModule(og)))
              return this._onCannotFindModule();
            break;
          case gr.CONV_GROUP:
            if (!(r3 = this.getModule(rg)))
              return this._onCannotFindModule();
            if (Id({ groupID: e3.to })) {
              var a2 = r3.getLocalGroupProfile(e3.to);
              if (a2 && a2.isSupportTopic)
                return bM({ code: ah.MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL, message: sh.MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL });
              if (!Zl(t2) && !Zl(t2.messageControlInfo))
                return bM({ code: ah.MESSAGE_CONTROL_INFO_FAIL, message: sh.MESSAGE_CONTROL_INFO_FAIL });
            }
            break;
          default:
            return bM({ code: ah.MESSAGE_SEND_INVALID_CONVERSATION_TYPE, message: sh.MESSAGE_SEND_INVALID_CONVERSATION_TYPE });
        }
        var s2 = this.getModule(_g), i2 = this.getModule(rg);
        return s2.upload(e3).then(function() {
          o2._getSendMessageSpecifiedKey(e3) === ph && o2.getModule(Tg).addSuccessCount(gh);
          return i2.guardForAVChatRoom(e3).then(function() {
            if (!e3.isSendable())
              return bM({ code: ah.MESSAGE_FILE_URL_IS_EMPTY, message: sh.MESSAGE_FILE_URL_IS_EMPTY });
            o2._addSendMessageTotalCount(e3), n3 = Date.now();
            var a3 = function(e4) {
              var t3 = "utf-8";
              ju && document && (t3 = document.charset.toLowerCase());
              var n4, o3, r4 = 0;
              if (o3 = e4.length, "utf-8" === t3 || "utf8" === t3)
                for (var a4 = 0; a4 < o3; a4++)
                  (n4 = e4.codePointAt(a4)) <= 127 ? r4 += 1 : n4 <= 2047 ? r4 += 2 : n4 <= 65535 ? r4 += 3 : (r4 += 4, a4++);
              else if ("utf-16" === t3 || "utf16" === t3)
                for (var s3 = 0; s3 < o3; s3++)
                  (n4 = e4.codePointAt(s3)) <= 65535 ? r4 += 2 : (r4 += 4, s3++);
              else
                r4 = e4.replace(/[^\x00-\xff]/g, "aa").length;
              return r4;
            }(JSON.stringify(e3));
            return e3.type === gr.MSG_MERGER && a3 > 7e3 ? o2._mergerMessageHandler.uploadMergerMessage(e3, a3).then(function(n4) {
              var r4 = o2._mergerMessageHandler.createMergerMessagePack(e3, t2, n4);
              return o2.request(r4);
            }) : (o2.getModule(cg).setMessageRandom(e3), e3.conversationType === gr.CONV_C2C || e3.conversationType === gr.CONV_GROUP ? r3.sendMessage(e3, t2) : void 0);
          }).then(function(a3) {
            var s3 = a3.data, i3 = s3.time, c2 = s3.sequence, u2 = s3.readReceiptCode;
            $l(u2) && 0 !== u2 && (new Ih(Eh.SEND_MESSAGE_WITH_RECEIPT).setMessage("from:".concat(e3.from, " to:").concat(e3.to, " sequence:").concat(c2, " readReceiptCode:").concat(u2)).end(), bl.warn("".concat(o2._className, ".sendMessageInstance readReceiptCode:").concat(u2, " message:").concat(LM[u2])));
            o2._addSendMessageSuccessCount(e3, n3), o2._messageOptionsMap.delete(e3.clientSequence);
            var l2 = o2.getModule(cg);
            e3.status = bp.SUCCESS, e3.time = i3;
            var d2 = false;
            if (e3.conversationType === gr.CONV_GROUP)
              e3.sequence = c2;
            else if (e3.conversationType === gr.CONV_C2C) {
              var p3 = l2.getLatestMessageSentByMe(e3.conversationID);
              if (p3) {
                var g2 = p3.nick, _2 = p3.avatar;
                g2 === e3.nick && _2 === e3.avatar || (d2 = true);
              }
            }
            if (d2 && l2.modifyMessageSentByMe({ conversationID: e3.conversationID, latestNick: e3.nick, latestAvatar: e3.avatar }), r3.isOnlineMessage(e3, t2))
              e3._onlineOnlyFlag = true;
            else {
              l2.appendToMessageList(e3);
              var h3 = e3;
              Xl(t2) && Xl(t2.messageControlInfo) && (true === t2.messageControlInfo.excludedFromLastMessage && (e3._isExcludedFromLastMessage = true, h3 = ""), true === t2.messageControlInfo.excludedFromUnreadCount && (e3._isExcludedFromUnreadCount = true));
              var f2 = e3.conversationType;
              if (Ed(e3.to))
                f2 = gr.CONV_TOPIC, o2.getModule(ig).onMessageSent({ groupID: wd(e3.to), topicID: e3.to, lastMessage: h3 });
              l2.onMessageSent({ conversationOptionsList: [{ conversationID: e3.conversationID, unreadCount: 0, type: f2, subType: e3.conversationSubType, lastMessage: h3 }] });
            }
            return e3.getRelayFlag() || "TIMImageElem" !== e3.type || kd(e3.payload.imageInfoArray), AM({ message: e3 });
          });
        }).catch(function(t3) {
          return o2._onSendMessageFailed(e3, t3);
        });
      } }, { key: "_onSendMessageFailed", value: function(e3, t2) {
        e3.status = bp.FAIL, this.getModule(cg).deleteMessageRandom(e3), this._addSendMessageFailCountOnUser(e3, t2);
        var n3 = new Ih(Eh.SEND_MESSAGE);
        return n3.setMessage("tjg_id:".concat(this.generateTjgID(e3), " type:").concat(e3.type, " from:").concat(e3.from, " to:").concat(e3.to)), this.probeNetwork().then(function(e4) {
          var o2 = m(e4, 2), r3 = o2[0], a2 = o2[1];
          n3.setError(t2, r3, a2).end();
        }), bl.error("".concat(this._className, "._onSendMessageFailed error:"), t2), bM(new kM({ code: t2 && t2.code ? t2.code : ah.MESSAGE_SEND_FAIL, message: t2 && t2.message ? t2.message : sh.MESSAGE_SEND_FAIL, data: { message: e3 } }));
      } }, { key: "_getSendMessageSpecifiedKey", value: function(e3) {
        if ([gr.MSG_IMAGE, gr.MSG_AUDIO, gr.MSG_VIDEO, gr.MSG_FILE].includes(e3.type))
          return ph;
        if (e3.conversationType === gr.CONV_C2C)
          return uh;
        if (e3.conversationType === gr.CONV_GROUP) {
          var t2 = this.getModule(rg).getLocalGroupProfile(e3.to);
          if (!t2)
            return;
          var n3 = t2.type;
          return yd(n3) ? dh : lh;
        }
      } }, { key: "_addSendMessageTotalCount", value: function(e3) {
        var t2 = this._getSendMessageSpecifiedKey(e3);
        t2 && this.getModule(Tg).addTotalCount(t2);
      } }, { key: "_addSendMessageSuccessCount", value: function(e3, t2) {
        var n3 = Math.abs(Date.now() - t2), o2 = this._getSendMessageSpecifiedKey(e3);
        if (o2) {
          var r3 = this.getModule(Tg);
          r3.addSuccessCount(o2), r3.addCost(o2, n3);
        }
      } }, { key: "_addSendMessageFailCountOnUser", value: function(e3, t2) {
        var n3, o2, r3 = t2.code, a2 = void 0 === r3 ? -1 : r3, s2 = this.getModule(Tg), i2 = this._getSendMessageSpecifiedKey(e3);
        i2 === ph && (n3 = a2, o2 = false, dy.includes(n3) && (o2 = true), o2) ? s2.addFailedCountOfUserSide(gh) : function(e4) {
          var t3 = false;
          return Object.values(ly).includes(e4) && (t3 = true), (e4 >= 120001 && e4 <= 13e4 || e4 >= 10100 && e4 <= 10200) && (t3 = true), t3;
        }(a2) && i2 && s2.addFailedCountOfUserSide(i2);
      } }, { key: "resendMessage", value: function(e3) {
        return e3.isResend = true, e3.status = bp.UNSEND, e3.random = ld(), e3.clientTime = kl(), e3.generateMessageID(), this.sendMessageInstance(e3);
      } }, { key: "revokeMessage", value: function(e3) {
        var t2 = this, n3 = null;
        if (e3.conversationType === gr.CONV_C2C) {
          if (!(n3 = this.getModule(og)))
            return this._onCannotFindModule();
        } else if (e3.conversationType === gr.CONV_GROUP && !(n3 = this.getModule(rg)))
          return this._onCannotFindModule();
        var o2 = new Ih(Eh.REVOKE_MESSAGE);
        return o2.setMessage("tjg_id:".concat(this.generateTjgID(e3), " type:").concat(e3.type, " from:").concat(e3.from, " to:").concat(e3.to)), n3.revokeMessage(e3).then(function(n4) {
          var r3 = n4.data.recallRetList;
          if (!xd(r3) && 0 !== r3[0].retCode) {
            var a2 = new kM({ code: r3[0].retCode, message: LM[r3[0].retCode] || sh.MESSAGE_REVOKE_FAIL, data: { message: e3 } });
            return o2.setCode(a2.code).setMoreMessage(a2.message).end(), bM(a2);
          }
          return bl.info("".concat(t2._className, ".revokeMessage ok. ID:").concat(e3.ID)), e3.isRevoked = true, o2.end(), t2.getModule(cg).onMessageRevoked([e3]), AM({ message: e3 });
        }).catch(function(n4) {
          t2.probeNetwork().then(function(e4) {
            var t3 = m(e4, 2), r4 = t3[0], a2 = t3[1];
            o2.setError(n4, r4, a2).end();
          });
          var r3 = new kM({ code: n4 && n4.code ? n4.code : ah.MESSAGE_REVOKE_FAIL, message: n4 && n4.message ? n4.message : sh.MESSAGE_REVOKE_FAIL, data: { message: e3 } });
          return bl.warn("".concat(t2._className, ".revokeMessage failed. error:"), n4), bM(r3);
        });
      } }, { key: "deleteMessage", value: function(e3) {
        var t2 = this, n3 = null, o2 = e3[0], r3 = o2.conversationID, a2 = "", s2 = [], i2 = [];
        if (o2.conversationType === gr.CONV_C2C)
          n3 = this.getModule(og), a2 = r3.replace(gr.CONV_C2C, ""), e3.forEach(function(e4) {
            e4 && e4.status === bp.SUCCESS && e4.conversationID === r3 && (e4._onlineOnlyFlag || s2.push("".concat(e4.sequence, "_").concat(e4.random, "_").concat(e4.time)), i2.push(e4));
          });
        else if (o2.conversationType === gr.CONV_GROUP)
          n3 = this.getModule(rg), a2 = r3.replace(gr.CONV_GROUP, ""), e3.forEach(function(e4) {
            e4 && e4.status === bp.SUCCESS && e4.conversationID === r3 && (e4._onlineOnlyFlag || s2.push("".concat(e4.sequence)), i2.push(e4));
          });
        else if (o2.conversationType === gr.CONV_SYSTEM)
          return bM({ code: ah.CANNOT_DELETE_GROUP_SYSTEM_NOTICE, message: sh.CANNOT_DELETE_GROUP_SYSTEM_NOTICE });
        if (!n3)
          return this._onCannotFindModule();
        if (0 === s2.length)
          return this._onMessageDeleted(i2);
        s2.length > 30 && (s2 = s2.slice(0, 30), i2 = i2.slice(0, 30));
        var c2 = new Ih(Eh.DELETE_MESSAGE);
        return c2.setMessage("to:".concat(a2, " count:").concat(s2.length)), n3.deleteMessage({ to: a2, keyList: s2 }).then(function(e4) {
          return c2.end(), bl.info("".concat(t2._className, ".deleteMessage ok")), t2._onMessageDeleted(i2);
        }).catch(function(e4) {
          t2.probeNetwork().then(function(t3) {
            var n5 = m(t3, 2), o3 = n5[0], r4 = n5[1];
            c2.setError(e4, o3, r4).end();
          }), bl.warn("".concat(t2._className, ".deleteMessage failed. error:"), e4);
          var n4 = new kM({ code: e4 && e4.code ? e4.code : ah.MESSAGE_DELETE_FAIL, message: e4 && e4.message ? e4.message : sh.MESSAGE_DELETE_FAIL });
          return bM(n4);
        });
      } }, { key: "_onMessageDeleted", value: function(e3) {
        return this.getModule(cg).onMessageDeleted(e3), UM({ messageList: e3 });
      } }, { key: "modifyRemoteMessage", value: function(e3) {
        var t2 = this, n3 = null, o2 = e3.conversationType, r3 = e3.to;
        if (this.getModule(rg).isMessageFromOrToAVChatroom(r3))
          return bM({ code: ah.MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM, message: sh.MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM, data: { message: e3 } });
        o2 === gr.CONV_C2C ? n3 = this.getModule(og) : o2 === gr.CONV_GROUP && (n3 = this.getModule(rg));
        var a2 = new Ih(Eh.MODIFY_MESSAGE);
        return a2.setMessage("to:".concat(r3)), n3.modifyRemoteMessage(e3).then(function(n4) {
          a2.end(), bl.info("".concat(t2._className, ".modifyRemoteMessage ok"));
          var o3 = t2._onModifyRemoteMessageResp(e3, n4.data);
          return AM({ message: o3 });
        }).catch(function(n4) {
          if (a2.setCode(n4.code).setMoreMessage(n4.message).end(), bl.warn("".concat(t2._className, ".modifyRemoteMessage failed. error:"), n4), 20027 === n4.code) {
            var o3 = t2._onModifyRemoteMessageResp(e3, n4.data);
            return bM({ code: ah.MESSAGE_MODIFY_CONFLICT, message: sh.MESSAGE_MODIFY_CONFLICT, data: { message: o3 } });
          }
          return bM({ code: n4.code, message: n4.message, data: { message: e3 } });
        });
      } }, { key: "_onModifyRemoteMessageResp", value: function(e3, t2) {
        bl.debug("".concat(this._className, "._onModifyRemoteMessageResp options:"), t2);
        var n3 = e3.conversationType, o2 = e3.from, r3 = e3.to, a2 = e3.random, s2 = e3.sequence, i2 = e3.time, c2 = t2.elements, u2 = t2.messageVersion, l2 = t2.cloudCustomData, d2 = void 0 === l2 ? "" : l2;
        return this.getModule(cg).onMessageModified({ conversationType: n3, from: o2, to: r3, time: i2, random: a2, sequence: s2, elements: c2, cloudCustomData: d2, messageVersion: u2 });
      } }, { key: "_generateUUID", value: function() {
        var e3 = this.getModule(ug);
        return "".concat(e3.getSDKAppID(), "-").concat(e3.getUserID(), "-").concat(function() {
          for (var e4 = "", t2 = 32; t2 > 0; --t2)
            e4 += dd[Math.floor(Math.random() * pd)];
          return e4;
        }());
      } }, { key: "getMessageOption", value: function(e3) {
        return this._messageOptionsMap.get(e3);
      } }, { key: "_getNickAndAvatarByUserID", value: function(e3) {
        return this.getModule(ng).getNickAndAvatarByUserID(e3);
      } }, { key: "_getNameCardByGroupID", value: function(e3) {
        if (e3.conversationType === gr.CONV_GROUP) {
          var t2 = this.getModule(rg);
          if (t2)
            return t2.getMyNameCardByGroupID(e3.to);
        }
        return "";
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._messageOptionsMap.clear();
      } }]), r2;
    }(Cg), _y = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "PluginModule", r2.plugins = {}, r2;
      }
      return a(n2, [{ key: "registerPlugin", value: function(e3) {
        var t3 = this;
        Object.keys(e3).forEach(function(n3) {
          t3.plugins[n3] = e3[n3];
        }), new Ih(Eh.REGISTER_PLUGIN).setMessage("key=".concat(Object.keys(e3))).end();
      } }, { key: "getPlugin", value: function(e3) {
        return this.plugins[e3];
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset"));
      } }]), n2;
    }(Cg), hy = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "SyncUnreadMessageModule", r2._cookie = "", r2._onlineSyncFlag = false, r2.getInnerEmitterInstance().on(ZM, r2._onLoginSuccess, _(r2)), r2;
      }
      return a(n2, [{ key: "_onLoginSuccess", value: function(e3) {
        this._startSync({ cookie: this._cookie, syncFlag: 0, isOnlineSync: 0 });
      } }, { key: "_startSync", value: function(e3) {
        var t3 = this, n3 = e3.cookie, o2 = e3.syncFlag, r2 = e3.isOnlineSync;
        bl.log("".concat(this._className, "._startSync cookie:").concat(n3, " syncFlag:").concat(o2, " isOnlineSync:").concat(r2)), this.request({ protocolName: Rg, requestData: { cookie: n3, syncFlag: o2, isOnlineSync: r2 } }).then(function(e4) {
          var n4 = e4.data, o3 = n4.cookie, r3 = n4.syncFlag, a2 = n4.eventArray, s2 = n4.messageList, i2 = n4.C2CRemainingUnreadList, c2 = n4.C2CPairUnreadList;
          if (t3._cookie = o3, xd(o3))
            ;
          else if (0 === r3 || 1 === r3) {
            if (a2)
              t3.getModule(mg).onMessage({ head: {}, body: { eventArray: a2, isInstantMessage: t3._onlineSyncFlag, isSyncingEnded: false } });
            t3.getModule(og).onNewC2CMessage({ dataList: s2, isInstantMessage: false, C2CRemainingUnreadList: i2, C2CPairUnreadList: c2 }), t3._startSync({ cookie: o3, syncFlag: r3, isOnlineSync: 0 });
          } else if (2 === r3) {
            if (a2)
              t3.getModule(mg).onMessage({ head: {}, body: { eventArray: a2, isInstantMessage: t3._onlineSyncFlag, isSyncingEnded: true } });
            t3.getModule(og).onNewC2CMessage({ dataList: s2, isInstantMessage: t3._onlineSyncFlag, C2CRemainingUnreadList: i2, C2CPairUnreadList: c2 });
          }
        }).catch(function(e4) {
          bl.error("".concat(t3._className, "._startSync failed. error:"), e4);
        });
      } }, { key: "startOnlineSync", value: function() {
        bl.log("".concat(this._className, ".startOnlineSync")), this._onlineSyncFlag = true, this._startSync({ cookie: this._cookie, syncFlag: 0, isOnlineSync: 1 });
      } }, { key: "startSyncOnReconnected", value: function() {
        bl.log("".concat(this._className, ".startSyncOnReconnected.")), this._onlineSyncFlag = true, this._startSync({ cookie: this._cookie, syncFlag: 0, isOnlineSync: 0 });
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._onlineSyncFlag = false, this._cookie = "";
      } }]), n2;
    }(Cg), fy = { request: { toAccount: "To_Account", fromAccount: "From_Account", to: "To_Account", from: "From_Account", groupID: "GroupId", groupAtUserID: "GroupAt_Account", extension: "Ext", data: "Data", description: "Desc", elements: "MsgBody", sizeType: "Type", downloadFlag: "Download_Flag", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", videoUrl: "", imageUrl: "URL", fileUrl: "Url", uuid: "UUID", priority: "MsgPriority", receiverUserID: "To_Account", receiverGroupID: "GroupId", messageSender: "SenderId", messageReceiver: "ReceiverId", nick: "From_AccountNick", avatar: "From_AccountHeadurl", messageNumber: "MsgNum", pbDownloadKey: "PbMsgKey", downloadKey: "JsonMsgKey", applicationType: "PendencyType", userIDList: "To_Account", groupNameList: "GroupName", userID: "To_Account", groupAttributeList: "GroupAttr", mainSequence: "AttrMainSeq", avChatRoomKey: "BytesKey", attributeControl: "AttrControl", sequence: "seq", messageControlInfo: "SendMsgControl", updateSequence: "UpdateSeq", clientTime: "MsgClientTime", sequenceList: "MsgSeqList", topicID: "TopicId", customData: "CustomString", isSupportTopic: "SupportTopic" }, response: { MsgPriority: "priority", ThumbUUID: "thumbUUID", VideoUUID: "videoUUID", Download_Flag: "downloadFlag", GroupId: "groupID", Member_Account: "userID", MsgList: "messageList", SyncFlag: "syncFlag", To_Account: "to", From_Account: "from", MsgSeq: "sequence", MsgRandom: "random", MsgTime: "time", MsgTimeStamp: "time", MsgContent: "content", MsgBody: "elements", From_AccountNick: "nick", From_AccountHeadurl: "avatar", GroupWithdrawInfoArray: "revokedInfos", GroupReadInfoArray: "groupMessageReadNotice", LastReadMsgSeq: "lastMessageSeq", WithdrawC2cMsgNotify: "c2cMessageRevokedNotify", C2cWithdrawInfoArray: "revokedInfos", C2cReadedReceipt: "c2cMessageReadReceipt", ReadC2cMsgNotify: "c2cMessageReadNotice", LastReadTime: "peerReadTime", MsgRand: "random", MsgType: "type", MsgShow: "messageShow", NextMsgSeq: "nextMessageSeq", FaceUrl: "avatar", ProfileDataMod: "profileModify", Profile_Account: "userID", ValueBytes: "value", ValueNum: "value", NoticeSeq: "noticeSequence", NotifySeq: "notifySequence", MsgFrom_AccountExtraInfo: "messageFromAccountExtraInformation", Operator_Account: "operatorID", OpType: "operationType", ReportType: "operationType", UserId: "userID", User_Account: "userID", List_Account: "userIDList", MsgOperatorMemberExtraInfo: "operatorInfo", MsgMemberExtraInfo: "memberInfoList", ImageUrl: "avatar", NickName: "nick", MsgGroupNewInfo: "newGroupProfile", MsgAppDefinedData: "groupCustomField", Owner_Account: "ownerID", GroupFaceUrl: "avatar", GroupIntroduction: "introduction", GroupNotification: "notification", GroupApplyJoinOption: "joinOption", MsgKey: "messageKey", GroupInfo: "groupProfile", ShutupTime: "muteTime", Desc: "description", Ext: "extension", GroupAt_Account: "groupAtUserID", MsgNum: "messageNumber", PbMsgKey: "pbDownloadKey", JsonMsgKey: "downloadKey", MsgModifiedFlag: "isModified", PendencyItem: "applicationItem", PendencyType: "applicationType", AddTime: "time", AddSource: "source", AddWording: "wording", ProfileImImage: "avatar", PendencyAdd: "friendApplicationAdded", FrienPencydDel_Account: "friendApplicationDeletedUserIDList", Peer_Account: "userID", GroupAttr: "groupAttributeList", GroupAttrAry: "groupAttributeList", AttrMainSeq: "mainSequence", seq: "sequence", GroupAttrOption: "groupAttributeOption", BytesChangedKeys: "changedKeyList", GroupAttrInfo: "groupAttributeList", GroupAttrSeq: "mainSequence", PushChangedAttrValFlag: "hasChangedAttributeInfo", SubKeySeq: "sequence", Val: "value", MsgGroupFromCardName: "senderNameCard", MsgGroupFromNickName: "senderNick", C2cNick: "peerNick", C2cImage: "peerAvatar", SendMsgControl: "messageControlInfo", NoLastMsg: "excludedFromLastMessage", NoUnread: "excludedFromUnreadCount", UpdateSeq: "updateSequence", MuteNotifications: "muteFlag", MsgClientTime: "clientTime", TinyId: "tinyID", GroupMsgReceiptList: "readReceiptList", ReadNum: "readCount", UnreadNum: "unreadCount", TopicId: "topicID", MillionGroupFlag: "communityType", SupportTopic: "isSupportTopic", MsgTopicNewInfo: "newTopicInfo", ShutupAll: "muteAllMembers", CustomString: "customData", TopicFaceUrl: "avatar", TopicIntroduction: "introduction", TopicNotification: "notification", TopicIdArray: "topicIDList", MsgVersion: "messageVersion", C2cMsgModNotifys: "c2cMessageModified", GroupMsgModNotifys: "groupMessageModified", ApplyJoinOption: "joinOption", MsgFlag: "messageRemindType", AtInfoList: "groupAtInfoList", AtFlagList: "groupAtType", AtMsgSeq: "sequence" }, ignoreKeyWord: ["C2C", "ID", "USP"] }, My = Ct.PROPER, vy = Mn.trim;
    function yy(e2, t2) {
      if ("string" != typeof e2 && !Array.isArray(e2))
        throw new TypeError("Expected the input to be `string | string[]`");
      t2 = Object.assign({ pascalCase: false }, t2);
      var n2;
      return 0 === (e2 = Array.isArray(e2) ? e2.map(function(e3) {
        return e3.trim();
      }).filter(function(e3) {
        return e3.length;
      }).join("-") : e2.trim()).length ? "" : 1 === e2.length ? t2.pascalCase ? e2.toUpperCase() : e2.toLowerCase() : (e2 !== e2.toLowerCase() && (e2 = Iy(e2)), e2 = e2.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, function(e3, t3) {
        return t3.toUpperCase();
      }).replace(/\d+(\w|$)/g, function(e3) {
        return e3.toUpperCase();
      }), n2 = e2, t2.pascalCase ? n2.charAt(0).toUpperCase() + n2.slice(1) : n2);
    }
    nn({ target: "String", proto: true, forced: (py = "trim", L(function() {
      return !!pn[py]() || "\u200B\x85\u180E" !== "\u200B\x85\u180E"[py]() || My && pn[py].name !== py;
    })) }, { trim: function() {
      return vy(this);
    } });
    var Iy = function(e2) {
      for (var t2 = false, n2 = false, o2 = false, r2 = 0; r2 < e2.length; r2++) {
        var a2 = e2[r2];
        t2 && /[a-zA-Z]/.test(a2) && a2.toUpperCase() === a2 ? (e2 = e2.slice(0, r2) + "-" + e2.slice(r2), t2 = false, o2 = n2, n2 = true, r2++) : n2 && o2 && /[a-zA-Z]/.test(a2) && a2.toLowerCase() === a2 ? (e2 = e2.slice(0, r2 - 1) + "-" + e2.slice(r2 - 1), o2 = n2, n2 = false, t2 = true) : (t2 = a2.toLowerCase() === a2 && a2.toUpperCase() !== a2, o2 = n2, n2 = a2.toUpperCase() === a2 && a2.toLowerCase() !== a2);
      }
      return e2;
    };
    function Ey(e2, t2) {
      var n2 = 0;
      return function e3(t3, o2) {
        if (++n2 > 100)
          return n2--, t3;
        if (Ql(t3)) {
          var r2 = t3.map(function(t4) {
            return Jl(t4) ? e3(t4, o2) : t4;
          });
          return n2--, r2;
        }
        if (Jl(t3)) {
          var a2 = (s2 = t3, i2 = function(e4, t4) {
            if (!rd(t4))
              return false;
            if ((r3 = t4) !== yy(r3))
              for (var n3 = 0; n3 < fy.ignoreKeyWord.length && !t4.includes(fy.ignoreKeyWord[n3]); n3++)
                ;
            var r3;
            return Zl(o2[t4]) ? function(e5) {
              return "OPPOChannelID" === e5 ? e5 : e5[0].toUpperCase() + yy(e5).slice(1);
            }(t4) : o2[t4];
          }, c2 = /* @__PURE__ */ Object.create(null), Object.keys(s2).forEach(function(e4) {
            var t4 = i2(s2[e4], e4);
            t4 && (c2[t4] = s2[e4]);
          }), c2);
          return a2 = Ad(a2, function(t4, n3) {
            return Ql(t4) || Jl(t4) ? e3(t4, o2) : t4;
          }), n2--, a2;
        }
        var s2, i2, c2;
      }(e2, t2);
    }
    function Ty(e2, t2) {
      if (Ql(e2))
        return e2.map(function(e3) {
          return Jl(e3) ? Ty(e3, t2) : e3;
        });
      if (Jl(e2)) {
        var n2 = (o2 = e2, r2 = function(e3, n3) {
          return Zl(t2[n3]) ? yy(n3) : t2[n3];
        }, a2 = {}, Object.keys(o2).forEach(function(e3) {
          a2[r2(o2[e3], e3)] = o2[e3];
        }), a2);
        return n2 = Ad(n2, function(e3) {
          return Ql(e3) || Jl(e3) ? Ty(e3, t2) : e3;
        });
      }
      var o2, r2, a2;
    }
    var Sy = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView, Cy = R.RangeError, Ay = function(e2) {
      if (void 0 === e2)
        return 0;
      var t2 = Ot(e2), n2 = Pt(t2);
      if (t2 !== n2)
        throw Cy("Wrong length or index");
      return n2;
    }, Dy = R.Array, Ny = Math.abs, Oy = Math.pow, Ry = Math.floor, Ly = Math.log, ky = Math.LN2, Gy = function(e2, t2, n2) {
      var o2, r2, a2, s2 = Dy(n2), i2 = 8 * n2 - t2 - 1, c2 = (1 << i2) - 1, u2 = c2 >> 1, l2 = 23 === t2 ? Oy(2, -24) - Oy(2, -77) : 0, d2 = e2 < 0 || 0 === e2 && 1 / e2 < 0 ? 1 : 0, p3 = 0;
      for ((e2 = Ny(e2)) != e2 || Infinity === e2 ? (r2 = e2 != e2 ? 1 : 0, o2 = c2) : (o2 = Ry(Ly(e2) / ky), e2 * (a2 = Oy(2, -o2)) < 1 && (o2--, a2 *= 2), (e2 += o2 + u2 >= 1 ? l2 / a2 : l2 * Oy(2, 1 - u2)) * a2 >= 2 && (o2++, a2 /= 2), o2 + u2 >= c2 ? (r2 = 0, o2 = c2) : o2 + u2 >= 1 ? (r2 = (e2 * a2 - 1) * Oy(2, t2), o2 += u2) : (r2 = e2 * Oy(2, u2 - 1) * Oy(2, t2), o2 = 0)); t2 >= 8; )
        s2[p3++] = 255 & r2, r2 /= 256, t2 -= 8;
      for (o2 = o2 << t2 | r2, i2 += t2; i2 > 0; )
        s2[p3++] = 255 & o2, o2 /= 256, i2 -= 8;
      return s2[--p3] |= 128 * d2, s2;
    }, Py = function(e2, t2) {
      var n2, o2 = e2.length, r2 = 8 * o2 - t2 - 1, a2 = (1 << r2) - 1, s2 = a2 >> 1, i2 = r2 - 7, c2 = o2 - 1, u2 = e2[c2--], l2 = 127 & u2;
      for (u2 >>= 7; i2 > 0; )
        l2 = 256 * l2 + e2[c2--], i2 -= 8;
      for (n2 = l2 & (1 << -i2) - 1, l2 >>= -i2, i2 += t2; i2 > 0; )
        n2 = 256 * n2 + e2[c2--], i2 -= 8;
      if (0 === l2)
        l2 = 1 - s2;
      else {
        if (l2 === a2)
          return n2 ? NaN : u2 ? -Infinity : Infinity;
        n2 += Oy(2, t2), l2 -= s2;
      }
      return (u2 ? -1 : 1) * n2 * Oy(2, l2 - t2);
    }, Uy = function(e2) {
      for (var t2 = Ae(this), n2 = Ut(t2), o2 = arguments.length, r2 = kt(o2 > 1 ? arguments[1] : void 0, n2), a2 = o2 > 2 ? arguments[2] : void 0, s2 = void 0 === a2 ? n2 : kt(a2, n2); s2 > r2; )
        t2[r2++] = e2;
      return t2;
    }, by = Kt.f, wy = nt.f, Fy = Ct.PROPER, qy = Ct.CONFIGURABLE, Vy = It.get, xy = It.set, By = R.ArrayBuffer, Ky = By, Hy = Ky && Ky.prototype, jy = R.DataView, Wy = jy && jy.prototype, Yy = Object.prototype, $y = R.Array, zy = R.RangeError, Jy = H(Uy), Xy = H([].reverse), Qy = Gy, Zy = Py, eI = function(e2) {
      return [255 & e2];
    }, tI = function(e2) {
      return [255 & e2, e2 >> 8 & 255];
    }, nI = function(e2) {
      return [255 & e2, e2 >> 8 & 255, e2 >> 16 & 255, e2 >> 24 & 255];
    }, oI = function(e2) {
      return e2[3] << 24 | e2[2] << 16 | e2[1] << 8 | e2[0];
    }, rI = function(e2) {
      return Qy(e2, 23, 4);
    }, aI = function(e2) {
      return Qy(e2, 52, 8);
    }, sI = function(e2, t2) {
      wy(e2.prototype, t2, { get: function() {
        return Vy(this)[t2];
      } });
    }, iI = function(e2, t2, n2, o2) {
      var r2 = Ay(n2), a2 = Vy(e2);
      if (r2 + t2 > a2.byteLength)
        throw zy("Wrong index");
      var s2 = Vy(a2.buffer).bytes, i2 = r2 + a2.byteOffset, c2 = ci(s2, i2, i2 + t2);
      return o2 ? c2 : Xy(c2);
    }, cI = function(e2, t2, n2, o2, r2, a2) {
      var s2 = Ay(n2), i2 = Vy(e2);
      if (s2 + t2 > i2.byteLength)
        throw zy("Wrong index");
      for (var c2 = Vy(i2.buffer).bytes, u2 = s2 + i2.byteOffset, l2 = o2(+r2), d2 = 0; d2 < t2; d2++)
        c2[u2 + d2] = l2[a2 ? d2 : t2 - d2 - 1];
    };
    if (Sy) {
      var uI = Fy && "ArrayBuffer" !== By.name;
      if (L(function() {
        By(1);
      }) && L(function() {
        new By(-1);
      }) && !L(function() {
        return new By(), new By(1.5), new By(NaN), uI && !qy;
      }))
        uI && qy && ot(By, "name", "ArrayBuffer");
      else {
        (Ky = function(e2) {
          return ki(this, Hy), new By(Ay(e2));
        }).prototype = Hy;
        for (var lI, dI = by(By), pI = 0; dI.length > pI; )
          (lI = dI[pI++]) in Ky || ot(Ky, lI, By[lI]);
        Hy.constructor = Ky;
      }
      tr && Ko(Wy) !== Yy && tr(Wy, Yy);
      var gI = new jy(new Ky(2)), _I = H(Wy.setInt8);
      gI.setInt8(0, 2147483648), gI.setInt8(1, 2147483649), !gI.getInt8(0) && gI.getInt8(1) || Ni(Wy, { setInt8: function(e2, t2) {
        _I(this, e2, t2 << 24 >> 24);
      }, setUint8: function(e2, t2) {
        _I(this, e2, t2 << 24 >> 24);
      } }, { unsafe: true });
    } else
      Hy = (Ky = function(e2) {
        ki(this, Hy);
        var t2 = Ay(e2);
        xy(this, { bytes: Jy($y(t2), 0), byteLength: t2 }), k || (this.byteLength = t2);
      }).prototype, Wy = (jy = function(e2, t2, n2) {
        ki(this, Wy), ki(e2, Hy);
        var o2 = Vy(e2).byteLength, r2 = Ot(t2);
        if (r2 < 0 || r2 > o2)
          throw zy("Wrong offset");
        if (r2 + (n2 = void 0 === n2 ? o2 - r2 : Pt(n2)) > o2)
          throw zy("Wrong length");
        xy(this, { buffer: e2, byteLength: n2, byteOffset: r2 }), k || (this.buffer = e2, this.byteLength = n2, this.byteOffset = r2);
      }).prototype, k && (sI(Ky, "byteLength"), sI(jy, "buffer"), sI(jy, "byteLength"), sI(jy, "byteOffset")), Ni(Wy, { getInt8: function(e2) {
        return iI(this, 1, e2)[0] << 24 >> 24;
      }, getUint8: function(e2) {
        return iI(this, 1, e2)[0];
      }, getInt16: function(e2) {
        var t2 = iI(this, 2, e2, arguments.length > 1 ? arguments[1] : void 0);
        return (t2[1] << 8 | t2[0]) << 16 >> 16;
      }, getUint16: function(e2) {
        var t2 = iI(this, 2, e2, arguments.length > 1 ? arguments[1] : void 0);
        return t2[1] << 8 | t2[0];
      }, getInt32: function(e2) {
        return oI(iI(this, 4, e2, arguments.length > 1 ? arguments[1] : void 0));
      }, getUint32: function(e2) {
        return oI(iI(this, 4, e2, arguments.length > 1 ? arguments[1] : void 0)) >>> 0;
      }, getFloat32: function(e2) {
        return Zy(iI(this, 4, e2, arguments.length > 1 ? arguments[1] : void 0), 23);
      }, getFloat64: function(e2) {
        return Zy(iI(this, 8, e2, arguments.length > 1 ? arguments[1] : void 0), 52);
      }, setInt8: function(e2, t2) {
        cI(this, 1, e2, eI, t2);
      }, setUint8: function(e2, t2) {
        cI(this, 1, e2, eI, t2);
      }, setInt16: function(e2, t2) {
        cI(this, 2, e2, tI, t2, arguments.length > 2 ? arguments[2] : void 0);
      }, setUint16: function(e2, t2) {
        cI(this, 2, e2, tI, t2, arguments.length > 2 ? arguments[2] : void 0);
      }, setInt32: function(e2, t2) {
        cI(this, 4, e2, nI, t2, arguments.length > 2 ? arguments[2] : void 0);
      }, setUint32: function(e2, t2) {
        cI(this, 4, e2, nI, t2, arguments.length > 2 ? arguments[2] : void 0);
      }, setFloat32: function(e2, t2) {
        cI(this, 4, e2, rI, t2, arguments.length > 2 ? arguments[2] : void 0);
      }, setFloat64: function(e2, t2) {
        cI(this, 8, e2, aI, t2, arguments.length > 2 ? arguments[2] : void 0);
      } });
    zo(Ky, "ArrayBuffer"), zo(jy, "DataView");
    var hI = { ArrayBuffer: Ky, DataView: jy }, fI = hI.ArrayBuffer, mI = hI.DataView, MI = mI.prototype, vI = H(fI.prototype.slice), yI = H(MI.getUint8), II = H(MI.setUint8), EI = L(function() {
      return !new fI(2).slice(1, void 0).byteLength;
    });
    nn({ target: "ArrayBuffer", proto: true, unsafe: true, forced: EI }, { slice: function(e2, t2) {
      if (vI && void 0 === t2)
        return vI(Xe(this), e2);
      for (var n2 = Xe(this).byteLength, o2 = kt(e2, n2), r2 = kt(void 0 === t2 ? n2 : t2, n2), a2 = new (Vi(this, fI))(Pt(r2 - o2)), s2 = new mI(this), i2 = new mI(a2), c2 = 0; o2 < r2; )
        II(i2, c2++, yI(s2, o2++));
      return a2;
    } });
    var TI, SI, CI, AI = nt.f, DI = R.Int8Array, NI = DI && DI.prototype, OI = R.Uint8ClampedArray, RI = OI && OI.prototype, LI = DI && Ko(DI), kI = NI && Ko(NI), GI = Object.prototype, PI = R.TypeError, UI = we("toStringTag"), bI = ke("TYPED_ARRAY_TAG"), wI = ke("TYPED_ARRAY_CONSTRUCTOR"), FI = Sy && !!tr && "Opera" !== un(R.opera), qI = false, VI = { Int8Array: 1, Uint8Array: 1, Uint8ClampedArray: 1, Int16Array: 2, Uint16Array: 2, Int32Array: 4, Uint32Array: 4, Float32Array: 4, Float64Array: 8 }, xI = { BigInt64Array: 8, BigUint64Array: 8 }, BI = function(e2) {
      if (!te(e2))
        return false;
      var t2 = un(e2);
      return Ne(VI, t2) || Ne(xI, t2);
    };
    for (TI in VI)
      (CI = (SI = R[TI]) && SI.prototype) ? ot(CI, wI, SI) : FI = false;
    for (TI in xI)
      (CI = (SI = R[TI]) && SI.prototype) && ot(CI, wI, SI);
    if ((!FI || !ee(LI) || LI === Function.prototype) && (LI = function() {
      throw PI("Incorrect invocation");
    }, FI))
      for (TI in VI)
        R[TI] && tr(R[TI], LI);
    if ((!FI || !kI || kI === GI) && (kI = LI.prototype, FI))
      for (TI in VI)
        R[TI] && tr(R[TI].prototype, kI);
    if (FI && Ko(RI) !== kI && tr(RI, kI), k && !Ne(kI, UI))
      for (TI in qI = true, AI(kI, UI, { get: function() {
        return te(this) ? this[bI] : void 0;
      } }), VI)
        R[TI] && ot(R[TI], bI, TI);
    var KI = { NATIVE_ARRAY_BUFFER_VIEWS: FI, TYPED_ARRAY_CONSTRUCTOR: wI, TYPED_ARRAY_TAG: qI && bI, aTypedArray: function(e2) {
      if (BI(e2))
        return e2;
      throw PI("Target is not a typed array");
    }, aTypedArrayConstructor: function(e2) {
      if (ee(e2) && (!tr || re(LI, e2)))
        return e2;
      throw PI(fe(e2) + " is not a typed array constructor");
    }, exportTypedArrayMethod: function(e2, t2, n2, o2) {
      if (k) {
        if (n2)
          for (var r2 in VI) {
            var a2 = R[r2];
            if (a2 && Ne(a2.prototype, e2))
              try {
                delete a2.prototype[e2];
              } catch (fS) {
                try {
                  a2.prototype[e2] = t2;
                } catch (s2) {
                }
              }
          }
        kI[e2] && !n2 || At(kI, e2, n2 ? t2 : FI && NI[e2] || t2, o2);
      }
    }, exportTypedArrayStaticMethod: function(e2, t2, n2) {
      var o2, r2;
      if (k) {
        if (tr) {
          if (n2) {
            for (o2 in VI)
              if ((r2 = R[o2]) && Ne(r2, e2))
                try {
                  delete r2[e2];
                } catch (fS) {
                }
          }
          if (LI[e2] && !n2)
            return;
          try {
            return At(LI, e2, n2 ? t2 : FI && LI[e2] || t2);
          } catch (fS) {
          }
        }
        for (o2 in VI)
          !(r2 = R[o2]) || r2[e2] && !n2 || At(r2, e2, t2);
      }
    }, isView: function(e2) {
      if (!te(e2))
        return false;
      var t2 = un(e2);
      return "DataView" === t2 || Ne(VI, t2) || Ne(xI, t2);
    }, isTypedArray: BI, TypedArray: LI, TypedArrayPrototype: kI }, HI = KI.NATIVE_ARRAY_BUFFER_VIEWS, jI = R.ArrayBuffer, WI = R.Int8Array, YI = !HI || !L(function() {
      WI(1);
    }) || !L(function() {
      new WI(-1);
    }) || !Oo(function(e2) {
      new WI(), new WI(null), new WI(1.5), new WI(e2);
    }, true) || L(function() {
      return 1 !== new WI(new jI(2), 1, void 0).length;
    }), $I = Math.floor, zI = Number.isInteger || function(e2) {
      return !te(e2) && isFinite(e2) && $I(e2) === e2;
    }, JI = R.RangeError, XI = R.RangeError, QI = function(e2, t2) {
      var n2 = function(e3) {
        var t3 = Ot(e3);
        if (t3 < 0)
          throw JI("The argument can't be less than 0");
        return t3;
      }(e2);
      if (n2 % t2)
        throw XI("Wrong offset");
      return n2;
    }, ZI = KI.aTypedArrayConstructor, eE = function(e2) {
      var t2, n2, o2, r2, a2, s2, i2 = Fi(this), c2 = Ae(e2), u2 = arguments.length, l2 = u2 > 1 ? arguments[1] : void 0, d2 = void 0 !== l2, p3 = yo(c2);
      if (p3 && !mo(p3))
        for (s2 = (a2 = Eo(c2, p3)).next, c2 = []; !(r2 = U(s2, a2)).done; )
          c2.push(r2.value);
      for (d2 && u2 > 2 && (l2 = wn(l2, arguments[2])), n2 = Ut(c2), o2 = new (ZI(i2))(n2), t2 = 0; n2 > t2; t2++)
        o2[t2] = d2 ? l2(c2[t2], t2) : c2[t2];
      return o2;
    };
    A(function(e2) {
      var t2 = Kt.f, n2 = Zn.forEach, o2 = It.get, r2 = It.set, a2 = nt.f, s2 = Ye.f, i2 = Math.round, c2 = R.RangeError, u2 = hI.ArrayBuffer, l2 = u2.prototype, d2 = hI.DataView, p3 = KI.NATIVE_ARRAY_BUFFER_VIEWS, g2 = KI.TYPED_ARRAY_CONSTRUCTOR, _2 = KI.TYPED_ARRAY_TAG, h3 = KI.TypedArray, f2 = KI.TypedArrayPrototype, m2 = KI.aTypedArrayConstructor, M2 = KI.isTypedArray, v2 = function(e3, t3) {
        m2(e3);
        for (var n3 = 0, o3 = t3.length, r3 = new e3(o3); o3 > n3; )
          r3[n3] = t3[n3++];
        return r3;
      }, y2 = function(e3, t3) {
        a2(e3, t3, { get: function() {
          return o2(this)[t3];
        } });
      }, I2 = function(e3) {
        var t3;
        return re(l2, e3) || "ArrayBuffer" == (t3 = un(e3)) || "SharedArrayBuffer" == t3;
      }, E2 = function(e3, t3) {
        return M2(e3) && !_e(t3) && t3 in e3 && zI(+t3) && t3 >= 0;
      }, T2 = function(e3, t3) {
        return t3 = xe(t3), E2(e3, t3) ? q(2, e3[t3]) : s2(e3, t3);
      }, S2 = function(e3, t3, n3) {
        return t3 = xe(t3), !(E2(e3, t3) && te(n3) && Ne(n3, "value")) || Ne(n3, "get") || Ne(n3, "set") || n3.configurable || Ne(n3, "writable") && !n3.writable || Ne(n3, "enumerable") && !n3.enumerable ? a2(e3, t3, n3) : (e3[t3] = n3.value, e3);
      };
      k ? (p3 || (Ye.f = T2, nt.f = S2, y2(f2, "buffer"), y2(f2, "byteOffset"), y2(f2, "byteLength"), y2(f2, "length")), nn({ target: "Object", stat: true, forced: !p3 }, { getOwnPropertyDescriptor: T2, defineProperty: S2 }), e2.exports = function(e3, s3, l3) {
        var m3 = e3.match(/\d+$/)[0] / 8, y3 = e3 + (l3 ? "Clamped" : "") + "Array", E3 = "get" + e3, T3 = "set" + e3, S3 = R[y3], C2 = S3, A2 = C2 && C2.prototype, D2 = {}, N2 = function(e4, t3) {
          a2(e4, t3, { get: function() {
            return function(e5, t4) {
              var n3 = o2(e5);
              return n3.view[E3](t4 * m3 + n3.byteOffset, true);
            }(this, t3);
          }, set: function(e5) {
            return function(e6, t4, n3) {
              var r3 = o2(e6);
              l3 && (n3 = (n3 = i2(n3)) < 0 ? 0 : n3 > 255 ? 255 : 255 & n3), r3.view[T3](t4 * m3 + r3.byteOffset, n3, true);
            }(this, t3, e5);
          }, enumerable: true });
        };
        p3 ? YI && (C2 = s3(function(e4, t3, n3, o3) {
          return ki(e4, A2), Fr(te(t3) ? I2(t3) ? void 0 !== o3 ? new S3(t3, QI(n3, m3), o3) : void 0 !== n3 ? new S3(t3, QI(n3, m3)) : new S3(t3) : M2(t3) ? v2(C2, t3) : U(eE, C2, t3) : new S3(Ay(t3)), e4, C2);
        }), tr && tr(C2, h3), n2(t2(S3), function(e4) {
          e4 in C2 || ot(C2, e4, S3[e4]);
        }), C2.prototype = A2) : (C2 = s3(function(e4, t3, n3, o3) {
          ki(e4, A2);
          var a3, s4, i3, l4 = 0, p4 = 0;
          if (te(t3)) {
            if (!I2(t3))
              return M2(t3) ? v2(C2, t3) : U(eE, C2, t3);
            a3 = t3, p4 = QI(n3, m3);
            var g3 = t3.byteLength;
            if (void 0 === o3) {
              if (g3 % m3)
                throw c2("Wrong length");
              if ((s4 = g3 - p4) < 0)
                throw c2("Wrong length");
            } else if ((s4 = Pt(o3) * m3) + p4 > g3)
              throw c2("Wrong length");
            i3 = s4 / m3;
          } else
            i3 = Ay(t3), a3 = new u2(s4 = i3 * m3);
          for (r2(e4, { buffer: a3, byteOffset: p4, byteLength: s4, length: i3, view: new d2(a3) }); l4 < i3; )
            N2(e4, l4++);
        }), tr && tr(C2, h3), A2 = C2.prototype = Un(f2)), A2.constructor !== C2 && ot(A2, "constructor", C2), ot(A2, g2, C2), _2 && ot(A2, _2, y3), D2[y3] = C2, nn({ global: true, forced: C2 != S3, sham: !p3 }, D2), "BYTES_PER_ELEMENT" in C2 || ot(C2, "BYTES_PER_ELEMENT", m3), "BYTES_PER_ELEMENT" in A2 || ot(A2, "BYTES_PER_ELEMENT", m3), Ri(y3);
      }) : e2.exports = function() {
      };
    })("Uint8", function(e2) {
      return function(t2, n2, o2) {
        return e2(this, t2, n2, o2);
      };
    });
    var tE = Math.min, nE = H([].copyWithin || function(e2, t2) {
      var n2 = Ae(this), o2 = Ut(n2), r2 = kt(e2, o2), a2 = kt(t2, o2), s2 = arguments.length > 2 ? arguments[2] : void 0, i2 = tE((void 0 === s2 ? o2 : kt(s2, o2)) - a2, o2 - r2), c2 = 1;
      for (a2 < r2 && r2 < a2 + i2 && (c2 = -1, a2 += i2 - 1, r2 += i2 - 1); i2-- > 0; )
        a2 in n2 ? n2[r2] = n2[a2] : delete n2[r2], r2 += c2, a2 += c2;
      return n2;
    }), oE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("copyWithin", function(e2, t2) {
      return nE(oE(this), e2, t2, arguments.length > 2 ? arguments[2] : void 0);
    });
    var rE = Zn.every, aE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("every", function(e2) {
      return rE(aE(this), e2, arguments.length > 1 ? arguments[1] : void 0);
    });
    var sE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("fill", function(e2) {
      var t2 = arguments.length;
      return U(Uy, sE(this), e2, t2 > 1 ? arguments[1] : void 0, t2 > 2 ? arguments[2] : void 0);
    });
    var iE = KI.TYPED_ARRAY_CONSTRUCTOR, cE = KI.aTypedArrayConstructor, uE = function(e2) {
      return cE(Vi(e2, e2[iE]));
    }, lE = function(e2, t2) {
      return function(e3, t3) {
        for (var n2 = 0, o2 = Ut(t3), r2 = new e3(o2); o2 > n2; )
          r2[n2] = t3[n2++];
        return r2;
      }(uE(e2), t2);
    }, dE = Zn.filter, pE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("filter", function(e2) {
      var t2 = dE(pE(this), e2, arguments.length > 1 ? arguments[1] : void 0);
      return lE(this, t2);
    });
    var gE = Zn.find, _E = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("find", function(e2) {
      return gE(_E(this), e2, arguments.length > 1 ? arguments[1] : void 0);
    });
    var hE = Zn.findIndex, fE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("findIndex", function(e2) {
      return hE(fE(this), e2, arguments.length > 1 ? arguments[1] : void 0);
    });
    var mE = Zn.forEach, ME = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("forEach", function(e2) {
      mE(ME(this), e2, arguments.length > 1 ? arguments[1] : void 0);
    });
    var vE = wt.includes, yE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("includes", function(e2) {
      return vE(yE(this), e2, arguments.length > 1 ? arguments[1] : void 0);
    });
    var IE = wt.indexOf, EE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("indexOf", function(e2) {
      return IE(EE(this), e2, arguments.length > 1 ? arguments[1] : void 0);
    });
    var TE = we("iterator"), SE = R.Uint8Array, CE = H(Bs.values), AE = H(Bs.keys), DE = H(Bs.entries), NE = KI.aTypedArray, OE = KI.exportTypedArrayMethod, RE = SE && SE.prototype, LE = !L(function() {
      RE[TE].call([1]);
    }), kE = !!RE && RE.values && RE[TE] === RE.values && "values" === RE.values.name, GE = function() {
      return CE(NE(this));
    };
    OE("entries", function() {
      return DE(NE(this));
    }, LE), OE("keys", function() {
      return AE(NE(this));
    }, LE), OE("values", GE, LE || !kE, { name: "values" }), OE(TE, GE, LE || !kE, { name: "values" });
    var PE = KI.aTypedArray, UE = KI.exportTypedArrayMethod, bE = H([].join);
    UE("join", function(e2) {
      return bE(PE(this), e2);
    });
    var wE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("lastIndexOf", function(e2) {
      var t2 = arguments.length;
      return Es(mM, wE(this), t2 > 1 ? [e2, arguments[1]] : [e2]);
    });
    var FE = Zn.map, qE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("map", function(e2) {
      return FE(qE(this), e2, arguments.length > 1 ? arguments[1] : void 0, function(e3, t2) {
        return new (uE(e3))(t2);
      });
    });
    var VE = R.TypeError, xE = function(e2) {
      return function(t2, n2, o2, r2) {
        Me(n2);
        var a2 = Ae(t2), s2 = J(a2), i2 = Ut(a2), c2 = e2 ? i2 - 1 : 0, u2 = e2 ? -1 : 1;
        if (o2 < 2)
          for (; ; ) {
            if (c2 in s2) {
              r2 = s2[c2], c2 += u2;
              break;
            }
            if (c2 += u2, e2 ? c2 < 0 : i2 <= c2)
              throw VE("Reduce of empty array with no initial value");
          }
        for (; e2 ? c2 >= 0 : i2 > c2; c2 += u2)
          c2 in s2 && (r2 = n2(r2, s2[c2], c2, a2));
        return r2;
      };
    }, BE = { left: xE(false), right: xE(true) }, KE = BE.left, HE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("reduce", function(e2) {
      var t2 = arguments.length;
      return KE(HE(this), e2, t2, t2 > 1 ? arguments[1] : void 0);
    });
    var jE = BE.right, WE = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("reduceRight", function(e2) {
      var t2 = arguments.length;
      return jE(WE(this), e2, t2, t2 > 1 ? arguments[1] : void 0);
    });
    var YE = KI.aTypedArray, $E = KI.exportTypedArrayMethod, zE = Math.floor;
    $E("reverse", function() {
      for (var e2, t2 = YE(this).length, n2 = zE(t2 / 2), o2 = 0; o2 < n2; )
        e2 = this[o2], this[o2++] = this[--t2], this[t2] = e2;
      return this;
    });
    var JE = R.RangeError, XE = R.Int8Array, QE = XE && XE.prototype, ZE = QE && QE.set, eT = KI.aTypedArray, tT = KI.exportTypedArrayMethod, nT = !L(function() {
      var e2 = new Uint8ClampedArray(2);
      return U(ZE, e2, { length: 1, 0: 3 }, 1), 3 !== e2[1];
    }), oT = nT && KI.NATIVE_ARRAY_BUFFER_VIEWS && L(function() {
      var e2 = new XE(2);
      return e2.set(1), e2.set("2", 1), 0 !== e2[0] || 2 !== e2[1];
    });
    tT("set", function(e2) {
      eT(this);
      var t2 = QI(arguments.length > 1 ? arguments[1] : void 0, 1), n2 = Ae(e2);
      if (nT)
        return U(ZE, this, n2, t2);
      var o2 = this.length, r2 = Ut(n2), a2 = 0;
      if (r2 + t2 > o2)
        throw JE("Wrong length");
      for (; a2 < r2; )
        this[t2 + a2] = n2[a2++];
    }, !nT || oT);
    var rT = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("slice", function(e2, t2) {
      for (var n2 = _r(rT(this), e2, t2), o2 = uE(this), r2 = 0, a2 = n2.length, s2 = new o2(a2); a2 > r2; )
        s2[r2] = n2[r2++];
      return s2;
    }, L(function() {
      new Int8Array(1).slice();
    }));
    var aT = Zn.some, sT = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("some", function(e2) {
      return aT(sT(this), e2, arguments.length > 1 ? arguments[1] : void 0);
    });
    var iT = R.Array, cT = KI.aTypedArray, uT = KI.exportTypedArrayMethod, lT = R.Uint16Array, dT = lT && H(lT.prototype.sort), pT = !(!dT || L(function() {
      dT(new lT(2), null);
    }) && L(function() {
      dT(new lT(2), {});
    })), gT = !!dT && !L(function() {
      if (le)
        return le < 74;
      if (qM)
        return qM < 67;
      if (VM)
        return true;
      if (BM)
        return BM < 602;
      var e2, t2, n2 = new lT(516), o2 = iT(516);
      for (e2 = 0; e2 < 516; e2++)
        t2 = e2 % 4, n2[e2] = 515 - e2, o2[e2] = e2 - 2 * t2 + 3;
      for (dT(n2, function(e3, t3) {
        return (e3 / 4 | 0) - (t3 / 4 | 0);
      }), e2 = 0; e2 < 516; e2++)
        if (n2[e2] !== o2[e2])
          return true;
    });
    uT("sort", function(e2) {
      return void 0 !== e2 && Me(e2), gT ? dT(this, e2) : tf(cT(this), function(e3) {
        return function(t2, n2) {
          return void 0 !== e3 ? +e3(t2, n2) || 0 : n2 != n2 ? -1 : t2 != t2 ? 1 : 0 === t2 && 0 === n2 ? 1 / t2 > 0 && 1 / n2 < 0 ? 1 : -1 : t2 > n2;
        };
      }(e2));
    }, !gT || pT);
    var _T = KI.aTypedArray;
    (0, KI.exportTypedArrayMethod)("subarray", function(e2, t2) {
      var n2 = _T(this), o2 = n2.length, r2 = kt(e2, o2);
      return new (uE(n2))(n2.buffer, n2.byteOffset + r2 * n2.BYTES_PER_ELEMENT, Pt((void 0 === t2 ? o2 : kt(t2, o2)) - r2));
    });
    var hT = R.Int8Array, fT = KI.aTypedArray, mT = KI.exportTypedArrayMethod, MT = [].toLocaleString, vT = !!hT && L(function() {
      MT.call(new hT(1));
    });
    mT("toLocaleString", function() {
      return Es(MT, vT ? _r(fT(this)) : fT(this), _r(arguments));
    }, L(function() {
      return [1, 2].toLocaleString() != new hT([1, 2]).toLocaleString();
    }) || !L(function() {
      hT.prototype.toLocaleString.call([1, 2]);
    }));
    var yT = KI.exportTypedArrayMethod, IT = R.Uint8Array, ET = IT && IT.prototype || {}, TT = [].toString, ST = H([].join);
    L(function() {
      TT.call({});
    }) && (TT = function() {
      return ST(this);
    });
    var CT = ET.toString != TT;
    yT("toString", TT, CT);
    var AT = R.RangeError, DT = String.fromCharCode, NT = String.fromCodePoint, OT = H([].join), RT = !!NT && 1 != NT.length;
    nn({ target: "String", stat: true, forced: RT }, { fromCodePoint: function(e2) {
      for (var t2, n2 = [], o2 = arguments.length, r2 = 0; o2 > r2; ) {
        if (t2 = +arguments[r2++], kt(t2, 1114111) !== t2)
          throw AT(t2 + " is not a valid code point");
        n2[r2] = t2 < 65536 ? DT(t2) : DT(55296 + ((t2 -= 65536) >> 10), t2 % 1024 + 56320);
      }
      return OT(n2, "");
    } });
    var LT = String.fromCharCode, kT = function(e2) {
      var t2 = 0 | e2.charCodeAt(0);
      if (55296 <= t2)
        if (t2 < 56320) {
          var n2 = 0 | e2.charCodeAt(1);
          if (56320 <= n2 && n2 <= 57343) {
            if ((t2 = (t2 << 10) + n2 - 56613888 | 0) > 65535)
              return LT(240 | t2 >>> 18, 128 | t2 >>> 12 & 63, 128 | t2 >>> 6 & 63, 128 | 63 & t2);
          } else
            t2 = 65533;
        } else
          t2 <= 57343 && (t2 = 65533);
      return t2 <= 2047 ? LT(192 | t2 >>> 6, 128 | 63 & t2) : LT(224 | t2 >>> 12, 128 | t2 >>> 6 & 63, 128 | 63 & t2);
    }, GT = function(e2) {
      for (var t2 = void 0 === e2 ? "" : ("" + e2).replace(/[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g, kT), n2 = 0 | t2.length, o2 = new Uint8Array(n2), r2 = 0; r2 < n2; r2 = r2 + 1 | 0)
        o2[r2] = 0 | t2.charCodeAt(r2);
      return o2;
    }, PT = function(e2) {
      for (var t2 = new Uint8Array(e2), n2 = "", o2 = 0, r2 = t2.length; o2 < r2; ) {
        var a2 = t2[o2], s2 = 0, i2 = 0;
        if (a2 <= 127 ? (s2 = 0, i2 = 255 & a2) : a2 <= 223 ? (s2 = 1, i2 = 31 & a2) : a2 <= 239 ? (s2 = 2, i2 = 15 & a2) : a2 <= 244 && (s2 = 3, i2 = 7 & a2), r2 - o2 - s2 > 0)
          for (var c2 = 0; c2 < s2; )
            i2 = i2 << 6 | 63 & (a2 = t2[o2 + c2 + 1]), c2 += 1;
        else
          i2 = 65533, s2 = r2 - o2;
        n2 += String.fromCodePoint(i2), o2 += s2 + 1;
      }
      return n2;
    }, UT = function() {
      function e2(t2) {
        o(this, e2), this._handler = t2;
        var n2 = t2.getURL();
        if (this._socket = null, this._workerSocket = null, this._id = ld(), this._handler.getIsWorkerEnabled()) {
          var r2 = URL.createObjectURL(new Blob([';let _socket = null;onmessage = function(event) {  if (event.data.cmd === "start") {    const url = event.data.url;    _socket = new WebSocket(url);    _socket.binaryType = "arraybuffer";    _socket.onopen = function() {      postMessage({ callback: "onOpen" });    };    _socket.onclose = function(e) {      postMessage({ callback: "onOpen", e: { code: e.code, reason: e.reason } });    };    _socket.onmessage = function(e) {      postMessage({ callback: "onMessage", data: e.data });    };    _socket.onerror = function(e) {      postMessage({ callback: "onError", e: { isTrusted: "true" } });    };  } else if (event.data.cmd === "sendMessage") {    if (_socket !== null) {      _socket.send(event.data.data);    }  } else if (event.data.cmd === "stop") {    if (_socket !== null) {      _socket.close(event.data.code);      _socket = null;    }  }};'], { type: "application/javascript; charset=utf-8" }));
          this._workerSocket = new Worker(r2);
          var a2 = this;
          this._workerSocket.onmessage = function(e3) {
            var t3 = e3.data, n3 = t3.callback, o2 = t3.e;
            "onOpen" === n3 ? a2._onOpen() : "onClose" === n3 ? a2._onClose(o2) : "onError" === n3 ? a2._onError(o2) : "onMessage" === n3 && a2._onMessage(e3.data);
          }, this._workerSocket.postMessage({ cmd: "start", id: this._id, url: n2 });
        } else
          Hu ? xu ? (Wu.connectSocket({ url: n2, header: { "content-type": "application/json" } }), Wu.onSocketClose(this._onClose.bind(this)), Wu.onSocketOpen(this._onOpen.bind(this)), Wu.onSocketMessage(this._onMessage.bind(this)), Wu.onSocketError(this._onError.bind(this))) : (this._socket = Wu.connectSocket({ url: n2, header: { "content-type": "application/json" }, complete: function() {
          } }), this._socket.onClose(this._onClose.bind(this)), this._socket.onOpen(this._onOpen.bind(this)), this._socket.onMessage(this._onMessage.bind(this)), this._socket.onError(this._onError.bind(this))) : ju && (this._socket = new WebSocket(n2), this._socket.binaryType = "arraybuffer", this._socket.onopen = this._onOpen.bind(this), this._socket.onmessage = this._onMessage.bind(this), this._socket.onclose = this._onClose.bind(this), this._socket.onerror = this._onError.bind(this));
        this._canIUseBinaryFrame = t2.canIUseBinaryFrame();
      }
      return a(e2, [{ key: "getID", value: function() {
        return this._id;
      } }, { key: "_onOpen", value: function() {
        this._handler.onOpen({ id: this._id });
      } }, { key: "_onClose", value: function(e3) {
        this._handler.onClose({ id: this._id, e: e3 });
      } }, { key: "_onMessage", value: function(e3) {
        this._handler.onMessage({ data: this._canIUseBinaryFrame ? PT(e3.data) : e3.data });
      } }, { key: "_onError", value: function(e3) {
        this._handler.onError({ id: this._id, e: e3 });
      } }, { key: "setIsWorkerEnabled", value: function(e3) {
        this._isWorkerEnabled = true;
      } }, { key: "close", value: function(e3) {
        if (this._workerSocket && (this._workerSocket.postMessage({ cmd: "stop", code: e3 }), this._workerSocket.terminate(), this._workerSocket = null), xu)
          return Wu.offSocketClose(), Wu.offSocketMessage(), Wu.offSocketOpen(), Wu.offSocketError(), void Wu.closeSocket();
        this._socket && (Hu ? (this._socket.onClose(function() {
        }), this._socket.onOpen(function() {
        }), this._socket.onMessage(function() {
        }), this._socket.onError(function() {
        })) : ju && (this._socket.onopen = null, this._socket.onmessage = null, this._socket.onclose = null, this._socket.onerror = null), Vu ? this._socket.close({ code: e3 }) : this._socket.close(e3), this._socket = null);
      } }, { key: "send", value: function(e3) {
        if (this._workerSocket)
          this._workerSocket.postMessage({ cmd: "sendMessage", data: this._canIUseBinaryFrame ? GT(e3.data).buffer : e3.data });
        else {
          if (xu)
            return void Wu.sendSocketMessage({ data: e3.data, fail: function() {
              e3.fail && e3.requestID && e3.fail(e3.requestID);
            } });
          this._socket && (Hu ? this._socket.send({ data: this._canIUseBinaryFrame ? GT(e3.data).buffer : e3.data, fail: function() {
            e3.fail && e3.requestID && e3.fail(e3.requestID);
          } }) : ju && this._socket.send(this._canIUseBinaryFrame ? GT(e3.data).buffer : e3.data));
        }
      } }]), e2;
    }(), bT = 4e3, wT = 4001, FT = ["keyMap"], qT = ["keyMap"], VT = "connected", xT = "connecting", BT = "disconnected", KT = function() {
      function e2(t2) {
        o(this, e2), this._channelModule = t2, this._className = "SocketHandler", this._promiseMap = /* @__PURE__ */ new Map(), this._readyState = BT, this._simpleRequestMap = /* @__PURE__ */ new Map(), this.MAX_SIZE = 100, this._startSequence = ld(), this._startTs = 0, this._reConnectFlag = false, this._nextPingTs = 0, this._reConnectCount = 0, this.MAX_RECONNECT_COUNT = 3, this._socketID = -1, this._random = 0, this._socket = null, this._url = "", this._onOpenTs = 0, this._canIUseBinaryFrame = true, this._isWorkerEnabled = true, this._setWebsocketHost(), this._initConnection();
      }
      return a(e2, [{ key: "_setWebsocketHost", value: function() {
        var e3 = this._channelModule.getModule(ug), t2 = Nu;
        this._channelModule.isOversea() && (t2 = Ou), e3.isSingaporeSite() ? t2 = Ru : e3.isKoreaSite() ? t2 = Lu : e3.isGermanySite() ? t2 = ku : e3.isIndiaSite() && (t2 = Gu), Pu.HOST.setCurrent(t2);
      } }, { key: "_initConnection", value: function() {
        Zl(Pu.HOST.CURRENT.BACKUP) || "" === this._url ? this._url = Pu.HOST.CURRENT.DEFAULT : this._url === Pu.HOST.CURRENT.DEFAULT ? this._url = Pu.HOST.CURRENT.BACKUP : this._url === Pu.HOST.CURRENT.BACKUP && (this._url = Pu.HOST.CURRENT.DEFAULT);
        var e3 = this._channelModule.getModule(ug).getProxyServer();
        xd(e3) || (this._url = e3), this._connect(), this._nextPingTs = 0;
      } }, { key: "onCheckTimer", value: function(e3) {
        e3 % 1 == 0 && this._checkPromiseMap();
      } }, { key: "_checkPromiseMap", value: function() {
        var e3 = this;
        0 !== this._promiseMap.size && this._promiseMap.forEach(function(t2, n2) {
          var o2 = t2.reject, r2 = t2.timestamp, a2 = 15e3;
          -1 !== n2.indexOf(Ag) && (a2 = 9e4), Date.now() - r2 >= a2 && (bl.log("".concat(e3._className, "._checkPromiseMap request timeout, delete requestID:").concat(n2)), e3._promiseMap.delete(n2), o2(new kM({ code: ah.NETWORK_TIMEOUT, message: sh.NETWORK_TIMEOUT })), e3._channelModule.onRequestTimeout(n2));
        });
      } }, { key: "onOpen", value: function(e3) {
        if ("" !== this._readyState) {
          this._onOpenTs = Date.now();
          var t2 = e3.id;
          this._socketID = t2;
          var n2 = Date.now() - this._startTs;
          bl.log("".concat(this._className, "._onOpen cost ").concat(n2, " ms. socketID:").concat(t2)), new Ih(Eh.WS_ON_OPEN).setMessage(n2).setCostTime(n2).setMoreMessage("socketID:".concat(t2)).end(), e3.id === this._socketID && (this._readyState = VT, this._reConnectCount = 0, this._resend(), true === this._reConnectFlag && (this._channelModule.onReconnected(), this._reConnectFlag = false), this._channelModule.onOpen());
        }
      } }, { key: "onClose", value: function(e3) {
        var t2 = new Ih(Eh.WS_ON_CLOSE), n2 = e3.id, o2 = e3.e, r2 = "sourceSocketID:".concat(n2, " currentSocketID:").concat(this._socketID, " code:").concat(o2.code, " reason:").concat(o2.reason), a2 = 0;
        0 !== this._onOpenTs && (a2 = Date.now() - this._onOpenTs), t2.setMessage(a2).setCostTime(a2).setMoreMessage(r2).setCode(o2.code).end(), bl.log("".concat(this._className, "._onClose ").concat(r2, " onlineTime:").concat(a2)), n2 === this._socketID && (this._readyState = BT, a2 < 1e3 ? this._channelModule.onReconnectFailed() : this._channelModule.onClose());
      } }, { key: "onError", value: function(e3) {
        var t2 = e3.id, n2 = e3.e, o2 = "sourceSocketID:".concat(t2, " currentSocketID:").concat(this._socketID);
        new Ih(Eh.WS_ON_ERROR).setMessage(n2.errMsg || cd(n2)).setMoreMessage(o2).setLevel("error").end(), bl.warn("".concat(this._className, "._onError"), n2, o2), t2 === this._socketID && (this._readyState = "", this._channelModule.onError());
      } }, { key: "onMessage", value: function(e3) {
        var t2;
        try {
          t2 = JSON.parse(e3.data);
        } catch (fS) {
          new Ih(Eh.JSON_PARSE_ERROR).setMessage(e3.data).end();
        }
        if (t2 && t2.head) {
          var n2 = this._getRequestIDFromHead(t2.head), o2 = Gd(t2.head), r2 = Ty(t2.body, this._getResponseKeyMap(o2));
          if (bl.debug("".concat(this._className, ".onMessage ret:").concat(JSON.stringify(r2), " requestID:").concat(n2, " has:").concat(this._promiseMap.has(n2))), this._setNextPingTs(), this._promiseMap.has(n2)) {
            var a2 = this._promiseMap.get(n2), s2 = a2.resolve, i2 = a2.reject, c2 = a2.timestamp;
            return this._promiseMap.delete(n2), this._calcRTT(c2), void (r2.errorCode && 0 !== r2.errorCode ? (this._channelModule.onErrorCodeNotZero(r2), i2(new kM({ code: r2.errorCode, message: r2.errorInfo || "", data: { elements: r2.elements, messageVersion: r2.messageVersion, cloudCustomData: r2.cloudCustomData } }))) : s2(AM(r2)));
          }
          this._channelModule.onMessage({ head: t2.head, body: r2 });
        }
      } }, { key: "_calcRTT", value: function(e3) {
        var t2 = Date.now() - e3;
        this._channelModule.getModule(Tg).addRTT(t2);
      } }, { key: "_connect", value: function() {
        this._startTs = Date.now(), this._onOpenTs = 0, this._socket = new UT(this), this._socketID = this._socket.getID(), this._readyState = xT, bl.log("".concat(this._className, "._connect isWorkerEnabled:").concat(this.getIsWorkerEnabled(), " socketID:").concat(this._socketID, " url:").concat(this.getURL())), new Ih(Eh.WS_CONNECT).setMessage("socketID:".concat(this._socketID, " url:").concat(this.getURL())).end();
      } }, { key: "getURL", value: function() {
        var e3 = this._channelModule.getModule(ug);
        e3.isDevMode() && (this._canIUseBinaryFrame = false);
        var t2 = Od();
        (xu || wu && "windows" === t2 || Bu) && (this._canIUseBinaryFrame = false);
        var n2 = -1;
        "ios" === t2 ? n2 = el || -1 : "android" === t2 && (n2 = nl || -1);
        var o2 = this._channelModule.getPlatform(), r2 = e3.getSDKAppID(), a2 = e3.getInstanceID();
        return this._canIUseBinaryFrame ? "".concat(this._url, "/binfo?sdkappid=").concat(r2, "&instanceid=").concat(a2, "&random=").concat(this._getRandom(), "&platform=").concat(o2, "&host=").concat(t2, "&version=").concat(n2) : "".concat(this._url, "/info?sdkappid=").concat(r2, "&instanceid=").concat(a2, "&random=").concat(this._getRandom(), "&platform=").concat(o2, "&host=").concat(t2, "&version=").concat(n2);
      } }, { key: "_closeConnection", value: function(e3) {
        bl.log("".concat(this._className, "._closeConnection socketID:").concat(this._socketID)), this._socket && (this._socket.close(e3), this._socketID = -1, this._socket = null, this._readyState = BT);
      } }, { key: "_resend", value: function() {
        var e3 = this;
        if (bl.log("".concat(this._className, "._resend reConnectFlag:").concat(this._reConnectFlag), "promiseMap.size:".concat(this._promiseMap.size, " simpleRequestMap.size:").concat(this._simpleRequestMap.size)), this._promiseMap.size > 0 && this._promiseMap.forEach(function(t3, n3) {
          var o3 = t3.uplinkData, r3 = t3.resolve, a3 = t3.reject;
          e3._promiseMap.set(n3, { resolve: r3, reject: a3, timestamp: Date.now(), uplinkData: o3 }), e3._execute(n3, o3);
        }), this._simpleRequestMap.size > 0) {
          var t2, n2 = S(this._simpleRequestMap);
          try {
            for (n2.s(); !(t2 = n2.n()).done; ) {
              var o2 = m(t2.value, 2), r2 = o2[0], a2 = o2[1];
              this._execute(r2, a2);
            }
          } catch (s2) {
            n2.e(s2);
          } finally {
            n2.f();
          }
          this._simpleRequestMap.clear();
        }
      } }, { key: "send", value: function(e3) {
        var t2 = this;
        e3.head.seq = this._getSequence(), e3.head.reqtime = Math.floor(Date.now() / 1e3);
        e3.keyMap;
        var n2 = g(e3, FT), o2 = this._getRequestIDFromHead(e3.head), r2 = JSON.stringify(n2);
        return new Promise(function(e4, a2) {
          (t2._promiseMap.set(o2, { resolve: e4, reject: a2, timestamp: Date.now(), uplinkData: r2 }), bl.debug("".concat(t2._className, ".send uplinkData:").concat(JSON.stringify(n2), " requestID:").concat(o2, " readyState:").concat(t2._readyState)), t2._readyState !== VT) ? t2._reConnect() : (t2._execute(o2, r2), t2._channelModule.getModule(Tg).addRequestCount());
        });
      } }, { key: "simplySend", value: function(e3) {
        e3.head.seq = this._getSequence(), e3.head.reqtime = Math.floor(Date.now() / 1e3);
        e3.keyMap;
        var t2 = g(e3, qT), n2 = this._getRequestIDFromHead(e3.head), o2 = JSON.stringify(t2);
        this._readyState !== VT ? (this._simpleRequestMap.size < this.MAX_SIZE ? this._simpleRequestMap.set(n2, o2) : bl.log("".concat(this._className, ".simplySend. simpleRequestMap is full, drop request!")), this._reConnect()) : this._execute(n2, o2);
      } }, { key: "_execute", value: function(e3, t2) {
        this._socket.send({ data: t2, fail: Hu ? this._onSendFail.bind(this) : void 0, requestID: e3 });
      } }, { key: "_onSendFail", value: function(e3) {
        bl.log("".concat(this._className, "._onSendFail requestID:").concat(e3));
      } }, { key: "_getSequence", value: function() {
        var e3;
        if (this._startSequence < 2415919103)
          return e3 = this._startSequence, this._startSequence += 1, 2415919103 === this._startSequence && (this._startSequence = ld()), e3;
      } }, { key: "_getRequestIDFromHead", value: function(e3) {
        return e3.servcmd + e3.seq;
      } }, { key: "_getResponseKeyMap", value: function(e3) {
        var n2 = this._channelModule.getKeyMap(e3);
        return t(t({}, fy.response), n2.response);
      } }, { key: "_reConnect", value: function() {
        this._readyState !== VT && this._readyState !== xT && this.forcedReconnect();
      } }, { key: "forcedReconnect", value: function() {
        var e3 = this;
        bl.log("".concat(this._className, ".forcedReconnect count:").concat(this._reConnectCount, " readyState:").concat(this._readyState)), this._reConnectFlag = true, this._resetRandom(), this._reConnectCount < this.MAX_RECONNECT_COUNT ? (this._reConnectCount += 1, this._closeConnection(wT), this._initConnection()) : (this._reConnectCount = 0, this._channelModule.probeNetwork().then(function(t2) {
          var n2 = m(t2, 2), o2 = n2[0];
          n2[1];
          o2 ? (bl.warn("".concat(e3._className, ".forcedReconnect disconnected from wsserver but network is ok, continue...")), e3._closeConnection(wT), e3._initConnection()) : e3._channelModule.onReconnectFailed();
        }));
      } }, { key: "getReconnectFlag", value: function() {
        return this._reConnectFlag;
      } }, { key: "_setNextPingTs", value: function() {
        this._nextPingTs = Date.now() + 1e4;
      } }, { key: "getNextPingTs", value: function() {
        return this._nextPingTs;
      } }, { key: "isConnected", value: function() {
        return this._readyState === VT;
      } }, { key: "canIUseBinaryFrame", value: function() {
        return this._canIUseBinaryFrame;
      } }, { key: "setIsWorkerEnabled", value: function(e3) {
        bl.log("".concat(this._className, ".setIsWorkerEnabled flag:").concat(e3)), this._isWorkerEnabled = e3;
      } }, { key: "getIsWorkerEnabled", value: function() {
        return this._isWorkerEnabled && dl;
      } }, { key: "_getRandom", value: function() {
        return 0 === this._random && (this._random = Math.random()), this._random;
      } }, { key: "_resetRandom", value: function() {
        this._random = 0;
      } }, { key: "close", value: function() {
        bl.log("".concat(this._className, ".close")), this._closeConnection(bT), this._promiseMap.clear(), this._startSequence = ld(), this._readyState = BT, this._simpleRequestMap.clear(), this._reConnectFlag = false, this._reConnectCount = 0, this._onOpenTs = 0, this._url = "", this._random = 0, this._canIUseBinaryFrame = true, this._isWorkerEnabled = true;
      } }]), e2;
    }(), HT = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        if (o(this, n2), (r2 = t2.call(this, e3))._className = "ChannelModule", r2._socketHandler = new KT(_(r2)), r2._probing = false, r2._isAppShowing = true, r2._previousState = gr.NET_STATE_CONNECTED, Hu && "function" == typeof Wu.onAppShow && "function" == typeof Wu.onAppHide) {
          var a2 = r2._onAppHide.bind(_(r2)), s2 = r2._onAppShow.bind(_(r2));
          "function" == typeof Wu.offAppHide && Wu.offAppHide(a2), "function" == typeof Wu.offAppShow && Wu.offAppShow(s2), Wu.onAppHide(a2), Wu.onAppShow(s2);
        }
        return r2._timerForNotLoggedIn = -1, r2._timerForNotLoggedIn = setInterval(r2.onCheckTimer.bind(_(r2)), 1e3), r2._fatalErrorFlag = false, r2;
      }
      return a(n2, [{ key: "onCheckTimer", value: function(e3) {
        this._socketHandler && (this.isLoggedIn() ? (this._timerForNotLoggedIn > 0 && (clearInterval(this._timerForNotLoggedIn), this._timerForNotLoggedIn = -1), this._socketHandler.onCheckTimer(e3)) : this._socketHandler.onCheckTimer(1), this._checkNextPing());
      } }, { key: "onErrorCodeNotZero", value: function(e3) {
        this.getModule(mg).onErrorCodeNotZero(e3);
      } }, { key: "onMessage", value: function(e3) {
        this.getModule(mg).onMessage(e3);
      } }, { key: "send", value: function(e3) {
        return this._socketHandler ? this._previousState !== gr.NET_STATE_CONNECTED && e3.head.servcmd.includes(F_) ? (this.reConnect(), this._sendLogViaHTTP(e3)) : this._socketHandler.send(e3) : Promise.reject();
      } }, { key: "_sendLogViaHTTP", value: function(e3) {
        var t3 = Pu.HOST.CURRENT.STAT;
        return new Promise(function(n3, o2) {
          var r2 = "".concat(t3, "/v4/imopenstat/tim_web_report_v2?sdkappid=").concat(e3.head.sdkappid, "&reqtime=").concat(Date.now()), a2 = JSON.stringify(e3.body), s2 = "application/x-www-form-urlencoded;charset=UTF-8";
          if (Hu)
            Wu.request({ url: r2, data: a2, method: "POST", timeout: 3e3, header: { "content-type": s2 }, success: function() {
              n3();
            }, fail: function() {
              o2(new kM({ code: ah.NETWORK_ERROR, message: sh.NETWORK_ERROR }));
            } });
          else {
            var i2 = new XMLHttpRequest(), c2 = setTimeout(function() {
              i2.abort(), o2(new kM({ code: ah.NETWORK_TIMEOUT, message: sh.NETWORK_TIMEOUT }));
            }, 3e3);
            i2.onreadystatechange = function() {
              4 === i2.readyState && (clearTimeout(c2), 200 === i2.status || 304 === i2.status ? n3() : o2(new kM({ code: ah.NETWORK_ERROR, message: sh.NETWORK_ERROR })));
            }, i2.open("POST", r2, true), i2.setRequestHeader("Content-type", s2), i2.send(a2);
          }
        });
      } }, { key: "simplySend", value: function(e3) {
        return this._socketHandler ? this._socketHandler.simplySend(e3) : Promise.reject();
      } }, { key: "onOpen", value: function() {
        this._ping();
      } }, { key: "onClose", value: function() {
        this._socketHandler && (this._socketHandler.getReconnectFlag() && this._emitNetStateChangeEvent(gr.NET_STATE_DISCONNECTED));
        this.reConnect();
      } }, { key: "onError", value: function() {
        Hu && !Bu && bl.error("".concat(this._className, ".onError \u4ECEv2.11.2\u8D77\uFF0CSDK \u652F\u6301\u4E86 WebSocket\uFF0C\u5982\u60A8\u672A\u6DFB\u52A0\u76F8\u5173\u53D7\u4FE1\u57DF\u540D\uFF0C\u8BF7\u5148\u6DFB\u52A0\uFF01(\u5982\u5DF2\u6DFB\u52A0\u8BF7\u5FFD\u7565)\uFF0C\u5347\u7EA7\u6307\u5F15: https://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-02-upgradeguideline.html")), this._emitNetStateChangeEvent(gr.NET_STATE_DISCONNECTED);
      } }, { key: "getKeyMap", value: function(e3) {
        return this.getModule(mg).getKeyMap(e3);
      } }, { key: "_onAppHide", value: function() {
        this._isAppShowing = false;
      } }, { key: "_onAppShow", value: function() {
        this._isAppShowing = true;
      } }, { key: "onRequestTimeout", value: function(e3) {
      } }, { key: "onReconnected", value: function() {
        bl.log("".concat(this._className, ".onReconnected")), this.getModule(mg).onReconnected(), this._emitNetStateChangeEvent(gr.NET_STATE_CONNECTED);
      } }, { key: "onReconnectFailed", value: function() {
        bl.log("".concat(this._className, ".onReconnectFailed")), this._emitNetStateChangeEvent(gr.NET_STATE_DISCONNECTED);
      } }, { key: "setIsWorkerEnabled", value: function(e3) {
        this._socketHandler && this._socketHandler.setIsWorkerEnabled(false);
      } }, { key: "offline", value: function() {
        this._emitNetStateChangeEvent(gr.NET_STATE_DISCONNECTED);
      } }, { key: "reConnect", value: function() {
        var e3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t3 = false;
        this._socketHandler && (t3 = this._socketHandler.getReconnectFlag());
        var n3 = "forcedFlag:".concat(e3, " fatalErrorFlag:").concat(this._fatalErrorFlag, " previousState:").concat(this._previousState, " reconnectFlag:").concat(t3);
        if (bl.log("".concat(this._className, ".reConnect ").concat(n3)), !this._fatalErrorFlag && this._socketHandler) {
          if (true === e3)
            this._socketHandler.forcedReconnect();
          else {
            if (this._previousState === gr.NET_STATE_CONNECTING && t3)
              return;
            this._socketHandler.forcedReconnect();
          }
          this._emitNetStateChangeEvent(gr.NET_STATE_CONNECTING);
        }
      } }, { key: "_emitNetStateChangeEvent", value: function(e3) {
        this._previousState !== e3 && (bl.log("".concat(this._className, "._emitNetStateChangeEvent from ").concat(this._previousState, " to ").concat(e3)), this._previousState = e3, this.emitOuterEvent(pr.NET_STATE_CHANGE, { state: e3 }));
      } }, { key: "_ping", value: function() {
        var e3 = this;
        if (true !== this._probing) {
          this._probing = true;
          var t3 = this.getModule(mg).getProtocolData({ protocolName: q_ });
          this.send(t3).then(function() {
            e3._probing = false;
          }).catch(function(t4) {
            if (bl.warn("".concat(e3._className, "._ping failed. error:"), t4), e3._probing = false, t4 && 60002 === t4.code)
              return new Ih(Eh.ERROR).setMessage("code:".concat(t4.code, " message:").concat(t4.message)).setNetworkType(e3.getModule(pg).getNetworkType()).end(), e3._fatalErrorFlag = true, void e3._emitNetStateChangeEvent(gr.NET_STATE_DISCONNECTED);
            e3.probeNetwork().then(function(t5) {
              var n3 = m(t5, 2), o2 = n3[0], r2 = n3[1];
              bl.log("".concat(e3._className, "._ping failed. probe network, isAppShowing:").concat(e3._isAppShowing, " online:").concat(o2, " networkType:").concat(r2)), o2 ? e3.reConnect() : e3._emitNetStateChangeEvent(gr.NET_STATE_DISCONNECTED);
            });
          });
        }
      } }, { key: "_checkNextPing", value: function() {
        this._socketHandler && (this._socketHandler.isConnected() && Date.now() >= this._socketHandler.getNextPingTs() && this._ping());
      } }, { key: "dealloc", value: function() {
        this._socketHandler && (this._socketHandler.close(), this._socketHandler = null), this._timerForNotLoggedIn > -1 && clearInterval(this._timerForNotLoggedIn);
      } }, { key: "onRestApiKickedOut", value: function() {
        this._socketHandler && (this._socketHandler.close(), this.reConnect(true));
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._previousState = gr.NET_STATE_CONNECTED, this._probing = false, this._fatalErrorFlag = false, this._timerForNotLoggedIn = setInterval(this.onCheckTimer.bind(this), 1e3);
      } }]), n2;
    }(Cg), jT = ["a2", "tinyid"], WT = ["a2", "tinyid"], YT = function() {
      function e2(t2) {
        o(this, e2), this._className = "ProtocolHandler", this._sessionModule = t2, this._configMap = /* @__PURE__ */ new Map(), this._fillConfigMap();
      }
      return a(e2, [{ key: "_fillConfigMap", value: function() {
        this._configMap.clear();
        var e3 = this._sessionModule.genCommonHead(), n2 = this._sessionModule.genCosSpecifiedHead(), o2 = this._sessionModule.genSSOReportHead();
        this._configMap.set(Ag, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.LOGIN) }), body: { state: "Online" }, keyMap: { response: { InstId: "instanceID", HelloInterval: "helloInterval" } } };
        }(e3)), this._configMap.set(Dg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.LOGOUT) }), body: { type: 0 }, keyMap: { request: { type: "wslogout_type" } } };
        }(e3)), this._configMap.set(Ng, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.HELLO) }), body: {}, keyMap: { response: { NewInstInfo: "newInstanceInfo" } } };
        }(e3)), this._configMap.set(Og, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.STAT_SERVICE, ".").concat(Pu.CMD.KICK_OTHER) }), body: {} };
        }(e3)), this._configMap.set(U_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_COS_SIGN, ".").concat(Pu.CMD.COS_SIGN) }), body: { cmd: "open_im_cos_svc", subCmd: "get_cos_token", duration: 300, version: 2 }, keyMap: { request: { userSig: "usersig", subCmd: "sub_cmd", cmd: "cmd", duration: "duration", version: "version" }, response: { expired_time: "expiredTime", bucket_name: "bucketName", session_token: "sessionToken", tmp_secret_id: "secretId", tmp_secret_key: "secretKey" } } };
        }(n2)), this._configMap.set(b_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.CUSTOM_UPLOAD, ".").concat(Pu.CMD.COS_PRE_SIG) }), body: { fileType: void 0, fileName: void 0, uploadMethod: 0, duration: 900 }, keyMap: { request: { userSig: "usersig", fileType: "file_type", fileName: "file_name", uploadMethod: "upload_method" }, response: { expired_time: "expiredTime", request_id: "requestId", head_url: "headUrl", upload_url: "uploadUrl", download_url: "downloadUrl", ci_url: "ciUrl", snapshot_url: "requestSnapshotUrl" } } };
        }(n2)), this._configMap.set(w_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.CUSTOM_UPLOAD, ".").concat(Pu.CMD.VIDEO_COVER) }), body: { version: 1, platform: void 0, coverName: void 0, requestSnapshotUrl: void 0 }, keyMap: { request: { version: "version", platform: "platform", coverName: "cover_name", requestSnapshotUrl: "snapshot_url" }, response: { error_code: "errorCode", error_msg: "errorInfo", download_url: "snapshotUrl" } } };
        }(n2)), this._configMap.set($_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_CONFIG_MANAGER, ".").concat(Pu.CMD.FETCH_COMMERCIAL_CONFIG) }), body: { SDKAppID: 0 }, keyMap: { request: { SDKAppID: "uint32_sdkappid" }, response: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_purchase_bits: "purchaseBits", uint32_expired_time: "expiredTime" } } };
        }(e3)), this._configMap.set(z_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_CONFIG_MANAGER, ".").concat(Pu.CMD.PUSHED_COMMERCIAL_CONFIG) }), body: {}, keyMap: { response: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_purchase_bits: "purchaseBits", uint32_expired_time: "expiredTime" } } };
        }(e3)), this._configMap.set(W_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_CONFIG_MANAGER, ".").concat(Pu.CMD.FETCH_CLOUD_CONTROL_CONFIG) }), body: { SDKAppID: 0, version: 0 }, keyMap: { request: { SDKAppID: "uint32_sdkappid", version: "uint64_version" }, response: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_json_config: "cloudControlConfig", uint32_expired_time: "expiredTime", uint32_sdkappid: "SDKAppID", uint64_version: "version" } } };
        }(e3)), this._configMap.set(Y_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_CONFIG_MANAGER, ".").concat(Pu.CMD.PUSHED_CLOUD_CONTROL_CONFIG) }), body: {}, keyMap: { response: { int32_error_code: "errorCode", str_error_message: "errorMessage", str_json_config: "cloudControlConfig", uint32_expired_time: "expiredTime", uint32_sdkappid: "SDKAppID", uint64_version: "version" } } };
        }(e3)), this._configMap.set(J_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OVERLOAD_PUSH, ".").concat(Pu.CMD.OVERLOAD_NOTIFY) }), body: {}, keyMap: { response: { OverLoadServCmd: "overloadCommand", DelaySecs: "waitingTime" } } };
        }(e3)), this._configMap.set(Rg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.GET_MESSAGES) }), body: { cookie: "", syncFlag: 0, needAbstract: 1, isOnlineSync: 0 }, keyMap: { request: { fromAccount: "From_Account", toAccount: "To_Account", from: "From_Account", to: "To_Account", time: "MsgTimeStamp", sequence: "MsgSeq", random: "MsgRandom", elements: "MsgBody" }, response: { MsgList: "messageList", SyncFlag: "syncFlag", To_Account: "to", From_Account: "from", ClientSeq: "clientSequence", MsgSeq: "sequence", NoticeSeq: "noticeSequence", NotifySeq: "notifySequence", MsgRandom: "random", MsgTimeStamp: "time", MsgContent: "content", ToGroupId: "groupID", MsgKey: "messageKey", GroupTips: "groupTips", MsgBody: "elements", MsgType: "type", C2CRemainingUnreadCount: "C2CRemainingUnreadList", C2CPairUnreadCount: "C2CPairUnreadList" } } };
        }(e3)), this._configMap.set(Lg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.BIG_DATA_HALLWAY_AUTH_KEY) }), body: {} };
        }(e3)), this._configMap.set(kg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.SEND_MESSAGE) }), body: { fromAccount: "", toAccount: "", msgSeq: 0, msgRandom: 0, msgBody: [], cloudCustomData: void 0, nick: "", avatar: "", msgLifeTime: void 0, offlinePushInfo: { pushFlag: 0, title: "", desc: "", ext: "", apnsInfo: { badgeMode: 0 }, androidInfo: { OPPOChannelID: "" } }, messageControlInfo: void 0, clientTime: void 0, needReadReceipt: 0 }, keyMap: { request: { fromAccount: "From_Account", toAccount: "To_Account", msgTimeStamp: "MsgTimeStamp", msgSeq: "MsgSeq", msgRandom: "MsgRandom", msgBody: "MsgBody", count: "MaxCnt", lastMessageTime: "LastMsgTime", messageKey: "MsgKey", peerAccount: "Peer_Account", data: "Data", description: "Desc", extension: "Ext", type: "MsgType", content: "MsgContent", sizeType: "Type", uuid: "UUID", url: "", imageUrl: "URL", fileUrl: "Url", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", videoUrl: "", downloadFlag: "Download_Flag", nick: "From_AccountNick", avatar: "From_AccountHeadurl", from: "From_Account", time: "MsgTimeStamp", messageRandom: "MsgRandom", messageSequence: "MsgSeq", elements: "MsgBody", clientSequence: "ClientSeq", payload: "MsgContent", messageList: "MsgList", messageNumber: "MsgNum", abstractList: "AbstractList", messageBody: "MsgBody", needReadReceipt: "IsNeedReadReceipt" } } };
        }(e3)), this._configMap.set(Gg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.SEND_GROUP_MESSAGE) }), body: { fromAccount: "", groupID: "", random: 0, clientSequence: 0, priority: "", msgBody: [], cloudCustomData: void 0, onlineOnlyFlag: 0, offlinePushInfo: { pushFlag: 0, title: "", desc: "", ext: "", apnsInfo: { badgeMode: 0 }, androidInfo: { OPPOChannelID: "" } }, groupAtInfo: [], messageControlInfo: void 0, clientTime: void 0, needReadReceipt: 0, topicID: void 0 }, keyMap: { request: { to: "GroupId", extension: "Ext", data: "Data", description: "Desc", random: "Random", sequence: "ReqMsgSeq", count: "ReqMsgNumber", type: "MsgType", priority: "MsgPriority", content: "MsgContent", elements: "MsgBody", sizeType: "Type", uuid: "UUID", url: "", imageUrl: "URL", fileUrl: "Url", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", videoUrl: "", downloadFlag: "Download_Flag", clientSequence: "ClientSeq", from: "From_Account", time: "MsgTimeStamp", messageRandom: "MsgRandom", messageSequence: "MsgSeq", payload: "MsgContent", messageList: "MsgList", messageNumber: "MsgNum", abstractList: "AbstractList", messageBody: "MsgBody", needReadReceipt: "NeedReadReceipt" }, response: { MsgTime: "time", MsgSeq: "sequence" } } };
        }(e3)), this._configMap.set(qg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.REVOKE_C2C_MESSAGE) }), body: { msgInfo: { fromAccount: "", toAccount: "", msgTimeStamp: 0, msgSeq: 0, msgRandom: 0 } }, keyMap: { request: { msgInfo: "MsgInfo", msgTimeStamp: "MsgTimeStamp", msgSeq: "MsgSeq", msgRandom: "MsgRandom" } } };
        }(e3)), this._configMap.set(l_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.REVOKE_GROUP_MESSAGE) }), body: { groupID: "", msgSeqList: void 0, topicID: "" }, keyMap: { request: { msgSeqList: "MsgSeqList", msgSeq: "MsgSeq" } } };
        }(e3)), this._configMap.set(Kg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.GET_C2C_ROAM_MESSAGES) }), body: { peerAccount: "", count: 15, lastMessageTime: 0, messageKey: "", withRecalledMessage: 1, direction: 0 }, keyMap: { request: { messageKey: "MsgKey", peerAccount: "Peer_Account", count: "MaxCnt", lastMessageTime: "LastMsgTime", withRecalledMessage: "WithRecalledMsg", direction: "GetDirection" }, response: { LastMsgTime: "lastMessageTime", IsNeedReadReceipt: "needReadReceipt" } } };
        }(e3)), this._configMap.set(Wg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.MODIFY_C2C_MESSAGE) }), body: { from: "", to: "", sequence: 0, random: 0, time: 0, version: 0, elements: void 0, cloudCustomData: void 0 }, keyMap: { request: { sequence: "MsgSeq", random: "MsgRandom", time: "MsgTime", version: "MsgVersion", type: "MsgType", content: "MsgContent" } } };
        }(e3)), this._configMap.set(g_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_GROUP_ROAM_MESSAGES) }), body: { withRecalledMsg: 1, groupID: "", count: 15, sequence: "", topicID: void 0 }, keyMap: { request: { sequence: "ReqMsgSeq", count: "ReqMsgNumber", withRecalledMessage: "WithRecalledMsg" }, response: { Random: "random", MsgTime: "time", MsgSeq: "sequence", ReqMsgSeq: "sequence", RspMsgList: "messageList", IsPlaceMsg: "isPlaceMessage", IsSystemMsg: "isSystemMessage", ToGroupId: "to", EnumFrom_AccountType: "fromAccountType", EnumTo_AccountType: "toAccountType", GroupCode: "groupCode", MsgPriority: "priority", MsgBody: "elements", MsgType: "type", MsgContent: "content", IsFinished: "complete", Download_Flag: "downloadFlag", ClientSeq: "clientSequence", ThumbUUID: "thumbUUID", VideoUUID: "videoUUID", ToTopicId: "topicID" } } };
        }(e3)), this._configMap.set(Vg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.SET_C2C_MESSAGE_READ) }), body: { C2CMsgReaded: void 0 }, keyMap: { request: { lastMessageTime: "LastedMsgTime" } } };
        }(e3)), this._configMap.set(xg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.SET_C2C_PEER_MUTE_NOTIFICATIONS) }), body: { userIDList: void 0, muteFlag: 0 }, keyMap: { request: { userIDList: "Peer_Account", muteFlag: "Mute_Notifications" } } };
        }(e3)), this._configMap.set(Bg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.GET_C2C_PEER_MUTE_NOTIFICATIONS) }), body: { updateSequence: 0 }, keyMap: { response: { MuteNotificationsList: "muteFlagList" } } };
        }(e3)), this._configMap.set(d_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.SET_GROUP_MESSAGE_READ) }), body: { groupID: void 0, messageReadSeq: void 0, topicID: void 0 }, keyMap: { request: { messageReadSeq: "MsgReadedSeq" } } };
        }(e3)), this._configMap.set(p_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.SET_ALL_MESSAGE_READ) }), body: { readAllC2CMessage: 0, groupMessageReadInfoList: [] }, keyMap: { request: { readAllC2CMessage: "C2CReadAllMsg", groupMessageReadInfoList: "GroupReadInfo", messageSequence: "MsgSeq" }, response: { C2CReadAllMsg: "readAllC2CMessage", GroupReadInfoArray: "groupMessageReadInfoList" } } };
        }(e3)), this._configMap.set(jg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.DELETE_C2C_MESSAGE) }), body: { fromAccount: "", to: "", keyList: void 0 }, keyMap: { request: { keyList: "MsgKeyList" } } };
        }(e3)), this._configMap.set(T_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.DELETE_GROUP_MESSAGE) }), body: { groupID: "", deleter: "", keyList: void 0, topicID: void 0 }, keyMap: { request: { deleter: "Deleter_Account", keyList: "Seqs" } } };
        }(e3)), this._configMap.set(S_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.MODIFY_GROUP_MESSAGE) }), body: { groupID: "", topicID: void 0, sequence: 0, version: 0, elements: void 0, cloudCustomData: void 0 }, keyMap: { request: { sequence: "MsgSeq", version: "MsgVersion", type: "MsgType", content: "MsgContent" } } };
        }(e3)), this._configMap.set(__, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_READ_RECEIPT) }), body: { groupID: "", sequenceList: void 0 }, keyMap: { request: { sequence: "MsgSeq" } } };
        }(e3)), this._configMap.set(f_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.SEND_C2C_READ_RECEIPT) }), body: { peerAccount: "", messageInfoList: void 0 }, keyMap: { request: { peerAccount: "Peer_Account", messageInfoList: "C2CMsgInfo", fromAccount: "From_Account", toAccount: "To_Account", sequence: "MsgSeq", random: "MsgRandom", time: "MsgTime", clientTime: "MsgClientTime" } } };
        }(e3)), this._configMap.set(h_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.SEND_READ_RECEIPT) }), body: { groupID: "", sequenceList: void 0 }, keyMap: { request: { sequenceList: "MsgSeqList", sequence: "MsgSeq" } } };
        }(e3)), this._configMap.set(m_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_READ_RECEIPT_DETAIL) }), body: { groupID: "", sequence: void 0, flag: 0, cursor: 0, count: 0 }, keyMap: { request: { sequence: "MsgSeq", count: "Num" }, response: { ReadList: "readUserIDList", Read_Account: "userID", UnreadList: "unreadUserIDList", Unread_Account: "userID", IsFinish: "isCompleted" } } };
        }(e3)), this._configMap.set(Hg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.GET_PEER_READ_TIME) }), body: { userIDList: void 0 }, keyMap: { request: { userIDList: "To_Account" }, response: { ReadTime: "peerReadTimeList" } } };
        }(e3)), this._configMap.set($g, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.RECENT_CONTACT, ".").concat(Pu.CMD.GET_CONVERSATION_LIST) }), body: { fromAccount: void 0, count: 0 }, keyMap: { request: {}, response: { SessionItem: "conversations", ToAccount: "groupID", To_Account: "userID", UnreadMsgCount: "unreadCount", MsgGroupReadedSeq: "messageReadSeq", C2cPeerReadTime: "c2cPeerReadTime" } } };
        }(e3)), this._configMap.set(Yg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.RECENT_CONTACT, ".").concat(Pu.CMD.PAGING_GET_CONVERSATION_LIST) }), body: { fromAccount: void 0, timeStamp: void 0, startIndex: void 0, pinnedTimeStamp: void 0, pinnedStartIndex: void 0, orderType: void 0, messageAssistFlag: 4, assistFlag: 15 }, keyMap: { request: { messageAssistFlag: "MsgAssistFlags", assistFlag: "AssistFlags", pinnedTimeStamp: "TopTimeStamp", pinnedStartIndex: "TopStartIndex" }, response: { SessionItem: "conversations", ToAccount: "groupID", To_Account: "userID", UnreadMsgCount: "unreadCount", MsgGroupReadedSeq: "messageReadSeq", C2cPeerReadTime: "c2cPeerReadTime", LastMsgFlags: "lastMessageFlag", TopFlags: "isPinned", TopTimeStamp: "pinnedTimeStamp", TopStartIndex: "pinnedStartIndex" } } };
        }(e3)), this._configMap.set(zg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.RECENT_CONTACT, ".").concat(Pu.CMD.DELETE_CONVERSATION) }), body: { fromAccount: "", toAccount: void 0, type: 1, toGroupID: void 0, clearHistoryMessage: 1 }, keyMap: { request: { toGroupID: "ToGroupid", clearHistoryMessage: "ClearRamble" } } };
        }(e3)), this._configMap.set(Jg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.RECENT_CONTACT, ".").concat(Pu.CMD.PIN_CONVERSATION) }), body: { fromAccount: "", operationType: 1, itemList: void 0 }, keyMap: { request: { itemList: "RecentContactItem" } } };
        }(e3)), this._configMap.set(Xg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.DELETE_GROUP_AT_TIPS) }), body: { messageListToDelete: void 0 }, keyMap: { request: { messageListToDelete: "DelMsgList", messageSeq: "MsgSeq", messageRandom: "MsgRandom" } } };
        }(e3)), this._configMap.set(Pg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.PROFILE, ".").concat(Pu.CMD.PORTRAIT_GET) }), body: { fromAccount: "", userItem: [] }, keyMap: { request: { toAccount: "To_Account", standardSequence: "StandardSequence", customSequence: "CustomSequence" } } };
        }(e3)), this._configMap.set(Ug, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.PROFILE, ".").concat(Pu.CMD.PORTRAIT_SET) }), body: { fromAccount: "", profileItem: [{ tag: Fl.NICK, value: "" }, { tag: Fl.GENDER, value: "" }, { tag: Fl.ALLOWTYPE, value: "" }, { tag: Fl.AVATAR, value: "" }] }, keyMap: { request: { toAccount: "To_Account", standardSequence: "StandardSequence", customSequence: "CustomSequence" } } };
        }(e3)), this._configMap.set(bg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.FRIEND, ".").concat(Pu.CMD.GET_BLACKLIST) }), body: { fromAccount: "", startIndex: 0, maxLimited: 30, lastSequence: 0 }, keyMap: { response: { CurruentSequence: "currentSequence" } } };
        }(e3)), this._configMap.set(wg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.FRIEND, ".").concat(Pu.CMD.ADD_BLACKLIST) }), body: { fromAccount: "", toAccount: [] } };
        }(e3)), this._configMap.set(Fg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.FRIEND, ".").concat(Pu.CMD.DELETE_BLACKLIST) }), body: { fromAccount: "", toAccount: [] } };
        }(e3)), this._configMap.set(th, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.SET_SELF_STATUS) }), body: { customStatus: "" }, keyMap: {} };
        }(e3)), this._configMap.set(nh, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.GET_USER_STATUS) }), body: { userIDList: void 0 }, keyMap: { response: { UserStatusList: "successUserList", ErrorList: "failureUserList", To_Account: "userID", Invalid_Account: "invalidUserID", Status: "statusType" } } };
        }(e3)), this._configMap.set(oh, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.SUBSCRIBE_USER_STATUS) }), body: { userIDList: void 0 }, keyMap: { response: { ErrorList: "failureUserList", To_Account: "userID", Invalid_Account: "invalidUserID" } } };
        }(e3)), this._configMap.set(rh, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.UNSUBSCRIBE_USER_STATUS) }), body: { userIDList: void 0, unsubscribeAll: void 0 }, keyMap: { response: { ErrorList: "failureUserList", To_Account: "userID", Invalid_Account: "invalidUserID" } } };
        }(e3)), this._configMap.set(Qg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_JOINED_GROUPS) }), body: { memberAccount: "", limit: void 0, offset: void 0, groupType: void 0, responseFilter: { groupBaseInfoFilter: void 0, selfInfoFilter: void 0 }, isSupportTopic: 0 }, keyMap: { request: { memberAccount: "Member_Account" }, response: { GroupIdList: "groups", NoUnreadSeqList: "excludedUnreadSequenceList", MsgSeq: "readedSequence" } } };
        }(e3)), this._configMap.set(Zg, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_GROUP_INFO) }), body: { groupIDList: void 0, responseFilter: { groupBaseInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "Owner_Account", "CreateTime", "InfoSeq", "LastInfoTime", "LastMsgTime", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "NextMsgSeq", "ShutUpAllMember"], groupCustomFieldFilter: void 0, memberInfoFilter: void 0, memberCustomFieldFilter: void 0 } }, keyMap: { request: { groupIDList: "GroupIdList", groupCustomField: "AppDefinedData", memberCustomField: "AppMemberDefinedData", groupCustomFieldFilter: "AppDefinedDataFilter_Group", memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember" }, response: { GroupIdList: "groups", AppDefinedData: "groupCustomField", AppMemberDefinedData: "memberCustomField", AppDefinedDataFilter_Group: "groupCustomFieldFilter", AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter", InfoSeq: "infoSequence", MemberList: "members", GroupInfo: "groups", ShutUpUntil: "muteUntil", ShutUpAllMember: "muteAllMembers" } } };
        }(e3)), this._configMap.set(e_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.CREATE_GROUP) }), body: { type: void 0, name: void 0, groupID: void 0, ownerID: void 0, introduction: void 0, notification: void 0, maxMemberNum: void 0, joinOption: void 0, memberList: void 0, groupCustomField: void 0, memberCustomField: void 0, webPushFlag: 1, avatar: "", isSupportTopic: void 0 }, keyMap: { request: { ownerID: "Owner_Account", userID: "Member_Account", avatar: "FaceUrl", maxMemberNum: "MaxMemberCount", joinOption: "ApplyJoinOption", groupCustomField: "AppDefinedData", memberCustomField: "AppMemberDefinedData" }, response: { HugeGroupFlag: "avChatRoomFlag", OverJoinedGroupLimit_Account: "overLimitUserIDList" } } };
        }(e3)), this._configMap.set(t_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.DESTROY_GROUP) }), body: { groupID: void 0 } };
        }(e3)), this._configMap.set(n_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.MODIFY_GROUP_INFO) }), body: { groupID: void 0, name: void 0, introduction: void 0, notification: void 0, avatar: void 0, maxMemberNum: void 0, joinOption: void 0, groupCustomField: void 0, muteAllMembers: void 0 }, keyMap: { request: { maxMemberNum: "MaxMemberCount", groupCustomField: "AppDefinedData", muteAllMembers: "ShutUpAllMember", joinOption: "ApplyJoinOption", avatar: "FaceUrl" }, response: { AppDefinedData: "groupCustomField", ShutUpAllMember: "muteAllMembers" } } };
        }(e3)), this._configMap.set(o_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.APPLY_JOIN_GROUP) }), body: { groupID: void 0, applyMessage: void 0, userDefinedField: void 0, webPushFlag: 1, historyMessageFlag: void 0 }, keyMap: { request: { applyMessage: "ApplyMsg", historyMessageFlag: "HugeGroupHistoryMsgFlag" }, response: { HugeGroupFlag: "avChatRoomFlag", AVChatRoomKey: "avChatRoomKey", RspMsgList: "messageList", ToGroupId: "to" } } };
        }(e3)), this._configMap.set(r_, function(e4) {
          e4.a2, e4.tinyid;
          return { head: t(t({}, g(e4, jT)), {}, { servcmd: "".concat(Pu.NAME.BIG_GROUP_NO_AUTH, ".").concat(Pu.CMD.APPLY_JOIN_GROUP) }), body: { groupID: void 0, applyMessage: void 0, userDefinedField: void 0, webPushFlag: 1 }, keyMap: { request: { applyMessage: "ApplyMsg" }, response: { HugeGroupFlag: "avChatRoomFlag" } } };
        }(e3)), this._configMap.set(a_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.QUIT_GROUP) }), body: { groupID: void 0 } };
        }(e3)), this._configMap.set(s_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.SEARCH_GROUP_BY_ID) }), body: { groupIDList: void 0, responseFilter: { groupBasePublicInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "CreateTime", "Owner_Account", "LastInfoTime", "LastMsgTime", "NextMsgSeq", "MemberNum", "MaxMemberNum", "ApplyJoinOption"] } }, keyMap: { response: {} } };
        }(e3)), this._configMap.set(i_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.CHANGE_GROUP_OWNER) }), body: { groupID: void 0, newOwnerID: void 0 }, keyMap: { request: { newOwnerID: "NewOwner_Account" } } };
        }(e3)), this._configMap.set(c_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.HANDLE_APPLY_JOIN_GROUP) }), body: { groupID: void 0, applicant: void 0, handleAction: void 0, handleMessage: void 0, authentication: void 0, messageKey: void 0, userDefinedField: void 0 }, keyMap: { request: { applicant: "Applicant_Account", handleAction: "HandleMsg", handleMessage: "ApprovalMsg", messageKey: "MsgKey" } } };
        }(e3)), this._configMap.set(u_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.HANDLE_GROUP_INVITATION) }), body: { groupID: void 0, inviter: void 0, handleAction: void 0, handleMessage: void 0, authentication: void 0, messageKey: void 0, userDefinedField: void 0 }, keyMap: { request: { inviter: "Inviter_Account", handleAction: "HandleMsg", handleMessage: "ApprovalMsg", messageKey: "MsgKey" } } };
        }(e3)), this._configMap.set(M_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_GROUP_APPLICATION) }), body: { startTime: void 0, limit: void 0, handleAccount: void 0 }, keyMap: { request: { handleAccount: "Handle_Account" } } };
        }(e3)), this._configMap.set(v_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.DELETE_GROUP_SYSTEM_MESSAGE) }), body: { messageListToDelete: void 0 }, keyMap: { request: { messageListToDelete: "DelMsgList", messageSeq: "MsgSeq", messageRandom: "MsgRandom" } } };
        }(e3)), this._configMap.set(y_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.BIG_GROUP_LONG_POLLING, ".").concat(Pu.CMD.AVCHATROOM_LONG_POLL) }), body: { USP: 1, startSeq: 1, startBroadcastSeq: void 0, holdTime: 90, key: void 0 }, keyMap: { request: { USP: "USP" }, response: { ToGroupId: "groupID", RspBroadcastMsgList: "broadcastMessageList", IsSystemMsg: "isSystemMessage" } } };
        }(e3)), this._configMap.set(I_, function(e4) {
          e4.a2, e4.tinyid;
          return { head: t(t({}, g(e4, WT)), {}, { servcmd: "".concat(Pu.NAME.BIG_GROUP_LONG_POLLING_NO_AUTH, ".").concat(Pu.CMD.AVCHATROOM_LONG_POLL) }), body: { USP: 1, startSeq: 1, holdTime: 90, key: void 0 }, keyMap: { request: { USP: "USP" }, response: { ToGroupId: "groupID" } } };
        }(e3)), this._configMap.set(E_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_ONLINE_MEMBER_NUM) }), body: { groupID: void 0 } };
        }(e3)), this._configMap.set(C_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.SET_GROUP_ATTRIBUTES) }), body: { groupID: void 0, groupAttributeList: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] }, keyMap: { request: { key: "key", value: "value" } } };
        }(e3)), this._configMap.set(A_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.MODIFY_GROUP_ATTRIBUTES) }), body: { groupID: void 0, groupAttributeList: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] }, keyMap: { request: { key: "key", value: "value" } } };
        }(e3)), this._configMap.set(D_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.DELETE_GROUP_ATTRIBUTES) }), body: { groupID: void 0, groupAttributeList: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] }, keyMap: { request: { key: "key" } } };
        }(e3)), this._configMap.set(N_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.CLEAR_GROUP_ATTRIBUTES) }), body: { groupID: void 0, mainSequence: void 0, avChatRoomKey: void 0, attributeControl: ["RaceConflict"] } };
        }(e3)), this._configMap.set(O_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP_ATTR, ".").concat(Pu.CMD.GET_GROUP_ATTRIBUTES) }), body: { groupID: void 0, avChatRoomKey: void 0, groupType: 1 }, keyMap: { request: { avChatRoomKey: "Key", groupType: "GroupType" } } };
        }(e3)), this._configMap.set(X_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP_COMMUNITY, ".").concat(Pu.CMD.CREATE_TOPIC) }), body: { groupID: void 0, topicName: void 0, avatar: void 0, customData: void 0, topicID: void 0, notification: void 0, introduction: void 0 }, keyMap: { request: { avatar: "FaceUrl" } } };
        }(e3)), this._configMap.set(Q_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP_COMMUNITY, ".").concat(Pu.CMD.DELETE_TOPIC) }), body: { groupID: void 0, topicIDList: void 0 }, keyMap: { request: { topicIDList: "TopicIdList" }, response: { DestroyResultItem: "resultList" } } };
        }(e3)), this._configMap.set(Z_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP_COMMUNITY, ".").concat(Pu.CMD.UPDATE_TOPIC_PROFILE) }), body: { groupID: void 0, topicID: void 0, avatar: void 0, customData: void 0, notification: void 0, introduction: void 0, muteAllMembers: void 0, topicName: void 0 }, keyMap: { request: { avatar: "FaceUrl", muteAllMembers: "ShutUpAllMember" } } };
        }(e3)), this._configMap.set(eh, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP_COMMUNITY, ".").concat(Pu.CMD.GET_TOPIC_LIST) }), body: { groupID: void 0, topicIDList: void 0 }, keyMap: { request: { topicIDList: "TopicIdList" }, response: { TopicAndSelfInfo: "topicInfoList", TopicInfo: "topic", GroupID: "groupID", ShutUpTime: "muteTime", ShutUpAllFlag: "muteAllMembers", LastMsgTime: "lastMessageTime", MsgSeq: "readedSequence", LastMsgSeq: "sequence" } } };
        }(e3)), this._configMap.set(R_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_GROUP_MEMBER_LIST) }), body: { groupID: void 0, limit: 0, offset: void 0, next: void 0, memberRoleFilter: void 0, memberInfoFilter: ["Role", "NameCard", "ShutUpUntil", "JoinTime"], memberCustomFieldFilter: void 0 }, keyMap: { request: { memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember" }, response: { AppMemberDefinedData: "memberCustomField", AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter", MemberList: "members", ShutUpUntil: "muteUntil" } } };
        }(e3)), this._configMap.set(L_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.GET_GROUP_MEMBER_INFO) }), body: { groupID: void 0, userIDList: void 0, memberInfoFilter: void 0, memberCustomFieldFilter: void 0 }, keyMap: { request: { userIDList: "Member_List_Account", memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember" }, response: { MemberList: "members", ShutUpUntil: "muteUntil", AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter", AppMemberDefinedData: "memberCustomField" } } };
        }(e3)), this._configMap.set(k_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.ADD_GROUP_MEMBER) }), body: { groupID: void 0, silence: void 0, userIDList: void 0 }, keyMap: { request: { userID: "Member_Account", userIDList: "MemberList" }, response: { MemberList: "members" } } };
        }(e3)), this._configMap.set(G_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.DELETE_GROUP_MEMBER) }), body: { groupID: void 0, userIDList: void 0, reason: void 0 }, keyMap: { request: { userIDList: "MemberToDel_Account" } } };
        }(e3)), this._configMap.set(P_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.GROUP, ".").concat(Pu.CMD.MODIFY_GROUP_MEMBER_INFO) }), body: { groupID: void 0, topicID: void 0, userID: void 0, messageRemindType: void 0, nameCard: void 0, role: void 0, memberCustomField: void 0, muteTime: void 0 }, keyMap: { request: { userID: "Member_Account", memberCustomField: "AppMemberDefinedData", muteTime: "ShutUpTime", messageRemindType: "MsgFlag" } } };
        }(e3)), this._configMap.set(F_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STAT, ".").concat(Pu.CMD.TIM_WEB_REPORT_V2) }), body: { header: {}, event: [], quality: [] }, keyMap: { request: { SDKType: "sdk_type", SDKVersion: "sdk_version", deviceType: "device_type", platform: "platform", instanceID: "instance_id", traceID: "trace_id", SDKAppID: "sdk_app_id", userID: "user_id", tinyID: "tiny_id", extension: "extension", timestamp: "timestamp", networkType: "network_type", eventType: "event_type", code: "error_code", message: "error_message", moreMessage: "more_message", duplicate: "duplicate", costTime: "cost_time", level: "level", qualityType: "quality_type", reportIndex: "report_index", wholePeriod: "whole_period", totalCount: "total_count", rttCount: "success_count_business", successRateOfRequest: "percent_business", countLessThan1Second: "success_count_business", percentOfCountLessThan1Second: "percent_business", countLessThan3Second: "success_count_platform", percentOfCountLessThan3Second: "percent_platform", successCountOfBusiness: "success_count_business", successRateOfBusiness: "percent_business", successCountOfPlatform: "success_count_platform", successRateOfPlatform: "percent_platform", successCountOfMessageReceived: "success_count_business", successRateOfMessageReceived: "percent_business", avgRTT: "average_value", avgDelay: "average_value", avgValue: "average_value", uiPlatform: "ui_platform" } } };
        }(o2)), this._configMap.set(q_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.HEARTBEAT, ".").concat(Pu.CMD.ALIVE) }), body: {} };
        }(e3)), this._configMap.set(V_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_PUSH, ".").concat(Pu.CMD.MESSAGE_PUSH) }), body: {}, keyMap: { response: { C2cMsgArray: "C2CMessageArray", GroupMsgArray: "groupMessageArray", GroupTips: "groupTips", C2cNotifyMsgArray: "C2CNotifyMessageArray", C2cMsgInfo: "C2CReadReceiptArray", ClientSeq: "clientSequence", MsgPriority: "priority", NoticeSeq: "noticeSequence", MsgContent: "content", MsgType: "type", MsgBody: "elements", ToGroupId: "to", Desc: "description", Ext: "extension", IsSyncMsg: "isSyncMessage", Flag: "needSync", NeedAck: "needAck", PendencyAdd_Account: "userID", ProfileImNick: "nick", PendencyType: "applicationType", C2CReadAllMsg: "readAllC2CMessage", IsNeedReadReceipt: "needReadReceipt", Status: "statusType" } } };
        }(e3)), this._configMap.set(x_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_PUSH, ".").concat(Pu.CMD.MULTI_MESSAGE_PUSH) }), body: {}, keyMap: { response: { GroupMsgArray: "groupMessageArray", GroupTips: "groupTips", ClientSeq: "clientSequence", MsgPriority: "priority", NoticeSeq: "noticeSequence", MsgContent: "content", MsgType: "type", MsgBody: "elements", ToGroupId: "to", Desc: "description", Ext: "extension", IsSyncMsg: "isSyncMessage", Flag: "needSync", NeedAck: "needAck", PendencyType: "applicationType" } } };
        }(e3)), this._configMap.set(B_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.OPEN_IM, ".").concat(Pu.CMD.MESSAGE_PUSH_ACK) }), body: { sessionData: void 0 }, keyMap: { request: { sessionData: "SessionData" } } };
        }(e3)), this._configMap.set(K_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_OPEN_STATUS, ".").concat(Pu.CMD.STATUS_FORCE_OFFLINE) }), body: {}, keyMap: { response: { C2cNotifyMsgArray: "C2CNotifyMessageArray", NoticeSeq: "noticeSequence", KickoutMsgNotify: "kickoutMsgNotify", NewInstInfo: "newInstanceInfo" } } };
        }(e3)), this._configMap.set(j_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_LONG_MESSAGE, ".").concat(Pu.CMD.DOWNLOAD_MERGER_MESSAGE) }), body: { downloadKey: "" }, keyMap: { response: { Data: "data", Desc: "description", Ext: "extension", Download_Flag: "downloadFlag", ThumbUUID: "thumbUUID", VideoUUID: "videoUUID" } } };
        }(e3)), this._configMap.set(H_, function(e4) {
          return { head: t(t({}, e4), {}, { servcmd: "".concat(Pu.NAME.IM_LONG_MESSAGE, ".").concat(Pu.CMD.UPLOAD_MERGER_MESSAGE) }), body: { messageList: [] }, keyMap: { request: { fromAccount: "From_Account", toAccount: "To_Account", msgTimeStamp: "MsgTimeStamp", msgSeq: "MsgSeq", msgRandom: "MsgRandom", msgBody: "MsgBody", type: "MsgType", content: "MsgContent", data: "Data", description: "Desc", extension: "Ext", sizeType: "Type", uuid: "UUID", url: "", imageUrl: "URL", fileUrl: "Url", remoteAudioUrl: "Url", remoteVideoUrl: "VideoUrl", thumbUUID: "ThumbUUID", videoUUID: "VideoUUID", videoUrl: "", downloadFlag: "Download_Flag", from: "From_Account", time: "MsgTimeStamp", messageRandom: "MsgRandom", messageSequence: "MsgSeq", elements: "MsgBody", clientSequence: "ClientSeq", payload: "MsgContent", messageList: "MsgList", messageNumber: "MsgNum", abstractList: "AbstractList", messageBody: "MsgBody" } } };
        }(e3));
      } }, { key: "has", value: function(e3) {
        return this._configMap.has(e3);
      } }, { key: "get", value: function(e3) {
        return this._configMap.get(e3);
      } }, { key: "update", value: function() {
        this._fillConfigMap();
      } }, { key: "getKeyMap", value: function(e3) {
        return this.has(e3) ? this.get(e3).keyMap || {} : (bl.warn("".concat(this._className, ".getKeyMap unknown protocolName:").concat(e3)), {});
      } }, { key: "getProtocolData", value: function(e3) {
        var t2 = e3.protocolName, n2 = e3.requestData, o2 = this.get(t2), r2 = null;
        if (n2) {
          var a2 = this._simpleDeepCopy(o2), s2 = this._updateService(n2, a2), i2 = s2.body, c2 = /* @__PURE__ */ Object.create(null);
          for (var u2 in i2)
            if (Object.prototype.hasOwnProperty.call(i2, u2)) {
              if (c2[u2] = i2[u2], void 0 === n2[u2])
                continue;
              c2[u2] = n2[u2];
            }
          s2.body = c2, r2 = this._getUplinkData(s2);
        } else
          r2 = this._getUplinkData(o2);
        return r2;
      } }, { key: "_getUplinkData", value: function(e3) {
        var t2 = this._requestDataCleaner(e3), n2 = Gd(t2.head), o2 = Ey(t2.body, this._getRequestKeyMap(n2));
        return t2.body = o2, t2;
      } }, { key: "_updateService", value: function(e3, t2) {
        var n2 = Gd(t2.head);
        if (t2.head.servcmd.includes(Pu.NAME.GROUP)) {
          var o2 = e3.type, r2 = e3.groupID, a2 = void 0 === r2 ? void 0 : r2, s2 = e3.groupIDList, i2 = void 0 === s2 ? [] : s2;
          Zl(a2) && (a2 = i2[0] || ""), Id({ type: o2, groupID: a2 }) && (t2.head.servcmd = "".concat(Pu.NAME.GROUP_COMMUNITY, ".").concat(n2));
        }
        return t2;
      } }, { key: "_getRequestKeyMap", value: function(e3) {
        var n2 = this.getKeyMap(e3);
        return t(t({}, fy.request), n2.request);
      } }, { key: "_requestDataCleaner", value: function(e3) {
        var t2 = Array.isArray(e3) ? [] : /* @__PURE__ */ Object.create(null);
        for (var o2 in e3)
          Object.prototype.hasOwnProperty.call(e3, o2) && rd(o2) && null !== e3[o2] && void 0 !== e3[o2] && ("object" !== n(e3[o2]) ? t2[o2] = e3[o2] : t2[o2] = this._requestDataCleaner.bind(this)(e3[o2]));
        return t2;
      } }, { key: "_simpleDeepCopy", value: function(e3) {
        for (var t2, n2 = Object.keys(e3), o2 = {}, r2 = 0, a2 = n2.length; r2 < a2; r2++)
          t2 = n2[r2], Ql(e3[t2]) ? o2[t2] = Array.from(e3[t2]) : Jl(e3[t2]) ? o2[t2] = this._simpleDeepCopy(e3[t2]) : o2[t2] = e3[t2];
        return o2;
      } }]), e2;
    }(), $T = [B_], zT = function() {
      function e2(t2) {
        o(this, e2), this._sessionModule = t2, this._className = "DownlinkHandler", this._eventHandlerMap = /* @__PURE__ */ new Map(), this._eventHandlerMap.set("C2CMessageArray", this._c2cMessageArrayHandler.bind(this)), this._eventHandlerMap.set("groupMessageArray", this._groupMessageArrayHandler.bind(this)), this._eventHandlerMap.set("groupTips", this._groupTipsHandler.bind(this)), this._eventHandlerMap.set("C2CNotifyMessageArray", this._C2CNotifyMessageArrayHandler.bind(this)), this._eventHandlerMap.set("C2CReadReceiptArray", this._C2CReadReceiptArrayHandler.bind(this)), this._eventHandlerMap.set("profileModify", this._profileHandler.bind(this)), this._eventHandlerMap.set("friendListMod", this._relationChainHandler.bind(this)), this._eventHandlerMap.set("recentContactMod", this._recentContactHandler.bind(this)), this._eventHandlerMap.set("readAllC2CMessage", this._allMessageReadHandler.bind(this)), this._eventHandlerMap.set("c2cMessageModified", this._c2cMessageModifiedHandler.bind(this)), this._eventHandlerMap.set("groupMessageModified", this._groupMessageModifiedHandler.bind(this)), this._eventHandlerMap.set("userStatusList", this._userStatusListHandler.bind(this)), this._keys = M(this._eventHandlerMap.keys());
      }
      return a(e2, [{ key: "_c2cMessageArrayHandler", value: function(e3) {
        var t2 = this._sessionModule.getModule(og);
        if (t2) {
          if (e3.dataList.forEach(function(e4) {
            if (1 === e4.isSyncMessage) {
              var t3 = e4.from;
              e4.from = e4.to, e4.to = t3;
            }
          }), 1 === e3.needSync)
            this._sessionModule.getModule(fg).startOnlineSync();
          t2.onNewC2CMessage({ dataList: e3.dataList, isInstantMessage: true });
        }
      } }, { key: "_c2cMessageModifiedHandler", value: function(e3) {
        var t2 = this._sessionModule.getModule(og);
        t2 && t2.onC2CMessageModified(e3);
      } }, { key: "_groupMessageArrayHandler", value: function(e3) {
        var t2 = this._sessionModule.getModule(rg);
        t2 && t2.onNewGroupMessage({ event: e3.event, dataList: e3.dataList, isInstantMessage: true });
      } }, { key: "_groupMessageModifiedHandler", value: function(e3) {
        var t2 = this._sessionModule.getModule(rg);
        t2 && t2.onGroupMessageModified(e3);
      } }, { key: "_groupTipsHandler", value: function(e3) {
        var t2 = this._sessionModule.getModule(rg);
        if (t2) {
          var n2 = e3.event, o2 = e3.dataList, r2 = e3.isInstantMessage, a2 = void 0 === r2 || r2, s2 = e3.isSyncingEnded;
          switch (n2) {
            case 4:
            case 6:
              t2.onNewGroupTips({ event: n2, dataList: o2 });
              break;
            case 5:
              o2.forEach(function(e4) {
                Ql(e4.elements.revokedInfos) ? t2.onGroupMessageRevoked({ dataList: o2 }) : Ql(e4.elements.groupMessageReadNotice) ? t2.onGroupMessageReadNotice({ dataList: o2 }) : Ql(e4.elements.readReceiptList) ? t2.onReadReceiptList({ dataList: o2 }) : t2.onNewGroupSystemNotice({ dataList: o2, isInstantMessage: a2, isSyncingEnded: s2 });
              });
              break;
            case 12:
              this._sessionModule.getModule(cg).onNewGroupAtTips({ dataList: o2 });
              break;
            default:
              bl.log("".concat(this._className, "._groupTipsHandler unknown event:").concat(n2, " dataList:"), o2);
          }
        }
      } }, { key: "_C2CNotifyMessageArrayHandler", value: function(e3) {
        var t2 = this, n2 = e3.dataList;
        if (Ql(n2)) {
          var o2 = this._sessionModule.getModule(og);
          n2.forEach(function(e4) {
            if (Xl(e4)) {
              if (e4.hasOwnProperty("kickoutMsgNotify")) {
                var r2 = e4.kickoutMsgNotify, a2 = r2.kickType, s2 = r2.newInstanceInfo, i2 = void 0 === s2 ? {} : s2;
                1 === a2 ? t2._sessionModule.onMultipleAccountKickedOut(i2) : 2 === a2 ? t2._sessionModule.onMultipleDeviceKickedOut(i2) : 3 === a2 && t2._sessionModule.onRestApiKickedOut(i2);
              } else if (e4.hasOwnProperty("c2cMessageRevokedNotify"))
                o2 && o2.onC2CMessageRevoked({ dataList: n2 });
              else if (e4.hasOwnProperty("c2cMessageReadReceipt"))
                o2 && o2.onC2CMessageReadReceipt({ dataList: n2 });
              else if (e4.hasOwnProperty("c2cMessageReadNotice"))
                o2 && o2.onC2CMessageReadNotice({ dataList: n2 });
              else if (e4.hasOwnProperty("muteNotificationsSync")) {
                t2._sessionModule.getModule(cg).onC2CMessageRemindTypeSynced({ dataList: n2 });
              }
            }
          });
        }
      } }, { key: "_C2CReadReceiptArrayHandler", value: function(e3) {
        this._sessionModule.getModule(og).onReadReceiptList(e3);
      } }, { key: "_profileHandler", value: function(e3) {
        this._sessionModule.getModule(ng).onProfileModified({ dataList: e3.dataList });
        var t2 = this._sessionModule.getModule(ag);
        t2 && t2.onFriendProfileModified({ dataList: e3.dataList });
      } }, { key: "_relationChainHandler", value: function(e3) {
        this._sessionModule.getModule(ng).onRelationChainModified({ dataList: e3.dataList });
        var t2 = this._sessionModule.getModule(ag);
        t2 && t2.onRelationChainModified({ dataList: e3.dataList });
      } }, { key: "_recentContactHandler", value: function(e3) {
        var t2 = e3.dataList;
        if (Ql(t2)) {
          var n2 = this._sessionModule.getModule(cg);
          n2 && t2.forEach(function(e4) {
            var t3 = e4.pushType, o2 = e4.recentContactTopItem, r2 = e4.recentContactDeleteItem;
            1 === t3 ? n2.onConversationDeleted(r2.recentContactList) : 2 === t3 ? n2.onConversationPinned(o2.recentContactList) : 3 === t3 && n2.onConversationUnpinned(o2.recentContactList);
          });
        }
      } }, { key: "_allMessageReadHandler", value: function(e3) {
        var t2 = e3.dataList, n2 = this._sessionModule.getModule(cg);
        n2 && n2.onPushedAllMessageRead(t2);
      } }, { key: "_userStatusListHandler", value: function(e3) {
        this._sessionModule.getModule(ng).onUserStatusUpdated(e3);
      } }, { key: "onMessage", value: function(e3) {
        var t2 = this, n2 = e3.body;
        if (this._filterMessageFromIMOpenPush(e3)) {
          var o2 = n2.eventArray, r2 = n2.isInstantMessage, a2 = n2.isSyncingEnded, s2 = n2.needSync;
          if (Ql(o2))
            for (var i2 = null, c2 = null, u2 = 0, l2 = 0, d2 = o2.length; l2 < d2; l2++) {
              u2 = (i2 = o2[l2]).event;
              var p3 = Object.keys(i2).find(function(e4) {
                return -1 !== t2._keys.indexOf(e4);
              });
              p3 ? (c2 = 14 === u2 ? { readAllC2CMessage: i2[p3], groupMessageReadInfoList: i2.groupMessageReadNotice || [] } : 16 === u2 ? { userID: i2.userID, readReceiptList: i2[p3] } : i2[p3], this._eventHandlerMap.get(p3)({ event: u2, dataList: c2, isInstantMessage: r2, isSyncingEnded: a2, needSync: s2 })) : bl.log("".concat(this._className, ".onMessage unknown eventItem:").concat(i2));
            }
        }
      } }, { key: "_filterMessageFromIMOpenPush", value: function(e3) {
        var t2 = e3.head, n2 = e3.body, o2 = t2.servcmd, r2 = false;
        if (Zl(o2) || (r2 = o2.includes(Pu.NAME.IM_CONFIG_MANAGER) || o2.includes(Pu.NAME.OVERLOAD_PUSH) || o2.includes(Pu.NAME.STAT_SERVICE)), !r2)
          return true;
        if (o2.includes(Pu.CMD.PUSHED_CLOUD_CONTROL_CONFIG))
          this._sessionModule.getModule(yg).onPushedCloudControlConfig(n2);
        else if (o2.includes(Pu.CMD.PUSHED_COMMERCIAL_CONFIG)) {
          this._sessionModule.getModule(Sg).onPushedConfig(n2);
        } else if (o2.includes(Pu.CMD.OVERLOAD_NOTIFY))
          this._sessionModule.onPushedServerOverload(n2);
        else if (o2.includes(Pu.CMD.KICK_OTHER)) {
          var a2 = Date.now();
          this._sessionModule.reLoginOnKickOther();
          var s2 = new Ih(Eh.KICK_OTHER), i2 = this._sessionModule.getModule(eg).getLastWsHelloTs(), c2 = a2 - i2;
          s2.setMessage("last wshello time:".concat(i2, " diff:").concat(c2, "ms")).setNetworkType(this._sessionModule.getNetworkType()).end();
        }
        return false;
      } }]), e2;
    }(), JT = [{ cmd: Pu.CMD.GET_GROUP_INFO, interval: 1, count: 20 }, { cmd: Pu.CMD.GET_TOPIC_LIST, interval: 1, count: 10 }, { cmd: Pu.CMD.SET_GROUP_ATTRIBUTES, interval: 5, count: 10 }, { cmd: Pu.CMD.MODIFY_GROUP_ATTRIBUTES, interval: 5, count: 10 }, { cmd: Pu.CMD.DELETE_GROUP_ATTRIBUTES, interval: 5, count: 10 }, { cmd: Pu.CMD.CLEAR_GROUP_ATTRIBUTES, interval: 5, count: 10 }, { cmd: Pu.CMD.GET_GROUP_ATTRIBUTES, interval: 5, count: 20 }, { cmd: Pu.CMD.SET_ALL_MESSAGE_READ, interval: 1, count: 1 }, { cmd: Pu.CMD.GET_USER_STATUS, interval: 5, count: 20 }, { cmd: Pu.CMD.SUBSCRIBE_USER_STATUS, interval: 5, count: 20 }, { cmd: Pu.CMD.UNSUBSCRIBE_USER_STATUS, interval: 5, count: 20 }], XT = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "SessionModule", r2._platform = r2.getPlatform(), r2._protocolHandler = new YT(_(r2)), r2._messageDispatcher = new zT(_(r2)), r2._commandFrequencyLimitMap = /* @__PURE__ */ new Map(), r2._commandRequestInfoMap = /* @__PURE__ */ new Map(), r2._serverOverloadInfoMap = /* @__PURE__ */ new Map(), r2._init(), r2.getInnerEmitterInstance().on(ev, r2._onCloudConfigUpdated, _(r2)), r2;
      }
      return a(n2, [{ key: "_init", value: function() {
        this._updateCommandFrequencyLimitMap(JT);
      } }, { key: "_onCloudConfigUpdated", value: function() {
        var e3 = this.getCloudConfig("cmd_frequency_limit");
        Zl(e3) || (e3 = JSON.parse(e3), this._updateCommandFrequencyLimitMap(e3));
      } }, { key: "_updateCommandFrequencyLimitMap", value: function(e3) {
        var t3 = this;
        e3.forEach(function(e4) {
          t3._commandFrequencyLimitMap.set(e4.cmd, { interval: e4.interval, count: e4.count });
        });
      } }, { key: "updateProtocolConfig", value: function() {
        this._protocolHandler.update();
      } }, { key: "request", value: function(e3) {
        bl.debug("".concat(this._className, ".request options:"), e3);
        var t3 = e3.protocolName, n3 = e3.tjgID;
        if (!this._protocolHandler.has(t3))
          return bl.warn("".concat(this._className, ".request unknown protocol:").concat(t3)), bM({ code: ah.CANNOT_FIND_PROTOCOL, message: sh.CANNOT_FIND_PROTOCOL });
        var o2 = this.getProtocolData(e3), r2 = o2.head.servcmd;
        if (this._isFrequencyOverLimit(r2))
          return bM({ code: ah.OVER_FREQUENCY_LIMIT, message: sh.OVER_FREQUENCY_LIMIT });
        if (this._isServerOverload(r2))
          return bM({ code: ah.OPEN_SERVICE_OVERLOAD_ERROR, message: sh.OPEN_SERVICE_OVERLOAD_ERROR });
        xd(n3) || (o2.head.tjgID = n3);
        var a2 = this.getModule(Mg);
        return $T.includes(t3) ? a2.simplySend(o2) : a2.send(o2);
      } }, { key: "getKeyMap", value: function(e3) {
        return this._protocolHandler.getKeyMap(e3);
      } }, { key: "genCommonHead", value: function() {
        var e3 = this.getModule(ug);
        return { ver: "v4", platform: this._platform, websdkappid: Du, websdkversion: Au, a2: e3.getA2Key() || void 0, tinyid: e3.getTinyID() || void 0, status_instid: e3.getStatusInstanceID(), sdkappid: e3.getSDKAppID(), contenttype: e3.getContentType(), reqtime: 0, identifier: e3.getA2Key() ? void 0 : e3.getUserID(), usersig: e3.getA2Key() ? void 0 : e3.getUserSig(), sdkability: 3635, tjgID: "" };
      } }, { key: "genCosSpecifiedHead", value: function() {
        var e3 = this.getModule(ug);
        return { ver: "v4", platform: this._platform, websdkappid: Du, websdkversion: Au, sdkappid: e3.getSDKAppID(), contenttype: e3.getContentType(), reqtime: 0, identifier: e3.getUserID(), usersig: e3.getUserSig(), status_instid: e3.getStatusInstanceID(), sdkability: 3635 };
      } }, { key: "genSSOReportHead", value: function() {
        var e3 = this.getModule(ug);
        return { ver: "v4", platform: this._platform, websdkappid: Du, websdkversion: Au, sdkappid: e3.getSDKAppID(), contenttype: "", reqtime: 0, identifier: "", usersig: "", status_instid: e3.getStatusInstanceID(), sdkability: 3635 };
      } }, { key: "getProtocolData", value: function(e3) {
        return this._protocolHandler.getProtocolData(e3);
      } }, { key: "onErrorCodeNotZero", value: function(e3) {
        var t3 = e3.errorCode;
        if (t3 === ah.HELLO_ANSWER_KICKED_OUT) {
          var n3 = e3.kickType, o2 = e3.newInstanceInfo, r2 = void 0 === o2 ? {} : o2;
          1 === n3 ? this.onMultipleAccountKickedOut(r2) : 2 === n3 ? this.onMultipleDeviceKickedOut(r2) : 3 === n3 && this.onRestApiKickedOut(r2);
        }
        t3 !== ah.MESSAGE_A2KEY_EXPIRED && t3 !== ah.ACCOUNT_A2KEY_EXPIRED || (this._onUserSigExpired(), this.getModule(Mg).reConnect());
      } }, { key: "onMessage", value: function(e3) {
        var t3 = e3.body, n3 = t3.needAck, o2 = void 0 === n3 ? 0 : n3, r2 = t3.sessionData;
        1 === o2 && this._sendACK(r2), this._messageDispatcher.onMessage(e3);
      } }, { key: "onReconnected", value: function() {
        this._reLoginOnReconnected();
      } }, { key: "reLoginOnKickOther", value: function() {
        bl.log("".concat(this._className, ".reLoginOnKickOther")), this._reLogin();
      } }, { key: "_reLoginOnReconnected", value: function() {
        bl.log("".concat(this._className, "._reLoginOnReconnected")), this._reLogin();
      } }, { key: "_reLogin", value: function() {
        var e3 = this;
        this.isLoggedIn() && this.request({ protocolName: Ag }).then(function(t3) {
          var n3 = t3.data.instanceID;
          e3.getModule(ug).setStatusInstanceID(n3), bl.log("".concat(e3._className, "._reLogin ok. start to sync unread messages")), e3.getModule(fg).startSyncOnReconnected(), e3.getModule(cg).syncConversationList(), e3.getModule(Eg).startPull(), e3.getModule(rg).updateLocalMainSequenceOnReconnected();
          var o2 = e3.getModule(ig);
          o2.resetGetTopicTime(), o2.getTopicListOnReconnected();
        });
      } }, { key: "onMultipleAccountKickedOut", value: function(e3) {
        this.getModule(eg).onMultipleAccountKickedOut(e3);
      } }, { key: "onMultipleDeviceKickedOut", value: function(e3) {
        this.getModule(eg).onMultipleDeviceKickedOut(e3);
      } }, { key: "_onUserSigExpired", value: function() {
        this.getModule(eg).onUserSigExpired();
      } }, { key: "onRestApiKickedOut", value: function(e3) {
        this.getModule(eg).onRestApiKickedOut(e3);
      } }, { key: "_sendACK", value: function(e3) {
        this.request({ protocolName: B_, requestData: { sessionData: e3 } });
      } }, { key: "_isFrequencyOverLimit", value: function(e3) {
        var t3 = e3.split(".")[1];
        if (!this._commandFrequencyLimitMap.has(t3))
          return false;
        if (!this._commandRequestInfoMap.has(t3))
          return this._commandRequestInfoMap.set(t3, { startTime: Date.now(), requestCount: 1 }), false;
        var n3 = this._commandFrequencyLimitMap.get(t3), o2 = n3.count, r2 = n3.interval, a2 = this._commandRequestInfoMap.get(t3), s2 = a2.startTime, i2 = a2.requestCount;
        if (Date.now() - s2 > 1e3 * r2)
          return this._commandRequestInfoMap.set(t3, { startTime: Date.now(), requestCount: 1 }), false;
        i2 += 1, this._commandRequestInfoMap.set(t3, { startTime: s2, requestCount: i2 });
        var c2 = false;
        return i2 > o2 && (c2 = true), c2;
      } }, { key: "_isServerOverload", value: function(e3) {
        if (!this._serverOverloadInfoMap.has(e3))
          return false;
        var t3 = this._serverOverloadInfoMap.get(e3), n3 = t3.overloadTime, o2 = t3.waitingTime, r2 = false;
        return Date.now() - n3 <= 1e3 * o2 ? r2 = true : (this._serverOverloadInfoMap.delete(e3), r2 = false), r2;
      } }, { key: "onPushedServerOverload", value: function(e3) {
        var t3 = e3.overloadCommand, n3 = e3.waitingTime;
        this._serverOverloadInfoMap.set(t3, { overloadTime: Date.now(), waitingTime: n3 }), bl.warn("".concat(this._className, ".onPushedServerOverload waitingTime:").concat(n3, "s"));
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._updateCommandFrequencyLimitMap(JT), this._commandRequestInfoMap.clear(), this._serverOverloadInfoMap.clear();
      } }]), n2;
    }(Cg), QT = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "MessageLossDetectionModule", r2._maybeLostSequencesMap = /* @__PURE__ */ new Map(), r2._firstRoundRet = [], r2;
      }
      return a(n2, [{ key: "onMessageMaybeLost", value: function(e3, t3, n3) {
        this._maybeLostSequencesMap.has(e3) || this._maybeLostSequencesMap.set(e3, []);
        for (var o2 = this._maybeLostSequencesMap.get(e3), r2 = 0; r2 < n3; r2++)
          -1 === o2.indexOf(t3 + r2) && o2.push(t3 + r2);
      } }, { key: "detectFirstRound", value: function(e3, t3) {
        var n3 = this._maybeLostSequencesMap.get(e3);
        if (!xd(n3) && !xd(t3)) {
          var o2 = n3.filter(function(e4) {
            return -1 === t3.indexOf(e4);
          });
          0 === o2.length ? bl.info("".concat(this._className, ".detectFirstRound no message loss. conversationID:").concat(e3)) : this._firstRoundRet = this._firstRoundRet.concat(o2), n3.length = 0;
        }
      } }, { key: "detectSecondRound", value: function(e3, t3) {
        if (!xd(this._firstRoundRet) && !xd(t3)) {
          var n3 = this._firstRoundRet.filter(function(e4) {
            return -1 === t3.indexOf(e4);
          });
          this._firstRoundRet.length = 0;
          var o2, r2 = n3.length;
          if (0 !== r2)
            r2 <= 5 ? o2 = e3 + "-" + n3.join("-") : (n3.sort(function(e4, t4) {
              return e4 - t4;
            }), o2 = e3 + " start:" + n3[0] + " end:" + n3[r2 - 1] + " count:" + r2), new Ih(Eh.MESSAGE_LOSS).setMessage(o2).setNetworkType(this.getNetworkType()).setLevel("warning").end(), bl.info("".concat(this._className, ".detectSecondRound message loss detected. conversationID:").concat(e3, " lostSequences:").concat(n3));
        }
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._maybeLostSequencesMap.clear(), this._firstRoundRet.length = 0;
      } }]), n2;
    }(Cg), ZT = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "CloudControlModule", r2._cloudConfig = /* @__PURE__ */ new Map(), r2._expiredTime = 0, r2._version = 0, r2._isFetching = false, r2;
      }
      return a(n2, [{ key: "getCloudConfig", value: function(e3) {
        return Zl(e3) ? this._cloudConfig : this._cloudConfig.has(e3) ? this._cloudConfig.get(e3) : void 0;
      } }, { key: "_canFetchConfig", value: function() {
        return this.isLoggedIn() && !this._isFetching && Date.now() >= this._expiredTime;
      } }, { key: "fetchConfig", value: function() {
        var e3 = this, t3 = this._canFetchConfig();
        if (bl.log("".concat(this._className, ".fetchConfig canFetchConfig:").concat(t3)), t3) {
          var n3 = new Ih(Eh.FETCH_CLOUD_CONTROL_CONFIG), o2 = this.getModule(ug).getSDKAppID();
          this._isFetching = true, this.request({ protocolName: W_, requestData: { SDKAppID: o2, version: this._version } }).then(function(t4) {
            e3._isFetching = false, n3.setMessage("version:".concat(e3._version, " newVersion:").concat(t4.data.version, " config:").concat(t4.data.cloudControlConfig)).setNetworkType(e3.getNetworkType()).end(), bl.log("".concat(e3._className, ".fetchConfig ok")), e3._parseCloudControlConfig(t4.data);
          }).catch(function(t4) {
            e3._isFetching = false, e3.probeNetwork().then(function(e4) {
              var o3 = m(e4, 2), r2 = o3[0], a2 = o3[1];
              n3.setError(t4, r2, a2).end();
            }), bl.log("".concat(e3._className, ".fetchConfig failed. error:"), t4), e3._setExpiredTimeOnResponseError(12e4);
          });
        }
      } }, { key: "onPushedCloudControlConfig", value: function(e3) {
        bl.log("".concat(this._className, ".onPushedCloudControlConfig")), new Ih(Eh.PUSHED_CLOUD_CONTROL_CONFIG).setNetworkType(this.getNetworkType()).setMessage("newVersion:".concat(e3.version, " config:").concat(e3.cloudControlConfig)).end(), this._parseCloudControlConfig(e3);
      } }, { key: "onCheckTimer", value: function(e3) {
        this._canFetchConfig() && this.fetchConfig();
      } }, { key: "_parseCloudControlConfig", value: function(e3) {
        var t3 = this, n3 = "".concat(this._className, "._parseCloudControlConfig"), o2 = e3.errorCode, r2 = e3.errorMessage, a2 = e3.cloudControlConfig, s2 = e3.version, i2 = e3.expiredTime;
        if (0 === o2) {
          if (this._version !== s2) {
            var c2 = null;
            try {
              c2 = JSON.parse(a2);
            } catch (fS) {
              bl.error("".concat(n3, " JSON parse error:").concat(a2));
            }
            c2 && (this._cloudConfig.clear(), Object.keys(c2).forEach(function(e4) {
              t3._cloudConfig.set(e4, c2[e4]);
            }), this._version = s2, this.emitInnerEvent(ev));
          }
          this._expiredTime = Date.now() + 1e3 * i2;
        } else
          Zl(o2) ? (bl.log("".concat(n3, " failed. Invalid message format:"), e3), this._setExpiredTimeOnResponseError(36e5)) : (bl.error("".concat(n3, " errorCode:").concat(o2, " errorMessage:").concat(r2)), this._setExpiredTimeOnResponseError(12e4));
      } }, { key: "_setExpiredTimeOnResponseError", value: function(e3) {
        this._expiredTime = Date.now() + e3;
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._cloudConfig.clear(), this._expiredTime = 0, this._version = 0, this._isFetching = false;
      } }]), n2;
    }(Cg), eS = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "PullGroupMessageModule", r2._remoteLastMessageSequenceMap = /* @__PURE__ */ new Map(), r2.PULL_LIMIT_COUNT = 15, r2;
      }
      return a(n2, [{ key: "startPull", value: function() {
        var e3 = this, t3 = this._getNeedPullConversationList();
        this._getRemoteLastMessageSequenceList().then(function() {
          var n3 = e3.getModule(cg);
          t3.forEach(function(t4) {
            var o2 = t4.conversationID, r2 = o2.replace(gr.CONV_GROUP, ""), a2 = n3.getGroupLocalLastMessageSequence(o2), s2 = e3._remoteLastMessageSequenceMap.get(r2) || 0, i2 = s2 - a2;
            bl.log("".concat(e3._className, ".startPull groupID:").concat(r2, " localLastMessageSequence:").concat(a2, " ") + "remoteLastMessageSequence:".concat(s2, " diff:").concat(i2)), a2 > 0 && i2 >= 1 && i2 < 300 && e3._pullMissingMessage({ groupID: r2, localLastMessageSequence: a2, remoteLastMessageSequence: s2, diff: i2 });
          });
        });
      } }, { key: "_getNeedPullConversationList", value: function() {
        return this.getModule(cg).getLocalConversationList().filter(function(e3) {
          return e3.type === gr.CONV_GROUP && e3.groupProfile.type !== gr.GRP_AVCHATROOM;
        });
      } }, { key: "_getRemoteLastMessageSequenceList", value: function() {
        var e3 = this;
        return this.getModule(rg).getGroupList().then(function(t3) {
          for (var n3 = t3.data.groupList, o2 = void 0 === n3 ? [] : n3, r2 = 0; r2 < o2.length; r2++) {
            var a2 = o2[r2], s2 = a2.groupID, i2 = a2.nextMessageSeq;
            if (a2.type !== gr.GRP_AVCHATROOM) {
              var c2 = i2 - 1;
              e3._remoteLastMessageSequenceMap.set(s2, c2);
            }
          }
        });
      } }, { key: "_pullMissingMessage", value: function(e3) {
        var t3 = this, n3 = e3.localLastMessageSequence, o2 = e3.remoteLastMessageSequence, r2 = e3.diff;
        e3.count = r2 > this.PULL_LIMIT_COUNT ? this.PULL_LIMIT_COUNT : r2, e3.sequence = r2 > this.PULL_LIMIT_COUNT ? n3 + this.PULL_LIMIT_COUNT : n3 + r2, this._getGroupMissingMessage(e3).then(function(a2) {
          a2.length > 0 && (a2[0].sequence + 1 <= o2 && (e3.localLastMessageSequence = n3 + t3.PULL_LIMIT_COUNT, e3.diff = r2 - t3.PULL_LIMIT_COUNT, t3._pullMissingMessage(e3)), t3.getModule(rg).onNewGroupMessage({ dataList: a2, isInstantMessage: false }));
        });
      } }, { key: "_getGroupMissingMessage", value: function(e3) {
        var t3 = this, n3 = new Ih(Eh.GET_GROUP_MISSING_MESSAGE);
        return this.request({ protocolName: g_, requestData: { groupID: e3.groupID, count: e3.count, sequence: e3.sequence } }).then(function(o2) {
          var r2 = o2.data.messageList, a2 = void 0 === r2 ? [] : r2;
          return n3.setNetworkType(t3.getNetworkType()).setMessage("groupID:".concat(e3.groupID, " count:").concat(e3.count, " sequence:").concat(e3.sequence, " messageList length:").concat(a2.length)).end(), a2;
        }).catch(function(e4) {
          t3.probeNetwork().then(function(t4) {
            var o2 = m(t4, 2), r2 = o2[0], a2 = o2[1];
            n3.setError(e4, r2, a2).end();
          });
        });
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._remoteLastMessageSequenceMap.clear();
      } }]), n2;
    }(Cg), tS = function() {
      function e2() {
        o(this, e2), this._className = "AvgE2EDelay", this._e2eDelayArray = [];
      }
      return a(e2, [{ key: "addMessageDelay", value: function(e3) {
        var t2 = kl() - e3;
        t2 >= 0 && this._e2eDelayArray.push(t2);
      } }, { key: "_calcAvg", value: function(e3, t2) {
        if (0 === t2)
          return 0;
        var n2 = 0;
        return e3.forEach(function(e4) {
          n2 += e4;
        }), Pd(n2 / t2, 1);
      } }, { key: "_calcCountWithLimit", value: function(e3) {
        var t2 = e3.e2eDelayArray, n2 = e3.min, o2 = e3.max;
        return t2.filter(function(e4) {
          return n2 <= e4 && e4 < o2;
        }).length;
      } }, { key: "_calcPercent", value: function(e3, t2) {
        var n2 = Pd(e3 / t2 * 100, 2);
        return n2 > 100 && (n2 = 100), n2;
      } }, { key: "_checkE2EDelayException", value: function(e3, t2) {
        var n2 = e3.filter(function(e4) {
          return e4 > t2;
        });
        if (n2.length > 0) {
          var o2 = n2.length, r2 = Math.min.apply(Math, M(n2)), a2 = Math.max.apply(Math, M(n2)), s2 = this._calcAvg(n2, o2), i2 = Pd(o2 / e3.length * 100, 2);
          if (i2 > 50)
            new Ih(Eh.MESSAGE_E2E_DELAY_EXCEPTION).setMessage("message e2e delay exception. count:".concat(o2, " min:").concat(r2, " max:").concat(a2, " avg:").concat(s2, " percent:").concat(i2)).setLevel("warning").end();
        }
      } }, { key: "getStatResult", value: function() {
        var e3 = this._e2eDelayArray.length;
        if (0 === e3)
          return null;
        var t2 = M(this._e2eDelayArray), n2 = this._calcCountWithLimit({ e2eDelayArray: t2, min: 0, max: 1 }), o2 = this._calcCountWithLimit({ e2eDelayArray: t2, min: 1, max: 3 }), r2 = this._calcPercent(n2, e3), a2 = this._calcPercent(o2, e3), s2 = this._calcAvg(t2, e3);
        return this._checkE2EDelayException(t2, 3), t2.length = 0, this.reset(), { totalCount: e3, countLessThan1Second: n2, percentOfCountLessThan1Second: r2, countLessThan3Second: o2, percentOfCountLessThan3Second: a2, avgDelay: s2 };
      } }, { key: "reset", value: function() {
        this._e2eDelayArray.length = 0;
      } }]), e2;
    }(), nS = function() {
      function e2() {
        o(this, e2), this._className = "AvgRTT", this._requestCount = 0, this._rttArray = [];
      }
      return a(e2, [{ key: "addRequestCount", value: function() {
        this._requestCount += 1;
      } }, { key: "addRTT", value: function(e3) {
        this._rttArray.push(e3);
      } }, { key: "_calcTotalCount", value: function() {
        return this._requestCount;
      } }, { key: "_calcRTTCount", value: function(e3) {
        return e3.length;
      } }, { key: "_calcSuccessRateOfRequest", value: function(e3, t2) {
        if (0 === t2)
          return 0;
        var n2 = Pd(e3 / t2 * 100, 2);
        return n2 > 100 && (n2 = 100), n2;
      } }, { key: "_calcAvg", value: function(e3, t2) {
        if (0 === t2)
          return 0;
        var n2 = 0;
        return e3.forEach(function(e4) {
          n2 += e4;
        }), parseInt(n2 / t2);
      } }, { key: "_calcMax", value: function() {
        return Math.max.apply(Math, M(this._rttArray));
      } }, { key: "_calcMin", value: function() {
        return Math.min.apply(Math, M(this._rttArray));
      } }, { key: "getStatResult", value: function() {
        var e3 = this._calcTotalCount(), t2 = M(this._rttArray);
        if (0 === e3)
          return null;
        var n2 = this._calcRTTCount(t2), o2 = this._calcSuccessRateOfRequest(n2, e3), r2 = this._calcAvg(t2, n2);
        return bl.log("".concat(this._className, ".getStatResult max:").concat(this._calcMax(), " min:").concat(this._calcMin(), " avg:").concat(r2)), this.reset(), { totalCount: e3, rttCount: n2, successRateOfRequest: o2, avgRTT: r2 };
      } }, { key: "reset", value: function() {
        this._requestCount = 0, this._rttArray.length = 0;
      } }]), e2;
    }(), oS = function() {
      function e2() {
        o(this, e2), this._map = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "initMap", value: function(e3) {
        var t2 = this;
        e3.forEach(function(e4) {
          t2._map.set(e4, { totalCount: 0, successCount: 0, failedCountOfUserSide: 0, costArray: [], fileSizeArray: [] });
        });
      } }, { key: "addTotalCount", value: function(e3) {
        return !(Zl(e3) || !this._map.has(e3)) && (this._map.get(e3).totalCount += 1, true);
      } }, { key: "addSuccessCount", value: function(e3) {
        return !(Zl(e3) || !this._map.has(e3)) && (this._map.get(e3).successCount += 1, true);
      } }, { key: "addFailedCountOfUserSide", value: function(e3) {
        return !(Zl(e3) || !this._map.has(e3)) && (this._map.get(e3).failedCountOfUserSide += 1, true);
      } }, { key: "addCost", value: function(e3, t2) {
        return !(Zl(e3) || !this._map.has(e3)) && (this._map.get(e3).costArray.push(t2), true);
      } }, { key: "addFileSize", value: function(e3, t2) {
        return !(Zl(e3) || !this._map.has(e3)) && (this._map.get(e3).fileSizeArray.push(t2), true);
      } }, { key: "_calcSuccessRateOfBusiness", value: function(e3) {
        if (Zl(e3) || !this._map.has(e3))
          return -1;
        var t2 = this._map.get(e3), n2 = Pd(t2.successCount / t2.totalCount * 100, 2);
        return n2 > 100 && (n2 = 100), n2;
      } }, { key: "_calcSuccessRateOfPlatform", value: function(e3) {
        if (Zl(e3) || !this._map.has(e3))
          return -1;
        var t2 = this._map.get(e3), n2 = this._calcSuccessCountOfPlatform(e3) / t2.totalCount * 100;
        return (n2 = Pd(n2, 2)) > 100 && (n2 = 100), n2;
      } }, { key: "_calcTotalCount", value: function(e3) {
        return Zl(e3) || !this._map.has(e3) ? -1 : this._map.get(e3).totalCount;
      } }, { key: "_calcSuccessCountOfBusiness", value: function(e3) {
        return Zl(e3) || !this._map.has(e3) ? -1 : this._map.get(e3).successCount;
      } }, { key: "_calcSuccessCountOfPlatform", value: function(e3) {
        if (Zl(e3) || !this._map.has(e3))
          return -1;
        var t2 = this._map.get(e3);
        return t2.successCount + t2.failedCountOfUserSide;
      } }, { key: "_calcAvg", value: function(e3) {
        return Zl(e3) || !this._map.has(e3) ? -1 : e3 === gh ? this._calcAvgSpeed(e3) : this._calcAvgCost(e3);
      } }, { key: "_calcAvgCost", value: function(e3) {
        var t2 = this._map.get(e3).costArray.length;
        if (0 === t2)
          return 0;
        var n2 = 0;
        return this._map.get(e3).costArray.forEach(function(e4) {
          n2 += e4;
        }), parseInt(n2 / t2);
      } }, { key: "_calcAvgSpeed", value: function(e3) {
        var t2 = 0, n2 = 0;
        return this._map.get(e3).costArray.forEach(function(e4) {
          t2 += e4;
        }), this._map.get(e3).fileSizeArray.forEach(function(e4) {
          n2 += e4;
        }), parseInt(1e3 * n2 / t2);
      } }, { key: "getStatResult", value: function(e3) {
        var t2 = this._calcTotalCount(e3);
        if (0 === t2)
          return null;
        var n2 = this._calcSuccessCountOfBusiness(e3), o2 = this._calcSuccessRateOfBusiness(e3), r2 = this._calcSuccessCountOfPlatform(e3), a2 = this._calcSuccessRateOfPlatform(e3), s2 = this._calcAvg(e3);
        return this.reset(e3), { totalCount: t2, successCountOfBusiness: n2, successRateOfBusiness: o2, successCountOfPlatform: r2, successRateOfPlatform: a2, avgValue: s2 };
      } }, { key: "reset", value: function(e3) {
        Zl(e3) ? this._map.clear() : this._map.set(e3, { totalCount: 0, successCount: 0, failedCountOfUserSide: 0, costArray: [], fileSizeArray: [] });
      } }]), e2;
    }(), rS = function() {
      function e2() {
        o(this, e2), this._lastMap = /* @__PURE__ */ new Map(), this._currentMap = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "initMap", value: function(e3) {
        var t2 = this;
        e3.forEach(function(e4) {
          t2._lastMap.set(e4, /* @__PURE__ */ new Map()), t2._currentMap.set(e4, /* @__PURE__ */ new Map());
        });
      } }, { key: "addMessageSequence", value: function(e3) {
        var t2 = e3.key, n2 = e3.message;
        if (Zl(t2) || !this._lastMap.has(t2) || !this._currentMap.has(t2))
          return false;
        var o2 = n2.conversationID, r2 = n2.sequence, a2 = o2.replace(gr.CONV_GROUP, "");
        if (0 === this._lastMap.get(t2).size)
          this._addCurrentMap(e3);
        else if (this._lastMap.get(t2).has(a2)) {
          var s2 = this._lastMap.get(t2).get(a2), i2 = s2.length - 1;
          r2 > s2[0] && r2 < s2[i2] ? (s2.push(r2), s2.sort(), this._lastMap.get(t2).set(a2, s2)) : this._addCurrentMap(e3);
        } else
          this._addCurrentMap(e3);
        return true;
      } }, { key: "_addCurrentMap", value: function(e3) {
        var t2 = e3.key, n2 = e3.message, o2 = n2.conversationID, r2 = n2.sequence, a2 = o2.replace(gr.CONV_GROUP, "");
        this._currentMap.get(t2).has(a2) || this._currentMap.get(t2).set(a2, []), this._currentMap.get(t2).get(a2).push(r2);
      } }, { key: "_copyData", value: function(e3) {
        if (!Zl(e3)) {
          this._lastMap.set(e3, /* @__PURE__ */ new Map());
          var t2, n2 = this._lastMap.get(e3), o2 = S(this._currentMap.get(e3));
          try {
            for (o2.s(); !(t2 = o2.n()).done; ) {
              var r2 = m(t2.value, 2), a2 = r2[0], s2 = r2[1];
              n2.set(a2, s2);
            }
          } catch (i2) {
            o2.e(i2);
          } finally {
            o2.f();
          }
          n2 = null, this._currentMap.set(e3, /* @__PURE__ */ new Map());
        }
      } }, { key: "getStatResult", value: function(e3) {
        if (Zl(this._currentMap.get(e3)) || Zl(this._lastMap.get(e3)))
          return null;
        if (0 === this._lastMap.get(e3).size)
          return this._copyData(e3), null;
        var t2 = 0, n2 = 0;
        if (this._lastMap.get(e3).forEach(function(e4, o3) {
          var r2 = M(e4.values()), a2 = r2.length, s2 = r2[a2 - 1] - r2[0] + 1;
          t2 += s2, n2 += a2;
        }), 0 === t2)
          return null;
        var o2 = Pd(n2 / t2 * 100, 2);
        return o2 > 100 && (o2 = 100), this._copyData(e3), { totalCount: t2, successCountOfMessageReceived: n2, successRateOfMessageReceived: o2 };
      } }, { key: "reset", value: function() {
        this._currentMap.clear(), this._lastMap.clear();
      } }]), e2;
    }(), aS = function(e2) {
      i(r2, e2);
      var n2 = f(r2);
      function r2(e3) {
        var t2;
        o(this, r2), (t2 = n2.call(this, e3))._className = "QualityStatModule", t2.TAG = "im-ssolog-quality-stat", t2.reportIndex = 0, t2.wholePeriod = false, t2._qualityItems = [ih, ch, uh, lh, dh, ph, gh, _h, hh, fh], t2._messageSentItems = [uh, lh, dh, ph, gh], t2._messageReceivedItems = [_h, hh, fh], t2.REPORT_INTERVAL = 120, t2.REPORT_SDKAPPID_BLACKLIST = [], t2.REPORT_TINYID_WHITELIST = [], t2._statInfoArr = [], t2._avgRTT = new nS(), t2._avgE2EDelay = new tS(), t2._rateMessageSent = new oS(), t2._rateMessageReceived = new rS();
        var a2 = t2.getInnerEmitterInstance();
        return a2.on(ZM, t2._onLoginSuccess, _(t2)), a2.on(ev, t2._onCloudConfigUpdated, _(t2)), t2;
      }
      return a(r2, [{ key: "_onLoginSuccess", value: function() {
        var e3 = this;
        this._rateMessageSent.initMap(this._messageSentItems), this._rateMessageReceived.initMap(this._messageReceivedItems);
        var t2 = this.getModule(lg), n3 = t2.getItem(this.TAG, false);
        !xd(n3) && td(n3.forEach) && (bl.log("".concat(this._className, "._onLoginSuccess.get quality stat log in storage, nums=").concat(n3.length)), n3.forEach(function(t3) {
          e3._statInfoArr.push(t3);
        }), t2.removeItem(this.TAG, false));
      } }, { key: "_onCloudConfigUpdated", value: function() {
        var e3 = this.getCloudConfig("q_rpt_interval"), t2 = this.getCloudConfig("q_rpt_sdkappid_bl"), n3 = this.getCloudConfig("q_rpt_tinyid_wl");
        Zl(e3) || (this.REPORT_INTERVAL = Number(e3)), Zl(t2) || (this.REPORT_SDKAPPID_BLACKLIST = t2.split(",").map(function(e4) {
          return Number(e4);
        })), Zl(n3) || (this.REPORT_TINYID_WHITELIST = n3.split(","));
      } }, { key: "onCheckTimer", value: function(e3) {
        this.isLoggedIn() && e3 % this.REPORT_INTERVAL == 0 && (this.wholePeriod = true, this._report());
      } }, { key: "addRequestCount", value: function() {
        this._avgRTT.addRequestCount();
      } }, { key: "addRTT", value: function(e3) {
        this._avgRTT.addRTT(e3);
      } }, { key: "addMessageDelay", value: function(e3) {
        this._avgE2EDelay.addMessageDelay(e3);
      } }, { key: "addTotalCount", value: function(e3) {
        this._rateMessageSent.addTotalCount(e3) || bl.warn("".concat(this._className, ".addTotalCount invalid key:"), e3);
      } }, { key: "addSuccessCount", value: function(e3) {
        this._rateMessageSent.addSuccessCount(e3) || bl.warn("".concat(this._className, ".addSuccessCount invalid key:"), e3);
      } }, { key: "addFailedCountOfUserSide", value: function(e3) {
        this._rateMessageSent.addFailedCountOfUserSide(e3) || bl.warn("".concat(this._className, ".addFailedCountOfUserSide invalid key:"), e3);
      } }, { key: "addCost", value: function(e3, t2) {
        this._rateMessageSent.addCost(e3, t2) || bl.warn("".concat(this._className, ".addCost invalid key or cost:"), e3, t2);
      } }, { key: "addFileSize", value: function(e3, t2) {
        this._rateMessageSent.addFileSize(e3, t2) || bl.warn("".concat(this._className, ".addFileSize invalid key or size:"), e3, t2);
      } }, { key: "addMessageSequence", value: function(e3) {
        this._rateMessageReceived.addMessageSequence(e3) || bl.warn("".concat(this._className, ".addMessageSequence invalid key:"), e3.key);
      } }, { key: "_getQualityItem", value: function(e3) {
        var n3 = {}, o2 = vh[this.getNetworkType()];
        Zl(o2) && (o2 = 8);
        var r3 = { qualityType: mh[e3], timestamp: Rl(), networkType: o2, extension: "" };
        switch (e3) {
          case ih:
            n3 = this._avgRTT.getStatResult();
            break;
          case ch:
            n3 = this._avgE2EDelay.getStatResult();
            break;
          case uh:
          case lh:
          case dh:
          case ph:
          case gh:
            n3 = this._rateMessageSent.getStatResult(e3);
            break;
          case _h:
          case hh:
          case fh:
            n3 = this._rateMessageReceived.getStatResult(e3);
        }
        return null === n3 ? null : t(t({}, r3), n3);
      } }, { key: "_report", value: function(e3) {
        var t2 = this, n3 = [], o2 = null;
        Zl(e3) ? this._qualityItems.forEach(function(e4) {
          null !== (o2 = t2._getQualityItem(e4)) && (o2.reportIndex = t2.reportIndex, o2.wholePeriod = t2.wholePeriod, n3.push(o2));
        }) : null !== (o2 = this._getQualityItem(e3)) && (o2.reportIndex = this.reportIndex, o2.wholePeriod = this.wholePeriod, n3.push(o2)), bl.debug("".concat(this._className, "._report"), n3), this._statInfoArr.length > 0 && (n3 = n3.concat(this._statInfoArr), this._statInfoArr = []);
        var r3 = this.getModule(ug), a2 = r3.getSDKAppID(), s2 = r3.getTinyID();
        Ud(this.REPORT_SDKAPPID_BLACKLIST, a2) && !bd(this.REPORT_TINYID_WHITELIST, s2) && (n3 = []), n3.length > 0 && this._doReport(n3);
      } }, { key: "_doReport", value: function(e3) {
        var n3 = this, o2 = { header: Qv(this), quality: e3 };
        this.request({ protocolName: F_, requestData: t({}, o2) }).then(function() {
          n3.reportIndex++, n3.wholePeriod = false;
        }).catch(function(t2) {
          bl.warn("".concat(n3._className, "._doReport, online:").concat(n3.getNetworkType(), " error:"), t2), n3._statInfoArr = n3._statInfoArr.concat(e3), n3._flushAtOnce();
        });
      } }, { key: "_flushAtOnce", value: function() {
        var e3 = this.getModule(lg), t2 = e3.getItem(this.TAG, false), n3 = this._statInfoArr;
        if (xd(t2))
          bl.log("".concat(this._className, "._flushAtOnce count:").concat(n3.length)), e3.setItem(this.TAG, n3, true, false);
        else {
          var o2 = n3.concat(t2);
          o2.length > 10 && (o2 = o2.slice(0, 10)), bl.log("".concat(this.className, "._flushAtOnce count:").concat(o2.length)), e3.setItem(this.TAG, o2, true, false);
        }
        this._statInfoArr = [];
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._report(), this.reportIndex = 0, this.wholePeriod = false, this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [], this._avgRTT.reset(), this._avgE2EDelay.reset(), this._rateMessageSent.reset(), this._rateMessageReceived.reset();
      } }]), r2;
    }(Cg), sS = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "WorkerTimerModule", r2._isWorkerEnabled = true, r2._workerTimer = null, r2._init(), r2.getInnerEmitterInstance().on(ev, r2._onCloudConfigUpdated, _(r2)), r2;
      }
      return a(n2, [{ key: "isWorkerEnabled", value: function() {
        return this._isWorkerEnabled && dl;
      } }, { key: "startWorkerTimer", value: function() {
        bl.log("".concat(this._className, ".startWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("start");
      } }, { key: "stopWorkerTimer", value: function() {
        bl.log("".concat(this._className, ".stopWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("stop");
      } }, { key: "_init", value: function() {
        if (dl) {
          var e3 = URL.createObjectURL(new Blob(['let interval = -1;onmessage = function(event) {  if (event.data === "start") {    if (interval > 0) {      clearInterval(interval);    }    interval = setInterval(() => {      postMessage("");    }, 1000)  } else if (event.data === "stop") {    clearInterval(interval);    interval = -1;  }};'], { type: "application/javascript; charset=utf-8" }));
          this._workerTimer = new Worker(e3);
          var t3 = this;
          this._workerTimer.onmessage = function() {
            t3._moduleManager.onCheckTimer();
          };
        }
      } }, { key: "_onCloudConfigUpdated", value: function() {
        var e3 = this.getCloudConfig("enable_worker");
        bl.log("".concat(this._className, "._onCloudConfigUpdated enableWorker:").concat(e3)), Zl(e3) || "1" === e3 ? !this._isWorkerEnabled && dl && (this._isWorkerEnabled = true, this.startWorkerTimer(), this._moduleManager.onWorkerTimerEnabled()) : this._isWorkerEnabled && dl && (this._isWorkerEnabled = false, this.stopWorkerTimer(), this._moduleManager.onWorkerTimerDisabled());
      } }, { key: "terminate", value: function() {
        bl.log("".concat(this._className, ".terminate")), this._workerTimer && (this._workerTimer.terminate(), this._workerTimer = null);
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset"));
      } }]), n2;
    }(Cg), iS = function() {
      function e2() {
        o(this, e2), this._className = "PurchasedFeatureHandler", this._purchasedFeatureMap = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "isValidPurchaseBits", value: function(e3) {
        return e3 && "string" == typeof e3 && e3.length >= 1 && e3.length <= 64 && /[01]{1,64}/.test(e3);
      } }, { key: "parsePurchaseBits", value: function(e3) {
        var t2 = "".concat(this._className, ".parsePurchaseBits");
        if (this.isValidPurchaseBits(e3)) {
          this._purchasedFeatureMap.clear();
          for (var n2 = Object.values(Uu), o2 = null, r2 = e3.length - 1, a2 = 0; r2 >= 0; r2--, a2++)
            o2 = a2 < 32 ? new Tu(0, Math.pow(2, a2)).toString() : new Tu(Math.pow(2, a2 - 32), 0).toString(), -1 !== n2.indexOf(o2) && ("1" === e3[r2] ? this._purchasedFeatureMap.set(o2, true) : this._purchasedFeatureMap.set(o2, false));
        } else
          bl.warn("".concat(t2, " invalid purchase bits:").concat(e3));
      } }, { key: "hasPurchasedFeature", value: function(e3) {
        return !!this._purchasedFeatureMap.get(e3);
      } }, { key: "clear", value: function() {
        this._purchasedFeatureMap.clear();
      } }]), e2;
    }(), cS = function(e2) {
      i(n2, e2);
      var t2 = f(n2);
      function n2(e3) {
        var r2;
        return o(this, n2), (r2 = t2.call(this, e3))._className = "CommercialConfigModule", r2._expiredTime = 0, r2._isFetching = false, r2._purchasedFeatureHandler = new iS(), r2;
      }
      return a(n2, [{ key: "_canFetch", value: function() {
        return this.isLoggedIn() ? !this._isFetching && Date.now() >= this._expiredTime : (this._expiredTime = Date.now() + 2e3, false);
      } }, { key: "onCheckTimer", value: function(e3) {
        this._canFetch() && this.fetchConfig();
      } }, { key: "fetchConfig", value: function() {
        var e3 = this, t3 = this._canFetch(), n3 = "".concat(this._className, ".fetchConfig");
        if (bl.log("".concat(n3, " canFetch:").concat(t3)), t3) {
          var o2 = new Ih(Eh.FETCH_COMMERCIAL_CONFIG);
          o2.setNetworkType(this.getNetworkType());
          var r2 = this.getModule(ug).getSDKAppID();
          this._isFetching = true, this.request({ protocolName: $_, requestData: { SDKAppID: r2 } }).then(function(t4) {
            o2.setMessage("purchaseBits:".concat(t4.data.purchaseBits)).end(), bl.log("".concat(n3, " ok.")), e3._parseConfig(t4.data), e3._isFetching = false;
          }).catch(function(t4) {
            e3.probeNetwork().then(function(e4) {
              var n4 = m(e4, 2), r3 = n4[0], a2 = n4[1];
              o2.setError(t4, r3, a2).end();
            }), e3._isFetching = false;
          });
        }
      } }, { key: "onPushedConfig", value: function(e3) {
        var t3 = "".concat(this._className, ".onPushedConfig");
        bl.log("".concat(t3)), new Ih(Eh.PUSHED_COMMERCIAL_CONFIG).setNetworkType(this.getNetworkType()).setMessage("purchaseBits:".concat(e3.purchaseBits)).end(), this._parseConfig(e3);
      } }, { key: "_parseConfig", value: function(e3) {
        var t3 = "".concat(this._className, "._parseConfig"), n3 = e3.errorCode, o2 = e3.errorMessage, r2 = e3.purchaseBits, a2 = e3.expiredTime;
        0 === n3 ? (this._purchasedFeatureHandler.parsePurchaseBits(r2), this._expiredTime = Date.now() + 1e3 * a2) : Zl(n3) ? (bl.log("".concat(t3, " failed. Invalid message format:"), e3), this._setExpiredTimeOnResponseError(36e5)) : (bl.error("".concat(t3, " errorCode:").concat(n3, " errorMessage:").concat(o2)), this._setExpiredTimeOnResponseError(12e4));
      } }, { key: "_setExpiredTimeOnResponseError", value: function(e3) {
        this._expiredTime = Date.now() + e3;
      } }, { key: "hasPurchasedFeature", value: function(e3) {
        return this._purchasedFeatureHandler.hasPurchasedFeature(e3);
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), this._expiredTime = 0, this._isFetching = false, this._purchasedFeatureHandler.clear();
      } }]), n2;
    }(Cg), uS = function() {
      function e2(t2) {
        o(this, e2);
        var n2 = new Ih(Eh.SDK_CONSTRUCT);
        this._className = "ModuleManager", this._isReady = false, this._reason = ah.USER_NOT_LOGGED_IN, this._startLoginTs = 0, this._moduleMap = /* @__PURE__ */ new Map(), this._innerEmitter = null, this._outerEmitter = null, this._checkCount = 0, this._checkTimer = -1, this._moduleMap.set(ug, new Wv(this, t2)), this._moduleMap.set(Sg, new cS(this)), this._moduleMap.set(yg, new ZT(this)), this._moduleMap.set(Ig, new sS(this)), this._moduleMap.set(Tg, new aS(this)), this._moduleMap.set(Mg, new HT(this)), this._moduleMap.set(mg, new XT(this)), this._moduleMap.set(eg, new Yv(this)), this._moduleMap.set(tg, new gy(this)), this._moduleMap.set(ng, new jv(this)), this._moduleMap.set(og, new wM(this)), this._moduleMap.set(cg, new mv(this)), this._moduleMap.set(rg, new Ov(this)), this._moduleMap.set(sg, new Lv(this)), this._moduleMap.set(ig, new Uv(this)), this._moduleMap.set(lg, new Jv(this)), this._moduleMap.set(dg, new Zv(this)), this._moduleMap.set(pg, new oy(this)), this._moduleMap.set(gg, new ay(this)), this._moduleMap.set(_g, new iy(this)), this._moduleMap.set(hg, new _y(this)), this._moduleMap.set(fg, new hy(this)), this._moduleMap.set(vg, new QT(this)), this._moduleMap.set(Eg, new eS(this)), this._eventThrottleMap = /* @__PURE__ */ new Map();
        var r2 = t2.instanceID, a2 = t2.oversea, s2 = t2.SDKAppID, i2 = "instanceID:".concat(r2, " SDKAppID:").concat(s2, " host:").concat(Od(), " oversea:").concat(a2, " inBrowser:").concat(ju, " inMiniApp:").concat(Hu) + " workerAvailable:".concat(dl, " UserAgent:").concat($u);
        Ih.bindEventStatModule(this._moduleMap.get(dg)), n2.setMessage("".concat(i2, " ").concat(function() {
          var e3 = "";
          if (Hu)
            try {
              var t3 = Wu.getSystemInfoSync(), n3 = t3.model, o2 = t3.version, r3 = t3.system, a3 = t3.platform, s3 = t3.SDKVersion;
              e3 = "model:".concat(n3, " version:").concat(o2, " system:").concat(r3, " platform:").concat(a3, " SDKVersion:").concat(s3);
            } catch (fS) {
              e3 = "";
            }
          return e3;
        }())).end(), bl.info("SDK ".concat(i2)), this._readyList = void 0, this._ssoLogForReady = null, this._initReadyList();
      }
      return a(e2, [{ key: "_startTimer", value: function() {
        var e3 = this._moduleMap.get(Ig), t2 = e3.isWorkerEnabled();
        bl.log("".concat(this._className, ".startTimer isWorkerEnabled:").concat(t2, " seed:").concat(this._checkTimer)), t2 ? e3.startWorkerTimer() : this._startMainThreadTimer();
      } }, { key: "_startMainThreadTimer", value: function() {
        bl.log("".concat(this._className, "._startMainThreadTimer")), this._checkTimer < 0 && (this._checkTimer = setInterval(this.onCheckTimer.bind(this), 1e3));
      } }, { key: "stopTimer", value: function() {
        var e3 = this._moduleMap.get(Ig), t2 = e3.isWorkerEnabled();
        bl.log("".concat(this._className, ".stopTimer isWorkerEnabled:").concat(t2, " seed:").concat(this._checkTimer)), t2 ? e3.stopWorkerTimer() : this._stopMainThreadTimer();
      } }, { key: "_stopMainThreadTimer", value: function() {
        bl.log("".concat(this._className, "._stopMainThreadTimer")), this._checkTimer > 0 && (clearInterval(this._checkTimer), this._checkTimer = -1, this._checkCount = 0);
      } }, { key: "_stopMainThreadSocket", value: function() {
        bl.log("".concat(this._className, "._stopMainThreadSocket"));
        var e3 = this._moduleMap.get(Mg);
        e3.setIsWorkerEnabled(true), e3.reConnect();
      } }, { key: "_startMainThreadSocket", value: function() {
        bl.log("".concat(this._className, "._startMainThreadSocket"));
        var e3 = this._moduleMap.get(Mg);
        e3.setIsWorkerEnabled(false), e3.reConnect();
      } }, { key: "onWorkerTimerEnabled", value: function() {
        bl.log("".concat(this._className, ".onWorkerTimerEnabled, disable main thread timer and socket")), this._stopMainThreadTimer(), this._stopMainThreadSocket();
      } }, { key: "onWorkerTimerDisabled", value: function() {
        bl.log("".concat(this._className, ".onWorkerTimerDisabled, enable main thread timer and socket")), this._startMainThreadTimer(), this._startMainThreadSocket();
      } }, { key: "onCheckTimer", value: function() {
        this._checkCount += 1;
        var e3, t2 = S(this._moduleMap);
        try {
          for (t2.s(); !(e3 = t2.n()).done; ) {
            var n2 = m(e3.value, 2)[1];
            n2.onCheckTimer && n2.onCheckTimer(this._checkCount);
          }
        } catch (o2) {
          t2.e(o2);
        } finally {
          t2.f();
        }
      } }, { key: "_initReadyList", value: function() {
        var e3 = this;
        this._readyList = [this._moduleMap.get(eg), this._moduleMap.get(cg)], this._readyList.forEach(function(t2) {
          t2.ready(function() {
            return e3._onModuleReady();
          });
        });
      } }, { key: "_onModuleReady", value: function() {
        var e3 = true;
        if (this._readyList.forEach(function(t3) {
          t3.isReady() || (e3 = false);
        }), e3 && !this._isReady) {
          this._isReady = true, this._outerEmitter.emit(pr.SDK_READY);
          var t2 = Date.now() - this._startLoginTs;
          bl.warn("SDK is ready. cost ".concat(t2, " ms")), this._startLoginTs = Date.now();
          var n2 = this._moduleMap.get(pg).getNetworkType(), o2 = this._ssoLogForReady.getStartTs() + Ol;
          this._ssoLogForReady.setNetworkType(n2).setMessage(t2).start(o2).end();
        }
      } }, { key: "login", value: function() {
        0 === this._startLoginTs && (Ll(), this._startLoginTs = Date.now(), this._startTimer(), this._moduleMap.get(pg).start(), this._ssoLogForReady = new Ih(Eh.SDK_READY), this._reason = ah.LOGGING_IN);
      } }, { key: "onLoginFailed", value: function() {
        this._startLoginTs = 0;
      } }, { key: "getOuterEmitterInstance", value: function() {
        return null === this._outerEmitter && (this._outerEmitter = new ry(), PM(this._outerEmitter), this._outerEmitter._emit = this._outerEmitter.emit, this._outerEmitter.emit = function(e3, t2) {
          var n2 = this;
          if (e3 === pr.CONVERSATION_LIST_UPDATED || e3 === pr.FRIEND_LIST_UPDATED || e3 === pr.GROUP_LIST_UPDATED)
            if (this._eventThrottleMap.has(e3)) {
              var o2 = Date.now(), r2 = this._eventThrottleMap.get(e3);
              o2 - r2.last < 1e3 ? (r2.timeoutID && clearTimeout(r2.timeoutID), r2.timeoutID = setTimeout(function() {
                r2.last = o2, n2._outerEmitter._emit.apply(n2._outerEmitter, [e3, { name: e3, data: n2._getEventData(e3) }]);
              }, 500)) : (r2.last = o2, this._outerEmitter._emit.apply(this._outerEmitter, [e3, { name: e3, data: this._getEventData(e3) }]));
            } else
              this._eventThrottleMap.set(e3, { last: Date.now(), timeoutID: -1 }), this._outerEmitter._emit.apply(this._outerEmitter, [e3, { name: e3, data: this._getEventData(e3) }]);
          else
            this._outerEmitter._emit.apply(this._outerEmitter, [e3, { name: e3, data: arguments[1] }]);
        }.bind(this)), this._outerEmitter;
      } }, { key: "_getEventData", value: function(e3) {
        return e3 === pr.CONVERSATION_LIST_UPDATED ? this._moduleMap.get(cg).getLocalConversationList() : e3 === pr.FRIEND_LIST_UPDATED ? this._moduleMap.get(ag).getLocalFriendList(false) : e3 === pr.GROUP_LIST_UPDATED ? this._moduleMap.get(rg).getLocalGroupList() : void 0;
      } }, { key: "getInnerEmitterInstance", value: function() {
        return null === this._innerEmitter && (this._innerEmitter = new ry(), this._innerEmitter._emit = this._innerEmitter.emit, this._innerEmitter.emit = function(e3, t2) {
          var n2;
          Xl(arguments[1]) && arguments[1].data ? (bl.warn("inner eventData has data property, please check!"), n2 = [e3, { name: arguments[0], data: arguments[1].data }]) : n2 = [e3, { name: arguments[0], data: arguments[1] }], this._innerEmitter._emit.apply(this._innerEmitter, n2);
        }.bind(this)), this._innerEmitter;
      } }, { key: "hasModule", value: function(e3) {
        return this._moduleMap.has(e3);
      } }, { key: "getModule", value: function(e3) {
        return this._moduleMap.get(e3);
      } }, { key: "isReady", value: function() {
        return this._isReady;
      } }, { key: "getNotReadyReason", value: function() {
        return this._reason;
      } }, { key: "setNotReadyReason", value: function(e3) {
        this._reason = e3;
      } }, { key: "onError", value: function(e3) {
        bl.warn("Oops! code:".concat(e3.code, " message:").concat(e3.message)), new Ih(Eh.ERROR).setMessage("code:".concat(e3.code, " message:").concat(e3.message)).setNetworkType(this.getModule(pg).getNetworkType()).setLevel("error").end(), this.getOuterEmitterInstance().emit(pr.ERROR, e3);
      } }, { key: "reset", value: function() {
        bl.log("".concat(this._className, ".reset")), Ll();
        var e3, t2 = S(this._moduleMap);
        try {
          for (t2.s(); !(e3 = t2.n()).done; ) {
            var n2 = m(e3.value, 2)[1];
            n2.reset && n2.reset();
          }
        } catch (s2) {
          t2.e(s2);
        } finally {
          t2.f();
        }
        this._startLoginTs = 0, this._initReadyList(), this._isReady = false, this.stopTimer(), this._outerEmitter.emit(pr.SDK_NOT_READY);
        var o2, r2 = S(this._eventThrottleMap);
        try {
          for (r2.s(); !(o2 = r2.n()).done; ) {
            var a2 = m(o2.value, 2)[1];
            a2.timeoutID && clearTimeout(a2.timeoutID);
          }
        } catch (s2) {
          r2.e(s2);
        } finally {
          r2.f();
        }
        this._eventThrottleMap.clear();
      } }]), e2;
    }(), lS = function() {
      function e2() {
        o(this, e2), this._funcMap = /* @__PURE__ */ new Map();
      }
      return a(e2, [{ key: "defense", value: function(e3, t2) {
        var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
        if ("string" != typeof e3)
          return null;
        if (0 === e3.length)
          return null;
        if ("function" != typeof t2)
          return null;
        if (this._funcMap.has(e3) && this._funcMap.get(e3).has(t2))
          return this._funcMap.get(e3).get(t2);
        this._funcMap.has(e3) || this._funcMap.set(e3, /* @__PURE__ */ new Map());
        var o2 = null;
        return this._funcMap.get(e3).has(t2) ? o2 = this._funcMap.get(e3).get(t2) : (o2 = this._pack(e3, t2, n2), this._funcMap.get(e3).set(t2, o2)), o2;
      } }, { key: "defenseOnce", value: function(e3, t2) {
        var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
        return "function" != typeof t2 ? null : this._pack(e3, t2, n2);
      } }, { key: "find", value: function(e3, t2) {
        return "string" != typeof e3 || 0 === e3.length || "function" != typeof t2 ? null : this._funcMap.has(e3) ? this._funcMap.get(e3).has(t2) ? this._funcMap.get(e3).get(t2) : (bl.log("SafetyCallback.find: \u627E\u4E0D\u5230 func \u2014\u2014 ".concat(e3, "/").concat("" !== t2.name ? t2.name : "[anonymous]")), null) : (bl.log("SafetyCallback.find: \u627E\u4E0D\u5230 eventName-".concat(e3, " \u5BF9\u5E94\u7684 func")), null);
      } }, { key: "delete", value: function(e3, t2) {
        return "function" == typeof t2 && (!!this._funcMap.has(e3) && (!!this._funcMap.get(e3).has(t2) && (this._funcMap.get(e3).delete(t2), 0 === this._funcMap.get(e3).size && this._funcMap.delete(e3), true)));
      } }, { key: "_pack", value: function(e3, t2, n2) {
        return function() {
          try {
            t2.apply(n2, Array.from(arguments));
          } catch (s2) {
            var o2 = Object.values(pr).indexOf(e3);
            if (-1 !== o2) {
              var r2 = Object.keys(pr)[o2];
              bl.warn("\u63A5\u5165\u4FA7\u4E8B\u4EF6 TIM.EVENT.".concat(r2, " \u5BF9\u5E94\u7684\u56DE\u8C03\u51FD\u6570\u903B\u8F91\u5B58\u5728\u95EE\u9898\uFF0C\u8BF7\u68C0\u67E5\uFF01"), s2);
            }
            var a2 = new Ih(Eh.CALLBACK_FUNCTION_ERROR);
            a2.setMessage("eventName:".concat(e3)).setMoreMessage(s2.message).end();
          }
        };
      } }]), e2;
    }(), dS = function() {
      function e2(t2) {
        o(this, e2);
        var n2 = { SDKAppID: t2.SDKAppID, unlimitedAVChatRoom: t2.unlimitedAVChatRoom || false, scene: t2.scene || "", oversea: t2.oversea || false, instanceID: Nd(), devMode: t2.devMode || false, proxyServer: t2.proxyServer || void 0 };
        this._moduleManager = new uS(n2), this._safetyCallbackFactory = new lS();
      }
      return a(e2, [{ key: "onError", value: function(e3) {
        this._moduleManager.onError(e3);
      } }, { key: "login", value: function(e3) {
        return this._moduleManager.login(), this._moduleManager.getModule(eg).login(e3);
      } }, { key: "logout", value: function() {
        var e3 = this;
        return this._moduleManager.getModule(eg).logout().then(function(t2) {
          return e3._moduleManager.reset(), t2;
        });
      } }, { key: "isReady", value: function() {
        return this._moduleManager.isReady();
      } }, { key: "getNotReadyReason", value: function() {
        return this._moduleManager.getNotReadyReason();
      } }, { key: "destroy", value: function() {
        var e3 = this;
        return this.logout().finally(function() {
          e3._moduleManager.stopTimer(), e3._moduleManager.getModule(Ig).terminate(), e3._moduleManager.getModule(Mg).dealloc();
          var t2 = e3._moduleManager.getOuterEmitterInstance(), n2 = e3._moduleManager.getModule(ug);
          t2.emit(pr.SDK_DESTROY, { SDKAppID: n2.getSDKAppID() });
        });
      } }, { key: "on", value: function(e3, t2, n2) {
        e3 === pr.GROUP_SYSTEM_NOTICE_RECEIVED && bl.warn("\uFF01\uFF01\uFF01TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED v2.6.0\u8D77\u5F03\u7528\uFF0C\u4E3A\u4E86\u66F4\u597D\u7684\u4F53\u9A8C\uFF0C\u8BF7\u5728 TIM.EVENT.MESSAGE_RECEIVED \u4E8B\u4EF6\u56DE\u8C03\u5185\u63A5\u6536\u5904\u7406\u7FA4\u7CFB\u7EDF\u901A\u77E5\uFF0C\u8BE6\u7EC6\u8BF7\u53C2\u8003\uFF1Ahttps://web.sdk.qcloud.com/im/doc/zh-cn/Message.html#.GroupSystemNoticePayload"), bl.debug("on", "eventName:".concat(e3)), this._moduleManager.getOuterEmitterInstance().on(e3, this._safetyCallbackFactory.defense(e3, t2, n2), n2);
      } }, { key: "once", value: function(e3, t2, n2) {
        bl.debug("once", "eventName:".concat(e3)), this._moduleManager.getOuterEmitterInstance().once(e3, this._safetyCallbackFactory.defenseOnce(e3, t2, n2), n2 || this);
      } }, { key: "off", value: function(e3, t2, n2, o2) {
        bl.debug("off", "eventName:".concat(e3));
        var r2 = this._safetyCallbackFactory.find(e3, t2);
        null !== r2 && (this._moduleManager.getOuterEmitterInstance().off(e3, r2, n2, o2), this._safetyCallbackFactory.delete(e3, t2));
      } }, { key: "registerPlugin", value: function(e3) {
        this._moduleManager.getModule(hg).registerPlugin(e3);
      } }, { key: "setLogLevel", value: function(e3) {
        if (e3 <= 0) {
          console.log(["", " ________  ______  __       __  __       __  ________  _______", "|        \\|      \\|  \\     /  \\|  \\  _  |  \\|        \\|       \\", " \\$$$$$$$$ \\$$$$$$| $$\\   /  $$| $$ / \\ | $$| $$$$$$$$| $$$$$$$\\", "   | $$     | $$  | $$$\\ /  $$$| $$/  $\\| $$| $$__    | $$__/ $$", "   | $$     | $$  | $$$$\\  $$$$| $$  $$$\\ $$| $$  \\   | $$    $$", "   | $$     | $$  | $$\\$$ $$ $$| $$ $$\\$$\\$$| $$$$$   | $$$$$$$\\", "   | $$    _| $$_ | $$ \\$$$| $$| $$$$  \\$$$$| $$_____ | $$__/ $$", "   | $$   |   $$ \\| $$  \\$ | $$| $$$    \\$$$| $$     \\| $$    $$", "    \\$$    \\$$$$$$ \\$$      \\$$ \\$$      \\$$ \\$$$$$$$$ \\$$$$$$$", "", ""].join("\n")), console.log("%cIM \u667A\u80FD\u5BA2\u670D\uFF0C\u968F\u65F6\u968F\u5730\u89E3\u51B3\u60A8\u7684\u95EE\u9898 \u2192_\u2192 https://cloud.tencent.com/act/event/smarty-service?from=im-doc", "color:#006eff"), console.log("%c\u4ECEv2.11.2\u8D77\uFF0CSDK \u652F\u6301\u4E86 WebSocket\uFF0C\u5C0F\u7A0B\u5E8F\u9700\u8981\u6DFB\u52A0\u53D7\u4FE1\u57DF\u540D\uFF01\u5347\u7EA7\u6307\u5F15: https://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-02-upgradeguideline.html", "color:#ff0000");
          console.log(["", "\u53C2\u8003\u4EE5\u4E0B\u6587\u6863\uFF0C\u4F1A\u66F4\u5FEB\u89E3\u51B3\u95EE\u9898\u54E6\uFF01(#^.^#)\n", "SDK \u66F4\u65B0\u65E5\u5FD7: https://cloud.tencent.com/document/product/269/38492\n", "SDK \u63A5\u53E3\u6587\u6863: https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html\n", "\u5E38\u89C1\u95EE\u9898: https://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-01-faq.html\n", "\u53CD\u9988\u95EE\u9898\uFF1F\u6233\u6211\u63D0 issue: https://github.com/tencentyun/TIMSDK/issues\n", "\u5982\u679C\u60A8\u9700\u8981\u5728\u751F\u4EA7\u73AF\u5883\u5173\u95ED\u4E0A\u9762\u7684\u65E5\u5FD7\uFF0C\u8BF7 tim.setLogLevel(1)\n"].join("\n"));
        }
        bl.setLevel(e3);
      } }, { key: "createTextMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createTextMessage(e3);
      } }, { key: "createTextAtMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createTextMessage(e3);
      } }, { key: "createImageMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createImageMessage(e3);
      } }, { key: "createAudioMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createAudioMessage(e3);
      } }, { key: "createVideoMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createVideoMessage(e3);
      } }, { key: "createCustomMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createCustomMessage(e3);
      } }, { key: "createFaceMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createFaceMessage(e3);
      } }, { key: "createFileMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createFileMessage(e3);
      } }, { key: "createLocationMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createLocationMessage(e3);
      } }, { key: "createMergerMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createMergerMessage(e3);
      } }, { key: "downloadMergerMessage", value: function(e3) {
        return e3.type !== gr.MSG_MERGER ? bM(new kM({ code: ah.MESSAGE_MERGER_TYPE_INVALID, message: sh.MESSAGE_MERGER_TYPE_INVALID })) : xd(e3.payload.downloadKey) ? bM(new kM({ code: ah.MESSAGE_MERGER_KEY_INVALID, message: sh.MESSAGE_MERGER_KEY_INVALID })) : this._moduleManager.getModule(tg).downloadMergerMessage(e3).catch(function(e4) {
          return bM(new kM({ code: ah.MESSAGE_MERGER_DOWNLOAD_FAIL, message: sh.MESSAGE_MERGER_DOWNLOAD_FAIL }));
        });
      } }, { key: "createForwardMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).createForwardMessage(e3);
      } }, { key: "sendMessage", value: function(e3, t2) {
        return e3 instanceof CM ? this._moduleManager.getModule(tg).sendMessageInstance(e3, t2) : bM(new kM({ code: ah.MESSAGE_SEND_NEED_MESSAGE_INSTANCE, message: sh.MESSAGE_SEND_NEED_MESSAGE_INSTANCE }));
      } }, { key: "callExperimentalAPI", value: function(e3, t2) {
        return "handleGroupInvitation" === e3 ? this._moduleManager.getModule(rg).handleGroupInvitation(t2) : bM(new kM({ code: ah.INVALID_OPERATION, message: sh.INVALID_OPERATION }));
      } }, { key: "revokeMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).revokeMessage(e3);
      } }, { key: "resendMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).resendMessage(e3);
      } }, { key: "deleteMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).deleteMessage(e3);
      } }, { key: "modifyMessage", value: function(e3) {
        return this._moduleManager.getModule(tg).modifyRemoteMessage(e3);
      } }, { key: "getMessageList", value: function(e3) {
        return this._moduleManager.getModule(cg).getMessageList(e3);
      } }, { key: "getMessageListHopping", value: function(e3) {
        return this._moduleManager.getModule(cg).getMessageListHopping(e3);
      } }, { key: "sendMessageReadReceipt", value: function(e3) {
        return this._moduleManager.getModule(cg).sendReadReceipt(e3);
      } }, { key: "getMessageReadReceiptList", value: function(e3) {
        return this._moduleManager.getModule(cg).getReadReceiptList(e3);
      } }, { key: "getGroupMessageReadMemberList", value: function(e3) {
        return this._moduleManager.getModule(rg).getReadReceiptDetail(e3);
      } }, { key: "findMessage", value: function(e3) {
        return this._moduleManager.getModule(cg).findMessage(e3);
      } }, { key: "setMessageRead", value: function(e3) {
        return this._moduleManager.getModule(cg).setMessageRead(e3);
      } }, { key: "getConversationList", value: function(e3) {
        return this._moduleManager.getModule(cg).getConversationList(e3);
      } }, { key: "getConversationProfile", value: function(e3) {
        return this._moduleManager.getModule(cg).getConversationProfile(e3);
      } }, { key: "deleteConversation", value: function(e3) {
        return this._moduleManager.getModule(cg).deleteConversation(e3);
      } }, { key: "pinConversation", value: function(e3) {
        return this._moduleManager.getModule(cg).pinConversation(e3);
      } }, { key: "setAllMessageRead", value: function(e3) {
        return this._moduleManager.getModule(cg).setAllMessageRead(e3);
      } }, { key: "setMessageRemindType", value: function(e3) {
        return this._moduleManager.getModule(cg).setMessageRemindType(e3);
      } }, { key: "getMyProfile", value: function() {
        return this._moduleManager.getModule(ng).getMyProfile();
      } }, { key: "getUserProfile", value: function(e3) {
        return this._moduleManager.getModule(ng).getUserProfile(e3);
      } }, { key: "updateMyProfile", value: function(e3) {
        return this._moduleManager.getModule(ng).updateMyProfile(e3);
      } }, { key: "getBlacklist", value: function() {
        return this._moduleManager.getModule(ng).getLocalBlacklist();
      } }, { key: "addToBlacklist", value: function(e3) {
        return this._moduleManager.getModule(ng).addBlacklist(e3);
      } }, { key: "removeFromBlacklist", value: function(e3) {
        return this._moduleManager.getModule(ng).deleteBlacklist(e3);
      } }, { key: "setSelfStatus", value: function(e3) {
        return this._moduleManager.getModule(ng).setSelfStatus(e3);
      } }, { key: "getUserStatus", value: function(e3) {
        return this._moduleManager.getModule(ng).getUserStatus(e3);
      } }, { key: "subscribeUserStatus", value: function(e3) {
        return this._moduleManager.getModule(ng).subscribeUserStatus(e3);
      } }, { key: "unsubscribeUserStatus", value: function(e3) {
        return this._moduleManager.getModule(ng).unsubscribeUserStatus(e3);
      } }, { key: "getFriendList", value: function() {
        var e3 = this._moduleManager.getModule(ag);
        return e3 ? e3.getLocalFriendList() : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "addFriend", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.addFriend(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "deleteFriend", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.deleteFriend(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "checkFriend", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.checkFriend(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "getFriendProfile", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.getFriendProfile(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "updateFriend", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.updateFriend(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "getFriendApplicationList", value: function() {
        var e3 = this._moduleManager.getModule(ag);
        return e3 ? e3.getLocalFriendApplicationList() : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "acceptFriendApplication", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.acceptFriendApplication(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "refuseFriendApplication", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.refuseFriendApplication(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "deleteFriendApplication", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.deleteFriendApplication(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "setFriendApplicationRead", value: function() {
        var e3 = this._moduleManager.getModule(ag);
        return e3 ? e3.setFriendApplicationRead() : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "getFriendGroupList", value: function() {
        var e3 = this._moduleManager.getModule(ag);
        return e3 ? e3.getLocalFriendGroupList() : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "createFriendGroup", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.createFriendGroup(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "deleteFriendGroup", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.deleteFriendGroup(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "addToFriendGroup", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.addToFriendGroup(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "removeFromFriendGroup", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.removeFromFriendGroup(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "renameFriendGroup", value: function(e3) {
        var t2 = this._moduleManager.getModule(ag);
        return t2 ? t2.renameFriendGroup(e3) : bM({ code: ah.CANNOT_FIND_MODULE, message: sh.CANNOT_FIND_MODULE });
      } }, { key: "getGroupList", value: function(e3) {
        return this._moduleManager.getModule(rg).getGroupList(e3);
      } }, { key: "getGroupProfile", value: function(e3) {
        return this._moduleManager.getModule(rg).getGroupProfile(e3);
      } }, { key: "createGroup", value: function(e3) {
        return this._moduleManager.getModule(rg).createGroup(e3);
      } }, { key: "dismissGroup", value: function(e3) {
        return this._moduleManager.getModule(rg).dismissGroup(e3);
      } }, { key: "updateGroupProfile", value: function(e3) {
        return this._moduleManager.getModule(rg).updateGroupProfile(e3);
      } }, { key: "joinGroup", value: function(e3) {
        return this._moduleManager.getModule(rg).joinGroup(e3);
      } }, { key: "quitGroup", value: function(e3) {
        return this._moduleManager.getModule(rg).quitGroup(e3);
      } }, { key: "searchGroupByID", value: function(e3) {
        return this._moduleManager.getModule(rg).searchGroupByID(e3);
      } }, { key: "getGroupOnlineMemberCount", value: function(e3) {
        return this._moduleManager.getModule(rg).getGroupOnlineMemberCount(e3);
      } }, { key: "changeGroupOwner", value: function(e3) {
        return this._moduleManager.getModule(rg).changeGroupOwner(e3);
      } }, { key: "handleGroupApplication", value: function(e3) {
        return this._moduleManager.getModule(rg).handleGroupApplication(e3);
      } }, { key: "initGroupAttributes", value: function(e3) {
        return this._moduleManager.getModule(rg).initGroupAttributes(e3);
      } }, { key: "setGroupAttributes", value: function(e3) {
        return this._moduleManager.getModule(rg).setGroupAttributes(e3);
      } }, { key: "deleteGroupAttributes", value: function(e3) {
        return this._moduleManager.getModule(rg).deleteGroupAttributes(e3);
      } }, { key: "getGroupAttributes", value: function(e3) {
        return this._moduleManager.getModule(rg).getGroupAttributes(e3);
      } }, { key: "getGroupMemberList", value: function(e3) {
        return this._moduleManager.getModule(sg).getGroupMemberList(e3);
      } }, { key: "getGroupMemberProfile", value: function(e3) {
        return this._moduleManager.getModule(sg).getGroupMemberProfile(e3);
      } }, { key: "addGroupMember", value: function(e3) {
        return this._moduleManager.getModule(sg).addGroupMember(e3);
      } }, { key: "deleteGroupMember", value: function(e3) {
        return this._moduleManager.getModule(sg).deleteGroupMember(e3);
      } }, { key: "setGroupMemberMuteTime", value: function(e3) {
        return this._moduleManager.getModule(sg).setGroupMemberMuteTime(e3);
      } }, { key: "setGroupMemberRole", value: function(e3) {
        return this._moduleManager.getModule(sg).setGroupMemberRole(e3);
      } }, { key: "setGroupMemberNameCard", value: function(e3) {
        return this._moduleManager.getModule(sg).setGroupMemberNameCard(e3);
      } }, { key: "setGroupMemberCustomField", value: function(e3) {
        return this._moduleManager.getModule(sg).setGroupMemberCustomField(e3);
      } }, { key: "getJoinedCommunityList", value: function() {
        return this._moduleManager.getModule(ig).getJoinedCommunityList();
      } }, { key: "createTopicInCommunity", value: function(e3) {
        return this._moduleManager.getModule(ig).createTopicInCommunity(e3);
      } }, { key: "deleteTopicFromCommunity", value: function(e3) {
        return this._moduleManager.getModule(ig).deleteTopicFromCommunity(e3);
      } }, { key: "updateTopicProfile", value: function(e3) {
        return this._moduleManager.getModule(ig).updateTopicProfile(e3);
      } }, { key: "getTopicList", value: function(e3) {
        return this._moduleManager.getModule(ig).getTopicList(e3);
      } }]), e2;
    }(), pS = { login: "login", logout: "logout", destroy: "destroy", on: "on", off: "off", ready: "ready", setLogLevel: "setLogLevel", joinGroup: "joinGroup", quitGroup: "quitGroup", registerPlugin: "registerPlugin", getGroupOnlineMemberCount: "getGroupOnlineMemberCount" };
    function gS(e2, t2) {
      if (e2.isReady() || void 0 !== pS[t2])
        return true;
      var n2 = e2.getNotReadyReason(), o2 = "";
      Object.getOwnPropertyNames(ah).forEach(function(e3) {
        ah[e3] === n2 && (o2 = sh[e3]);
      });
      var r2 = { code: n2, message: "".concat(o2, "\u5BFC\u81F4 sdk not ready\u3002").concat(t2, " ").concat(sh.SDK_IS_NOT_READY, "\uFF0C\u8BF7\u53C2\u8003 https://web.sdk.qcloud.com/im/doc/zh-cn/module-EVENT.html#.SDK_READY") };
      return e2.onError(r2), r2;
    }
    var _S = {}, hS = {};
    return hS.create = function(e2) {
      var n2 = 0;
      if ($l(e2.SDKAppID))
        n2 = e2.SDKAppID;
      else if (bl.warn("TIM.create SDKAppID \u7684\u7C7B\u578B\u5E94\u8BE5\u4E3A Number\uFF0C\u8BF7\u4FEE\u6539\uFF01"), n2 = parseInt(e2.SDKAppID), isNaN(n2))
        return bl.error("TIM.create failed. \u89E3\u6790 SDKAppID \u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u4F20\u53C2\uFF01"), null;
      if (n2 && _S[n2])
        return _S[n2];
      bl.log("TIM.create");
      var o2 = new dS(t(t({}, e2), {}, { SDKAppID: n2 }));
      o2.on(pr.SDK_DESTROY, function(e3) {
        _S[e3.data.SDKAppID] = null, delete _S[e3.data.SDKAppID];
      });
      var r2 = function(e3) {
        var t2 = /* @__PURE__ */ Object.create(null);
        return Object.keys(jp).forEach(function(n3) {
          if (e3[n3]) {
            var o3 = jp[n3], r3 = new Cr();
            t2[o3] = function() {
              var t3 = Array.from(arguments);
              return r3.use(function(t4, o4) {
                var r4 = gS(e3, n3);
                return true === r4 ? o4() : bM(r4);
              }).use(function(e4, t4) {
                if (true === Bd(e4, Hp[n3], o3))
                  return t4();
              }).use(function(t4, o4) {
                return e3[n3].apply(e3, t4);
              }), r3.run(t3);
            };
          }
        }), t2;
      }(o2);
      return _S[n2] = r2, bl.log("TIM.create ok"), r2;
    }, hS.TYPES = gr, hS.EVENT = pr, hS.VERSION = "2.21.0", bl.log("TIM.VERSION: ".concat(hS.VERSION)), hS;
  });
})(timJs);
var TIM = timJs.exports;
var timUploadPlugin = { exports: {} };
(function(module2, exports) {
  var factory;
  factory = function() {
    function e(t2) {
      return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
        return typeof e2;
      } : function(e2) {
        return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
      })(t2);
    }
    function t(e2, t2) {
      if (!(e2 instanceof t2))
        throw new TypeError("Cannot call a class as a function");
    }
    function n(e2, t2) {
      for (var n2 = 0; n2 < t2.length; n2++) {
        var o2 = t2[n2];
        o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e2, o2.key, o2);
      }
    }
    function o(e2, t2, o2) {
      return t2 && n(e2.prototype, t2), o2 && n(e2, o2), e2;
    }
    function r(e2, t2, n2) {
      return t2 in e2 ? Object.defineProperty(e2, t2, { value: n2, enumerable: true, configurable: true, writable: true }) : e2[t2] = n2, e2;
    }
    function a(e2, t2) {
      var n2 = Object.keys(e2);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e2);
        t2 && (o2 = o2.filter(function(t3) {
          return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
        })), n2.push.apply(n2, o2);
      }
      return n2;
    }
    function s(e2) {
      for (var t2 = 1; t2 < arguments.length; t2++) {
        var n2 = null != arguments[t2] ? arguments[t2] : {};
        t2 % 2 ? a(Object(n2), true).forEach(function(t3) {
          r(e2, t3, n2[t3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(n2)) : a(Object(n2)).forEach(function(t3) {
          Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(n2, t3));
        });
      }
      return e2;
    }
    function i(e2, t2) {
      if (null == e2)
        return {};
      var n2, o2, r2 = function(e3, t3) {
        if (null == e3)
          return {};
        var n3, o3, r3 = {}, a3 = Object.keys(e3);
        for (o3 = 0; o3 < a3.length; o3++)
          n3 = a3[o3], t3.indexOf(n3) >= 0 || (r3[n3] = e3[n3]);
        return r3;
      }(e2, t2);
      if (Object.getOwnPropertySymbols) {
        var a2 = Object.getOwnPropertySymbols(e2);
        for (o2 = 0; o2 < a2.length; o2++)
          n2 = a2[o2], t2.indexOf(n2) >= 0 || Object.prototype.propertyIsEnumerable.call(e2, n2) && (r2[n2] = e2[n2]);
      }
      return r2;
    }
    var f = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting), u = "undefined" != typeof qq && "function" == typeof qq.getSystemInfoSync && Boolean(qq.getSystemInfoSync().fontSizeSetting), l = "undefined" != typeof tt && "function" == typeof tt.getSystemInfoSync && Boolean(tt.getSystemInfoSync().fontSizeSetting), c = "undefined" != typeof swan && "function" == typeof swan.getSystemInfoSync && Boolean(swan.getSystemInfoSync().fontSizeSetting), y = "undefined" != typeof my && "function" == typeof my.getSystemInfoSync && Boolean(my.getSystemInfoSync().fontSizeSetting), d = "undefined" != typeof uni && "undefined" == typeof window, p2 = f || u || l || c || y || d, h2 = u ? qq : l ? tt : c ? swan : y ? my : f ? wx : d ? uni : {}, g = function(t2) {
      if ("object" !== e(t2) || null === t2)
        return false;
      var n2 = Object.getPrototypeOf(t2);
      if (null === n2)
        return true;
      for (var o2 = n2; null !== Object.getPrototypeOf(o2); )
        o2 = Object.getPrototypeOf(o2);
      return n2 === o2;
    };
    function m(e2) {
      if (null == e2)
        return true;
      if ("boolean" == typeof e2)
        return false;
      if ("number" == typeof e2)
        return 0 === e2;
      if ("string" == typeof e2)
        return 0 === e2.length;
      if ("function" == typeof e2)
        return 0 === e2.length;
      if (Array.isArray(e2))
        return 0 === e2.length;
      if (e2 instanceof Error)
        return "" === e2.message;
      if (g(e2)) {
        for (var t2 in e2)
          if (Object.prototype.hasOwnProperty.call(e2, t2))
            return false;
        return true;
      }
      return false;
    }
    var b = function() {
      function e2() {
        t(this, e2);
      }
      return o(e2, [{ key: "request", value: function(e3, t2) {
        var n2 = this, o2 = e3.downloadUrl || "", r2 = (e3.method || "PUT").toUpperCase(), a2 = e3.url;
        if (e3.qs) {
          var s2 = function(e4) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "&", n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "=";
            return m(e4) ? "" : g(e4) ? Object.keys(e4).map(function(o3) {
              var r3 = encodeURIComponent(o3) + n3;
              return Array.isArray(e4[o3]) ? e4[o3].map(function(e5) {
                return r3 + encodeURIComponent(e5);
              }).join(t3) : r3 + encodeURIComponent(e4[o3]);
            }).filter(Boolean).join(t3) : void 0;
          }(e3.qs);
          s2 && (a2 += "".concat(-1 === a2.indexOf("?") ? "?" : "&").concat(s2));
        }
        var i2 = new XMLHttpRequest();
        i2.open(r2, a2, true), i2.responseType = e3.dataType || "text";
        var f2 = e3.headers || {};
        if (!m(f2))
          for (var u2 in f2)
            f2.hasOwnProperty(u2) && "content-length" !== u2.toLowerCase() && "user-agent" !== u2.toLowerCase() && "origin" !== u2.toLowerCase() && "host" !== u2.toLowerCase() && i2.setRequestHeader(u2, f2[u2]);
        return i2.onload = function() {
          t2(null, n2._xhrRes(i2, n2._xhrBody(i2, o2)));
        }, i2.onerror = function(e4) {
          var o3 = n2._xhrBody(i2);
          if (o3)
            t2(e4, n2._xhrRes(i2, o3));
          else {
            var r3 = i2.statusText;
            r3 || 0 !== i2.status || (r3 = "CORS blocked or network error"), t2(r3, n2._xhrRes(i2, o3));
          }
        }, e3.onProgress && i2.upload && (i2.upload.onprogress = function(t3) {
          var n3 = t3.total, o3 = t3.loaded, r3 = Math.floor(100 * o3 / n3);
          e3.onProgress({ total: n3, loaded: o3, percent: (r3 >= 100 ? 100 : r3) / 100 });
        }), i2.send(e3.resources), i2;
      } }, { key: "_xhrRes", value: function(e3, t2) {
        var n2 = {};
        return e3.getAllResponseHeaders().trim().split("\n").forEach(function(e4) {
          if (e4) {
            var t3 = e4.indexOf(":"), o2 = e4.substr(0, t3).trim().toLowerCase(), r2 = e4.substr(t3 + 1).trim();
            n2[o2] = r2;
          }
        }), { statusCode: e3.status, statusMessage: e3.statusText, headers: n2, data: t2 };
      } }, { key: "_xhrBody", value: function(e3, t2) {
        return 200 === e3.status && t2 ? { location: t2 } : { response: e3.responseText };
      } }]), e2;
    }(), v = ["unknown", "image", "video", "audio", "log"], O = function() {
      function e2() {
        t(this, e2);
      }
      return o(e2, [{ key: "request", value: function(e3, t2) {
        var n2 = this, o2 = e3.resources, r2 = void 0 === o2 ? "" : o2, a2 = e3.headers, f2 = void 0 === a2 ? {} : a2, u2 = e3.url, l2 = e3.downloadUrl, c2 = void 0 === l2 ? "" : l2, d2 = null, p3 = "", g2 = c2.match(/^(https?:\/\/[^/]+\/)([^/]*\/?)(.*)$/), m2 = { url: u2, header: f2, name: "file", filePath: r2, formData: { key: p3 = (p3 = decodeURIComponent(g2[3])).indexOf("?") > -1 ? p3.split("?")[0] : p3, success_action_status: 200, "Content-Type": "" }, timeout: e3.timeout || 3e5 };
        if (y) {
          var b2 = m2;
          b2.name, m2 = s(s({}, i(b2, ["name"])), {}, { fileName: "file", fileType: v[e3.fileType] });
        }
        return (d2 = h2.uploadFile(s(s({}, m2), {}, { success: function(e4) {
          n2._handleResponse({ response: e4, downloadUrl: c2, callback: t2 });
        }, fail: function(e4) {
          n2._handleResponse({ response: e4, downloadUrl: c2, callback: t2 });
        } }))).onProgressUpdate(function(t3) {
          e3.onProgress && e3.onProgress({ total: t3.totalBytesExpectedToSend, loaded: t3.totalBytesSent, percent: Math.floor(t3.progress) / 100 });
        }), d2;
      } }, { key: "_handleResponse", value: function(e3) {
        var t2 = e3.downloadUrl, n2 = e3.response, o2 = e3.callback, r2 = n2.header, a2 = {};
        if (r2)
          for (var i2 in r2)
            r2.hasOwnProperty(i2) && (a2[i2.toLowerCase()] = r2[i2]);
        var f2 = +n2.statusCode;
        200 === f2 ? o2(null, { statusCode: f2, headers: a2, data: s(s({}, n2.data), {}, { location: t2 }) }) : o2(n2, { statusCode: f2, headers: a2, data: void 0 });
      } }]), e2;
    }();
    return function() {
      function e2() {
        t(this, e2), console.log("TIMUploadPlugin.VERSION: ".concat("1.0.4")), this.retry = 1, this.tryCount = 0, this.systemClockOffset = 0, this.httpRequest = p2 ? new O() : new b();
      }
      return o(e2, [{ key: "uploadFile", value: function(e3, t2) {
        var n2 = this;
        return this.httpRequest.request(e3, function(o2, r2) {
          o2 && n2.tryCount < n2.retry && n2.allowRetry(o2) ? (n2.tryCount++, n2.uploadFile(e3, t2)) : (n2.tryCount = 0, t2(o2, r2));
        });
      } }, { key: "allowRetry", value: function(e3) {
        var t2 = false, n2 = false;
        if (e3) {
          var o2 = e3.headers && (e3.headers.date || e3.headers.Date) || e3.error && e3.error.ServerTime;
          try {
            var r2 = e3.error && e3.error.Code, a2 = e3.error && e3.error.Message;
            ("RequestTimeTooSkewed" === r2 || "AccessDenied" === r2 && "Request has expired" === a2) && (n2 = true);
          } catch (f2) {
          }
          if (n2 && o2) {
            var s2 = Date.now(), i2 = Date.parse(o2);
            Math.abs(s2 + this.systemClockOffset - i2) >= 3e4 && (this.systemClockOffset = i2 - s2, t2 = true);
          } else
            5 === Math.floor(e3.statusCode / 100) && (t2 = true);
        }
        return t2;
      } }]), e2;
    }();
  }, module2.exports = factory();
})(timUploadPlugin);
var TIMUploadPlugin = timUploadPlugin.exports;
function noop() {
}
const extend$2 = Object.assign;
const inBrowser$1 = typeof window !== "undefined";
function get$4(object, path) {
  const keys2 = path.split(".");
  let result = object;
  keys2.forEach((key) => {
    var _a2;
    result = (_a2 = result[key]) != null ? _a2 : "";
  });
  return result;
}
function pick(obj, keys2, ignoreUndefined) {
  return keys2.reduce((ret, key) => {
    if (!ignoreUndefined || obj[key] !== void 0) {
      ret[key] = obj[key];
    }
    return ret;
  }, {});
}
const unknownProp = null;
const numericProp = [Number, String];
const truthProp = {
  type: Boolean,
  default: true
};
const makeNumberProp = (defaultVal) => ({
  type: Number,
  default: defaultVal
});
const makeStringProp = (defaultVal) => ({
  type: String,
  default: defaultVal
});
function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i = 0; i < list.length; i++) {
    map2[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
function normalizeStyle(value) {
  if (isArray$1(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString$1(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$1(value)) {
    return value;
  } else if (isObject$2(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString$1(value)) {
    res = value;
  } else if (isArray$1(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$2(value)) {
    for (const name2 in value) {
      if (value[name2]) {
        res += name2 + " ";
      }
    }
  }
  return res.trim();
}
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend$1 = Object.assign;
const remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const isArray$1 = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isFunction$2 = (val) => typeof val === "function";
const isString$1 = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject$2 = (val) => val !== null && typeof val === "object";
const isPromise$1 = (val) => {
  return isObject$2(val) && isFunction$2(val.then) && isFunction$2(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString$1(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const cacheStringFunction = (fn) => {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache2[str];
    return hit || (cache2[str] = fn(str));
  };
};
const camelizeRE$1 = /-(\w)/g;
const camelize$1 = cacheStringFunction((str) => {
  return str.replace(camelizeRE$1, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const toNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.active = true;
    this.effects = [];
    this.cleanups = [];
    if (!detached && activeEffectScope) {
      this.parent = activeEffectScope;
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
  }
  run(fn) {
    if (this.active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    }
  }
  on() {
    activeEffectScope = this;
  }
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this.active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (this.parent && !fromParent) {
        const last2 = this.parent.scopes.pop();
        if (last2 && last2 !== this) {
          this.parent.scopes[this.index] = last2;
          last2.index = this.index;
        }
      }
      this.active = false;
    }
  }
}
function recordEffectScope(effect, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect) => {
  const { deps } = effect;
  if (deps.length) {
    let ptr = 0;
    for (let i = 0; i < deps.length; i++) {
      const dep = deps[i];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol("");
const MAP_KEY_ITERATE_KEY = Symbol("");
class ReactiveEffect {
  constructor(fn, scheduler = null, scope) {
    this.fn = fn;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent2 = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent2) {
      if (parent2 === this) {
        return;
      }
      parent2 = parent2.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect) {
  const { deps } = effect;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect);
    }
    deps.length = 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last2 = trackStack.pop();
  shouldTrack = last2 === void 0 ? true : last2;
}
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    trackEffects(dep);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$1(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newValue) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$1(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$1(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  const effects = isArray$1(dep) ? dep : [...dep];
  for (const effect of effects) {
    if (effect.computed) {
      triggerEffect(effect);
    }
  }
  for (const effect of effects) {
    if (!effect.computed) {
      triggerEffect(effect);
    }
  }
}
function triggerEffect(effect, debuggerEventExtraInfo) {
  if (effect !== activeEffect || effect.allowRecurse) {
    if (effect.scheduler) {
      effect.scheduler();
    } else {
      effect.run();
    }
  }
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const get$3 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray$1(target);
    if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject$2(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$2 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
      return false;
    }
    if (!shallow && !isReadonly(value)) {
      if (!isShallow(value)) {
        value = toRaw(value);
        oldValue = toRaw(oldValue);
      }
      if (!isArray$1(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray$1(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray$1(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get: get$3,
  set: set$2,
  deleteProperty,
  has,
  ownKeys
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    return true;
  },
  deleteProperty(target, key) {
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend$1({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get$1$1(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (key !== rawKey) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add$2(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto2 = getProto(target);
  const hadKey = proto2.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$1$1(this, key);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add: add$2,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$1$1(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add: add$2,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$1$1(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$1$1(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$2(target)) {
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
const toReactive = (value) => isObject$2(value) ? reactive(value) : value;
const toReadonly = (value) => isObject$2(value) ? readonly(value) : value;
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    {
      trackEffects(ref2.dep || (ref2.dep = createDep()));
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  if (ref2.dep) {
    {
      triggerEffects(ref2.dep);
    }
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    newVal = this.__v_isShallow ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = this.__v_isShallow ? newVal : toReactive(newVal);
      triggerRefValue(this);
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$2(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  return cRef;
}
function callWithErrorHandling(fn, instance, type, args) {
  let res;
  try {
    res = args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
  if (isFunction$2(fn)) {
    const res = callWithErrorHandling(fn, instance, type, args);
    if (res && isPromise$1(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn.length; i++) {
    values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    console.error(err);
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue$1 = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
function nextTick(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
}
function findInsertionIndex(id) {
  let start = flushIndex + 1;
  let end = queue$1.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId(queue$1[middle]);
    middleJobId < id ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob(job) {
  if ((!queue$1.length || !queue$1.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
    if (job.id == null) {
      queue$1.push(job);
    } else {
      queue$1.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue$1.indexOf(job);
  if (i > flushIndex) {
    queue$1.splice(i, 1);
  }
}
function queueCb(cb, activeQueue, pendingQueue, index2) {
  if (!isArray$1(cb)) {
    if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index2 + 1 : index2)) {
      pendingQueue.push(cb);
    }
  } else {
    pendingQueue.push(...cb);
  }
  queueFlush();
}
function queuePreFlushCb(cb) {
  queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
  queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
  if (pendingPreFlushCbs.length) {
    currentPreFlushParentJob = parentJob;
    activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
    pendingPreFlushCbs.length = 0;
    for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
      activePreFlushCbs[preFlushIndex]();
    }
    activePreFlushCbs = null;
    preFlushIndex = 0;
    currentPreFlushParentJob = null;
    flushPreFlushCbs(seen, parentJob);
  }
}
function flushPostFlushCbs(seen) {
  flushPreFlushCbs();
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  flushPreFlushCbs(seen);
  queue$1.sort((a, b) => getId(a) - getId(b));
  const check = NOOP;
  try {
    for (flushIndex = 0; flushIndex < queue$1.length; flushIndex++) {
      const job = queue$1[flushIndex];
      if (job && job.active !== false) {
        if (false)
          ;
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue$1.length = 0;
    flushPostFlushCbs();
    isFlushing = false;
    currentFlushPromise = null;
    if (queue$1.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
function emit$1(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a) => a.trim());
    }
    if (number) {
      args = rawArgs.map(toNumber);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || props[handlerName = toHandlerKey(camelize$1(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.emitsCache;
  const cached = cache2.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$2(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$1(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    cache2.set(comp, null);
    return null;
  }
  if (isArray$1(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$1(normalized, raw);
  }
  cache2.set(comp, normalized);
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn;
  if (fn._n) {
    return fn;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    const res = fn(...args);
    setCurrentRenderingInstance(prevInstance);
    if (renderFnWithContext._d) {
      setBlockTracking(1);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance(instance);
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render2 = Component;
      if (false)
        ;
      result = normalizeVNode(render2.length > 1 ? render2(props, false ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit
      } : { attrs, slots, emit }) : render2(props, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  let root2 = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys2 = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root2;
    if (keys2.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys2.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
        }
        root2 = cloneVNode(root2, fallthroughAttrs);
      }
    }
  }
  if (vnode.dirs) {
    root2 = cloneVNode(root2);
    root2.dirs = root2.dirs ? root2.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    root2.transition = vnode.transition;
  }
  {
    result = root2;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component: component2 } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component2.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent: parent2 }, el) {
  while (parent2 && parent2.subTree === vnode) {
    (vnode = parent2.vnode).el = el;
    parent2 = parent2.parent;
  }
}
const isSuspense = (type) => type.__isSuspense;
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$1(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function provide(key, value) {
  if (!currentInstance)
    ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$2(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else
      ;
  }
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  const instance = currentInstance;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$1(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse(s);
      } else if (isFunction$2(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else
        ;
    });
  } else if (isFunction$2(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(source, instance, 3, [onCleanup]);
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn) => {
    cleanup = effect.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
    };
  };
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    return NOOP;
  }
  let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect.active) {
      return;
    }
    if (cb) {
      const newValue = effect.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    scheduler = () => queuePreFlushCb(job);
  }
  const effect = new ReactiveEffect(getter, scheduler);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
  } else {
    effect.run();
  }
  return () => {
    effect.stop();
    if (instance && instance.scope) {
      remove(instance.scope.effects, effect);
    }
  };
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString$1(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$2(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function traverse(value, seen) {
  if (!isObject$2(value) || value["__v_skip"]) {
    return value;
  }
  seen = seen || /* @__PURE__ */ new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef(value)) {
    traverse(value.value, seen);
  } else if (isArray$1(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], seen);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v) => {
      traverse(v, seen);
    });
  } else if (isPlainObject(value)) {
    for (const key in value) {
      traverse(value[key], seen);
    }
  }
  return value;
}
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        for (const c of children) {
          if (c.type !== Comment) {
            child = c;
            break;
          }
        }
      }
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            instance.update();
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment) {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el._leaveCb = () => {
              earlyRemove();
              el._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook2, args) => {
    hook2 && callWithAsyncErrorHandling(hook2, instance, 9, args);
  };
  const callAsyncHook = (hook2, args) => {
    const done = args[1];
    callHook2(hook2, args);
    if (isArray$1(hook2)) {
      if (hook2.every((hook3) => hook3.length <= 1))
        done();
    } else if (hook2.length <= 1) {
      done();
    }
  };
  const hooks2 = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook2 = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook2 = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el._leaveCb) {
        el._leaveCb(true);
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook2, [el]);
    },
    enter(el) {
      let hook2 = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook2 = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el]);
        } else {
          callHook2(afterHook, [el]);
        }
        if (hooks2.delayedLeave) {
          hooks2.delayedLeave();
        }
        el._enterCb = void 0;
      };
      if (hook2) {
        callAsyncHook(hook2, [el, done]);
      } else {
        done();
      }
    },
    leave(el, remove2) {
      const key2 = String(vnode.key);
      if (el._enterCb) {
        el._enterCb(true);
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el]);
      let called = false;
      const done = el._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el]);
        } else {
          callHook2(onAfterLeave, [el]);
        }
        el._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks2;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks2) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks2);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks2.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks2.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks2;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i = 0; i < children.length; i++) {
    let child = children[i];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
    } else if (keepComment || child.type !== Comment) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i = 0; i < ret.length; i++) {
      ret[i].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent(options) {
  return isFunction$2(options) ? { setup: options, name: options.name } : options;
}
const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook2, target) {
  registerKeepAliveHook(hook2, "a", target);
}
function onDeactivated(hook2, target) {
  registerKeepAliveHook(hook2, "da", target);
}
function registerKeepAliveHook(hook2, type, target = currentInstance) {
  const wrappedHook = hook2.__wdc || (hook2.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook2();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook2, type, target, keepAliveRoot) {
  const injected = injectHook(type, hook2, keepAliveRoot, true);
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook2, target = currentInstance, prepend = false) {
  if (target) {
    const hooks2 = target[type] || (target[type] = []);
    const wrappedHook = hook2.__weh || (hook2.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook2, target, type, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks2.unshift(wrappedHook);
    } else {
      hooks2.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook2, target = currentInstance) => (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook2, target);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook2, target = currentInstance) {
  injectHook("ec", hook2, target);
}
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    return vnode;
  }
  const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
    if (isFunction$2(dir)) {
      dir = {
        mounted: dir,
        updated: dir
      };
    }
    if (dir.deep) {
      traverse(value);
    }
    bindings.push({
      dir,
      instance,
      value,
      oldValue: void 0,
      arg,
      modifiers
    });
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name2) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    let hook2 = binding.dir[name2];
    if (hook2) {
      pauseTracking();
      callWithAsyncErrorHandling(hook2, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
const NULL_DYNAMIC_COMPONENT = Symbol();
const getPublicInstance = (i) => {
  if (!i)
    return null;
  if (isStatefulComponent(i))
    return getExposeProxy(i) || i.proxy;
  return getPublicInstance(i.parent);
};
const publicPropertiesMap = /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
  $: (i) => i,
  $el: (i) => i.vnode.el,
  $data: (i) => i.data,
  $props: (i) => i.props,
  $attrs: (i) => i.attrs,
  $slots: (i) => i.slots,
  $refs: (i) => i.refs,
  $parent: (i) => getPublicInstance(i.parent),
  $root: (i) => getPublicInstance(i.root),
  $emit: (i) => i.emit,
  $options: (i) => resolveMergedOptions(i),
  $forceUpdate: (i) => i.f || (i.f = () => queueJob(i.update)),
  $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
  $watch: (i) => instanceWatch.bind(i)
});
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)) {
      {
        return globalProperties[key];
      }
    } else
      ;
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn(instance.props, key)) {
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || setupState !== EMPTY_OBJ && hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    expose,
    inheritAttrs,
    components: components2,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$2(methodHandler)) {
        {
          ctx[key] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data = dataOptions.call(publicThis, publicThis);
    if (!isObject$2(data))
      ;
    else {
      instance.data = reactive(data);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction$2(opt) ? opt.bind(publicThis, publicThis) : isFunction$2(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction$2(opt) && isFunction$2(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$2(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook2) {
    if (isArray$1(hook2)) {
      hook2.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook2) {
      register(hook2.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$1(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render && instance.render === NOOP) {
    instance.render = render;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components2)
    instance.components = components2;
  if (directives)
    instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
  if (isArray$1(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$2(opt)) {
      if ("default" in opt) {
        injected = inject(opt.from || key, opt.default, true);
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v) => injected.value = v
        });
      } else {
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
  }
}
function callHook$1(hook2, instance, type) {
  callWithAsyncErrorHandling(isArray$1(hook2) ? hook2.map((h2) => h2.bind(instance.proxy)) : hook2.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString$1(raw)) {
    const handler = ctx[raw];
    if (isFunction$2(handler)) {
      watch(getter, handler);
    }
  } else if (isFunction$2(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$2(raw)) {
    if (isArray$1(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction$2(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$2(handler)) {
        watch(getter, handler, raw);
      }
    }
  } else
    ;
}
function resolveMergedOptions(instance) {
  const base2 = instance.type;
  const { mixins, extends: extendsOptions } = base2;
  const { mixins: globalMixins, optionsCache: cache2, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache2.get(base2);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base2;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m) => mergeOptions(resolved, m, optionMergeStrategies, true));
    }
    mergeOptions(resolved, base2, optionMergeStrategies);
  }
  cache2.set(base2, resolved);
  return resolved;
}
function mergeOptions(to2, from2, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from2;
  if (extendsOptions) {
    mergeOptions(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m) => mergeOptions(to2, m, strats, true));
  }
  for (const key in from2) {
    if (asMixin && key === "expose")
      ;
    else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from2[key]) : from2[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeObjectOptions,
  emits: mergeObjectOptions,
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  watch: mergeWatchOptions,
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from2) {
  if (!from2) {
    return to2;
  }
  if (!to2) {
    return from2;
  }
  return function mergedDataFn() {
    return extend$1(isFunction$2(to2) ? to2.call(this, this) : to2, isFunction$2(from2) ? from2.call(this, this) : from2);
  };
}
function mergeInject(to2, from2) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from2));
}
function normalizeInject(raw) {
  if (isArray$1(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from2) {
  return to2 ? [...new Set([].concat(to2, from2))] : from2;
}
function mergeObjectOptions(to2, from2) {
  return to2 ? extend$1(extend$1(/* @__PURE__ */ Object.create(null), to2), from2) : from2;
}
function mergeWatchOptions(to2, from2) {
  if (!to2)
    return from2;
  if (!from2)
    return to2;
  const merged = extend$1(/* @__PURE__ */ Object.create(null), to2);
  for (const key in from2) {
    merged[key] = mergeAsArray(to2[key], from2[key]);
  }
  return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const { props, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if ((optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize$1(key);
            props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || !hasOwn(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize$1(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction$2(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(null, props);
          unsetCurrentInstance();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[0]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[1] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache2 = appContext.propsCache;
  const cached = cache2.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$2(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys2] = normalizePropsOptions(raw2, appContext, true);
      extend$1(normalized, props);
      if (keys2)
        needCastKeys.push(...keys2);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    cache2.set(comp, EMPTY_ARR);
    return EMPTY_ARR;
  }
  if (isArray$1(raw)) {
    for (let i = 0; i < raw.length; i++) {
      const normalizedKey = camelize$1(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key in raw) {
      const normalizedKey = camelize$1(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$1(opt) || isFunction$2(opt) ? { type: opt } : opt;
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  cache2.set(comp, res);
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ctor === null ? "null" : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray$1(expectedTypes)) {
    return expectedTypes.findIndex((t) => isSameType(t, type));
  } else if (isFunction$2(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray$1(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction$2(value)) {
      slots[key] = normalizeSlot(key, value, ctx);
    } else if (value != null) {
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw(children);
      def(children, "_", type);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend$1(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid = 0;
function createAppAPI(render, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$2(rootComponent)) {
      rootComponent = Object.assign({}, rootComponent);
    }
    if (rootProps != null && !isObject$2(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin))
          ;
        else if (plugin && isFunction$2(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction$2(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else
          ;
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          }
        }
        return app;
      },
      component(name2, component2) {
        if (!component2) {
          return context.components[name2];
        }
        context.components[name2] = component2;
        return app;
      },
      directive(name2, directive) {
        if (!directive) {
          return context.directives[name2];
        }
        context.directives[name2] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        }
      },
      unmount() {
        if (isMounted) {
          render(null, app._container);
          delete app._container.__vue_app__;
        }
      },
      provide(key, value) {
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$1(rawRef)) {
    rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray$1(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$1(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$2(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value, refs]);
  } else {
    const _isString = isString$1(ref2);
    const _isRef = isRef(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$1(existing) && remove(existing, refValue);
          } else {
            if (!isArray$1(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value;
          if (hasOwn(setupState, ref2)) {
            setupState[ref2] = value;
          }
        } else if (_isRef) {
          ref2.value = value;
          if (rawRef.k)
            refs[rawRef.k] = value;
        } else
          ;
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    }
  }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  const target = getGlobalThis();
  target.__VUE__ = true;
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else
          ;
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;
    if (vnode.el && hostCloneNode !== void 0 && patchFlag === -1) {
      el = vnode.el = hostCloneNode(vnode.el);
    } else {
      el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props) {
        for (const key in props) {
          if (key !== "value" && !isReservedProp(key)) {
            hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
        if ("value" in props) {
          hostPatchProp(el, "value", null, props.value);
        }
        if (vnodeHook = props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i = 0; i < slotScopeIds.length; i++) {
        hostSetScopeId(el, slotScopeIds[i]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i = start; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = oldVNode.el && (oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent2(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent2 = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m, parent: parent2 } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent2, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(el, instance.subTree, instance, parentSuspense, null);
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent2, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256 || parent2 && isAsyncWrapper(parent2.vnode) && parent2.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next, bu, u, parent: parent2, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent2, next, vnode);
        }
        toggleRecurse(instance, true);
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(
          prevTree,
          nextTree,
          hostParentNode(prevTree.el),
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent2, next, vnode), parentSuspense);
        }
      }
    };
    const effect = instance.effect = new ReactiveEffect(
      componentUpdateFn,
      () => queueJob(update),
      instance.scope
    );
    const update = instance.update = () => effect.run();
    update.id = instance.uid;
    toggleRecurse(instance, true);
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(void 0, instance.update);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++)
        newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove3 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el, anchor, transition } = vnode;
    if (type === Fragment) {
      {
        removeFragment(el, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i = start; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent2,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render,
    hydrate,
    createApp: createAppAPI(render, hydrate)
  };
}
function toggleRecurse({ effect, update }, allowed) {
  effect.allowRecurse = update.allowRecurse = allowed;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$1(ch1) && isArray$1(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString$1(targetSelector)) {
    if (!select) {
      return null;
    } else {
      const target = select(targetSelector);
      return target;
    }
  } else {
    return targetSelector;
  }
};
const TeleportImpl = {
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
    const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (n1 == null) {
      const placeholder = n2.el = createText("");
      const mainAnchor = n2.anchor = createText("");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText("");
      if (target) {
        insert(targetAnchor, target);
        isSVG = isSVG || isTargetSVG(target);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      isSVG = isSVG || isTargetSVG(target);
      if (dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(n2, container, mainAnchor, internals, 1);
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
          if (nextTarget) {
            moveTeleport(n2, nextTarget, null, internals, 0);
          }
        } else if (wasDisabled) {
          moveTeleport(n2, target, targetAnchor, internals, 1);
        }
      }
    }
  },
  remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
    if (target) {
      hostRemove(targetAnchor);
    }
    if (doRemove || !isTeleportDisabled(props)) {
      hostRemove(anchor);
      if (shapeFlag & 16) {
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
        }
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, parentAnchor, 2);
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
  const target = vnode.target = resolveTarget(vnode.props, querySelector);
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          targetAnchor = nextSibling(targetAnchor);
          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
            vnode.targetAnchor = targetAnchor;
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
            break;
          }
        }
        hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
      }
    }
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
const Fragment = Symbol(void 0);
const Text = Symbol(void 0);
const Comment = Symbol(void 0);
const Static = Symbol(void 0);
let currentBlock = null;
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({ ref: ref2, ref_key, ref_for }) => {
  return ref2 != null ? isString$1(ref2) || isRef(ref2) || isFunction$2(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$1(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(type, props, true);
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag |= -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString$1(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject$2(style)) {
      if (isProxy(style) && !isArray$1(style)) {
        style = extend$1({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString$1(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject$2(type) ? 4 : isFunction$2(type) ? 2 : 0;
  return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend$1({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray$1(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  };
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray$1(child)) {
    return createVNode(
      Fragment,
      null,
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$1(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$2(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i = 0; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$1(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook2, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook2, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent2, suspense) {
  const type = vnode.type;
  const appContext = (parent2 ? parent2.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$1++,
    vnode,
    type,
    parent: parent2,
    appContext,
    root: null,
    next: null,
    subTree: null,
    effect: null,
    update: null,
    scope: new EffectScope(true),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent2 ? parent2.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    emit: null,
    emitted: null,
    propsDefaults: EMPTY_OBJ,
    inheritAttrs: type.inheritAttrs,
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent2 ? parent2.root : instance;
  instance.emit = emit$1.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance) => {
  currentInstance = instance;
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  currentInstance = null;
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(setup, instance, 0, [instance.props, setupContext]);
    resetTracking();
    unsetCurrentInstance();
    if (isPromise$1(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(e, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$2(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$2(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else
    ;
  finishComponentSetup(instance, isSSR);
}
let compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component.render) {
      const template = Component.template;
      if (template) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$1(extend$1({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component.render = compile(template, finalCompilerOptions);
      }
    }
    instance.render = Component.render || NOOP;
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
}
function createAttrsProxy(instance) {
  return new Proxy(instance.attrs, {
    get(target, key) {
      track(instance, "get", "$attrs");
      return target[key];
    }
  });
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return {
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      }
    }));
  }
}
function isClassComponent(value) {
  return isFunction$2(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject$2(propsOrChildren) && !isArray$1(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
const version = "3.2.37";
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent2, anchor) => {
    parent2.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent2 = child.parentNode;
    if (parent2) {
      parent2.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is, props) => {
    const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  cloneNode(el) {
    const cloned = el.cloneNode(true);
    if (`_value` in el) {
      cloned._value = el._value;
    }
    return cloned;
  },
  insertStaticContent(content, parent2, anchor, isSVG, start, end) {
    const before = anchor ? anchor.previousSibling : parent2.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent2.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template = templateContainer.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent2.insertBefore(template, anchor);
    }
    return [
      before ? before.nextSibling : parent2.firstChild,
      anchor ? anchor.previousSibling : parent2.lastChild
    ];
  }
};
function patchClass(el, value, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value);
  } else {
    el.className = value;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  const isCssString = isString$1(next);
  if (next && !isCssString) {
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
    if (prev && !isString$1(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, "");
        }
      }
    }
  } else {
    const currentDisplay = style.display;
    if (isCssString) {
      if (prev !== next) {
        style.cssText = next;
      }
    } else if (prev) {
      el.removeAttribute("style");
    }
    if ("_vod" in el) {
      style.display = currentDisplay;
    }
  }
}
const importantRE = /\s*!important$/;
function setStyle(style, name2, val) {
  if (isArray$1(val)) {
    val.forEach((v) => setStyle(style, name2, v));
  } else {
    if (val == null)
      val = "";
    if (name2.startsWith("--")) {
      style.setProperty(name2, val);
    } else {
      const prefixed = autoPrefix(style, name2);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name2 = camelize$1(rawName);
  if (name2 !== "filter" && name2 in style) {
    return prefixCache[rawName] = name2;
  }
  name2 = capitalize(name2);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name2;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean = isSpecialBooleanAttr(key);
    if (value == null || isBoolean && !includeBooleanAttr(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean ? "" : value);
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el.tagName !== "PROGRESS" && !el.tagName.includes("-")) {
    el._value = value;
    const newValue = value == null ? "" : value;
    if (el.value !== newValue || el.tagName === "OPTION") {
      el.value = newValue;
    }
    if (value == null) {
      el.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el[key] = value;
  } catch (e) {
  }
  needRemove && el.removeAttribute(key);
}
const [_getNow, skipTimestampCheck] = /* @__PURE__ */ (() => {
  let _getNow2 = Date.now;
  let skipTimestampCheck2 = false;
  if (typeof window !== "undefined") {
    if (Date.now() > document.createEvent("Event").timeStamp) {
      _getNow2 = performance.now.bind(performance);
    }
    const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
    skipTimestampCheck2 = !!(ffMatch && Number(ffMatch[1]) <= 53);
  }
  return [_getNow2, skipTimestampCheck2];
})();
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const reset = () => {
  cachedNow = 0;
};
const getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name2, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name2, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name2, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name2) {
  let options;
  if (optionsModifierRE.test(name2)) {
    options = {};
    let m;
    while (m = name2.match(optionsModifierRE)) {
      name2 = name2.slice(0, name2.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  return [hyphenate(name2.slice(2)), options];
}
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    const timeStamp = e.timeStamp || _getNow();
    if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray$1(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map((fn) => (e2) => !e2._stopped && fn && fn(e2));
  } else {
    return value;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction$2(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString$1(value)) {
    return false;
  }
  return key in el;
}
const TRANSITION = "transition";
const ANIMATION = "animation";
const Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
Transition.props = /* @__PURE__ */ extend$1({}, BaseTransition.props, DOMTransitionPropsValidators);
const callHook = (hook2, args = []) => {
  if (isArray$1(hook2)) {
    hook2.forEach((h2) => h2(...args));
  } else if (hook2) {
    hook2(...args);
  }
};
const hasExplicitCallback = (hook2) => {
  return hook2 ? isArray$1(hook2) ? hook2.some((h2) => h2.length > 1) : hook2.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const { name: name2 = "v", type, duration, enterFromClass = `${name2}-enter-from`, enterActiveClass = `${name2}-enter-active`, enterToClass = `${name2}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name2}-leave-from`, leaveActiveClass = `${name2}-leave-active`, leaveToClass = `${name2}-leave-to` } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    el._isLeaving = false;
    removeTransitionClass(el, leaveFromClass);
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook2 = isAppear ? onAppear : onEnter;
      const resolve = () => finishEnter(el, isAppear, done);
      callHook(hook2, [el, resolve]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook2)) {
          whenTransitionEnds(el, type, enterDuration, resolve);
        }
      });
    };
  };
  return extend$1(baseProps, {
    onBeforeEnter(el) {
      callHook(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      el._isLeaving = true;
      const resolve = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      forceReflow();
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        if (!el._isLeaving) {
          return;
        }
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type, leaveDuration, resolve);
        }
      });
      callHook(onLeave, [el, resolve]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$2(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
  (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
  const { _vtc } = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(TRANSITION + "Delay");
  const transitionDurations = getStyleProperties(TRANSITION + "Duration");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(ANIMATION + "Delay");
  const animationDurations = getStyleProperties(ANIMATION + "Duration");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
const vShow = {
  beforeMount(el, { value }, { transition }) {
    el._vod = el.style.display === "none" ? "" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value);
    }
  },
  mounted(el, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, { value, oldValue }, { transition }) {
    if (!value === !oldValue)
      return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value);
    }
  },
  beforeUnmount(el, { value }) {
    setDisplay(el, value);
  }
};
function setDisplay(el, value) {
  el.style.display = value ? el._vod : "none";
}
const rendererOptions = /* @__PURE__ */ extend$1({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component2 = app._component;
    if (!isFunction$2(component2) && !component2.render && !component2.template) {
      component2.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function normalizeContainer(container) {
  if (isString$1(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
var inBrowser = typeof window !== "undefined";
function onMountedOrActivated(hook2) {
  let mounted;
  onMounted(() => {
    hook2();
    nextTick(() => {
      mounted = true;
    });
  });
  onActivated(() => {
    if (mounted) {
      hook2();
    }
  });
}
function useEventListener(type, listener, options = {}) {
  if (!inBrowser) {
    return;
  }
  const { target = window, passive = false, capture = false } = options;
  let attached;
  const add2 = (target2) => {
    const element = unref(target2);
    if (element && !attached) {
      element.addEventListener(type, listener, { capture, passive });
      attached = true;
    }
  };
  const remove2 = (target2) => {
    const element = unref(target2);
    if (element && attached) {
      element.removeEventListener(type, listener, capture);
      attached = false;
    }
  };
  onUnmounted(() => remove2(target));
  onDeactivated(() => remove2(target));
  onMountedOrActivated(() => add2(target));
  if (isRef(target)) {
    watch(target, (val, oldVal) => {
      remove2(oldVal);
      add2(val);
    });
  }
}
var width;
var height;
function useWindowSize() {
  if (!width) {
    width = ref(0);
    height = ref(0);
    if (inBrowser) {
      const update = () => {
        width.value = window.innerWidth;
        height.value = window.innerHeight;
      };
      update();
      window.addEventListener("resize", update, { passive: true });
      window.addEventListener("orientationchange", update, { passive: true });
    }
  }
  return { width, height };
}
var overflowScrollReg = /scroll|auto/i;
var defaultRoot = inBrowser ? window : void 0;
function isElement(node) {
  const ELEMENT_NODE_TYPE = 1;
  return node.tagName !== "HTML" && node.tagName !== "BODY" && node.nodeType === ELEMENT_NODE_TYPE;
}
function getScrollParent(el, root2 = defaultRoot) {
  let node = el;
  while (node && node !== root2 && isElement(node)) {
    const { overflowY } = window.getComputedStyle(node);
    if (overflowScrollReg.test(overflowY)) {
      return node;
    }
    node = node.parentNode;
  }
  return root2;
}
const isDef = (val) => val !== void 0 && val !== null;
const isFunction$1 = (val) => typeof val === "function";
const isObject$1 = (val) => val !== null && typeof val === "object";
const isPromise = (val) => isObject$1(val) && isFunction$1(val.then) && isFunction$1(val.catch);
const isNumeric = (val) => typeof val === "number" || /^\d+(\.\d+)?$/.test(val);
const isIOS = () => inBrowser$1 ? /ios|iphone|ipad|ipod/.test(navigator.userAgent.toLowerCase()) : false;
isIOS();
const stopPropagation = (event) => event.stopPropagation();
function preventDefault(event, isStopPropagation) {
  if (typeof event.cancelable !== "boolean" || event.cancelable) {
    event.preventDefault();
  }
  if (isStopPropagation) {
    stopPropagation(event);
  }
}
useWindowSize();
function addUnit(value) {
  if (isDef(value)) {
    return isNumeric(value) ? `${value}px` : String(value);
  }
  return void 0;
}
function getSizeStyle(originSize) {
  if (isDef(originSize)) {
    if (Array.isArray(originSize)) {
      return {
        width: addUnit(originSize[0]),
        height: addUnit(originSize[1])
      };
    }
    const size2 = addUnit(originSize);
    return {
      width: size2,
      height: size2
    };
  }
}
function getZIndexStyle(zIndex) {
  const style = {};
  if (zIndex !== void 0) {
    style.zIndex = +zIndex;
  }
  return style;
}
const camelizeRE = /-(\w)/g;
const camelize = (str) => str.replace(camelizeRE, (_, c) => c.toUpperCase());
const kebabCase = (str) => str.replace(/([A-Z])/g, "-$1").toLowerCase().replace(/^-/, "");
const { hasOwnProperty } = Object.prototype;
function assignKey(to2, from2, key) {
  const val = from2[key];
  if (!isDef(val)) {
    return;
  }
  if (!hasOwnProperty.call(to2, key) || !isObject$1(val)) {
    to2[key] = val;
  } else {
    to2[key] = deepAssign(Object(to2[key]), val);
  }
}
function deepAssign(to2, from2) {
  Object.keys(from2).forEach((key) => {
    assignKey(to2, from2, key);
  });
  return to2;
}
var stdin_default$7 = {
  name: "\u59D3\u540D",
  tel: "\u7535\u8BDD",
  save: "\u4FDD\u5B58",
  confirm: "\u786E\u8BA4",
  cancel: "\u53D6\u6D88",
  delete: "\u5220\u9664",
  loading: "\u52A0\u8F7D\u4E2D...",
  noCoupon: "\u6682\u65E0\u4F18\u60E0\u5238",
  nameEmpty: "\u8BF7\u586B\u5199\u59D3\u540D",
  addContact: "\u6DFB\u52A0\u8054\u7CFB\u4EBA",
  telInvalid: "\u8BF7\u586B\u5199\u6B63\u786E\u7684\u7535\u8BDD",
  vanCalendar: {
    end: "\u7ED3\u675F",
    start: "\u5F00\u59CB",
    title: "\u65E5\u671F\u9009\u62E9",
    weekdays: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"],
    monthTitle: (year, month) => `${year}\u5E74${month}\u6708`,
    rangePrompt: (maxRange) => `\u6700\u591A\u9009\u62E9 ${maxRange} \u5929`
  },
  vanCascader: {
    select: "\u8BF7\u9009\u62E9"
  },
  vanPagination: {
    prev: "\u4E0A\u4E00\u9875",
    next: "\u4E0B\u4E00\u9875"
  },
  vanPullRefresh: {
    pulling: "\u4E0B\u62C9\u5373\u53EF\u5237\u65B0...",
    loosing: "\u91CA\u653E\u5373\u53EF\u5237\u65B0..."
  },
  vanSubmitBar: {
    label: "\u5408\u8BA1:"
  },
  vanCoupon: {
    unlimited: "\u65E0\u95E8\u69DB",
    discount: (discount) => `${discount}\u6298`,
    condition: (condition) => `\u6EE1${condition}\u5143\u53EF\u7528`
  },
  vanCouponCell: {
    title: "\u4F18\u60E0\u5238",
    count: (count) => `${count}\u5F20\u53EF\u7528`
  },
  vanCouponList: {
    exchange: "\u5151\u6362",
    close: "\u4E0D\u4F7F\u7528",
    enable: "\u53EF\u7528",
    disabled: "\u4E0D\u53EF\u7528",
    placeholder: "\u8F93\u5165\u4F18\u60E0\u7801"
  },
  vanAddressEdit: {
    area: "\u5730\u533A",
    postal: "\u90AE\u653F\u7F16\u7801",
    areaEmpty: "\u8BF7\u9009\u62E9\u5730\u533A",
    addressEmpty: "\u8BF7\u586B\u5199\u8BE6\u7EC6\u5730\u5740",
    postalEmpty: "\u90AE\u653F\u7F16\u7801\u4E0D\u6B63\u786E",
    addressDetail: "\u8BE6\u7EC6\u5730\u5740",
    defaultAddress: "\u8BBE\u4E3A\u9ED8\u8BA4\u6536\u8D27\u5730\u5740"
  },
  vanAddressList: {
    add: "\u65B0\u589E\u5730\u5740"
  }
};
const lang$1 = ref("zh-CN");
const messages = reactive({
  "zh-CN": stdin_default$7
});
const Locale$1 = {
  messages() {
    return messages[lang$1.value];
  },
  use(newLang, newMessages) {
    lang$1.value = newLang;
    this.add({ [newLang]: newMessages });
  },
  add(newMessages = {}) {
    deepAssign(messages, newMessages);
  }
};
var stdin_default$6 = Locale$1;
function createTranslate(name2) {
  const prefix = camelize(name2) + ".";
  return (path, ...args) => {
    const messages2 = stdin_default$6.messages();
    const message = get$4(messages2, prefix + path) || get$4(messages2, path);
    return isFunction$1(message) ? message(...args) : message;
  };
}
function genBem(name2, mods) {
  if (!mods) {
    return "";
  }
  if (typeof mods === "string") {
    return ` ${name2}--${mods}`;
  }
  if (Array.isArray(mods)) {
    return mods.reduce((ret, item) => ret + genBem(name2, item), "");
  }
  return Object.keys(mods).reduce((ret, key) => ret + (mods[key] ? genBem(name2, key) : ""), "");
}
function createBEM(name2) {
  return (el, mods) => {
    if (el && typeof el !== "string") {
      mods = el;
      el = "";
    }
    el = el ? `${name2}__${el}` : name2;
    return `${el}${genBem(el, mods)}`;
  };
}
function createNamespace(name2) {
  const prefixedName = `van-${name2}`;
  return [
    prefixedName,
    createBEM(prefixedName),
    createTranslate(prefixedName)
  ];
}
const HAPTICS_FEEDBACK = "van-haptics-feedback";
function callInterceptor(interceptor, {
  args = [],
  done,
  canceled
}) {
  if (interceptor) {
    const returnVal = interceptor.apply(null, args);
    if (isPromise(returnVal)) {
      returnVal.then((value) => {
        if (value) {
          done();
        } else if (canceled) {
          canceled();
        }
      }).catch(noop);
    } else if (returnVal) {
      done();
    } else if (canceled) {
      canceled();
    }
  } else {
    done();
  }
}
function withInstall(options) {
  options.install = (app) => {
    const { name: name2 } = options;
    app.component(name2, options);
    app.component(camelize(`-${name2}`), options);
  };
  return options;
}
function useExpose(apis) {
  const instance = getCurrentInstance();
  if (instance) {
    extend$2(instance.proxy, apis);
  }
}
const [name$6, bem$6] = createNamespace("badge");
const badgeProps = {
  dot: Boolean,
  max: numericProp,
  tag: makeStringProp("div"),
  color: String,
  offset: Array,
  content: numericProp,
  showZero: truthProp,
  position: makeStringProp("top-right")
};
var stdin_default$5 = defineComponent({
  name: name$6,
  props: badgeProps,
  setup(props, {
    slots
  }) {
    const hasContent = () => {
      if (slots.content) {
        return true;
      }
      const {
        content,
        showZero
      } = props;
      return isDef(content) && content !== "" && (showZero || content !== 0);
    };
    const renderContent = () => {
      const {
        dot,
        max: max2,
        content
      } = props;
      if (!dot && hasContent()) {
        if (slots.content) {
          return slots.content();
        }
        if (isDef(max2) && isNumeric(content) && +content > max2) {
          return `${max2}+`;
        }
        return content;
      }
    };
    const style = computed(() => {
      const style2 = {
        background: props.color
      };
      if (props.offset) {
        const [x, y] = props.offset;
        if (slots.default) {
          style2.top = addUnit(y);
          if (typeof x === "number") {
            style2.right = addUnit(-x);
          } else {
            style2.right = x.startsWith("-") ? x.replace("-", "") : `-${x}`;
          }
        } else {
          style2.marginTop = addUnit(y);
          style2.marginLeft = addUnit(x);
        }
      }
      return style2;
    });
    const renderBadge = () => {
      if (hasContent() || props.dot) {
        return createVNode("div", {
          "class": bem$6([props.position, {
            dot: props.dot,
            fixed: !!slots.default
          }]),
          "style": style.value
        }, [renderContent()]);
      }
    };
    return () => {
      if (slots.default) {
        const {
          tag
        } = props;
        return createVNode(tag, {
          "class": bem$6("wrapper")
        }, {
          default: () => [slots.default(), renderBadge()]
        });
      }
      return renderBadge();
    };
  }
});
const Badge = withInstall(stdin_default$5);
const [name$5, bem$5] = createNamespace("config-provider");
const CONFIG_PROVIDER_KEY = Symbol(name$5);
const configProviderProps = {
  tag: makeStringProp("div"),
  themeVars: Object,
  iconPrefix: String
};
function mapThemeVarsToCSSVars(themeVars) {
  const cssVars = {};
  Object.keys(themeVars).forEach((key) => {
    cssVars[`--van-${kebabCase(key)}`] = themeVars[key];
  });
  return cssVars;
}
defineComponent({
  name: name$5,
  props: configProviderProps,
  setup(props, {
    slots
  }) {
    const style = computed(() => {
      if (props.themeVars) {
        return mapThemeVarsToCSSVars(props.themeVars);
      }
    });
    provide(CONFIG_PROVIDER_KEY, props);
    return () => createVNode(props.tag, {
      "class": bem$5(),
      "style": style.value
    }, {
      default: () => {
        var _a2;
        return [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)];
      }
    });
  }
});
const [name$4, bem$4] = createNamespace("icon");
const isImage = (name2) => name2 == null ? void 0 : name2.includes("/");
const iconProps = {
  dot: Boolean,
  tag: makeStringProp("i"),
  name: String,
  size: numericProp,
  badge: numericProp,
  color: String,
  badgeProps: Object,
  classPrefix: String
};
var stdin_default$4 = defineComponent({
  name: name$4,
  props: iconProps,
  setup(props, {
    slots
  }) {
    const config = inject(CONFIG_PROVIDER_KEY, null);
    const classPrefix = computed(() => props.classPrefix || (config == null ? void 0 : config.iconPrefix) || bem$4());
    return () => {
      const {
        tag,
        dot,
        name: name2,
        size: size2,
        badge,
        color
      } = props;
      const isImageIcon = isImage(name2);
      return createVNode(Badge, mergeProps({
        "dot": dot,
        "tag": tag,
        "class": [classPrefix.value, isImageIcon ? "" : `${classPrefix.value}-${name2}`],
        "style": {
          color,
          fontSize: addUnit(size2)
        },
        "content": badge
      }, props.badgeProps), {
        default: () => {
          var _a2;
          return [(_a2 = slots.default) == null ? void 0 : _a2.call(slots), isImageIcon && createVNode("img", {
            "class": bem$4("image"),
            "src": name2
          }, null)];
        }
      });
    };
  }
});
const Icon = withInstall(stdin_default$4);
const [name$3, bem$3] = createNamespace("loading");
const SpinIcon = Array(12).fill(null).map((_, index2) => createVNode("i", {
  "class": bem$3("line", String(index2 + 1))
}, null));
const CircularIcon = createVNode("svg", {
  "class": bem$3("circular"),
  "viewBox": "25 25 50 50"
}, [createVNode("circle", {
  "cx": "50",
  "cy": "50",
  "r": "20",
  "fill": "none"
}, null)]);
const loadingProps = {
  size: numericProp,
  type: makeStringProp("circular"),
  color: String,
  vertical: Boolean,
  textSize: numericProp,
  textColor: String
};
var stdin_default$3 = defineComponent({
  name: name$3,
  props: loadingProps,
  setup(props, {
    slots
  }) {
    const spinnerStyle = computed(() => extend$2({
      color: props.color
    }, getSizeStyle(props.size)));
    const renderText = () => {
      var _a2;
      if (slots.default) {
        return createVNode("span", {
          "class": bem$3("text"),
          "style": {
            fontSize: addUnit(props.textSize),
            color: (_a2 = props.textColor) != null ? _a2 : props.color
          }
        }, [slots.default()]);
      }
    };
    return () => {
      const {
        type,
        vertical
      } = props;
      return createVNode("div", {
        "class": bem$3([type, {
          vertical
        }]),
        "aria-live": "polite",
        "aria-busy": true
      }, [createVNode("span", {
        "class": bem$3("spinner", type),
        "style": spinnerStyle.value
      }, [type === "spinner" ? SpinIcon : CircularIcon]), renderText()]);
    };
  }
});
const Loading = withInstall(stdin_default$3);
const popupSharedProps = {
  show: Boolean,
  zIndex: numericProp,
  overlay: truthProp,
  duration: numericProp,
  teleport: [String, Object],
  lockScroll: truthProp,
  lazyRender: truthProp,
  beforeClose: Function,
  overlayStyle: Object,
  overlayClass: unknownProp,
  transitionAppear: Boolean,
  closeOnClickOverlay: truthProp
};
function getDirection(x, y) {
  if (x > y) {
    return "horizontal";
  }
  if (y > x) {
    return "vertical";
  }
  return "";
}
function useTouch() {
  const startX = ref(0);
  const startY = ref(0);
  const deltaX = ref(0);
  const deltaY = ref(0);
  const offsetX = ref(0);
  const offsetY = ref(0);
  const direction = ref("");
  const isVertical = () => direction.value === "vertical";
  const isHorizontal = () => direction.value === "horizontal";
  const reset2 = () => {
    deltaX.value = 0;
    deltaY.value = 0;
    offsetX.value = 0;
    offsetY.value = 0;
    direction.value = "";
  };
  const start = (event) => {
    reset2();
    startX.value = event.touches[0].clientX;
    startY.value = event.touches[0].clientY;
  };
  const move = (event) => {
    const touch = event.touches[0];
    deltaX.value = (touch.clientX < 0 ? 0 : touch.clientX) - startX.value;
    deltaY.value = touch.clientY - startY.value;
    offsetX.value = Math.abs(deltaX.value);
    offsetY.value = Math.abs(deltaY.value);
    const LOCK_DIRECTION_DISTANCE = 10;
    if (!direction.value || offsetX.value < LOCK_DIRECTION_DISTANCE && offsetY.value < LOCK_DIRECTION_DISTANCE) {
      direction.value = getDirection(offsetX.value, offsetY.value);
    }
  };
  return {
    move,
    start,
    reset: reset2,
    startX,
    startY,
    deltaX,
    deltaY,
    offsetX,
    offsetY,
    direction,
    isVertical,
    isHorizontal
  };
}
let totalLockCount = 0;
const BODY_LOCK_CLASS = "van-overflow-hidden";
function useLockScroll(rootRef, shouldLock) {
  const touch = useTouch();
  const onTouchMove = (event) => {
    touch.move(event);
    const direction = touch.deltaY.value > 0 ? "10" : "01";
    const el = getScrollParent(event.target, rootRef.value);
    const { scrollHeight, offsetHeight, scrollTop } = el;
    let status = "11";
    if (scrollTop === 0) {
      status = offsetHeight >= scrollHeight ? "00" : "01";
    } else if (scrollTop + offsetHeight >= scrollHeight) {
      status = "10";
    }
    if (status !== "11" && touch.isVertical() && !(parseInt(status, 2) & parseInt(direction, 2))) {
      preventDefault(event, true);
    }
  };
  const lock = () => {
    document.addEventListener("touchstart", touch.start);
    document.addEventListener("touchmove", onTouchMove, { passive: false });
    if (!totalLockCount) {
      document.body.classList.add(BODY_LOCK_CLASS);
    }
    totalLockCount++;
  };
  const unlock = () => {
    if (totalLockCount) {
      document.removeEventListener("touchstart", touch.start);
      document.removeEventListener("touchmove", onTouchMove);
      totalLockCount--;
      if (!totalLockCount) {
        document.body.classList.remove(BODY_LOCK_CLASS);
      }
    }
  };
  const init = () => shouldLock() && lock();
  const destroy = () => shouldLock() && unlock();
  onMountedOrActivated(init);
  onDeactivated(destroy);
  onBeforeUnmount(destroy);
  watch(shouldLock, (value) => {
    value ? lock() : unlock();
  });
}
function useLazyRender(show) {
  const inited = ref(false);
  watch(show, (value) => {
    if (value) {
      inited.value = value;
    }
  }, { immediate: true });
  return (render) => () => inited.value ? render() : null;
}
const POPUP_TOGGLE_KEY = Symbol();
const [name$2, bem$2] = createNamespace("overlay");
const overlayProps = {
  show: Boolean,
  zIndex: numericProp,
  duration: numericProp,
  className: unknownProp,
  lockScroll: truthProp,
  lazyRender: truthProp,
  customStyle: Object
};
var stdin_default$2 = defineComponent({
  name: name$2,
  props: overlayProps,
  setup(props, {
    slots
  }) {
    const lazyRender = useLazyRender(() => props.show || !props.lazyRender);
    const preventTouchMove = (event) => {
      preventDefault(event, true);
    };
    const renderOverlay = lazyRender(() => {
      var _a2;
      const style = extend$2(getZIndexStyle(props.zIndex), props.customStyle);
      if (isDef(props.duration)) {
        style.animationDuration = `${props.duration}s`;
      }
      return withDirectives(createVNode("div", {
        "style": style,
        "class": [bem$2(), props.className],
        "onTouchmove": props.lockScroll ? preventTouchMove : noop
      }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]), [[vShow, props.show]]);
    });
    return () => createVNode(Transition, {
      "name": "van-fade",
      "appear": true
    }, {
      default: renderOverlay
    });
  }
});
const Overlay = withInstall(stdin_default$2);
const popupProps = extend$2({}, popupSharedProps, {
  round: Boolean,
  position: makeStringProp("center"),
  closeIcon: makeStringProp("cross"),
  closeable: Boolean,
  transition: String,
  iconPrefix: String,
  closeOnPopstate: Boolean,
  closeIconPosition: makeStringProp("top-right"),
  safeAreaInsetTop: Boolean,
  safeAreaInsetBottom: Boolean
});
const [name$1, bem$1] = createNamespace("popup");
let globalZIndex = 2e3;
var stdin_default$1 = defineComponent({
  name: name$1,
  inheritAttrs: false,
  props: popupProps,
  emits: ["open", "close", "opened", "closed", "keydown", "update:show", "click-overlay", "click-close-icon"],
  setup(props, {
    emit,
    attrs,
    slots
  }) {
    let opened;
    let shouldReopen;
    const zIndex = ref();
    const popupRef = ref();
    const lazyRender = useLazyRender(() => props.show || !props.lazyRender);
    const style = computed(() => {
      const style2 = {
        zIndex: zIndex.value
      };
      if (isDef(props.duration)) {
        const key = props.position === "center" ? "animationDuration" : "transitionDuration";
        style2[key] = `${props.duration}s`;
      }
      return style2;
    });
    const open = () => {
      if (!opened) {
        if (props.zIndex !== void 0) {
          globalZIndex = +props.zIndex;
        }
        opened = true;
        zIndex.value = ++globalZIndex;
        emit("open");
      }
    };
    const close = () => {
      if (opened) {
        callInterceptor(props.beforeClose, {
          done() {
            opened = false;
            emit("close");
            emit("update:show", false);
          }
        });
      }
    };
    const onClickOverlay = (event) => {
      emit("click-overlay", event);
      if (props.closeOnClickOverlay) {
        close();
      }
    };
    const renderOverlay = () => {
      if (props.overlay) {
        return createVNode(Overlay, {
          "show": props.show,
          "class": props.overlayClass,
          "zIndex": zIndex.value,
          "duration": props.duration,
          "customStyle": props.overlayStyle,
          "onClick": onClickOverlay
        }, {
          default: slots["overlay-content"]
        });
      }
    };
    const onClickCloseIcon = (event) => {
      emit("click-close-icon", event);
      close();
    };
    const renderCloseIcon = () => {
      if (props.closeable) {
        return createVNode(Icon, {
          "role": "button",
          "tabindex": 0,
          "name": props.closeIcon,
          "class": [bem$1("close-icon", props.closeIconPosition), HAPTICS_FEEDBACK],
          "classPrefix": props.iconPrefix,
          "onClick": onClickCloseIcon
        }, null);
      }
    };
    const onOpened = () => emit("opened");
    const onClosed = () => emit("closed");
    const onKeydown = (event) => emit("keydown", event);
    const renderPopup = lazyRender(() => {
      var _a2;
      const {
        round: round2,
        position,
        safeAreaInsetTop,
        safeAreaInsetBottom
      } = props;
      return withDirectives(createVNode("div", mergeProps({
        "ref": popupRef,
        "style": style.value,
        "class": [bem$1({
          round: round2,
          [position]: position
        }), {
          "van-safe-area-top": safeAreaInsetTop,
          "van-safe-area-bottom": safeAreaInsetBottom
        }],
        "onKeydown": onKeydown
      }, attrs), [(_a2 = slots.default) == null ? void 0 : _a2.call(slots), renderCloseIcon()]), [[vShow, props.show]]);
    });
    const renderTransition = () => {
      const {
        position,
        transition,
        transitionAppear
      } = props;
      const name2 = position === "center" ? "van-fade" : `van-popup-slide-${position}`;
      return createVNode(Transition, {
        "name": transition || name2,
        "appear": transitionAppear,
        "onAfterEnter": onOpened,
        "onAfterLeave": onClosed
      }, {
        default: renderPopup
      });
    };
    watch(() => props.show, (show) => {
      if (show && !opened) {
        open();
        if (attrs.tabindex === 0) {
          nextTick(() => {
            var _a2;
            (_a2 = popupRef.value) == null ? void 0 : _a2.focus();
          });
        }
      }
      if (!show && opened) {
        opened = false;
        emit("close");
      }
    });
    useExpose({
      popupRef
    });
    useLockScroll(popupRef, () => props.show && props.lockScroll);
    useEventListener("popstate", () => {
      if (props.closeOnPopstate) {
        close();
        shouldReopen = false;
      }
    });
    onMounted(() => {
      if (props.show) {
        open();
      }
    });
    onActivated(() => {
      if (shouldReopen) {
        emit("update:show", true);
        shouldReopen = false;
      }
    });
    onDeactivated(() => {
      if (props.show && props.teleport) {
        close();
        shouldReopen = true;
      }
    });
    provide(POPUP_TOGGLE_KEY, () => props.show);
    return () => {
      if (props.teleport) {
        return createVNode(Teleport, {
          "to": props.teleport
        }, {
          default: () => [renderOverlay(), renderTransition()]
        });
      }
      return createVNode(Fragment, null, [renderOverlay(), renderTransition()]);
    };
  }
});
const Popup = withInstall(stdin_default$1);
function usePopupState() {
  const state = reactive({
    show: false
  });
  const toggle = (show) => {
    state.show = show;
  };
  const open = (props) => {
    extend$2(state, props, { transitionAppear: true });
    toggle(true);
  };
  const close = () => toggle(false);
  useExpose({ open, close, toggle });
  return {
    open,
    close,
    state,
    toggle
  };
}
function mountComponent(RootComponent) {
  const app = createApp(RootComponent);
  const root2 = document.createElement("div");
  document.body.appendChild(root2);
  return {
    instance: app.mount(root2),
    unmount() {
      app.unmount();
      document.body.removeChild(root2);
    }
  };
}
let lockCount = 0;
function lockClick(lock) {
  if (lock) {
    if (!lockCount) {
      document.body.classList.add("van-toast--unclickable");
    }
    lockCount++;
  } else if (lockCount) {
    lockCount--;
    if (!lockCount) {
      document.body.classList.remove("van-toast--unclickable");
    }
  }
}
const [name, bem] = createNamespace("toast");
const popupInheritProps = ["show", "overlay", "teleport", "transition", "overlayClass", "overlayStyle", "closeOnClickOverlay"];
const toastProps = {
  icon: String,
  show: Boolean,
  type: makeStringProp("text"),
  overlay: Boolean,
  message: numericProp,
  iconSize: numericProp,
  duration: makeNumberProp(2e3),
  position: makeStringProp("middle"),
  teleport: [String, Object],
  className: unknownProp,
  iconPrefix: String,
  transition: makeStringProp("van-fade"),
  loadingType: String,
  forbidClick: Boolean,
  overlayClass: unknownProp,
  overlayStyle: Object,
  closeOnClick: Boolean,
  closeOnClickOverlay: Boolean
};
var stdin_default = defineComponent({
  name,
  props: toastProps,
  emits: ["update:show"],
  setup(props, {
    emit
  }) {
    let timer;
    let clickable = false;
    const toggleClickable = () => {
      const newValue = props.show && props.forbidClick;
      if (clickable !== newValue) {
        clickable = newValue;
        lockClick(clickable);
      }
    };
    const updateShow = (show) => emit("update:show", show);
    const onClick = () => {
      if (props.closeOnClick) {
        updateShow(false);
      }
    };
    const clearTimer = () => clearTimeout(timer);
    const renderIcon = () => {
      const {
        icon,
        type,
        iconSize,
        iconPrefix,
        loadingType
      } = props;
      const hasIcon = icon || type === "success" || type === "fail";
      if (hasIcon) {
        return createVNode(Icon, {
          "name": icon || type,
          "size": iconSize,
          "class": bem("icon"),
          "classPrefix": iconPrefix
        }, null);
      }
      if (type === "loading") {
        return createVNode(Loading, {
          "class": bem("loading"),
          "size": iconSize,
          "type": loadingType
        }, null);
      }
    };
    const renderMessage = () => {
      const {
        type,
        message
      } = props;
      if (isDef(message) && message !== "") {
        return type === "html" ? createVNode("div", {
          "key": 0,
          "class": bem("text"),
          "innerHTML": String(message)
        }, null) : createVNode("div", {
          "class": bem("text")
        }, [message]);
      }
    };
    watch(() => [props.show, props.forbidClick], toggleClickable);
    watch(() => [props.show, props.type, props.message, props.duration], () => {
      clearTimer();
      if (props.show && props.duration > 0) {
        timer = setTimeout(() => {
          updateShow(false);
        }, props.duration);
      }
    });
    onMounted(toggleClickable);
    onUnmounted(toggleClickable);
    return () => createVNode(Popup, mergeProps({
      "class": [bem([props.position, {
        [props.type]: !props.icon
      }]), props.className],
      "lockScroll": false,
      "onClick": onClick,
      "onClosed": clearTimer,
      "onUpdate:show": updateShow
    }, pick(props, popupInheritProps)), {
      default: () => [renderIcon(), renderMessage()]
    });
  }
});
const defaultOptions = {
  icon: "",
  type: "text",
  message: "",
  className: "",
  overlay: false,
  onClose: void 0,
  onOpened: void 0,
  duration: 2e3,
  teleport: "body",
  iconSize: void 0,
  iconPrefix: void 0,
  position: "middle",
  transition: "van-fade",
  forbidClick: false,
  loadingType: void 0,
  overlayClass: "",
  overlayStyle: void 0,
  closeOnClick: false,
  closeOnClickOverlay: false
};
let queue = [];
let allowMultiple = false;
let currentOptions = extend$2({}, defaultOptions);
const defaultOptionsMap = /* @__PURE__ */ new Map();
function parseOptions(message) {
  if (isObject$1(message)) {
    return message;
  }
  return {
    message
  };
}
function createInstance() {
  const {
    instance,
    unmount
  } = mountComponent({
    setup() {
      const message = ref("");
      const {
        open,
        state,
        close,
        toggle
      } = usePopupState();
      const onClosed = () => {
        if (allowMultiple) {
          queue = queue.filter((item) => item !== instance);
          unmount();
        }
      };
      const render = () => {
        const attrs = {
          onClosed,
          "onUpdate:show": toggle
        };
        return createVNode(stdin_default, mergeProps(state, attrs), null);
      };
      watch(message, (val) => {
        state.message = val;
      });
      getCurrentInstance().render = render;
      return {
        open,
        clear: close,
        message
      };
    }
  });
  return instance;
}
function getInstance() {
  if (!queue.length || allowMultiple) {
    const instance = createInstance();
    queue.push(instance);
  }
  return queue[queue.length - 1];
}
function Toast(options = {}) {
  if (!inBrowser$1) {
    return {};
  }
  const toast = getInstance();
  const parsedOptions = parseOptions(options);
  toast.open(extend$2({}, currentOptions, defaultOptionsMap.get(parsedOptions.type || currentOptions.type), parsedOptions));
  return toast;
}
const createMethod = (type) => (options) => Toast(extend$2({
  type
}, parseOptions(options)));
Toast.loading = createMethod("loading");
Toast.success = createMethod("success");
Toast.fail = createMethod("fail");
Toast.clear = (all) => {
  var _a2;
  if (queue.length) {
    if (all) {
      queue.forEach((toast) => {
        toast.clear();
      });
      queue = [];
    } else if (!allowMultiple) {
      queue[0].clear();
    } else {
      (_a2 = queue.shift()) == null ? void 0 : _a2.clear();
    }
  }
};
function setDefaultOptions(type, options) {
  if (typeof type === "string") {
    defaultOptionsMap.set(type, options);
  } else {
    extend$2(currentOptions, type);
  }
}
Toast.setDefaultOptions = setDefaultOptions;
Toast.resetDefaultOptions = (type) => {
  if (typeof type === "string") {
    defaultOptionsMap.delete(type);
  } else {
    currentOptions = extend$2({}, defaultOptions);
    defaultOptionsMap.clear();
  }
};
Toast.allowMultiple = (value = true) => {
  allowMultiple = value;
};
Toast.install = (app) => {
  app.use(withInstall(stdin_default));
  app.config.globalProperties.$toast = Toast;
};
var base = "";
var index$5 = "";
var index$4 = "";
var index$3 = "";
var index$2 = "";
var index$1 = "";
var index = "";
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var hookCallback;
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
}
function isObject(input) {
  return input != null && Object.prototype.toString.call(input) === "[object Object]";
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input) {
  return input === void 0;
}
function isNumber(input) {
  return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
}
function isDate(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
}
function map(arr, fn) {
  var res = [], i, arrLen = arr.length;
  for (i = 0; i < arrLen; ++i) {
    res.push(fn(arr[i], i));
  }
  return res;
}
function extend(a, b) {
  for (var i in b) {
    if (hasOwnProp(b, i)) {
      a[i] = b[i];
    }
  }
  if (hasOwnProp(b, "toString")) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, "valueOf")) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
var some;
if (Array.prototype.some) {
  some = Array.prototype.some;
} else {
  some = function(fun) {
    var t = Object(this), len = t.length >>> 0, i;
    for (i = 0; i < len; i++) {
      if (i in t && fun.call(this, t[i], i, t)) {
        return true;
      }
    }
    return false;
  };
}
function isValid(m) {
  if (m._isValid == null) {
    var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
      return i != null;
    }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
    if (Object.isFrozen == null || !Object.isFrozen(m)) {
      m._isValid = isNowValid;
    } else {
      return isNowValid;
    }
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
var momentProperties = hooks.momentProperties = [], updateInProgress = false;
function copyConfig(to2, from2) {
  var i, prop, val, momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i = 0; i < momentPropertiesLen; i++) {
      prop = momentProperties[i];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i, key, argLen = arguments.length;
      for (i = 0; i < argLen; i++) {
        arg = "";
        if (typeof arguments[i] === "object") {
          arg += "\n[" + i + "] ";
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ": " + arguments[0][key] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i];
        }
        args.push(arg);
      }
      warn(
        msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
      );
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
var deprecations = {};
function deprecateSimple(name2, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name2, msg);
  }
  if (!deprecations[name2]) {
    warn(msg);
    deprecations[name2] = true;
  }
}
hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;
function isFunction(input) {
  return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
}
function set(config) {
  var prop, i;
  for (i in config) {
    if (hasOwnProp(config, i)) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this["_" + i] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
var keys;
if (Object.keys) {
  keys = Object.keys;
} else {
  keys = function(obj) {
    var i, res = [];
    for (i in obj) {
      if (hasOwnProp(obj, i)) {
        res.push(i);
      }
    }
    return res;
  };
}
var defaultCalendar = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar["sameElse"];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(
        func.apply(this, arguments),
        token2
      );
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, "");
  }
  return input.replace(/\\/g, "");
}
function makeFormatFunction(format2) {
  var array = format2.match(formattingTokens), i, length;
  for (i = 0, length = array.length; i < length; i++) {
    if (formatTokenFunctions[array[i]]) {
      array[i] = formatTokenFunctions[array[i]];
    } else {
      array[i] = removeFormattingTokens(array[i]);
    }
  }
  return function(mom) {
    var output = "", i2;
    for (i2 = 0; i2 < length; i2++) {
      output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(
      localFormattingTokens,
      replaceLongDateFormatTokens
    );
    localFormattingTokens.lastIndex = 0;
    i -= 1;
  }
  return format2;
}
var defaultLongDateFormat = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function longDateFormat(key) {
  var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key];
}
var defaultInvalidDate = "Invalid date";
function invalidDate() {
  return this._invalidDate;
}
var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
function ordinal(number) {
  return this._ordinal.replace("%d", number);
}
var defaultRelativeTime = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function relativeTime(number, withoutSuffix, string, isFuture) {
  var output = this._relativeTime[string];
  return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
var aliases = {};
function addUnitAlias(unit, shorthand) {
  var lowerCase = unit.toLowerCase();
  aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
}
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
var priorities = {};
function addUnitPriority(unit, priority) {
  priorities[unit] = priority;
}
function getPrioritizedUnits(unitsObj) {
  var units = [], u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({ unit: u, priority: priorities[u] });
    }
  }
  units.sort(function(a, b) {
    return a.priority - b.priority;
  });
  return units;
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function absFloor(number) {
  if (number < 0) {
    return Math.ceil(number) || 0;
  } else {
    return Math.floor(number);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
function makeGetSet(unit, keepTime) {
  return function(value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
}
function set$1(mom, unit, value) {
  if (mom.isValid() && !isNaN(value)) {
    if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
      value = toInt(value);
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
        value,
        mom.month(),
        daysInMonth(value, mom.month())
      );
    } else {
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
    }
  }
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
regexes = {};
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(
    s.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }
    )
  );
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var tokens = {};
function addParseToken(token2, callback) {
  var i, func = callback, tokenLen;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function(input, array) {
      array[callback] = toInt(input);
    };
  }
  tokenLen = token2.length;
  for (i = 0; i < tokenLen; i++) {
    tokens[token2[i]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input, array, config, token3) {
    config._w = config._w || {};
    callback(input, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config._a, config, token2);
  }
}
var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
function mod(n, x) {
  return (n % x + x) % x;
}
var indexOf;
if (Array.prototype.indexOf) {
  indexOf = Array.prototype.indexOf;
} else {
  indexOf = function(o) {
    var i;
    for (i = 0; i < this.length; ++i) {
      if (this[i] === o) {
        return i;
      }
    }
    return -1;
  };
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
addFormatToken("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
addFormatToken("MMM", 0, 0, function(format2) {
  return this.localeData().monthsShort(this, format2);
});
addFormatToken("MMMM", 0, 0, function(format2) {
  return this.localeData().months(this, format2);
});
addUnitAlias("month", "M");
addUnitPriority("month", 8);
addRegexToken("M", match1to2);
addRegexToken("MM", match1to2, match2);
addRegexToken("MMM", function(isStrict, locale2) {
  return locale2.monthsShortRegex(isStrict);
});
addRegexToken("MMMM", function(isStrict, locale2) {
  return locale2.monthsRegex(isStrict);
});
addParseToken(["M", "MM"], function(input, array) {
  array[MONTH] = toInt(input) - 1;
});
addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
  var month = config._locale.monthsParse(input, token2, config._strict);
  if (month != null) {
    array[MONTH] = month;
  } else {
    getParsingFlags(config).invalidMonth = input;
  }
});
var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
  "_"
), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months["standalone"];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i = 0; i < 12; ++i) {
      mom = createUTC([2e3, i]);
      this._shortMonthsParse[i] = this.monthsShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    if (strict && !this._longMonthsParse[i]) {
      this._longMonthsParse[i] = new RegExp(
        "^" + this.months(mom, "").replace(".", "") + "$",
        "i"
      );
      this._shortMonthsParse[i] = new RegExp(
        "^" + this.monthsShort(mom, "").replace(".", "") + "$",
        "i"
      );
    }
    if (!strict && !this._monthsParse[i]) {
      regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
      return i;
    } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
      return i;
    } else if (!strict && this._monthsParse[i].test(monthName)) {
      return i;
    }
  }
}
function setMonth(mom, value) {
  var dayOfMonth;
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
  mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    shortPieces.push(this.monthsShort(mom, ""));
    longPieces.push(this.months(mom, ""));
    mixedPieces.push(this.months(mom, ""));
    mixedPieces.push(this.monthsShort(mom, ""));
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  for (i = 0; i < 12; i++) {
    shortPieces[i] = regexEscape(shortPieces[i]);
    longPieces[i] = regexEscape(longPieces[i]);
  }
  for (i = 0; i < 24; i++) {
    mixedPieces[i] = regexEscape(mixedPieces[i]);
  }
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._monthsShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
}
addFormatToken("Y", 0, 0, function() {
  var y = this.year();
  return y <= 9999 ? zeroFill(y, 4) : "+" + y;
});
addFormatToken(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
addFormatToken(0, ["YYYY", 4], 0, "year");
addFormatToken(0, ["YYYYY", 5], 0, "year");
addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
addUnitAlias("year", "y");
addUnitPriority("year", 1);
addRegexToken("Y", matchSigned);
addRegexToken("YY", match1to2, match2);
addRegexToken("YYYY", match1to4, match4);
addRegexToken("YYYYY", match1to6, match6);
addRegexToken("YYYYYY", match1to6, match6);
addParseToken(["YYYYY", "YYYYYY"], YEAR);
addParseToken("YYYY", function(input, array) {
  array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken("YY", function(input, array) {
  array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken("Y", function(input, array) {
  array[YEAR] = parseInt(input, 10);
});
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
hooks.parseTwoDigitYear = function(input) {
  return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
};
var getSetYear = makeGetSet("FullYear", true);
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function createDate(y, m, d, h2, M, s, ms) {
  var date;
  if (y < 100 && y >= 0) {
    date = new Date(y + 400, m, d, h2, M, s, ms);
    if (isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
  } else {
    date = new Date(y, m, d, h2, M, s, ms);
  }
  return date;
}
function createUTCDate(y) {
  var date, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date = new Date(Date.UTC.apply(null, args));
    if (isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
  } else {
    date = new Date(Date.UTC.apply(null, arguments));
  }
  return date;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
addFormatToken("w", ["ww", 2], "wo", "week");
addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
addUnitAlias("week", "w");
addUnitAlias("isoWeek", "W");
addUnitPriority("week", 5);
addUnitPriority("isoWeek", 5);
addRegexToken("w", match1to2);
addRegexToken("ww", match1to2, match2);
addRegexToken("W", match1to2);
addRegexToken("WW", match1to2, match2);
addWeekParseToken(
  ["w", "ww", "W", "WW"],
  function(input, week, config, token2) {
    week[token2.substr(0, 1)] = toInt(input);
  }
);
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
var defaultLocaleWeek = {
  dow: 0,
  doy: 6
};
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, "d");
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, "d");
}
addFormatToken("d", 0, "do", "day");
addFormatToken("dd", 0, 0, function(format2) {
  return this.localeData().weekdaysMin(this, format2);
});
addFormatToken("ddd", 0, 0, function(format2) {
  return this.localeData().weekdaysShort(this, format2);
});
addFormatToken("dddd", 0, 0, function(format2) {
  return this.localeData().weekdays(this, format2);
});
addFormatToken("e", 0, 0, "weekday");
addFormatToken("E", 0, 0, "isoWeekday");
addUnitAlias("day", "d");
addUnitAlias("weekday", "e");
addUnitAlias("isoWeekday", "E");
addUnitPriority("day", 11);
addUnitPriority("weekday", 11);
addUnitPriority("isoWeekday", 11);
addRegexToken("d", match1to2);
addRegexToken("e", match1to2);
addRegexToken("E", match1to2);
addRegexToken("dd", function(isStrict, locale2) {
  return locale2.weekdaysMinRegex(isStrict);
});
addRegexToken("ddd", function(isStrict, locale2) {
  return locale2.weekdaysShortRegex(isStrict);
});
addRegexToken("dddd", function(isStrict, locale2) {
  return locale2.weekdaysRegex(isStrict);
});
addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
  var weekday = config._locale.weekdaysParse(input, token2, config._strict);
  if (weekday != null) {
    week.d = weekday;
  } else {
    getParsingFlags(config).invalidWeekday = input;
  }
});
addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
  week[token2] = toInt(input);
});
function parseWeekday(input, locale2) {
  if (typeof input !== "string") {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === "number") {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === "string") {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i = 0; i < 7; ++i) {
      mom = createUTC([2e3, 1]).day(i);
      this._minWeekdaysParse[i] = this.weekdaysMin(
        mom,
        ""
      ).toLocaleLowerCase();
      this._shortWeekdaysParse[i] = this.weekdaysShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    if (strict && !this._fullWeekdaysParse[i]) {
      this._fullWeekdaysParse[i] = new RegExp(
        "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._shortWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._minWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
    }
    if (!this._weekdaysParse[i]) {
      regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
      return i;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, "d");
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._weekdaysShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
  this._weekdaysMinStrictRegex = new RegExp(
    "^(" + minPieces.join("|") + ")",
    "i"
  );
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
addFormatToken("H", ["HH", 2], 0, "hour");
addFormatToken("h", ["hh", 2], 0, hFormat);
addFormatToken("k", ["kk", 2], 0, kFormat);
addFormatToken("hmm", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});
addFormatToken("hmmss", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
addFormatToken("Hmm", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2);
});
addFormatToken("Hmmss", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      lowercase
    );
  });
}
meridiem("a", true);
meridiem("A", false);
addUnitAlias("hour", "h");
addUnitPriority("hour", 13);
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
addRegexToken("a", matchMeridiem);
addRegexToken("A", matchMeridiem);
addRegexToken("H", match1to2);
addRegexToken("h", match1to2);
addRegexToken("k", match1to2);
addRegexToken("HH", match1to2, match2);
addRegexToken("hh", match1to2, match2);
addRegexToken("kk", match1to2, match2);
addRegexToken("hmm", match3to4);
addRegexToken("hmmss", match5to6);
addRegexToken("Hmm", match3to4);
addRegexToken("Hmmss", match5to6);
addParseToken(["H", "HH"], HOUR);
addParseToken(["k", "kk"], function(input, array, config) {
  var kInput = toInt(input);
  array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(["a", "A"], function(input, array, config) {
  config._isPm = config._locale.isPM(input);
  config._meridiem = input;
});
addParseToken(["h", "hh"], function(input, array, config) {
  array[HOUR] = toInt(input);
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmm", function(input, array, config) {
  var pos = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos));
  array[MINUTE] = toInt(input.substr(pos));
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmmss", function(input, array, config) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos1));
  array[MINUTE] = toInt(input.substr(pos1, 2));
  array[SECOND] = toInt(input.substr(pos2));
  getParsingFlags(config).bigHour = true;
});
addParseToken("Hmm", function(input, array, config) {
  var pos = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos));
  array[MINUTE] = toInt(input.substr(pos));
});
addParseToken("Hmmss", function(input, array, config) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos1));
  array[MINUTE] = toInt(input.substr(pos1, 2));
  array[SECOND] = toInt(input.substr(pos2));
});
function localeIsPM(input) {
  return (input + "").toLowerCase().charAt(0) === "p";
}
var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
var baseConfig = {
  calendar: defaultCalendar,
  longDateFormat: defaultLongDateFormat,
  invalidDate: defaultInvalidDate,
  ordinal: defaultOrdinal,
  dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
  relativeTime: defaultRelativeTime,
  months: defaultLocaleMonths,
  monthsShort: defaultLocaleMonthsShort,
  week: defaultLocaleWeek,
  weekdays: defaultLocaleWeekdays,
  weekdaysMin: defaultLocaleWeekdaysMin,
  weekdaysShort: defaultLocaleWeekdaysShort,
  meridiemParse: defaultLocaleMeridiemParse
};
var locales = {}, localeFamilies = {}, globalLocale;
function commonPrefix(arr1, arr2) {
  var i, minl = Math.min(arr1.length, arr2.length);
  for (i = 0; i < minl; i += 1) {
    if (arr1[i] !== arr2[i]) {
      return i;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace("_", "-") : key;
}
function chooseLocale(names) {
  var i = 0, j, next, locale2, split;
  while (i < names.length) {
    split = normalizeLocale(names[i]).split("-");
    j = split.length;
    next = normalizeLocale(names[i + 1]);
    next = next ? next.split("-") : null;
    while (j > 0) {
      locale2 = loadLocale(split.slice(0, j).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
        break;
      }
      j--;
    }
    i++;
  }
  return globalLocale;
}
function isLocaleNameSane(name2) {
  return name2.match("^[^/\\\\]*$") != null;
}
function loadLocale(name2) {
  var oldLocale = null, aliasedRequire;
  if (locales[name2] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name2)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = require;
      aliasedRequire("./locale/" + name2);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name2] = null;
    }
  }
  return locales[name2];
}
function getSetGlobalLocale(key, values) {
  var data;
  if (key) {
    if (isUndefined(values)) {
      data = getLocale(key);
    } else {
      data = defineLocale(key, values);
    }
    if (data) {
      globalLocale = data;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn(
          "Locale " + key + " not found. Did you forget to load it?"
        );
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name2, config) {
  if (config !== null) {
    var locale2, parentConfig = baseConfig;
    config.abbr = name2;
    if (locales[name2] != null) {
      deprecateSimple(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      );
      parentConfig = locales[name2]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name: name2,
            config
          });
          return null;
        }
      }
    }
    locales[name2] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name2]) {
      localeFamilies[name2].forEach(function(x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name2);
    return locales[name2];
  } else {
    delete locales[name2];
    return null;
  }
}
function updateLocale(name2, config) {
  if (config != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name2] != null && locales[name2].parentLocale != null) {
      locales[name2].set(mergeConfigs(locales[name2]._config, config));
    } else {
      tmpLocale = loadLocale(name2);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name2;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name2];
      locales[name2] = locale2;
    }
    getSetGlobalLocale(name2);
  } else {
    if (locales[name2] != null) {
      if (locales[name2].parentLocale != null) {
        locales[name2] = locales[name2].parentLocale;
        if (name2 === getSetGlobalLocale()) {
          getSetGlobalLocale(name2);
        }
      } else if (locales[name2] != null) {
        delete locales[name2];
      }
    }
  }
  return locales[name2];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow, a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, false],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, false],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, false],
  ["YYYY", /\d{4}/, false]
], isoTimes = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function configFromISO(config) {
  var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i = 0, l = isoDatesLen; i < l; i++) {
      if (isoDates[i][1].exec(match[1])) {
        dateFormat = isoDates[i][0];
        allowTime = isoDates[i][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i = 0, l = isoTimesLen; i < l; i++) {
        if (isoTimes[i][1].exec(match[3])) {
          timeFormat = (match[2] || " ") + isoTimes[i][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = "Z";
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
      parsedInput[0],
      parsedInput[1],
      parsedInput[2]
    ).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m = hm % 100, h2 = (hm - m) / 100;
    return h2 * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(
      match[4],
      match[3],
      match[2],
      match[5],
      match[6],
      match[7]
    );
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
hooks.createFromInputFallback = deprecate(
  "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
  function(config) {
    config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
  }
);
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i, date, input = [], currentDate, expectedWeekday, yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date.getUTCMonth();
    config._a[DATE] = date.getUTCDate();
  }
  for (i = 0; i < 3 && config._a[i] == null; ++i) {
    config._a[i] = input[i] = currentDate[i];
  }
  for (; i < 7; i++) {
    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(
    null,
    input
  );
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(
      w.GG,
      config._a[YEAR],
      weekOfYear(createLocal(), 1, 4).year
    );
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
hooks.ISO_8601 = function() {
};
hooks.RFC_2822 = function() {
};
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i = 0; i < tokenLen; i++) {
    token2 = tokens2[i];
    parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string.substr(0, string.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string = string.slice(
        string.indexOf(parsedInput) + parsedInput.length
      );
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string.length > 0) {
    getParsingFlags(config).unusedInput.push(string);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(
    config._locale,
    config._a[HOUR],
    config._meridiem
  );
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = new Date(NaN);
    return;
  }
  for (i = 0; i < configfLen; i++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
  config._a = map(
    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
    function(obj) {
      return obj && parseInt(obj, 10);
    }
  );
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input = config._i, format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input === null || format2 === void 0 && input === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input === "string") {
    config._i = input = config._locale.preparse(input);
  }
  if (isMoment(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate(input)) {
    config._d = input;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input = config._i;
  if (isUndefined(input)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input)) {
    config._d = new Date(input.valueOf());
  } else if (typeof input === "string") {
    configFromString(config);
  } else if (isArray(input)) {
    config._a = map(input.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input)) {
    configFromObject(config);
  } else if (isNumber(input)) {
    config._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    input = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, false);
}
var prototypeMin = deprecate(
  "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other < this ? this : other;
    } else {
      return createInvalid();
    }
  }
), prototypeMax = deprecate(
  "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var other = createLocal.apply(null, arguments);
    if (this.isValid() && other.isValid()) {
      return other > this ? this : other;
    } else {
      return createInvalid();
    }
  }
);
function pickBy(fn, moments) {
  var res, i;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i = 1; i < moments.length; ++i) {
    if (!moments[i].isValid() || moments[i][fn](res)) {
      res = moments[i];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
var now = function() {
  return Date.now ? Date.now() : +new Date();
};
var ordering = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function isDurationValid(m) {
  var key, unitHasDecimal = false, i, orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i = 0; i < orderLen; ++i) {
    if (m[ordering[i]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration) {
  var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number) {
  if (number < 0) {
    return Math.round(-1 * number) * -1;
  } else {
    return Math.round(number);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
  for (i = 0; i < len; i++) {
    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset2 = this.utcOffset(), sign2 = "+";
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
offset("Z", ":");
offset("ZZ", "");
addRegexToken("Z", matchShortOffset);
addRegexToken("ZZ", matchShortOffset);
addParseToken(["Z", "ZZ"], function(input, array, config) {
  config._useUTC = true;
  config._tzm = offsetFromString(matchShortOffset, input);
});
var chunkOffset = /([\+\-]|\d\d)/gi;
function offsetFromString(matcher, string) {
  var matches = (string || "").match(matcher), chunk, parts, minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
hooks.updateOffset = function() {
};
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === "string") {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset2 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(
          this,
          createDuration(input - offset2, "m"),
          1,
          false
        );
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== "string") {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {}, other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function createDuration(input, key) {
  var duration = input, match = null, sign2, ret, diffRes;
  if (isDuration(input)) {
    duration = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber(input) || !isNaN(+input)) {
    duration = {};
    if (key) {
      duration[key] = +input;
    } else {
      duration.milliseconds = +input;
    }
  } else if (match = aspNetRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
    };
  } else if (match = isoRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration == null) {
    duration = {};
  } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
    diffRes = momentsDifference(
      createLocal(duration.from),
      createLocal(duration.to)
    );
    duration = {};
    duration.ms = diffRes.milliseconds;
    duration.M = diffRes.months;
  }
  ret = new Duration(duration);
  if (isDuration(input) && hasOwnProp(input, "_locale")) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, "_isValid")) {
    ret._isValid = input._isValid;
  }
  return ret;
}
createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base2, other) {
  var res = {};
  res.months = other.month() - base2.month() + (other.year() - base2.year()) * 12;
  if (base2.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base2.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base2, other) {
  var res;
  if (!(base2.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base2);
  if (base2.isBefore(other)) {
    res = positiveMomentsDifference(base2, other);
  } else {
    res = positiveMomentsDifference(other, base2);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name2) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(
        name2,
        "moment()." + name2 + "(period, number) is deprecated. Please use moment()." + name2 + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
      );
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
  var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, "Month") + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
function isString(input) {
  return typeof input === "string" || input instanceof String;
}
function isMomentInput(input) {
  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i, property, propertyLen = properties.length;
  for (i = 0; i < propertyLen; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray(input), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function(item) {
      return !isNumber(item) && isString(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i, property;
  for (i = 0; i < properties.length; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(
    output || this.localeData().calendar(format2, this, createLocal(now2))
  );
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function toString() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(
      m,
      utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
    );
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
    }
  }
  return formatMoment(
    m,
    utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
var lang = deprecate(
  "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
  function(key) {
    if (key === void 0) {
      return this.localeData();
    } else {
      return this.locale(key);
    }
  }
);
function localeData() {
  return this._locale;
}
var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time = this._d.valueOf();
      time -= mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      );
      break;
    case "minute":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case "second":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      ) - 1;
      break;
    case "minute":
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [
    m.year(),
    m.month(),
    m.date(),
    m.hour(),
    m.minute(),
    m.second(),
    m.millisecond()
  ];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
addFormatToken("N", 0, 0, "eraAbbr");
addFormatToken("NN", 0, 0, "eraAbbr");
addFormatToken("NNN", 0, 0, "eraAbbr");
addFormatToken("NNNN", 0, 0, "eraName");
addFormatToken("NNNNN", 0, 0, "eraNarrow");
addFormatToken("y", ["y", 1], "yo", "eraYear");
addFormatToken("y", ["yy", 2], 0, "eraYear");
addFormatToken("y", ["yyy", 3], 0, "eraYear");
addFormatToken("y", ["yyyy", 4], 0, "eraYear");
addRegexToken("N", matchEraAbbr);
addRegexToken("NN", matchEraAbbr);
addRegexToken("NNN", matchEraAbbr);
addRegexToken("NNNN", matchEraName);
addRegexToken("NNNNN", matchEraNarrow);
addParseToken(
  ["N", "NN", "NNN", "NNNN", "NNNNN"],
  function(input, array, config, token2) {
    var era = config._locale.erasParse(input, token2, config._strict);
    if (era) {
      getParsingFlags(config).era = era;
    } else {
      getParsingFlags(config).invalidEra = input;
    }
  }
);
addRegexToken("y", matchUnsigned);
addRegexToken("yy", matchUnsigned);
addRegexToken("yyy", matchUnsigned);
addRegexToken("yyyy", matchUnsigned);
addRegexToken("yo", matchEraYearOrdinal);
addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
addParseToken(["yo"], function(input, array, config, token2) {
  var match;
  if (config._locale._eraYearOrdinalRegex) {
    match = input.match(config._locale._eraYearOrdinalRegex);
  }
  if (config._locale.eraYearOrdinalParse) {
    array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
  } else {
    array[YEAR] = parseInt(input, 10);
  }
});
function localeEras(m, format2) {
  var i, l, date, eras = this._eras || getLocale("en")._eras;
  for (i = 0, l = eras.length; i < l; ++i) {
    switch (typeof eras[i].since) {
      case "string":
        date = hooks(eras[i].since).startOf("day");
        eras[i].since = date.valueOf();
        break;
    }
    switch (typeof eras[i].until) {
      case "undefined":
        eras[i].until = Infinity;
        break;
      case "string":
        date = hooks(eras[i].until).startOf("day").valueOf();
        eras[i].until = date.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i, l, eras = this.eras(), name2, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i = 0, l = eras.length; i < l; ++i) {
    name2 = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i];
          }
          break;
        case "NNNN":
          if (name2 === eraName) {
            return eras[i];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i];
          }
          break;
      }
    } else if ([name2, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i, l, dir, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    namePieces.push(regexEscape(eras[i].name));
    abbrPieces.push(regexEscape(eras[i].abbr));
    narrowPieces.push(regexEscape(eras[i].narrow));
    mixedPieces.push(regexEscape(eras[i].name));
    mixedPieces.push(regexEscape(eras[i].abbr));
    mixedPieces.push(regexEscape(eras[i].narrow));
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp(
    "^(" + narrowPieces.join("|") + ")",
    "i"
  );
}
addFormatToken(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
addFormatToken(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
addWeekYearFormatToken("gggg", "weekYear");
addWeekYearFormatToken("ggggg", "weekYear");
addWeekYearFormatToken("GGGG", "isoWeekYear");
addWeekYearFormatToken("GGGGG", "isoWeekYear");
addUnitAlias("weekYear", "gg");
addUnitAlias("isoWeekYear", "GG");
addUnitPriority("weekYear", 1);
addUnitPriority("isoWeekYear", 1);
addRegexToken("G", matchSigned);
addRegexToken("g", matchSigned);
addRegexToken("GG", match1to2, match2);
addRegexToken("gg", match1to2, match2);
addRegexToken("GGGG", match1to4, match4);
addRegexToken("gggg", match1to4, match4);
addRegexToken("GGGGG", match1to6, match6);
addRegexToken("ggggg", match1to6, match6);
addWeekParseToken(
  ["gggg", "ggggg", "GGGG", "GGGGG"],
  function(input, week, config, token2) {
    week[token2.substr(0, 2)] = toInt(input);
  }
);
addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
  week[token2] = hooks.parseTwoDigitYear(input);
});
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.week(),
    this.weekday(),
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date.getUTCFullYear());
  this.month(date.getUTCMonth());
  this.date(date.getUTCDate());
  return this;
}
addFormatToken("Q", 0, "Qo", "quarter");
addUnitAlias("quarter", "Q");
addUnitPriority("quarter", 7);
addRegexToken("Q", match1);
addParseToken("Q", function(input, array) {
  array[MONTH] = (toInt(input) - 1) * 3;
});
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
addFormatToken("D", ["DD", 2], "Do", "date");
addUnitAlias("date", "D");
addUnitPriority("date", 9);
addRegexToken("D", match1to2);
addRegexToken("DD", match1to2, match2);
addRegexToken("Do", function(isStrict, locale2) {
  return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
});
addParseToken(["D", "DD"], DATE);
addParseToken("Do", function(input, array) {
  array[DATE] = toInt(input.match(match1to2)[0]);
});
var getSetDayOfMonth = makeGetSet("Date", true);
addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
addUnitAlias("dayOfYear", "DDD");
addUnitPriority("dayOfYear", 4);
addRegexToken("DDD", match1to3);
addRegexToken("DDDD", match3);
addParseToken(["DDD", "DDDD"], function(input, array, config) {
  config._dayOfYear = toInt(input);
});
function getSetDayOfYear(input) {
  var dayOfYear = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
}
addFormatToken("m", ["mm", 2], 0, "minute");
addUnitAlias("minute", "m");
addUnitPriority("minute", 14);
addRegexToken("m", match1to2);
addRegexToken("mm", match1to2, match2);
addParseToken(["m", "mm"], MINUTE);
var getSetMinute = makeGetSet("Minutes", false);
addFormatToken("s", ["ss", 2], 0, "second");
addUnitAlias("second", "s");
addUnitPriority("second", 15);
addRegexToken("s", match1to2);
addRegexToken("ss", match1to2, match2);
addParseToken(["s", "ss"], SECOND);
var getSetSecond = makeGetSet("Seconds", false);
addFormatToken("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
addFormatToken(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
addFormatToken(0, ["SSS", 3], 0, "millisecond");
addFormatToken(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
addFormatToken(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
addFormatToken(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
addFormatToken(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
addUnitAlias("millisecond", "ms");
addUnitPriority("millisecond", 16);
addRegexToken("S", match1to3, match1);
addRegexToken("SS", match1to3, match2);
addRegexToken("SSS", match1to3, match3);
var token, getSetMillisecond;
for (token = "SSSS"; token.length <= 9; token += "S") {
  addRegexToken(token, matchUnsigned);
}
function parseMs(input, array) {
  array[MILLISECOND] = toInt(("0." + input) * 1e3);
}
for (token = "S"; token.length <= 9; token += "S") {
  addParseToken(token, parseMs);
}
getSetMillisecond = makeGetSet("Milliseconds", false);
addFormatToken("z", 0, 0, "zoneAbbr");
addFormatToken("zz", 0, 0, "zoneName");
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var proto = Moment.prototype;
proto.add = add;
proto.calendar = calendar$1;
proto.clone = clone;
proto.diff = diff;
proto.endOf = endOf;
proto.format = format;
proto.from = from;
proto.fromNow = fromNow;
proto.to = to;
proto.toNow = toNow;
proto.get = stringGet;
proto.invalidAt = invalidAt;
proto.isAfter = isAfter;
proto.isBefore = isBefore;
proto.isBetween = isBetween;
proto.isSame = isSame;
proto.isSameOrAfter = isSameOrAfter;
proto.isSameOrBefore = isSameOrBefore;
proto.isValid = isValid$2;
proto.lang = lang;
proto.locale = locale;
proto.localeData = localeData;
proto.max = prototypeMax;
proto.min = prototypeMin;
proto.parsingFlags = parsingFlags;
proto.set = stringSet;
proto.startOf = startOf;
proto.subtract = subtract;
proto.toArray = toArray;
proto.toObject = toObject;
proto.toDate = toDate;
proto.toISOString = toISOString;
proto.inspect = inspect;
if (typeof Symbol !== "undefined" && Symbol.for != null) {
  proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return "Moment<" + this.format() + ">";
  };
}
proto.toJSON = toJSON;
proto.toString = toString;
proto.unix = unix;
proto.valueOf = valueOf;
proto.creationData = creationData;
proto.eraName = getEraName;
proto.eraNarrow = getEraNarrow;
proto.eraAbbr = getEraAbbr;
proto.eraYear = getEraYear;
proto.year = getSetYear;
proto.isLeapYear = getIsLeapYear;
proto.weekYear = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;
proto.quarter = proto.quarters = getSetQuarter;
proto.month = getSetMonth;
proto.daysInMonth = getDaysInMonth;
proto.week = proto.weeks = getSetWeek;
proto.isoWeek = proto.isoWeeks = getSetISOWeek;
proto.weeksInYear = getWeeksInYear;
proto.weeksInWeekYear = getWeeksInWeekYear;
proto.isoWeeksInYear = getISOWeeksInYear;
proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
proto.date = getSetDayOfMonth;
proto.day = proto.days = getSetDayOfWeek;
proto.weekday = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear = getSetDayOfYear;
proto.hour = proto.hours = getSetHour;
proto.minute = proto.minutes = getSetMinute;
proto.second = proto.seconds = getSetSecond;
proto.millisecond = proto.milliseconds = getSetMillisecond;
proto.utcOffset = getSetOffset;
proto.utc = setOffsetToUTC;
proto.local = setOffsetToLocal;
proto.parseZone = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST = isDaylightSavingTime;
proto.isLocal = isLocal;
proto.isUtcOffset = isUtcOffset;
proto.isUtc = isUtc;
proto.isUTC = isUtc;
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;
proto.dates = deprecate(
  "dates accessor is deprecated. Use date instead.",
  getSetDayOfMonth
);
proto.months = deprecate(
  "months accessor is deprecated. Use month instead",
  getSetMonth
);
proto.years = deprecate(
  "years accessor is deprecated. Use year instead",
  getSetYear
);
proto.zone = deprecate(
  "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
  getSetZone
);
proto.isDSTShifted = deprecate(
  "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
  isDaylightSavingTimeShifted
);
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string) {
  return string;
}
var proto$1 = Locale.prototype;
proto$1.calendar = calendar;
proto$1.longDateFormat = longDateFormat;
proto$1.invalidDate = invalidDate;
proto$1.ordinal = ordinal;
proto$1.preparse = preParsePostFormat;
proto$1.postformat = preParsePostFormat;
proto$1.relativeTime = relativeTime;
proto$1.pastFuture = pastFuture;
proto$1.set = set;
proto$1.eras = localeEras;
proto$1.erasParse = localeErasParse;
proto$1.erasConvertYear = localeErasConvertYear;
proto$1.erasAbbrRegex = erasAbbrRegex;
proto$1.erasNameRegex = erasNameRegex;
proto$1.erasNarrowRegex = erasNarrowRegex;
proto$1.months = localeMonths;
proto$1.monthsShort = localeMonthsShort;
proto$1.monthsParse = localeMonthsParse;
proto$1.monthsRegex = monthsRegex;
proto$1.monthsShortRegex = monthsShortRegex;
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;
proto$1.weekdays = localeWeekdays;
proto$1.weekdaysMin = localeWeekdaysMin;
proto$1.weekdaysShort = localeWeekdaysShort;
proto$1.weekdaysParse = localeWeekdaysParse;
proto$1.weekdaysRegex = weekdaysRegex;
proto$1.weekdaysShortRegex = weekdaysShortRegex;
proto$1.weekdaysMinRegex = weekdaysMinRegex;
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;
function get$1(format2, index2, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index2);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index2, field) {
  if (isNumber(format2)) {
    index2 = format2;
    format2 = void 0;
  }
  format2 = format2 || "";
  if (index2 != null) {
    return get$1(format2, index2, field, "month");
  }
  var i, out = [];
  for (i = 0; i < 12; i++) {
    out[i] = get$1(format2, i, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index2, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber(format2)) {
      index2 = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  } else {
    format2 = localeSorted;
    index2 = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index2 = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
  if (index2 != null) {
    return get$1(format2, (index2 + shift) % 7, field, "day");
  }
  for (i = 0; i < 7; i++) {
    out[i] = get$1(format2, (i + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format2, index2) {
  return listMonthsImpl(format2, index2, "months");
}
function listMonthsShort(format2, index2) {
  return listMonthsImpl(format2, index2, "monthsShort");
}
function listWeekdays(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdays");
}
function listWeekdaysShort(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysMin");
}
getSetGlobalLocale("en", {
  eras: [
    {
      since: "0001-01-01",
      until: Infinity,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -Infinity,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(number) {
    var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
    return number + output;
  }
});
hooks.lang = deprecate(
  "moment.lang is deprecated. Use moment.locale instead.",
  getSetGlobalLocale
);
hooks.langData = deprecate(
  "moment.langData is deprecated. Use moment.localeData instead.",
  getLocale
);
var mathAbs = Math.abs;
function abs() {
  var data = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data.milliseconds = mathAbs(data.milliseconds);
  data.seconds = mathAbs(data.seconds);
  data.minutes = mathAbs(data.minutes);
  data.hours = mathAbs(data.hours);
  data.months = mathAbs(data.months);
  data.years = mathAbs(data.years);
  return this;
}
function addSubtract$1(duration, input, value, direction) {
  var other = createDuration(input, value);
  duration._milliseconds += direction * other._milliseconds;
  duration._days += direction * other._days;
  duration._months += direction * other._months;
  return duration._bubble();
}
function add$1(input, value) {
  return addSubtract$1(this, input, value, 1);
}
function subtract$1(input, value) {
  return addSubtract$1(this, input, value, -1);
}
function absCeil(number) {
  if (number < 0) {
    return Math.floor(number);
  } else {
    return Math.ceil(number);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data.days = days2;
  data.months = months2;
  data.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months2, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months2;
      case "quarter":
        return months2 / 3;
      case "year":
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function valueOf$1() {
  if (!this.isValid()) {
    return NaN;
  }
  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name2) {
  return function() {
    return this.isValid() ? this._data[name2] : NaN;
  };
}
var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
function weeks() {
  return absFloor(this.days() / 7);
}
var round = Math.round, thresholds = {
  ss: 44,
  s: 45,
  m: 45,
  h: 22,
  d: 26,
  w: null,
  M: 11
};
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === "function") {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
var abs$1 = Math.abs;
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total) ? "-" : "";
  daysSign = sign(this._days) !== sign(total) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
  return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
}
var proto$2 = Duration.prototype;
proto$2.isValid = isValid$1;
proto$2.abs = abs;
proto$2.add = add$1;
proto$2.subtract = subtract$1;
proto$2.as = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds = asSeconds;
proto$2.asMinutes = asMinutes;
proto$2.asHours = asHours;
proto$2.asDays = asDays;
proto$2.asWeeks = asWeeks;
proto$2.asMonths = asMonths;
proto$2.asQuarters = asQuarters;
proto$2.asYears = asYears;
proto$2.valueOf = valueOf$1;
proto$2._bubble = bubble;
proto$2.clone = clone$1;
proto$2.get = get$2;
proto$2.milliseconds = milliseconds;
proto$2.seconds = seconds;
proto$2.minutes = minutes;
proto$2.hours = hours;
proto$2.days = days;
proto$2.weeks = weeks;
proto$2.months = months;
proto$2.years = years;
proto$2.humanize = humanize;
proto$2.toISOString = toISOString$1;
proto$2.toString = toISOString$1;
proto$2.toJSON = toISOString$1;
proto$2.locale = locale;
proto$2.localeData = localeData;
proto$2.toIsoString = deprecate(
  "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
  toISOString$1
);
proto$2.lang = lang;
addFormatToken("X", 0, 0, "unix");
addFormatToken("x", 0, 0, "valueOf");
addRegexToken("x", matchSigned);
addRegexToken("X", matchTimestamp);
addParseToken("X", function(input, array, config) {
  config._d = new Date(parseFloat(input) * 1e3);
});
addParseToken("x", function(input, array, config) {
  config._d = new Date(toInt(input));
});
//! moment.js
hooks.version = "2.29.4";
setHookCallback(createLocal);
hooks.fn = proto;
hooks.min = min;
hooks.max = max;
hooks.now = now;
hooks.utc = createUTC;
hooks.unix = createUnix;
hooks.months = listMonths;
hooks.isDate = isDate;
hooks.locale = getSetGlobalLocale;
hooks.invalid = createInvalid;
hooks.duration = createDuration;
hooks.isMoment = isMoment;
hooks.weekdays = listWeekdays;
hooks.parseZone = createInZone;
hooks.localeData = getLocale;
hooks.isDuration = isDuration;
hooks.monthsShort = listMonthsShort;
hooks.weekdaysMin = listWeekdaysMin;
hooks.defineLocale = defineLocale;
hooks.updateLocale = updateLocale;
hooks.locales = listLocales;
hooks.weekdaysShort = listWeekdaysShort;
hooks.normalizeUnits = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat = getCalendarFormat;
hooks.prototype = proto;
hooks.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  DATE: "YYYY-MM-DD",
  TIME: "HH:mm",
  TIME_SECONDS: "HH:mm:ss",
  TIME_MS: "HH:mm:ss.SSS",
  WEEK: "GGGG-[W]WW",
  MONTH: "YYYY-MM"
};
class TimClass {
  constructor({ userID = "", to: to2 = "", templateId = "", title = "", appid = "" }) {
    __publicField(this, "app", null);
    __publicField(this, "tim", null);
    __publicField(this, "events", {});
    __publicField(this, "appid", "");
    __publicField(this, "options", { SDKAppID: 1400605160 });
    __publicField(this, "userID", null);
    __publicField(this, "icon", "");
    __publicField(this, "to", "");
    __publicField(this, "db", null);
    __publicField(this, "templateId", null);
    __publicField(this, "title", "");
    __publicField(this, "messageLast", {});
    this.userID = userID;
    this.to = to2;
    this.templateId = templateId;
    this.title = title;
    this.appid = appid;
    this.init();
  }
  deleteConversation(key) {
    return this.tim.deleteConversation("C2C" + key);
  }
  init() {
    this.initTitle();
    this.initTim();
    this.initCloudbase();
  }
  initTitle() {
    if (!this.title)
      return;
    document.title = this.title;
  }
  logout() {
    this.tim.logout();
  }
  initCloudbase() {
    this.app = cloudbase$1.init({
      env: "cloudbase-baas-3gpm9onmbd07bfd8",
      region: "ap-shanghai"
    });
    this.auth();
    this.db = this.app.database();
    this.getTemplate();
  }
  getConversationList() {
    return this.tim.getConversationList();
  }
  getTemplate() {
    if (this.templateId) {
      this.db.collection("template").where({
        _id: this.templateId
      }).get().then(({ data }) => {
        if (data && data.length > 0) {
          this.events["TEMPLATE_DATA"] && this.events["TEMPLATE_DATA"](data[0].content);
        }
      });
    }
  }
  getHistoryMessageList(nextReqMessageID) {
    let promise = null;
    if (nextReqMessageID) {
      promise = this.tim.getMessageList({
        conversationID: `C2C${this.to}`,
        nextReqMessageID,
        count: 15
      });
    } else {
      promise = this.tim.getMessageList({
        conversationID: `C2C${this.to}`,
        count: 15
      });
    }
    promise = promise.then((imResponse) => {
      if (imResponse.code == 0 && this.events["HISTORY_LIST"]) {
        const list = imResponse.data;
        console.log("history", list);
        if (list.messageList.length > 0) {
          this.messageLast = list.messageList[list.messageList.length - 1];
        }
        this.events["HISTORY_LIST"](imResponse.data, !nextReqMessageID);
      }
    });
  }
  setMessageRead(to2) {
    this.tim.setMessageRead({ conversationID: `C2C${to2 || this.to}` }).then((e) => {
      console.log("\u5DF2\u8BFB\u56DE\u8C03", e);
    }).catch((e) => {
      console.log("\u5DF2\u8BFB\u56DE\u8C03\u62A5\u9519", e);
    });
  }
  sendTimeMessage() {
    return new Promise((resolve, reject) => {
      let message = this.tim.createCustomMessage({
        to: this.to,
        conversationType: TIM.TYPES.CONV_C2C,
        payload: {
          data: JSON.stringify({
            type: "time",
            time: hooks().format("YYYY-MM-DD HH:mm:ss")
          }),
          description: "",
          extension: ""
        }
      });
      this.tim.sendMessage(message).then((imResponse) => {
        imResponse.code == 0 && this.events["SEND_OK"] && this.events["SEND_OK"](imResponse.data);
        resolve(imResponse.data);
      }).catch((e) => {
        Toast.fail(e);
      });
    });
  }
  sendMessage(payload) {
    return new Promise((resolve, reject) => {
      if (hooks().diff(hooks.unix(this.messageLast.time), "minute") > 5) {
        this.sendTimeMessage().then(() => {
          this.tim.sendMessage(payload).then((e) => {
            var _a2;
            if (e.code == 0) {
              this.messageLast = (_a2 = e.data) == null ? void 0 : _a2.message;
            }
            resolve(e);
          });
        });
      } else {
        resolve(this.tim.sendMessage(payload));
      }
    });
  }
  sendTextMessage(text) {
    let message = this.tim.createTextMessage({
      to: this.to,
      conversationType: TIM.TYPES.CONV_C2C,
      payload: {
        text
      }
    });
    let promise = this.sendMessage(message);
    promise.then((imResponse) => {
      imResponse.code == 0 && this.events["SEND_OK"] && this.events["SEND_OK"](imResponse.data);
    }).catch((e) => {
      Toast.fail(e);
    });
  }
  sendAudioMessage(file, duration) {
    const toast = Toast.loading({
      message: "\u4E0A\u4F20\u4E2D",
      forbidClick: true
    });
    let message = this.tim.createCustomMessage({
      to: this.to,
      conversationType: TIM.TYPES.CONV_C2C,
      payload: {
        data: JSON.stringify({
          url: file,
          type: "audio",
          duration
        })
      }
    });
    let promise = this.sendMessage(message);
    promise.then((imResponse) => {
      toast.clear();
      imResponse.code == 0 && this.events["SEND_OK"] && this.events["SEND_OK"](imResponse.data);
    }).catch((e) => {
      Toast.fail(e);
    });
  }
  sendImageMessage(file) {
    const toast = Toast.loading({
      message: "\u4E0A\u4F20\u4E2D",
      forbidClick: true
    });
    let message = this.tim.createImageMessage({
      to: this.to,
      conversationType: TIM.TYPES.CONV_C2C,
      payload: {
        file
      }
    });
    let promise = this.sendMessage(message);
    promise.then((imResponse) => {
      toast.clear();
      imResponse.code == 0 && this.events["SEND_OK"] && this.events["SEND_OK"](imResponse.data);
    }).catch((e) => {
      Toast.fail(e);
    });
  }
  auth() {
    this.app.auth({ persistence: "none" }).anonymousAuthProvider().signIn().then(() => {
      this.app.callFunction({
        name: "getGenerateUserSig",
        data: { userId: this.userID, appid: this.appid }
      }).then(({ result = "" }) => {
        var _a2;
        (_a2 = this.tim) == null ? void 0 : _a2.logout().then(() => {
          this.tim.login({ userID: this.userID, userSig: result });
        }).catch(() => {
          this.tim.login({ userID: this.userID, userSig: result });
        });
      });
    }).catch((err) => Toast.fail("\u767B\u5F55\u5931\u8D25"));
  }
  on(key, callBack) {
    this.events[key] = callBack;
  }
  initTim() {
    var that = this;
    this.tim = TIM.create(this.options);
    this.tim.setLogLevel(0);
    this.tim.registerPlugin({ "tim-upload-plugin": TIMUploadPlugin });
    this.tim.on(TIM.EVENT.SDK_READY, function(event) {
      that.events["SDK_READY"] && that.events["SDK_READY"]();
      that.userID != that.to && that.getHistoryMessageList("");
    });
    this.tim.on(
      TIM.EVENT.MESSAGE_RECEIVED,
      (event) => {
        const filter = event.data.filter(
          (e) => e.from == this.to
        );
        if (filter.length > 0) {
          this.messageLast = filter[0];
          this.events["MESSAGE_RECEIVED"] && this.events["MESSAGE_RECEIVED"](filter);
        }
      }
    );
    this.tim.on(TIM.EVENT.MESSAGE_MODIFIED, function(event) {
    });
    this.tim.on(TIM.EVENT.MESSAGE_REVOKED, function(event) {
    });
    this.tim.on(TIM.EVENT.MESSAGE_READ_BY_PEER, function(event) {
    });
    this.tim.on(TIM.EVENT.CONVERSATION_LIST_UPDATED, function(event) {
    });
    this.tim.on(TIM.EVENT.GROUP_LIST_UPDATED, function(event) {
    });
    this.tim.on(TIM.EVENT.PROFILE_UPDATED, function(event) {
    });
    this.tim.on(TIM.EVENT.BLACKLIST_UPDATED, function(event) {
    });
    this.tim.on(TIM.EVENT.ERROR, function(event) {
    });
    this.tim.on(TIM.EVENT.SDK_NOT_READY, function(event) {
    });
    this.tim.on(TIM.EVENT.KICKED_OUT, function(event) {
      Toast.fail("\u60A8\u7684\u8D26\u53F7\u5728\u5176\u4ED6\u8BBE\u5907\u767B\u5F55\uFF0C\u60A8\u88AB\u8FEB\u4E0B\u7EBF");
    });
    this.tim.on(TIM.EVENT.NET_STATE_CHANGE, function(event) {
    });
    this.tim.on(TIM.EVENT.FRIEND_LIST_UPDATED, function(event) {
    });
    this.tim.on(
      TIM.EVENT.FRIEND_APPLICATION_LIST_UPDATED,
      function(event) {
      }
    );
    this.tim.on(TIM.EVENT.FRIEND_GROUP_LIST_UPDATED, function(event) {
    });
  }
}
var Tim;
function getMessageList({
  userID = "",
  to: to2 = "",
  templateId = "",
  appid = ""
} = {}) {
  return new Promise((resolve, reject) => {
    Tim = new TimClass({
      to: to2,
      userID,
      templateId,
      appid
    });
    var A = Tim;
    Tim.on("SDK_READY", () => {
      resolve(A == null ? void 0 : A.getConversationList());
    });
  });
}
function setMessageRead(to2) {
  return Tim.setMessageRead(to2);
}
function deleteConversation(key) {
  return Tim.deleteConversation(key);
}
var timTool = {
  getMessageList,
  deleteConversation,
  setMessageRead
};
export { timTool as default };
